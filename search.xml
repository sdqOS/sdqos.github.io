<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>33种编程语言的HelloWorld</title>
    <url>/HelloWorld.html</url>
    <content><![CDATA[<p><strong>我的核心代码</strong></p>
<a id="more"></a>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">printf(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">cout&lt;&lt;<span class="hljs-string">&quot;Hello, World!&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">echo <span class="hljs-string">&quot;Hello, World!&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure>

<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> Hello World! <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>Hello, World!<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="易语言"><a href="#易语言" class="headerlink" title="易语言"></a>易语言</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs e">信息框 (&quot;Hello, World!&quot;, , 64) <br></code></pre></td></tr></table></figure>
<h1 id="Jscript"><a href="#Jscript" class="headerlink" title="Jscript"></a>Jscript</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs Jscript">document.write(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">System.out.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure>

<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> MESSAGE (TEXT <span class="hljs-type">CHAR</span>(<span class="hljs-number">13</span>));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> MESSAGE (TEXT) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Hello, World!&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> TEXT <span class="hljs-keyword">FROM</span> MESSAGE;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> MESSAGE;<br></code></pre></td></tr></table></figure>

<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><figure class="highlight ts"><table><tr><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params">person: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, &#x27;</span> + person;<br>&#125;<br><br><span class="hljs-keyword">let</span> user = <span class="hljs-string">&#x27;Xcat Liu&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sayHello</span>(user));<br></code></pre></td></tr></table></figure>

<h1 id="VBScript"><a href="#VBScript" class="headerlink" title="VBScript"></a>VBScript</h1><figure class="highlight vbscript"><table><tr><td class="code"><pre><code class="hljs VBScript">MsgBox <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure>

<h1 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h1><figure class="highlight vb"><table><tr><td class="code"><pre><code class="hljs VB">Print <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure>

<h1 id="VC"><a href="#VC" class="headerlink" title="VC"></a>VC</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs VC">MessageBox(&quot;Hello, World!&quot;);<br></code></pre></td></tr></table></figure>

<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">echo Hello, World!<br></code></pre></td></tr></table></figure>

<h1 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h1><figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br></code></pre></td></tr></table></figure>

<h1 id="powerBuilder"><a href="#powerBuilder" class="headerlink" title="powerBuilder"></a>powerBuilder</h1><figure class="highlight erlang"><table><tr><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">messagebox</span> <span class="hljs-params">(<span class="hljs-string">&quot;Hello, World!&quot;</span>)</span></span><br></code></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h1><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs C#">System.Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure>

<h1 id="COBOL"><a href="#COBOL" class="headerlink" title="COBOL"></a>COBOL</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs COBOL">DISPLAY &#39;Hello, World!&#39;<br></code></pre></td></tr></table></figure>

<h1 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h1><figure class="highlight as"><table><tr><td class="code"><pre><code class="hljs AS">Alert.show(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure>

<h1 id="Malbolge"><a href="#Malbolge" class="headerlink" title="Malbolge"></a>Malbolge</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs Malbolge">(&#39;&amp;%:9]!~&#125;|z2Vxwv-,POqponl$Hjig%eB@@&gt;&#125;&#x3D;&lt;M:9wv6WsU2T|nm-,jcL(I&amp;%$#&quot;<br>&#96;CB]V?Tx&lt;uVtT&#96;Rpo3NlF.Jh++FdbCBA@?]!~|4XzyTT43Qsqq(Lnmkj&quot;Fhg$&#123;z@&gt;<br></code></pre></td></tr></table></figure>

<h1 id="DOS-批处理"><a href="#DOS-批处理" class="headerlink" title="DOS 批处理"></a>DOS 批处理</h1><figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs DOS"><span class="hljs-built_in">echo</span> Hello, World!<br></code></pre></td></tr></table></figure>

<h1 id="OC"><a href="#OC" class="headerlink" title="OC"></a>OC</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs OC">NSLog(@&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="QBasic"><a href="#QBasic" class="headerlink" title="QBasic"></a>QBasic</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs QBasic">Print &quot;Hello, World!&quot;<br></code></pre></td></tr></table></figure>

<h1 id="Asp"><a href="#Asp" class="headerlink" title="Asp"></a>Asp</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs Asp">Response.Write &quot;Hello, World!&quot;<br></code></pre></td></tr></table></figure>
<h1 id="ActionScript"><a href="#ActionScript" class="headerlink" title="ActionScript"></a>ActionScript</h1><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs ActionScript">trace(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure>
<h1 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs ASP">&lt;% Response.Write(&quot;Hello, World!&quot;) %&gt;<br></code></pre></td></tr></table></figure>
<h1 id="Delphi"><a href="#Delphi" class="headerlink" title="Delphi"></a>Delphi</h1><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs Delphi">ShowMessage(<span class="hljs-string">&#x27;Hello, World!&#x27;</span>);<br></code></pre></td></tr></table></figure>

<h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs sed">sed -ne &#39;1s&#x2F;.*&#x2F;Hello, World!&#x2F;p&#39;<br></code></pre></td></tr></table></figure>

<h1 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs bc">#!&#x2F;usr&#x2F;bin&#x2F;bc -q<br>print &quot;Hello World&quot;<br>quit<br></code></pre></td></tr></table></figure>

<h1 id="Small-Basic"><a href="#Small-Basic" class="headerlink" title="Small Basic"></a>Small Basic</h1><figure class="highlight plain"><figcaption><span>Basic</span></figcaption><table><tr><td class="code"><pre><code class="hljs Small">TextWindow.WriteLine(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="SNOBOL"><a href="#SNOBOL" class="headerlink" title="SNOBOL"></a>SNOBOL</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs SNOBOL">OUTPUT &#x3D; &quot;Hello, World!&quot;<br>END<br></code></pre></td></tr></table></figure>

<h1 id="Smalltalk"><a href="#Smalltalk" class="headerlink" title="Smalltalk"></a>Smalltalk</h1><figure class="highlight smalltalk"><table><tr><td class="code"><pre><code class="hljs Smalltalk"><span class="hljs-type">Transcript</span> show: <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br></code></pre></td></tr></table></figure>

<br>

]]></content>
  </entry>
  <entry>
    <title>Android ROM移植</title>
    <url>/Android-ROM-transplant.html</url>
    <content><![CDATA[<p><strong>本人是用Arch, 顺便来传一下教</strong><br><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c7189d153.jpg" style="width: 200px; height: 200px;"></p>
<a id="more"></a>

<p><strong>此教程针对 高通和联发科 64位就多替换lib64 等有64字眼的</strong></p>
<h1 id="移植-刷机包-ROM-建议在Linux的平台是-下载个解压软件"><a href="#移植-刷机包-ROM-建议在Linux的平台是-下载个解压软件" class="headerlink" title="移植 刷机包/ROM 建议在Linux的平台是 下载个解压软件"></a>移植 刷机包/ROM 建议在Linux的平台是 下载个解压软件</h1><ul>
<li>推荐sdat2</li>
</ul>
<h2 id="移植boot-img"><a href="#移植boot-img" class="headerlink" title="移植boot.img"></a>移植boot.img</h2><ul>
<li>步骤: 解压出官方booT和要移植包的boot, 替换进入官方<ul>
<li>替换文件: dt.img和zlmagewe 没有这个文件的话就无视</li>
</ul>
</li>
</ul>
<p><strong>可以开机之后 再进行以下操作</strong></p>
<ul>
<li>开机失败就替换fstab.qcom为官方</li>
</ul>
<h2 id="刷机脚本修改"><a href="#刷机脚本修改" class="headerlink" title="刷机脚本修改"></a>刷机脚本修改</h2><ul>
<li>1.机型验证<ul>
<li>getprop开头的那行删除, 如果安装中断的话就是这行没删完,</li>
</ul>
</li>
<li>2.分区挂卸<ul>
<li>分区注意mmcblk0p字眼的记得改成官方的</li>
</ul>
</li>
<li>3.删除底层文件刷入<ul>
<li>底层文件一般在包里面, 正常的包有system(system.dat…), boot.img,META—INF, data其他多余的未知文件和文件夹就是底层文件, 这些必须删除, 不然就可能会黑砖</li>
</ul>
</li>
</ul>
<p><strong>参考脚本 一般放在META-INF里面</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ui_print(&quot;Patching firmware images...&quot;);<br>ifelse(msm.boot_update(&quot;main&quot;), (<br>package_extract_file(&quot;firmware-update/tz.mbn&quot;, &quot;/dev/block/bootdevice/by-name/tz&quot;);<br>package_extract_file(&quot;firmware-update/hyp.mbn&quot;, &quot;/dev/block/bootdevice/by-name/hyp&quot;);<br>package_extract_file(&quot;firmware-update/sbl1.mbn&quot;, &quot;/dev/block/bootdevice/by-name/sbl1&quot;);<br>package_extract_file(&quot;firmware-update/rpm.mbn&quot;, &quot;/dev/block/bootdevice/by-name/rpm&quot;);<br>package_extract_file(&quot;firmware-update/emmc_appsboot.mbn&quot;, &quot;/dev/block/bootdevice/by-name/aboot&quot;);<br>), &quot;&quot;);<br>ifelse(msm.boot_update(&quot;backup&quot;), (<br>package_extract_file(&quot;firmware-update/tz.mbn&quot;, &quot;/dev/block/bootdevice/by-name/tzbak&quot;);<br>package_extract_file(&quot;firmware-update/hyp.mbn&quot;, &quot;/dev/block/bootdevice/by-name/hypbak&quot;);<br>package_extract_file(&quot;firmware-update/sbl1.mbn&quot;, &quot;/dev/block/bootdevice/by-name/sbl1bak&quot;);<br>package_extract_file(&quot;firmware-update/rpm.mbn&quot;, &quot;/dev/block/bootdevice/by-name/rpmbak&quot;);<br>package_extract_file(&quot;firmware-update/emmc_appsboot.mbn&quot;, &quot;/dev/block/bootdevice/by-name/abootbak&quot;);<br>), &quot;&quot;);<br>msm.boot_update(&quot;finalize&quot;);<br>package_extract_file(&quot;firmware-update/NON-HLOS.bin&quot;, &quot;/dev/block/bootdevice/by-name/modem&quot;);<br></code></pre></td></tr></table></figure>


<h2 id="WIFI修复"><a href="#WIFI修复" class="headerlink" title="WIFI修复"></a>WIFI修复</h2><ul>
<li>步骤: 以下文件或文件夹替换为官方 没有就不替换</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">system/etc/firmware/wlan<br>system/etc/wifi<br>system/lib/modules/pronto<br>system/lib/modules/wlan.ko<br></code></pre></td></tr></table></figure>
<p><strong>可以用WIFI之后 再进行以下操作</strong></p>
<ul>
<li>还是不行再看看boot.img里面的init.qcom.rc对比官方boot里面的init.qcom.rc修改 还不行就看刷机脚本, 改里面的wifi软链接</li>
</ul>
<h3 id="内存卡使用修复"><a href="#内存卡使用修复" class="headerlink" title="内存卡使用修复"></a>内存卡使用修复</h3><ul>
<li>以下文件替换或修改为官方</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">system/etc/permissions/platform.xml<br></code></pre></td></tr></table></figure>
<h3 id="修复按键"><a href="#修复按键" class="headerlink" title="修复按键"></a>修复按键</h3><ul>
<li>以下文件替换或修改为官方</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">system/usr/icu<br>system/usr/idc<br><br>//不行再多替换 <br>system/usr/keylayout/Generic.kl<br></code></pre></td></tr></table></figure>
<h3 id="修复声音"><a href="#修复声音" class="headerlink" title="修复声音"></a>修复声音</h3><p><strong>以下文件替换为官方</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">    方法1:对比system里面的bin、etc、lib、vendor/lib (64位多对比lib64、vendor/lib64) , 把官方包多余的加进去, 再替换etc/mixer开头的<br><br>    方法2:对比system里面的bin、etc、lib、vendor/lib (64位多对比lib64、vendor/lib64) , 把官方包多余的加进去, 再替换system/hw/audio.primary.msmxxxx.so(64位多替换system/lib64/hw/audio.primary.msmxxxx.so)<br><br>    方法3:对比system里面的bin、etc、lib、vendor/lib (64位多对比lib64、vendor/lib64) , 把官方包多余的加进去, 再替换system/lib/hw/audio开头的 (64位多替换system/lib64/hw/audio) <br><br>    方法4:对比system里面的bin、etc、lib、vendor/lib (64位多对比lib64、vendor/lib64) , 把官方包多余的加进去, 再替换以下:<br>    system/etc/mixer开头的<br>    system/lib/hw/audio.primary.msmxxxx.so<br>    (64位多替换system/lib64/hw/audio.primary.msmxxxx.so)<br><br>    方法5:对比system里面的bin、etc、lib、vendor/lib (64位多对比lib64、vendor/lib64) , 把官方包多余的加进去, 再替换以下:<br>    system/etc/audio和mixer开头的<br>    system/lib/hw/audio开头的<br>    (64位多替换system/lib64/hw/audio开头的)<br><br>注: lib和lib64文件夹里面的audio开头(不包括hw文件夹)64位替换了不卡屏, 但32位可能会卡屏<br></code></pre></td></tr></table></figure>
<h3 id="修改型号"><a href="#修改型号" class="headerlink" title="修改型号"></a>修改型号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// 品牌<br>ro.product.brand=xiaomi<br>// 型号<br>ro.product.name=2<br>// 关于手机显示的型号<br>ro.product.model=redmi 2<br>// 分辨率<br>ro.sf.lcd_density=320 <br>// 这个也是有关型号的<br>ro.build.product=2<br>// 虚拟按键  1是关0是开, 没有这行的就加进去<br>qemu.hw.mainkeys=0 <br></code></pre></td></tr></table></figure>
<h3 id="修复相机"><a href="#修复相机" class="headerlink" title="修复相机"></a>修复相机</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// 把System/lib文件夹里面的文件替换成官方包的文件, 可以解决相机打开停止的BUG问题<br>libcamalgo.so<br>libcamera_client.so<br>libcameracustom.so<br>libcameraservice.so<br>libmhal.so<br>libmhalcontent.so<br>libmhaldrv.so<br>libmhalmdp.so<br>libmhalpipe.so<br>libmhalscenario.so<br>libmhalutility.so<br></code></pre></td></tr></table></figure>

<h3 id="修复传感器"><a href="#修复传感器" class="headerlink" title="修复传感器"></a>修复传感器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// 替换System/lib/hw  文件夹里面<br>sensors.default.so<br></code></pre></td></tr></table></figure>

<h1>移植有风险, 不保证无bug</h1>

<br>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Bodhi Linux安装教程(老电脑的福利)</title>
    <url>/Bodhi-Linux.html</url>
    <content><![CDATA[<p><strong>本人是2008年的联想电脑, Bodhi Linux是我唯一能完美运行的带桌面的发行版</strong></p>
<a id="more"></a>

<p><strong>以下是我的电脑的参数</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e52011aea27.jpg"></p>
<h1 id="第一步-安装Bodhi-Linux"><a href="#第一步-安装Bodhi-Linux" class="headerlink" title="第一步 安装Bodhi Linux"></a>第一步 安装Bodhi Linux</h1><p><strong>Bodhi Linux<a href="https://nchc.dl.sourceforge.net/project/bodhilinux/5.1.0/bodhi-5.1.0-64.iso">个人建议Standard版本</a>如果你想选择别的版本到<a href="https://www.bodhilinux.com/download/">官网找</a></strong></p>
<p><a href="https://www.bilibili.com/video/BV1aW411C7NR">安装视频参考Ubantu的, 都是可视化界面安装</a></p>
<h1 id="第二步-老电脑无法连接WIFI-所以终端输入以下命令"><a href="#第二步-老电脑无法连接WIFI-所以终端输入以下命令" class="headerlink" title="第二步 老电脑无法连接WIFI 所以终端输入以下命令"></a>第二步 老电脑无法连接WIFI 所以终端输入以下命令</h1><p><strong>建议用网线装机</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install bcmwl-kernel-source<br></code></pre></td></tr></table></figure>

<p><strong>仍然没有的话 就在终端输入以下命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo nano /etc/modprobe.d/blacklist.conf   //nano命令ctrl+x退出, 选择y后保存<br>blacklist acer-wmi   //最后一行加入<br></code></pre></td></tr></table></figure>

<h1 id="第三步-安装安装中文环境"><a href="#第三步-安装安装中文环境" class="headerlink" title="第三步 安装安装中文环境"></a>第三步 安装安装中文环境</h1><p><strong>安装中文字体和中文语言包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install -y language-pack-zh-hans language-pack-zh-hans-base language-pack-gnome-zh-hans language-pack-gnome-zh-hans-base fonts-wqy-microhei<br></code></pre></td></tr></table></figure>

<p><strong>然后按照以下打开步骤</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e52011b2a18.jpg"></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e520118da08.jpg"></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e5201191fbe.jpg"></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e52011874b3.jpg"></p>
<h1 id="第四步安装输入法"><a href="#第四步安装输入法" class="headerlink" title="第四步安装输入法"></a>第四步安装输入法</h1><p><strong>这里<a href="https://pinyin.sogou.com/linux/">安装搜狗输入法</a></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install fonts-droid-fallback zip   //安装它的依赖包<br>sudo dpkg -i xxx    //xxx为下载的包名 后缀名也要<br></code></pre></td></tr></table></figure>
<h1 id="第五步安装一些常用软件"><a href="#第五步安装一些常用软件" class="headerlink" title="第五步安装一些常用软件"></a>第五步安装一些常用软件</h1><p><strong>例如安装vim</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install vim   //vim是文本编辑软件<br></code></pre></td></tr></table></figure>
<p><strong>例如浏览器 它自身也有web浏览器 看个人喜欢</strong></p>
<p><strong>安装火狐浏览器和中文语言包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get remove firefox<br>sudo apt-get install -y firefox firefox-locale-zh-hans<br></code></pre></td></tr></table></figure>
<p><strong>安装谷歌浏览器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/<br>wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -     //先添加源<br>sudo apt-get update<br>sudo apt-get install google-chrome-stable     //安装谷歌浏览器<br></code></pre></td></tr></table></figure>
<h1 id="安装neofetch"><a href="#安装neofetch" class="headerlink" title="安装neofetch"></a>安装neofetch</h1><p><strong>终端输入以下命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo add-apt-repository ppa:dawidd0811/neofetch<br>sudo apt-get update<br>sudo apt-get install neofetch<br>neofetch<br></code></pre></td></tr></table></figure>
<p><strong>本人试了(CrunchBang Linux), (Zenix Linux), (antiX Linux), (Zenwalk Linux), (Xubuntu Linux), (Lubuntu Linux), (Tiny Core Linux), (SliTaz Linux), (Porteus Linux), (Puppy Linux), (Silverblue Linux), (4MLinux)等等带桌面的发行版然后就唯独Bodhi Linux最满意</strong></p>
<p><strong>至于为什么要带桌面的发行版, 因为要日用偶尔看看B站什么的</strong></p>
<p><strong>关于这台电脑用的硬盘 大小80G 有9724个坏道 拆掉坏掉的戴尔一条三星的DDR2 才有2G内存可以体验</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e52011c58d3.jpg"></p>
<br>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Arch系统包桌面傻瓜式安装 (有手就行)</title>
    <url>/Arch-install.html</url>
    <content><![CDATA[<p><strong>本人是Arch教徒过来传一下教</strong> </p>
<img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c7189d153.jpg" style="width: 200px; height: 200px;">
<a id="more"></a>

<p><strong>在Windows里用DiskGenius转GPT之后 删除你所要安装Arch的分区</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c718be173.jpg"></p>
<p><strong>磁盘变更还可以用Lixux命令来 不建议使用</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">partrd /dev/xxx  //你要变更的磁盘<br></code></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">gpt<br></code></pre></td></tr></table></figure>
<p>然后退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">quit<br></code></pre></td></tr></table></figure>
<h1 id="第一步-先要有一个启动盘-这里推荐清华大学开源软件镜像站"><a href="#第一步-先要有一个启动盘-这里推荐清华大学开源软件镜像站" class="headerlink" title="第一步 先要有一个启动盘 这里推荐清华大学开源软件镜像站"></a>第一步 先要有一个启动盘 这里推荐<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/">清华大学开源软件镜像站</a></h1><h1 id="第二步-引导界面选择第一个-进入U盘"><a href="#第二步-引导界面选择第一个-进入U盘" class="headerlink" title="第二步 引导界面选择第一个 进入U盘"></a>第二步 引导界面选择第一个 进入U盘</h1><p><strong>先检查一下是不是UEFI启动,输入以下命令, 有输出就代码是UEFI启动, 检查BIOS设置是否为UEFI, BIOS设置每个机型都不一样</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ls /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure>
<h1 id="第三步-检查网络连接"><a href="#第三步-检查网络连接" class="headerlink" title="第三步 检查网络连接"></a>第三步 检查网络连接</h1><p><strong>建议直接插网线, 然后ping一下百度, 有反应继续 没反应检查网线</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ping www.baidu.com<br></code></pre></td></tr></table></figure>

<p>然后CTRL+Z退出</p>
<p><strong>如果你想用WIFI就执行以下步骤</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">iwctl<br></code></pre></td></tr></table></figure>
<p><strong>查看网卡 通常都是wlan0</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">device list<br></code></pre></td></tr></table></figure>
<p><strong>以下命令是扫描你范围内的无线网卡</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">station wlan0 get-networks<br></code></pre></td></tr></table></figure>

<p><strong>找到你的WIFI</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">station wlan0 connect xxx    //无线网卡名字通常是wlan0, WIFI名字xxx<br></code></pre></td></tr></table></figure>
<p><strong>Passphrase:是让你输密码</strong></p>
<p><strong>然后以下命令退出</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">exit<br></code></pre></td></tr></table></figure>
<h1 id="第四步-设置系统时钟更新-与网络时间同步"><a href="#第四步-设置系统时钟更新-与网络时间同步" class="headerlink" title="第四步 设置系统时钟更新 与网络时间同步"></a>第四步 设置系统时钟更新 与网络时间同步</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">timedatectl set-ntp true<br></code></pre></td></tr></table></figure>
<p><strong>查看是否执行完同步</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">timedatectl status<br></code></pre></td></tr></table></figure>
<h1 id="第五步-更换镜像源"><a href="#第五步-更换镜像源" class="headerlink" title="第五步 更换镜像源"></a>第五步 更换镜像源</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /etc/pamcan.d/mtrrorlist<br></code></pre></td></tr></table></figure>
<p><strong>查找: Server = <a href="https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch">https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</a></strong></p>
<h1 id="第六步-分区"><a href="#第六步-分区" class="headerlink" title="第六步 分区"></a>第六步 分区</h1><p><strong>查看分区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">lsblk<br></code></pre></td></tr></table></figure>
<p><strong>然后正式分区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cfdisk /dev/xxx   //你要变更的磁盘<br></code></pre></td></tr></table></figure>
<p><strong>终于到这里了 这里是图形化界面很好查找</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c7187dec0.jpg"></p>
<p><strong>(New是新建) (Resize是调整大小) (Quit是退出) (Type是类型) (Heip是帮助) (Wrire是保存) (Dump是丢弃)</strong></p>
<p><strong>步骤: 先点New建一个300M的文件, 然后点Type选择EFI System点击, 再点New建一个2G的文件, 然后点Type选择Linux swap点击, 最后点New建一个(根目录)主分区把剩下的所有内存用上, 然后点Type选择Linux filesystem点击, 然后Wrire回车, 并输入yes, 然后拍照, 点击Quit退出</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c718d2208.jpg"><br><strong>以防万一, 检查一下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cfdisk -l<br></code></pre></td></tr></table></figure>
<h1 id="第七步-格式化操作"><a href="#第七步-格式化操作" class="headerlink" title="第七步 格式化操作"></a>第七步 格式化操作</h1><p><strong>格式化主分区(根目录)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkfs.ext4 /dev/xxx   //就是你刚刚Linux filesystem的<br></code></pre></td></tr></table></figure>
<p><strong>格式化EFI分区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkfs.vfat /dev/xxx     //就是你刚刚EFI System的<br></code></pre></td></tr></table></figure>
<p><strong>格式化swap分区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkfswap -f /dev/xxx     //就是你刚刚Linux swap的<br></code></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">swapon /dev/xxx     //就是你刚刚Linux swap的<br></code></pre></td></tr></table></figure>
<h1 id="第八步-挂载"><a href="#第八步-挂载" class="headerlink" title="第八步 挂载"></a>第八步 挂载</h1><p><strong>挂载根目录 注意/mnt前面有空格</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mount /dev/(就是你刚刚Linux filesystem的) /mnt<br></code></pre></td></tr></table></figure>
<p><strong>挂载EFI分区 先创建boot目录 再里面创建EFI目录 注意/mnt前面还有空格</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir /mnt/boot<br></code></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir /mnt/boot/EFI<br></code></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mount /dev/xxx /mnt/boot/EFI       //xxx就是你刚刚EFI System的<br></code></pre></td></tr></table></figure>
<h1 id="第九步-安装系统"><a href="#第九步-安装系统" class="headerlink" title="第九步 安装系统"></a>第九步 安装系统</h1><p><strong>这三个包必安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacstrap /mnt base linux linux-firmware<br></code></pre></td></tr></table></figure>
<p><strong>然后安装功能性软件 联网的有dhcpcd iwd, 编辑器有vim, 提权有sudo</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacstrap /mnt dhcpcd iwd vim sudo<br></code></pre></td></tr></table></figure>
<p><strong>然后定义etc分区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure>
<p><strong>以防万一还是检查一下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat /mnt/etc/fstab<br></code></pre></td></tr></table></figure>
<h1 id="第七步-把环境迁移到新系统"><a href="#第七步-把环境迁移到新系统" class="headerlink" title="第七步 把环境迁移到新系统"></a>第七步 把环境迁移到新系统</h1><p><strong>迁移命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">arch-chroot /mnt<br></code></pre></td></tr></table></figure>
<p><strong>创建时区 例如: 上海</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ln -sf /usr.share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure>
<p><strong>同步时区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hwclock --systohc<br></code></pre></td></tr></table></figure>
<p><strong>设置语言 留意en_US.UTF-8 UTF-8</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /etc/locale.gen<br></code></pre></td></tr></table></figure>
<p><strong>然后生成</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">locale-gen<br></code></pre></td></tr></table></figure>
<p><strong>然后输入内容</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">echo &#x27;LANG=EN_us.utf-8 &gt; /etc/locale.conf&#x27;<br></code></pre></td></tr></table></figure>
<p><strong>以防万一 检查一下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat /etc/locale.conf<br></code></pre></td></tr></table></figure>
<h1 id="第八步-用户设置"><a href="#第八步-用户设置" class="headerlink" title="第八步 用户设置"></a>第八步 用户设置</h1><p><strong>Root用户设置密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">passwd root<br></code></pre></td></tr></table></figure>
<p><strong>intel英特尔CPU安装这个</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacman -S intel-ucode<br></code></pre></td></tr></table></figure>
<p><strong>AMD超微CPU安装这个</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacman -S amd-ucode<br></code></pre></td></tr></table></figure>
<h1 id="第九步-安装引导程序"><a href="#第九步-安装引导程序" class="headerlink" title="第九步 安装引导程序"></a>第九步 安装引导程序</h1><p><strong>安装grub引导</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacman -S grub efibootmgr<br></code></pre></td></tr></table></figure>
<p><strong>然后给grub引导取个名字</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">grub-install --target=x86_64-efi --efi-directory=/bootloader-id=Arch      //这里我起Arch 顺便起个名字就好了<br></code></pre></td></tr></table></figure>
<p><strong>生成配置文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure>
<p><strong>退出安装环境</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">exit<br></code></pre></td></tr></table></figure>
<p><strong>卸载分区</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">umount -R /mnt<br></code></pre></td></tr></table></figure>
<p><strong>然后重启一下 可选择物理重启和命令重启</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c71885fe3.jpg"></p>
<h1 id="第九步-安装到此为止-安装桌面玩下看"><a href="#第九步-安装到此为止-安装桌面玩下看" class="headerlink" title="第九步 安装到此为止 安装桌面玩下看"></a>第九步 安装到此为止 安装桌面玩下看</h1><h1 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h1><p><strong>创建用户 有利于提权</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">useradd -m -g users G wheel -s /bin/bash xxx     //xxx是你顺便起个用户名<br></code></pre></td></tr></table></figure>
<p><strong>创建密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">passwd wallen<br></code></pre></td></tr></table></figure>
<p><strong>编辑新用户权限 %wheel ALL=(ALL) ALL</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">EDITOR=vim visudo<br></code></pre></td></tr></table></figure>
<p><strong>创建桌面环境命令和其他必要软件命令  dolpin是文件管理器  konsole是终端</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacman -S plasma-meta dolphin konsole<br></code></pre></td></tr></table></figure>
<p><strong>配置sddm设置为开机自启</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl enable sddm<br></code></pre></td></tr></table></figure>
<p><strong>开启一下32位支持库 有些程序还是32位 所以要装一些库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo vim /etc/pacman.conf<br></code></pre></td></tr></table></figure>
<p><strong>配置</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c7187df06.jpg"></p>
<p><strong>刷新数据库内容</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacmam -Syyu<br></code></pre></td></tr></table></figure>
<p><strong>然后重启一下 可选择物理重启和命令重启</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">reboot<br></code></pre></td></tr></table></figure>
<h1 id="Vim命令"><a href="#Vim命令" class="headerlink" title="Vim命令"></a>Vim命令</h1><p><strong>按A键是编辑模式</strong><br><strong>按回车键是执行</strong><br><strong>按两下D键是剪切</strong><br><strong>按两下G键是回到第一行</strong><br><strong>按P键粘贴</strong><br><strong>按N键查找下一个</strong><br><strong>按ESC 然后输入 :wq 是保存并退出</strong></p>
<h1 id="neofetch查看系统"><a href="#neofetch查看系统" class="headerlink" title="neofetch查看系统"></a>neofetch查看系统</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pacman -S neofetch<br><br>neofetch<br></code></pre></td></tr></table></figure>

<br>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>CSS Flex样式</title>
    <url>/CSS-Flex.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="任何一个容器都可以指定为-Flex-布局"><a href="#任何一个容器都可以指定为-Flex-布局" class="headerlink" title="任何一个容器都可以指定为 Flex 布局"></a>任何一个容器都可以指定为 Flex 布局</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="行内元素也可以使用-Flex-布局"><a href="#行内元素也可以使用-Flex-布局" class="headerlink" title="行内元素也可以使用 Flex 布局"></a>行内元素也可以使用 Flex 布局</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: inline-flex;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Webkit-内核的浏览器-必须加上-webkit前缀"><a href="#Webkit-内核的浏览器-必须加上-webkit前缀" class="headerlink" title="Webkit 内核的浏览器, 必须加上-webkit前缀"></a>Webkit 内核的浏览器, 必须加上-webkit前缀</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: -webkit-flex; <span class="hljs-comment">/* Safari */</span><br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><p><strong>flex-direction属性决定主轴的方向(即项目的排列方向)</strong></p>
<ul>
<li>row(默认值): 主轴为水平方向, 起点在左端</li>
<li>row-reverse: 主轴为水平方向, 起点在右端</li>
<li>column: 主轴为垂直方向, 起点在上沿</li>
<li>column-reverse: 主轴为垂直方向, 起点在下沿</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">flex-direction</span>: row | row-reverse | column | column-reverse;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p><strong>默认情况下, 项目都排在一条线 (又称”轴线”)上flex-wrap属性定义, 如果一条轴线排不下, 如何换行</strong></p>
<ul>
<li>nowrap (默认): 不换行</li>
<li>wrap: 换行, 第一行在上方</li>
<li>wrap-reverse: 换行, 第一行在下方</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p><strong>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式, 默认值为row nowrap</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 三种基本选择器</title>
    <url>/CSS-selector.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="第一种-标签选择器"><a href="#第一种-标签选择器" class="headerlink" title="第一种  标签选择器"></a>第一种  标签选择器</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  <span class="hljs-selector-tag">p</span>&#123;<br>      <span class="hljs-attribute">color</span>: blue;   //蓝色字体<br>      <span class="hljs-attribute">background</span>: red;    //设置背景图颜色<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">24px</span>;    //设置圆角边框<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;    //设置字体大小<br>    &#125;<br>&lt;p class=&quot;sdq1&quot;&gt;史迪奇骑士&lt;/p&gt;<br>&lt;p class=&quot;sdq2&quot;&gt;史迪奇打手&lt;/p&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;史迪奇国王&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>

<h1 id="第二种-类-class-选择器"><a href="#第二种-类-class-选择器" class="headerlink" title="第二种 类 class 选择器"></a>第二种 类 class 选择器</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  <span class="hljs-selector-class">.sdq1</span>&#123;<br>      <span class="hljs-attribute">color</span>: blue;   //蓝色字体<br>      <span class="hljs-attribute">background</span>: red;    //设置背景图颜色<br>      borde-radius: <span class="hljs-number">24px</span>;    //设置圆角边框<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;    //设置字体大小<br>  &#125;<br>  <span class="hljs-selector-class">.sdq2</span>&#123;<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br> &lt;/style&gt;<br> &lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;h1 class=&quot;sdq1&quot;&gt;史迪奇骑士&lt;h1&gt;<br>&lt;h1 class=&quot;sdq2&quot;&gt;史迪奇打手&lt;h1&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇国王&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<p><strong>类选择器 .class的名称{}</strong></p>
<p><strong>好处: 可以多个标签归类, 是同一个class, 可以复用</strong></p>
<h1 id="第三种-id选择器"><a href="#第三种-id选择器" class="headerlink" title="第三种 id选择器"></a>第三种 id选择器</h1><p><strong>id选择器 #id的名称{}</strong></p>
<p><strong>id必须保证全局唯一</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br> <span class="hljs-selector-id">#sdq1</span>&#123;<br>     <span class="hljs-attribute">color</span>: blue;   //蓝色字体<br>     <span class="hljs-attribute">background</span>: red;    //设置背景图颜色<br>     borde-radius: <span class="hljs-number">24px</span>;    //设置圆角边框<br>     <span class="hljs-attribute">font-size</span>: <span class="hljs-number">80px</span>;    //设置字体大小<br> &#125;<br> <span class="hljs-selector-class">.sdq2</span>&#123;<br>     <span class="hljs-attribute">color</span>: red;   //红色字体<br> &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;h1 id=&quot;sdq1&quot;&gt;史迪奇骑士&lt;h1&gt;<br>&lt;h1 class=&quot;sdq2&quot;&gt;史迪奇打手&lt;h1&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇国王&lt;<span class="hljs-selector-tag">h1</span>&gt;<br> &lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<h1 id="优先级-id选择器-gt-class选择器-gt-标签选择器"><a href="#优先级-id选择器-gt-class选择器-gt-标签选择器" class="headerlink" title="优先级: id选择器 &gt; class选择器&gt; 标签选择器"></a>优先级: id选择器 &gt; class选择器&gt; 标签选择器</h1><p><strong>优先级不遵循就近原则, 是固定的</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>标签选择器: 选择一类标签 标签名{}</strong></p>
<p><strong>类/class选择器: 选择所有的class属性一致的标签, 跨标签 .类名{}</strong></p>
<p><strong>id选择器: 全局唯一 id名{}</strong></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 列表</title>
    <url>/CSS%E5%88%97%E8%A1%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"> &lt;style&gt;<br>  <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">li</span>&#123;<br>        <span class="hljs-attribute">color</span>: blue;<br>       &#125;<br> &lt;/style&gt;<br> &lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">ol</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇法师&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇战士&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇辅助&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇坦克&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇刺客&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">ol</span>&gt;<br> &lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>

<h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"> &lt;style&gt;<br>  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;<br>      <span class="hljs-attribute">list-style</span>: none;          //去掉原点<br>      <span class="hljs-attribute">list-style</span>: cirle;         //空心圆<br>      <span class="hljs-attribute">list-style</span>: decimal;       //数字<br>      <span class="hljs-attribute">list-style</span>: square;        //正方形<br>        &#125;<br> &lt;/style&gt;<br> &lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇法师&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇战士&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇辅助&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇坦克&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>     &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇刺客&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br> &lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<h1 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"> &lt;style&gt;<br>  <span class="hljs-selector-tag">dl</span> <span class="hljs-selector-tag">dd</span> <span class="hljs-selector-tag">dt</span>&#123;<br>        <span class="hljs-attribute">color</span>: blue;<br>       &#125;<br> &lt;/style&gt;<br> &lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">dl</span>&gt;<br>    &lt;<span class="hljs-selector-tag">dt</span>&gt;史迪奇近战&lt;/<span class="hljs-selector-tag">dt</span>&gt;<br>        &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇战士&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>        &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇辅助&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>        &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇坦克&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>        &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇刺客&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">dt</span>&gt;史迪奇远程&lt;/<span class="hljs-selector-tag">dt</span>&gt;<br>        &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇法师&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>        &lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇射手&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">dl</span>&gt;<br> &lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 伪类选择器</title>
    <url>/CSS%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  &#125;<br>  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child&#123;   //first-child意思是选中第一个<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br>  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span>&#123;   //last-child意思是选中最后一个<br>      <span class="hljs-attribute">color</span>: blue;   //红色字体<br>  &#125;<br>  <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;   //选中p1: 定位到父元素, 选择当前的第一个元素也就是选择当前p元素的父级元素, 选中父级元素的第一个, 并且是当前元素才生效<br>      <span class="hljs-attribute">color</span>: yellow;   //黄色字体<br>  &#125;<br>  <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span>&#123;   //last-child意思是选中最后一个<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br>  <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>)&#123;   //nth-of-type意思是选中父类下元素的第二个类型<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;p1&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;p2&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;p3&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇骑士&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇打手&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;史迪奇国王&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<br>




]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 层次选择器</title>
    <url>/CSS+.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="第一种-后代选择器"><a href="#第一种-后代选择器" class="headerlink" title="第一种  后代选择器"></a>第一种  后代选择器</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  &#125;<br>  <span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇骑士&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇打手&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇国王&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<p><strong>后代选择器: 在某个元素的后面 祖爷爷 爷爷 爸爸 儿子</strong></p>
<h1 id="第二种-子选择器"><a href="#第二种-子选择器" class="headerlink" title="第二种 子选择器"></a>第二种 子选择器</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  &#125;<br>  <span class="hljs-selector-tag">body</span>&gt;<span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇骑士&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇打手&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇国王&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<p><strong>子选择器: 只有一代 儿子</strong></p>
<h1 id="第三种-相邻兄弟选择器"><a href="#第三种-相邻兄弟选择器" class="headerlink" title="第三种 相邻兄弟选择器"></a>第三种 相邻兄弟选择器</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  &#125;<br>  <span class="hljs-selector-class">.sdq</span>+<span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇骑士&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;h1 class=&quot;sdq1&quot;&gt;史迪奇打手&lt;h1&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇国王&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<p><strong>相邻兄弟选择器: 只有一个, 相邻(向下)</strong></p>
<h1 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  &#125;<br>  <span class="hljs-selector-class">.sdq</span>~<span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">color</span>: red;   //红色字体<br>  &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇骑士&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;h1 class=&quot;sdq1&quot;&gt;史迪奇打手&lt;h1&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇国王&lt;<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<p><strong>通用选择器: 当前选中元素的向下的所有兄弟元素</strong></p>
<br>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 属性选择器(常用)</title>
    <url>/CSS%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br><br><span class="hljs-selector-class">.sdq1</span> <span class="hljs-selector-tag">a</span>&#123; <br>     <span class="hljs-attribute">float</span>: left;  //<span class="hljs-attribute">left</span>往左<span class="hljs-attribute">float</span>浮动<br>     dispay: block;  //dispay规定元素应该生成的框的类型block此元素将显示为块级元素, 此元素前后会带有换行符<br>     heigh: <span class="hljs-number">50px</span>;  //heigh高度<br>     <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;  //<span class="hljs-attribute">width</span>宽度<br>     <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;  //<span class="hljs-attribute">border-radius</span>圆角边框<br>     <br>     <span class="hljs-attribute">text-align</span>: center;   //<span class="hljs-attribute">text-align</span>对齐center剧中<br>     <span class="hljs-attribute">color</span>: yellow;  //<span class="hljs-attribute">color</span>文字颜色<br>     <span class="hljs-attribute">text-decoration</span>: none;  //<span class="hljs-attribute">text-decoration</span>下划线<span class="hljs-attribute">none</span>不显示<br>     <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;    //<span class="hljs-attribute">margin-right</span>外边距向右<br>     <span class="hljs-attribute">font</span>: bold <span class="hljs-number">20px</span>/<span class="hljs-number">50px</span> Arial;   //<span class="hljs-attribute">font</span>设置文字的字体bold字体大小<span class="hljs-number">20px</span>字体的大小<span class="hljs-number">50px</span>行高Arial是一种字体<br> &#125;<br>  //格式<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[]</span>&#123;&#125;  存在id的属性的元素  <br> a[class*=first]&#123;        //=是绝对等于  *=是包含这个元素<br>     <span class="hljs-attribute">background</span>: yellow;<br> &#125;<br> a[href^=xxy]&#123;          //^=表示以什么开头     <br>     <span class="hljs-attribute">background</span>: green;<br> &#125;<br> a[href=ghfgh]&#123;          //=表示以什么结尾     <br>     <span class="hljs-attribute">background</span>: powder;<br> &#125;<br>  <br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;<br>&lt;a href=&quot;xxy.fgdhrth&quot; class=&quot;links item first&quot; id=&quot;first&quot;&gt;史迪奇&lt;a&gt;<br>&lt;a href=&quot;xxx&quot; class=&quot;links item&quot;&gt;史迪仔&lt;a&gt;<br>&lt;a href=&quot;xxx&quot; class=&quot;links item&quot;&gt;史迪奇骑士&lt;a&gt;<br>&lt;a href=&quot;xxx&quot; class=&quot;links item&quot;&gt;史迪奇国王&lt;a&gt;<br>&lt;a href=&quot;xxx&quot; class=&quot;links item&quot;&gt;史迪奇勇士&lt;a&gt;<br>&lt;a href=&quot;hh.ghfgh&quot; class=&quot;links item&quot;&gt;史迪奇巫师&lt;a&gt;<br>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<br>




]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 正方体旋转效果</title>
    <url>/CSS-cube.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="绘制正方体"><a href="#绘制正方体" class="headerlink" title="绘制正方体"></a>绘制正方体</h1><p><strong>以面为单位</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>    <span class="hljs-selector-tag">html</span> &#123;<br>        <span class="hljs-attribute">background</span>:<span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">#9ed128</span> <span class="hljs-number">0%</span>,<span class="hljs-number">#358b98</span> <span class="hljs-number">80%</span>);<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">1000px</span>;<br>        <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0.8</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.wrapper</span> &#123;<br>        <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">perspective</span>:<span class="hljs-number">1000px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.cube</span> &#123;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">position</span>:relative;<br>        <span class="hljs-attribute">margin</span>:auto;<br>        <span class="hljs-attribute">transform-style</span>:preserve-<span class="hljs-number">3</span>d;<br>        -webkit-<span class="hljs-attribute">animation</span>:rotate <span class="hljs-number">15s</span> infinite;<br>        -o-<span class="hljs-attribute">animation</span>:rotate <span class="hljs-number">15s</span> infinite;<br>        <span class="hljs-attribute">animation</span>:rotate <span class="hljs-number">15s</span> infinite <span class="hljs-number">2s</span>;<br>    &#125;<br>    <span class="hljs-keyword">@keyframes</span> rotate &#123;<br>        <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">0deg</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">0deg</span>);<br>    &#125;<br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">360deg</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">360deg</span>);<br>    &#125;<br>    &#125;<span class="hljs-selector-class">.cube</span>&gt;<span class="hljs-selector-tag">div</span> &#123;<br>        <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0.9</span>;<br>        <span class="hljs-attribute">position</span>:absolute;<br>        <span class="hljs-attribute">text-align</span>:center;<br>        <span class="hljs-attribute">background</span>:<span class="hljs-number">#333</span>;<br>        <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>        <span class="hljs-attribute">line-height</span>:<span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.plane-front</span> &#123;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.plane-back</span> &#123;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.plane-left</span> &#123;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">270deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.plane-right</span> &#123;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">90deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.plane-top</span> &#123;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">90deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.plane-bottom</span> &#123;<br>        <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">270deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.plane-front</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateZ</span>(<span class="hljs-number">200px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.plane-back</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">200px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.plane-left</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">270deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">200px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.plane-right</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">90deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">200px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.plane-top</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">90deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">200px</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.cube</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.plane-bottom</span> &#123;<br>        <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">270deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">200px</span>);<br>    &#125;<br>    &lt;/style&gt;<br><br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;div class=&quot;wrapper&quot;&gt;<br>        &lt;div class=&quot;cube&quot;&gt;<br>            &lt;div class=&quot;plane-front&quot;&gt;前面&lt;/div&gt;<br>            &lt;div class=&quot;plane-back&quot;&gt;后面&lt;/div&gt;<br>            &lt;div class=&quot;plane-right&quot;&gt;右面&lt;/div&gt;<br>            &lt;div class=&quot;plane-left&quot;&gt;左面&lt;/div&gt;<br>            &lt;div class=&quot;plane-top&quot;&gt;上面&lt;/div&gt;<br>            &lt;div class=&quot;plane-bottom&quot;&gt;下面&lt;/div&gt;<br>        &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">效果展示</font></p>
<p><a href="./html/正方体旋转效果.html" target="_blank">点击进入</a></p>
<br>




















































































































































































































































<!-- <style>
    html {
        background:linear-gradient(#9ed128 0%,#358b98 80%);
        height:1000px;
        opacity:0.8;
    }
    .wrapper {
        margin-top:200px;
        perspective:1000px;
    }
    .cube {
        height:200px;
        width:200px;
        position:relative;
        margin:auto;
        transform-style:preserve-3d;
        -webkit-animation:rotate 15s infinite;
        -o-animation:rotate 15s infinite;
        animation:rotate 15s infinite 2s;
    }
    @keyframes rotate {
        from {
        transform:rotateY(0deg) rotateX(0deg);
    }
    to {
        transform:rotateY(360deg) rotateX(360deg);
    }
    }.cube>div {
        height:100%;
        width:100%;
        opacity:0.9;
        position:absolute;
        text-align:center;
        background:#333;
        color:#fff;
        line-height:200px;
        font-size:30px;
    }
    .plane-front {
        transition: 0.5s;
        transform:translateZ(100px);
    }
    .plane-back {
        transition: 0.5s;
        transform:rotateY(180deg) translateZ(100px);
    }
    .plane-left {
        transition: 0.5s;
        transform:rotateY(270deg) translateZ(100px);
    }
    .plane-right {
        transition: 0.5s;
        transform:rotateY(90deg) translateZ(100px);
    }
    .plane-top {
        transition: 0.5s;
        transform:rotateX(90deg) translateZ(100px);
    }
    .plane-bottom {
        transition: 0.5s;
        transform:rotateX(270deg) translateZ(100px);
    }
    .cube:hover .plane-front {
        transform:translateZ(200px);
    }
    .cube:hover .plane-back {
        transform:rotateY(180deg) translateZ(200px);
    }
    .cube:hover .plane-left {
        transform:rotateY(270deg) translateZ(200px);
    }
    .cube:hover .plane-right {
        transform:rotateY(90deg) translateZ(200px);
    }
    .cube:hover .plane-top {
        transform:rotateX(90deg) translateZ(200px);
    }
    .cube:hover .plane-bottom {
        transform:rotateX(270deg) translateZ(200px);
    }
    </style>

</head>
<body>
    <div class="wrapper">
        <div class="cube">
            <div class="plane-front">前面</div>
            <div class="plane-back">后面</div>
            <div class="plane-right">右面</div>
            <div class="plane-left">左面</div>
            <div class="plane-top">上面</div>
            <div class="plane-bottom">下面</div>
        </div>
    </div> -->



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 三种导入样式</title>
    <url>/CSS%E4%B8%89%E7%A7%8D%E5%AF%BC%E5%85%A5%E6%A0%B7%E5%BC%8F.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h1><p><strong>span标签: 重点突出的字, 使用span套起来</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  <span class="hljs-selector-id">#sdq1</span>&#123;<br>      <span class="hljs-attribute">color</span>: blue;<br>    &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>我叫&lt;span id=&quot;sdq1&quot;&gt;史迪奇&lt;/span&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br> <br></code></pre></td></tr></table></figure>

<h1 id="字体风格"><a href="#字体风格" class="headerlink" title="字体风格"></a>字体风格</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  <span class="hljs-selector-tag">body</span>&#123;<br>      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Arial Black&quot;</span>, 楷体;   //字体<br>      <span class="hljs-attribute">color</span>:blue;<br>    &#125;<br>  <span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;    //字体大小<br>    &#125;<br>  <span class="hljs-selector-class">.sdq1</span>&#123;<br>      <span class="hljs-attribute">font-weight</span>: bolder;  //粗体<br>    &#125;<br>  <span class="hljs-selector-tag">p</span>&#123;<br>      <span class="hljs-attribute">font</span>: oblique bolder <span class="hljs-number">12px</span> <span class="hljs-string">&quot;楷体&quot;</span>;   //斜体oblique粗细bolder大小<span class="hljs-number">12px</span><br>      <span class="hljs-attribute">color</span>:blue;<br>    &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇的故事&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;p class=&quot;sdq1&quot;&gt;生物史迪奇&lt;/p&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;<span class="hljs-number">5</span>岁女孩莉萝聪明善良, 她最爱听猫王的老歌, 也一直梦想拥有一只属于自己的宠物狗&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;史迪奇只能把自己的两只脚藏起来, 外表看起来和别的小狗一样&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;当外星人终于在地球上发现了伪装的史迪奇时, 他们绑架了莉萝想逼史迪奇就范, 为了救回自己的好朋友, 也为了证明自己不是无可救药的危险分子, 史迪奇只有使出浑身解数, 放手一搏了&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure>
<h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><p><strong>装饰</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  <span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">color</span>:blue;     //颜色<br>      <span class="hljs-attribute">text-align</span>: center;  //文本对齐的方式 <br>      <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;     //首行缩进<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;    //行高 <br>      <span class="hljs-attribute">text-decoration</span>: overline;   //上划线<br>      <span class="hljs-attribute">text-decoration</span>: line-through;   //中划线<br>      <span class="hljs-attribute">text-decoration</span>: underline   //下划线<br>    &#125;<br>   <span class="hljs-selector-tag">img</span>,<span class="hljs-selector-tag">span</span>&#123;<br>             <span class="hljs-attribute">vertical-align</span>: middle;<br>          &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇的王国&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;<br>&lt;img src=&quot;images/x.jpg&quot;&gt;<br>&lt;<span class="hljs-selector-tag">span</span>&gt;史迪奇&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></td></tr></table></figure>
<h1 id="超链接伪类"><a href="#超链接伪类" class="headerlink" title="超链接伪类"></a>超链接伪类</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  //默认颜色<br>   <span class="hljs-selector-tag">a</span>&#123;  <br>        <span class="hljs-attribute">text-decoration</span>: none;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;<br>     &#125;  <br>   //鼠标悬浮状态 <br>   <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;  <br>        <span class="hljs-attribute">color</span>: blue;<br>     &#125;     <br>   //鼠标按住未释放状态 <br>   <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;  <br>        <span class="hljs-attribute">color</span>: rad;<br>     &#125;      <br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇的王国&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;<span class="hljs-selector-tag">a</span>&gt;史迪奇&lt;<span class="hljs-selector-tag">a</span>&gt;<br>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></td></tr></table></figure>
<h1 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  //默认颜色<br>   <span class="hljs-selector-id">#sdq</span>&#123;  <br>        text-shawdow: blue <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;    //text-shawdow是阴影, 阴影颜色, 水平偏移, 垂直偏移, 阴影半径<br>     &#125;       <br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;<br>&lt;<span class="hljs-selector-tag">h1</span>&gt;史迪奇的王国&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;a id=&quot;sdq&quot;&gt;史迪奇&lt;a&gt;<br>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS-边距-边框-阴影-浮动-定位-透明-z-index-动画</title>
    <url>/CSS8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>    <span class="hljs-selector-tag">div</span>&#123;<br>       <span class="hljs-comment">/* margin是外边距 1 2 3 4 分别对应 上 下 左 右  */</span><br>       <span class="hljs-attribute">margin</span>:<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>; <br>       <span class="hljs-comment">/* padding是内边距 上下左右的边距都是33px */</span><br>       <span class="hljs-attribute">padding</span>:<span class="hljs-number">33px</span>;       <br>        &#125;<br>  &lt;/style&gt;<br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e521889eca2.jpg"></p>
<h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br><span class="hljs-selector-tag">div</span>&#123;<br>     <span class="hljs-comment">/* border是边框 3px是边框的粗细 soshed是边框的样式 black是边框的颜色 */</span><br>     <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> soshed black;<br>      &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<h1 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br><span class="hljs-selector-tag">div</span>&#123;<br>     <span class="hljs-comment">/* border是边框 10px是边框的粗细 solid是边框的样式 blue是边框的颜色 */</span><br>     <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid blue;<br>     <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;  //<span class="hljs-number">100px</span>这是圆角边框 这个值可以随便改很好玩的<br>      &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<h1 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt; <br><span class="hljs-selector-tag">div</span>&#123;<br>   <span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;  //宽<br>   <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;  //高<br>   <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#ff9900</span>;  //颜色<br>   -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#888888</span>; 老的 Firefox <br>   <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#888888</span>; //<span class="hljs-attribute">box-shadow</span> 属性向框添加一个或多个阴影<br>   &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt; <br><span class="hljs-selector-tag">div</span>&#123;<br>   <span class="hljs-attribute">display</span>: inline-block;  //将对象呈现为inline对象, 但是对象的作为daoblock对象呈现<br>   <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;  //<span class="hljs-attribute">float</span>浮动 <span class="hljs-attribute">right</span>右<br>   <span class="hljs-attribute">clear</span>: right;  //右侧不允许有浮动元素<br>   <span class="hljs-attribute">clear</span>: left;  //左侧不允许有浮动元素<br>   <span class="hljs-attribute">clear</span>: both;  //两侧都不允许有浮动元素<br>   &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<!-- **解决方法 增加父级元素的高度**
**解决方法 增加一个空的div标签, 清除浮动** -->
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt; <br><span class="hljs-selector-tag">div</span>&#123;<br>   //固定定位<br>   <span class="hljs-attribute">position</span>: fixed;<br>   //绝对定位    没有父级元素定位的前提下, 相对浏览器定位<br>   <span class="hljs-attribute">position</span>: absolute;<br>   //相对定位<br>   <span class="hljs-attribute">position</span>: relative;<br>   &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<h1 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt; <br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>   &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<h1 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br> <span class="hljs-selector-tag">p</span>&#123;<br>     <span class="hljs-attribute">position</span>:absolute;  //绝对定位<br>     <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>;  //左侧<br>     <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;   //<span class="hljs-attribute">top</span>规定元素的顶部边缘<br>     <span class="hljs-attribute">z-index</span>:-<span class="hljs-number">1</span>;<br> &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt; <br> <span class="hljs-selector-tag">div</span> &#123;<br>     <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;  //宽<br>     <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;  //高<br>     <span class="hljs-attribute">background-color</span>: red; //颜色<br>     <span class="hljs-attribute">animation-name</span>: example;  //<span class="hljs-attribute">animation-name</span> 属性为 <span class="hljs-keyword">@keyframes</span> 动画规定名称<br>     <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">4s</span>; //<span class="hljs-number">4</span>秒<br> &#125;<br><br><span class="hljs-keyword">@keyframes</span> example &#123;    //<span class="hljs-attribute">animation-name</span> 属性为 <span class="hljs-keyword">@keyframes</span> 动画规定名称<br>         <span class="hljs-selector-tag">from</span> &#123;<span class="hljs-attribute">background-color</span>: red;&#125;  //变化颜色<br>         <span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">background-color</span>: yellow;&#125;  //最后颜色<br>          &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<br>







]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 三种导入样式</title>
    <url>/CSS-Import-styles.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="第一种-行内样式"><a href="#第一种-行内样式" class="headerlink" title="第一种  行内样式"></a>第一种  行内样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;<span class="hljs-selector-tag">h1</span> style=&quot;<span class="hljs-attribute">color</span>: red<span class="hljs-string">&quot;&gt;行内样式&lt;/h1&gt;</span><br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e521888f325.jpg"></p>
<h1 id="第二种-内部样式"><a href="#第二种-内部样式" class="headerlink" title="第二种 内部样式"></a>第二种 内部样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS">&lt;style&gt;<br>  <span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">color</span>: blue;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e521888f325.jpg"></p>
<h1 id="第三种-外部样式"><a href="#第三种-外部样式" class="headerlink" title="第三种 外部样式"></a>第三种 外部样式</h1><p><strong>另外一个css页面</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"> &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style<span class="hljs-selector-class">.css</span>&quot;&gt;    //链接式  属于<span class="hljs-selector-tag">html</span><br>  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;css/style.css&quot;</span>)          //导入式  属于CSS2.<span class="hljs-number">1</span> 了解就可以<br>&lt;style&gt;<br>  <span class="hljs-selector-tag">h1</span>&#123;<br>      <span class="hljs-attribute">color</span>: blue;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e521889ed17.jpg"></p>
<h1 id="优先级-行内样式-gt-内部样式-gt-外部样式"><a href="#优先级-行内样式-gt-内部样式-gt-外部样式" class="headerlink" title="优先级: 行内样式 &gt; 内部样式 &gt; 外部样式"></a>优先级: 行内样式 &gt; 内部样式 &gt; 外部样式</h1><p><strong>优先级看就近原则</strong></p>
<br>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 定位布局</title>
    <url>/CSS-Static-Relative-Absolute-Fixed-Sticky.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="Static-静态定位-默认"><a href="#Static-静态定位-默认" class="headerlink" title="Static 静态定位(默认)"></a>Static 静态定位(默认)</h1><p><strong>从上到下 从左到右</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span>&#123;<br>    <span class="hljs-attribute">position</span>: static<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Relative-相对定位"><a href="#Relative-相对定位" class="headerlink" title="Relative 相对定位"></a>Relative 相对定位</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box2</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">15px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Absolute-绝对定位"><a href="#Absolute-绝对定位" class="headerlink" title="Absolute 绝对定位"></a>Absolute 绝对定位</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box3</span>&#123;<br>    <span class="hljs-attribute">position</span>: Absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">15px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Fixed-固定定位"><a href="#Fixed-固定定位" class="headerlink" title="Fixed 固定定位"></a>Fixed 固定定位</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.footer</span>&#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="Sticky-粘性定位"><a href="#Sticky-粘性定位" class="headerlink" title="Sticky 粘性定位"></a>Sticky 粘性定位</h1><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.footer</span>&#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>C语 函数及编译预处理</title>
    <url>/C-Pretreatment.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4>函数定义的传统形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">储存类型 数据类型 函数名 ( 形参表 )<br>形参类型说明语句序列<br>&#123;<br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h4>函数定义的现代形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">储存类型 数据类型 函数名 ( 类型 参数 <span class="hljs-number">1</span>, 类型 参数 <span class="hljs-number">2</span>, ... )<br>&#123;<br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<p><strong>关于函数定义的几点说明:</strong></p>
<ul>
<li>一个源程序文件由一个或多个函数组成, 其中必有一个函数名为 main 的函数, 程序的执行是从 main 函数开始, 屌用其它函数后流程回到main() 函数, 在 main () 函数中结束整个程序的运行</li>
</ul>
<ul>
<li>一个 C 程序由一个或多个源程序文件组成</li>
</ul>
<ul>
<li>函数类型指出该函数返回值的类型, 有 int, float, char 等, 若函数无法返回值, 函数可以定义为空类型 void , 默认 int</li>
</ul>
<ul>
<li>函数名符合标识的定义, 一般提倡函数名与函数内容有一定关系, 以增强程序的可读性</li>
</ul>
<ul>
<li>函数的形参表可有可无, 无形参表的函数称无参函数, 但函数名后的 () 不能省略, 在调用无参函数时, 主调函数并不将数据传送给被调函数, 一般用来执行指定的操作</li>
</ul>
<ul>
<li>有参函数可由一个或多个形参组成, 多个参数之间用逗号隔开, 在调用该类函数时, 主调函数可以将数据传递给被调用函数使用</li>
</ul>
<h2 id="函数说明与调用"><a href="#函数说明与调用" class="headerlink" title="函数说明与调用"></a>函数说明与调用</h2><ul>
<li>函数的使用与变量的使用类似, 使用前先定义其类型然后才能使用, 主调函数调用被调函数时, 在调用前应先对被调函数进行说明, <font color="#FA8072">先说明后调用</font></li>
</ul>
<h4>函数说明的一般格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">储存类型 数据类型 函数名 ( );<br>&#123;<br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<p><strong>当函数类型为 int 型, 或被调函数定义在主调函数之前时, 可以省略被调函数的说明</strong></p>
<h3 id="编好一个函数后-要由主调函数来调用才能发挥作用-一个函数-主调函数-在执行过程中去执行另一个函数-被调函数-称为函数调用-当被调函数执行完毕后-返回到主调函数调用处之后继续执行-称为函数调用返回"><a href="#编好一个函数后-要由主调函数来调用才能发挥作用-一个函数-主调函数-在执行过程中去执行另一个函数-被调函数-称为函数调用-当被调函数执行完毕后-返回到主调函数调用处之后继续执行-称为函数调用返回" class="headerlink" title="编好一个函数后, 要由主调函数来调用才能发挥作用, 一个函数 ( 主调函数 ) 在执行过程中去执行另一个函数 ( 被调函数 ) ,称为函数调用, 当被调函数执行完毕后, 返回到主调函数调用处之后继续执行, 称为函数调用返回"></a>编好一个函数后, 要由主调函数来调用才能发挥作用, 一个函数 ( 主调函数 ) 在执行过程中去执行另一个函数 ( 被调函数 ) ,称为函数调用, 当被调函数执行完毕后, 返回到主调函数调用处之后继续执行, 称为函数调用返回</h3><h4>C 语言中调用函数的一般格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">函数名 ( 实参表 );<br></code></pre></td></tr></table></figure>
<br>

<h2 id="函数调用按其在程序中出现的位置来分-可有如下三种调用方式"><a href="#函数调用按其在程序中出现的位置来分-可有如下三种调用方式" class="headerlink" title="函数调用按其在程序中出现的位置来分,  可有如下三种调用方式"></a>函数调用按其在程序中出现的位置来分,  可有如下三种调用方式</h2><ol>
<li><p>函数表达式</p>
<ul>
<li>概念: 函数出现在一个表达式中, 这种表达式称为函数表达式 这种表达式需要函数返回一个确定的值</li>
</ul>
</li>
<li><p>函数参数</p>
<ul>
<li>概念: 把函数调用作为一个函数的实在参数</li>
</ul>
</li>
<li><p>函数语句</p>
<ul>
<li>概念: 把函数调用作为一个语句, 不要求函数带回值, 只要求函数完成一定的操作</li>
</ul>
</li>
</ol>
<h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><ul>
<li>函数的返回值是通过函数中的 return 语句获得的, return 语句将被调函数中的一个确定值带回主调函数中去, 一个函数中可以有一个以上的 return 语句, 执行到哪一个 return 语句, 哪一个语句就会起作用</li>
</ul>
<ul>
<li>函数的数据类型即为函数的返回值的类型, 若在定义函数时, 没有进行函数类型说明, 一律自动按 int 处理, 如果函数值的类型和return 语句中表达式值的类型不一致, 则以函数类型为准, 对于数据型数据, 可以自动进行类型转换, 即函数类型决定返回值的类型</li>
</ul>
<ul>
<li>如果被调函数中没有 return 语句, 函数带回一个不确定的值, 为了明确表示不带回值, 可以用 void 说明无类型 ( 或称 “ 空类型 “ ), 为了减少程序出错, 保证正确调用, 凡不要求带回函数值的函数, 一般都定义 void 类型</li>
</ul>
<h1 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h1><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><ul>
<li>在一个函数内部定义的变量称为局部变量, 它只在本函数范围内有效, 也就是说只有在本函数内才能使用它们, 在此函数以外是不能使用这些变量的</li>
</ul>
<h2 id="全面变量"><a href="#全面变量" class="headerlink" title="全面变量"></a>全面变量</h2><ul>
<li><strong>全面变量和局部变量</strong>: 程序的编译单位是源程序文件, 一个源文件可以包含一个或若干个函数, 在函数内部定义的变量称为局部变量, 在函数外部定义的变量称为全局变量, 又称为外部变量, 全局变量可以为该文件中其它函数所共用, 它的有效范围为从定义变量的位置开始到本源文件</li>
</ul>
<ul>
<li>全局变量在程序的全部执行过程中占用储存单元, 而不是在需要时才分配储存单元, 过多地使用全局变量, 会降低程序的清晰度和通用型, 因为人物往往难以清楚地判断出每个瞬时各个全局变量的值, 同时函数在执行时要依赖其所在的全局变量, 如果将一个函数移到另一个文件中, 还要将有关的全局变量及其值一起移过去, 因此建议非必要时不要使用全局变量</li>
</ul>
<h1 id="变量的储存类型"><a href="#变量的储存类型" class="headerlink" title="变量的储存类型"></a>变量的储存类型</h1><h2 id="静态储存方式和动态储存方式"><a href="#静态储存方式和动态储存方式" class="headerlink" title="静态储存方式和动态储存方式"></a>静态储存方式和动态储存方式</h2><ul>
<li>从变量的作用域范围来分, 变量可以分为全局变量和局部变量, 从变量值存在的时间来分, 可以分为静态储存方式和动态储存方式</li>
</ul>
<ul>
<li>静态存储方式是指在程序运行期间分配固定的存储空间, 而动态储存方式是指在运行期间根据需要进行动态分配储存空间</li>
</ul>
<ul>
<li>在内存中供用户使用的存储空间是由程序区, 静态存储区和动态存储区三部分组成, 数据分别存放在静态存储区和动态存储区中, 全局变量存放在静态存储区中, 在程序开始时就给全局变量分配存储区, 程序执行完时才释放存储空间, 在程序执行过程中占用固定储存单元, 而不是动态分配和释放储存空间</li>
</ul>
<ul>
<li>动态存储区主要存放函数的形式参数, 自动变量和函数使用时的现场保护和返回地址等, 对于这些数据, 在函数调用开始分配动态储存空间, 函数结束时释放这些空间, 如果一程序中两次调用同一个函数, 每次分配给函数中局部变量的储存地址可以是不相同</li>
</ul>
<h2 id="变量的储存类型-1"><a href="#变量的储存类型-1" class="headerlink" title="变量的储存类型"></a>变量的储存类型</h2><ul>
<li>一个变量和函数都存放两种属性: 一种是数据类型属性, 它说明变量占有储存空间的大小, 如读者已熟悉的整形, 实型, 字符型, 另一种是变量的储存类型, 主要有 auto ( 自动 ) 型, reginter ( 寄存器 ) 型, static ( 静态 ) 型和 extern ( 外部 ) 型四种</li>
</ul>
<ol>
<li><p>auto ( 自动 ) 变量</p>
<ul>
<li>auto 变量只用于定义局部变量, 储存在内存中的动态存储区</li>
</ul>
</li>
</ol>
<h4>自动变量的定义形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">auto</span> 数据类型 变量名表;<br></code></pre></td></tr></table></figure>
<br>

<ol start="2">
<li><p>static ( 静态 ) 变量</p>
<ul>
<li>static 型既可以定义全局变量, 又可以定义局部变量, 在静态储存区分配存储单元, 在整个程序运行期间, 静态变量自始至终占用被分配的储存空间</li>
</ul>
</li>
</ol>
<h4>静态变量的定义形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">static</span> 数据类型 变量名表;<br></code></pre></td></tr></table></figure>
<br>

<ul>
<li><p>注意</p>
<ul>
<li>静态局部变量是在编译时赋初值的, 即赋值一次, 在程序运行时它已有初值, 以后每次调用函数时不再重新赋值, 而只引用上次函数调用结果时的值</li>
</ul>
<ul>
<li>若在定义静态局部变量时没有赋初值, 编译时自动赋初值 0 ( 对数值变量 ) 或空字符 ( 对字符变量 )</li>
</ul>
<ul>
<li>定义全局变量时, 全局变量的有效范围是它所在的源文件, 其它源文件不能使用</li>
</ul>
</li>
</ul>
<br>

<ol start="3">
<li><p>register ( 寄存器 ) 变量</p>
<ul>
<li>一般情况下, 变量的值是存放在内存中的, 如果某些变量要频繁使用, 同时为了提高变量的存取时间, 则将这些变量存放在寄存器中 </li>
</ul>
</li>
</ol>
<h4>寄存器变量的定义形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">register</span> 数据类型 变量名表;<br></code></pre></td></tr></table></figure>
<br>


<ul>
<li><p>注意</p>
<ul>
<li>一个计算机系统中寄存器的数量是有限的, 因此不能定义太多的寄存器变量</li>
</ul>
<ul>
<li>只有局部自动变量和形式参数可以定义为寄存器变量, 全部变量和静态储存变量不能定义为寄存器变量</li>
</ul>
<ul>
<li>寄存器变量不能使用 &amp; 运算符</li>
</ul>
</li>
</ul>
<br>

<ol start="4">
<li><p>extern ( 外部 ) 变量</p>
<ul>
<li>extern 变量称为外部变量, 就是<font color="#FA8072">全局变量</font>, 是对同一类变量的不同提法, 全局变量是从作用域提出的, 外部变量是从其储存方式提出的, 表示它的生存期, 外部变量的定义必须在所有函数之外, 且只能定义一次</li>
</ul>
<ul>
<li>若 extern 型变量的定义在后, 使用在前, 或者引用其它文件的 extern 型变量, 这时必须用 extern 对该变量进行外部说明</li>
</ul>
</li>
</ol>
<h4>外部变量的定义形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">extern</span> 数据类型 变量名表;<br></code></pre></td></tr></table></figure>
<br>


<h1 id="函数间的数据传递"><a href="#函数间的数据传递" class="headerlink" title="函数间的数据传递"></a>函数间的数据传递</h1><h2 id="传值方式"><a href="#传值方式" class="headerlink" title="传值方式"></a>传值方式</h2><ol>
<li><p>实参向形参传递数据是单向的, 且按顺序一一对应, 实参可以是变量, 常量, 函数调用和表达式, 但必须有确定值, 在调用时将实参的值赋给形参的变量</p>
</li>
<li><p>在被定义的函数中, 必须指定形参类型, 调用时要求实参与形参类型一致</p>
</li>
<li><p>形参, 实参各占独立的储存空间, 形参在函数被使用时, 系统为其动态分配临时储存空间, 函数返回时, 释放储存空间, 因此实参与形参可以同名, 也可以不同民, 而且形参数值发生变化时, 实参值不变</p>
</li>
<li><p>形参属于<font color="#FA8072">局部变量</font></p>
</li>
</ol>
<h2 id="地址复制方式"><a href="#地址复制方式" class="headerlink" title="地址复制方式"></a>地址复制方式</h2><ul>
<li>地址复制方式又叫传址方式, 它是把地址常量 ( 而不是数据 ) 传送给被调用函数的形参, 采用地址传递方式, 可以很好地解决数组中大量数据在函数间传递的问题, 在这种方式中, 一般用数组名或指针作为形参接收实参数组首地址, 这样使得形参与实参数组 ( 或指针 ) 首地址相同, 所以在被调函数中, 如果修改了数组元素值, 调用函数后实参数组元素值也发生相应变化, 可见, 用地址传递可实现被调函数返回多值给主调函数</li>
</ul>
<h2 id="利用参数返回结果"><a href="#利用参数返回结果" class="headerlink" title="利用参数返回结果"></a>利用参数返回结果</h2><ul>
<li>当函数被调用时, 其处理结果可以返回值的形式传递给调用函数, 如果要求返回多个结果值时, 还可以利用参数返回处理结果</li>
</ul>
<ul>
<li>当使用地址复制方式传递参数时, 被调用函数可以改变调用函数种的数据, 利用参数返回处理结果就是根据该特征来实现的</li>
</ul>
<h2 id="利用函数返回值传递数据"><a href="#利用函数返回值传递数据" class="headerlink" title="利用函数返回值传递数据"></a>利用函数返回值传递数据</h2><ul>
<li>从被调函数传递数据给主函数, 一般采用函数的返回值来实现, 返回值是被调函数执行返回主调函数的一个值, 它通过 return 语句来实现</li>
</ul>
<h2 id="利用全局变量传递数据"><a href="#利用全局变量传递数据" class="headerlink" title="利用全局变量传递数据"></a>利用全局变量传递数据</h2><ul>
<li>利用全局变量进行函数间的数据传递, 不但简单, 而且程序的运行效率高, 但是, 如果函数间使用过多的全局变量, 就增加了函数间的联系, 降低了函数的独立性</li>
</ul>
<h1 id="函数嵌套调用"><a href="#函数嵌套调用" class="headerlink" title="函数嵌套调用"></a>函数嵌套调用</h1><ul>
<li>C 语言规定不允许在定义一个函数中再定义一个函数, 也就是一个函数内不能包含另一函数, 虽然 C 语言不能嵌套定义函数, 但可以嵌套调用函数</li>
</ul>
<h2 id="函数递归调用"><a href="#函数递归调用" class="headerlink" title="函数递归调用"></a>函数递归调用</h2><ul>
<li>在调用一个函数的过程中直接或间接地调用函数本事, 称为函数的递归调用, C 语言的特点之一就在于允许函数的递归调用</li>
</ul>
<ul>
<li>递归函数要避免死循环, 在编写递归调用语句的前面写上终止递归的条件</li>
</ul>
<h4>递归的流程:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ( 条件 ) 递归调用<br><span class="hljs-keyword">else</span> ...<br></code></pre></td></tr></table></figure>
<br>

<p><strong>编写递归函数必须要清楚两个问题</strong></p>
<ul>
<li>递归程序算法, 即如何实现其递归</li>
</ul>
<ul>
<li>递归调用的结束条件</li>
</ul>
<h1 id="内部函数和外部函数"><a href="#内部函数和外部函数" class="headerlink" title="内部函数和外部函数"></a>内部函数和外部函数</h1><h2 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h2><ul>
<li>如果一个函数只能被其所在的源文件中的函数调用, 称此函数为内部函数, 内部函数的储存类型为 static</li>
</ul>
<ul>
<li>用 static 定义的函数又称为静态函数, 该函数只能被 file.c 中的 main 函数调用, 其它程序文件是不能调用的</li>
</ul>
<h4>内部函数的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">static</span> 类型标识符 函数名 ( 形式参数表 )<br></code></pre></td></tr></table></figure>
<br>

<h2 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数"></a>外部函数</h2><ul>
<li>若将函数的储存类型定义为 extern 型, 则此函数能被其它源文件的函数调用, 称此函数为外部函数</li>
</ul>
<h4>外部函数的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">extern</span> 类型标识符 函数名 ( 形式参数表 )<br></code></pre></td></tr></table></figure>
<br>

<h1 id="编译预处理"><a href="#编译预处理" class="headerlink" title="编译预处理"></a>编译预处理</h1><ul>
<li>在前面各章中已多次使用过以 “ # “ 开头的预处理命令, 如文件包含命令 #include, 宏定义命令 #define 等, 在源程序中这些命令都放在函数之外, 而且一般都放在源文件的前面,  在源程序进行编译时的第一遍扫描, 首先对这些以 “ # “ 开头的命令进行预先处理, 称为编译预处理, 处理完毕后自动进入对源程序的编译</li>
</ul>
<ul>
<li>在 C 语言程序中使用预处理功能, 可以改善程序的设计环境, 提高程序的通用性, 可读性, 可修改性, 可调试性, 可移植性和方便性, C语中的预处理命令有宏定义, 文件包含和条件编译三类, 在此重点介绍宏定义和文件包含两类预处理命令</li>
</ul>
<h2 id="不带参数的宏定义"><a href="#不带参数的宏定义" class="headerlink" title="不带参数的宏定义"></a>不带参数的宏定义</h2><ul>
<li>宏定义是指用一个标识符 ( 名字 )来代替一个文本串</li>
</ul>
<h4>不带参数的宏定义的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> 标识符 文本串 <span class="hljs-comment">// 标识符称为 宏名</span></span><br></code></pre></td></tr></table></figure>
<br>


<ul>
<li>作用: 将宏名的值定义为指定的文本串, 即在本程序后面的命令行中, 凡出现宏名的地方, 在预处理时都用指定的文本串替换, 在预处理时将宏名替换成指定的文本串的过程称为 “宏展开”, 这里#define就是宏定义命令</li>
</ul>
<ul>
<li><p><strong>说明</strong></p>
<ol>
<li><p>宏名为了与变量名区别, 一般用大写字母来表示</p>
</li>
<li><p>宏定义是用宏名代替一个文本串, 文本串无论是数字符还是字母字符都只作简单的替换, 不作正确性检查</p>
</li>
<li><p>宏定义不是 C 语句, 不必在行尾加分号, 如果加分号, 预处理时会将分号当作字符一同代入</p>
</li>
<li><p>#define命令出现在程序中函数的外面, <font color="#FA8072">宏名的有效范围是: 从定义位置开始到本文件结束</font>通常 #define 命令写在文件的开头</p>
</li>
<li><p>可以用 #undef 命令终止宏定义的作用域</p>
</li>
<li><p>在宏定义时, 可以引用已定义的宏名 </p>
</li>
<li><p>程序中用双引号括起来的字符串内的字符, 即使与宏名相同, 也不进行替换</p>
</li>
<li><p>宏名与变量名的含义不同, 只做字符替换, 不分配存储单元, 因此其值也不能改变</p>
</li>
</ol>
</li>
</ul>
<h2 id="带参数的宏定义"><a href="#带参数的宏定义" class="headerlink" title="带参数的宏定义"></a>带参数的宏定义</h2><ul>
<li>宏定义还可以像函数一样带参数</li>
</ul>
<ul>
<li>带参数的宏在引用时必须给出实参, 在宏替换时由左到右逐个字符进行替换, 遇到与   形参相同的字符时, 用实参替换, 直到文本串中的所有字符被替换完</li>
</ul>
<h4>带参数的宏定义的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> 宏名 ( 参数表 ) 文本串</span><br></code></pre></td></tr></table></figure>
<br>

<ul>
<li>作用: 定义一个带参数的宏</li>
</ul>
<ul>
<li><p><strong>说明</strong></p>
<ul>
<li>宏名与括号之间不能有空格</li>
</ul>
<ul>
<li>宏调用时, 实参的个数必须与形参的个数相同</li>
</ul>
<ul>
<li>带参数的宏替换, 也只是将文本串中的形参字符用实参替换, 不做语法检查</li>
</ul>
<ul>
<li>规范的宏替换格式可以减少不必要的错误发生, 对于宏定义不仅应在参数两侧加括号, 也应在整个字符串外加括号</li>
</ul>
</li>
</ul>
<ul>
<li><p>宏调用和函数调用有相似之处, 但二者有本质的不同</p>
<ul>
<li>在函数调用中, 实参和形参都要定义类型, 而且类型要一致, 而宏调用时, 参数不存在类型问题, 宏名无类型, 它的参数也无类型, 只是一个符号代表, 展开时代入指定的字符即可</li>
</ul>
<ul>
<li>使用宏次数多时, 宏展开后的源程序就会变长, 因为每展开一次都会使程序增长, 而函数调用不使源程序增长</li>
</ul>
<ul>
<li>宏替换不占运行时间, 而函数调用则占运行时间( 给形参分配存储单元, 保留现场, 值传送, 返回 ) 利用好宏可以使程序简化</li>
</ul>
</li>
</ul>
<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ul>
<li>所谓包含, 是指在一个源文件中, 用 #include 命令将另一个源文件的全部内容包含进来, 即装入 #include 命令所处的位置上, 使其成为一个程序</li>
</ul>
<ul>
<li><p><strong>说明</strong></p>
<ul>
<li>包含命令中的文件名可以用双引号括起来, 也可以用尖括号括起来</li>
</ul>
</li>
</ul>
<pre><code>* 一个 #include 命令只能指定一个被包含文件, 若有多个文件要包含, 则需用多个  #include 命令

+ 文件包含允许嵌套, 即在一个被包含的文件中可以包含另一个文件</code></pre>
<ul>
<li><p><strong>二者的区别</strong></p>
<ul>
<li>用尖括号时, 系统直接到存放 C 库函数头文件所在的目录中查找要包含的文件, 这种方式称为标准方式</li>
</ul>
<ul>
<li>用双引号时, 系统先在用户当前目录中寻找要包含的文件, 若找不到, 再按标准方式查找</li>
</ul>
<ul>
<li>一般情况下, 如果要包含库函数, 用尖括号可节省时间, 如被包含文件是用户自己编写的文件, 则用双引号</li>
</ul>
</li>
</ul>
<br>]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 循环结构程序设计</title>
    <url>/C-for-while-do-while-break-continue.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h1><h2 id="for-语句的一般形式和执行过程"><a href="#for-语句的一般形式和执行过程" class="headerlink" title="for 语句的一般形式和执行过程"></a>for 语句的一般形式和执行过程</h2><h4>for 语句一般形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> ( 表达式 <span class="hljs-number">1</span>;  表达式 <span class="hljs-number">2</span>;  表达式 <span class="hljs-number">3</span>; )<br>    语句;<br></code></pre></td></tr></table></figure>
<br>

<h4>for 循环流程图</h4>

<br>

<div class="mermaid">
    graph TB

<pre><code>A([&quot; 求解表达式 1 &quot;])--&gt;K((&quot; &quot;))
E[&quot; 求解表达式 3 &quot;]--&gt;K((&quot; &quot;))
K((&quot; &quot;))--&gt;B&#123;&quot; 表达式 2 &quot;&#125;
B&#123;&quot; 表达式 2 &quot;&#125;--真--&gt;D[&quot; 语句 &quot;]
D[&quot; 语句 &quot;]--&gt;E[&quot; 求解表达式 3 &quot;]
B&#123;&quot; 表达式 2 &quot;&#125;--假--&gt;F[&quot; for 语句的下一语句 &quot;]
F[&quot; for 语句的下一语句 &quot;]----&gt;Y[&quot; 跳出循环 &quot;]</code></pre>
</div>

<br>

<h1 id="while-语句一般形式和执行过程"><a href="#while-语句一般形式和执行过程" class="headerlink" title="while 语句一般形式和执行过程"></a>while 语句一般形式和执行过程</h1><h4>while 语句一般形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">while</span> ( 表达式 ) 语句;  <span class="hljs-comment">// 其中表达式是循环条件, 语句为循环体</span><br></code></pre></td></tr></table></figure>
<br>

<h4>while 循环流程图</h4>

<br>

<div class="mermaid">
    graph TB

<pre><code>A([&quot; 开始 &quot;])--&gt;B&#123;&quot; 表达式 &quot;&#125;
B&#123;&quot; 表达式 &quot;&#125;--非0/真--&gt;C[&quot; 语句 &quot;]
C[&quot; 语句 &quot;]--&gt;B&#123;&quot; 表达式 &quot;&#125;
B&#123;&quot; 表达式 &quot;&#125;--0/假--&gt;Y[&quot; 跳出循环 &quot;]</code></pre>
</div>

<br>

<h2 id="使用-while-语句应注意的问题"><a href="#使用-while-语句应注意的问题" class="headerlink" title="使用 while 语句应注意的问题"></a>使用 while 语句应注意的问题</h2><ol>
<li><p>while 语句中表达式一般是关系表达式或逻辑表达式, 只要表达式的值为真(非0), 即可继续循环</p>
</li>
<li><p>循环体如果包括一个以上的语句, 则必须用 {} 括起来, 组成复合语句, 否则循环时只执行循环体的第一条语句</p>
</li>
<li><p>应注意循环条件的选择以避免死循环的产生</p>
</li>
<li><p>允许 while 语句的循环体又是 while 语句, 从而形成双重循环</p>
</li>
</ol>
<h1 id="do-while-语句的一般形式和执行过程"><a href="#do-while-语句的一般形式和执行过程" class="headerlink" title="do-while 语句的一般形式和执行过程"></a>do-while 语句的一般形式和执行过程</h1><ul>
<li>执行过程: 先执行循环体语句一次, 再判断表达式的值, 若为真 ( 非0 ) 则继续循环, 否则如果表达式的值为假 ( 值为0 ), 则结束循环</li>
</ul>
<ul>
<li>与 while 的区别:  do-while 是先执行循环条后再判断条件, 因此 do-while 至少要执行一次循环体, 而 while 是先判断条件后执行循环体, 如果条件不满足, 则一次循环体语句也不执行</li>
</ul>
<h4>do-while 语句一般形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">do</span> <br>    语句;<br><span class="hljs-keyword">while</span> ( 表达式 );<br></code></pre></td></tr></table></figure>
<br>

<h4>while 循环流程图</h4>

<br>

<div class="mermaid">
    graph TB

<pre><code>A([&quot; 开始 &quot;])--&gt;B&#123;&quot; 表达式 &quot;&#125;
B&#123;&quot; 表达式 &quot;&#125;--非0/真--&gt;C[&quot; 语句 &quot;]
C[&quot; 语句 &quot;]--&gt;B&#123;&quot; 表达式 &quot;&#125;
B&#123;&quot; 表达式 &quot;&#125;--0/假--&gt;Y[&quot; 跳出循环 &quot;]</code></pre>
</div>

<br>

<h2 id="使用-do-while-语句应注意的问题"><a href="#使用-do-while-语句应注意的问题" class="headerlink" title="使用 do-while 语句应注意的问题"></a>使用 do-while 语句应注意的问题</h2><ol>
<li><p>在 if 语句, while 语句中, 表达式后面都不能加分号, 而在 do-while 语句的表达式后面则必须加分号</p>
</li>
<li><p>do-while 语句也可以组成多重循环, 而且也可以与 while 语句相互嵌套</p>
</li>
<li><p>当 do 和 while 之间的循环体由多个语句组成时, 也必须用 {} 括起来组成一个复合语句</p>
</li>
<li><p>do-while 语句和 while 语句相互替换时, 要注意修改循环控制条件</p>
</li>
<li><p>for 语句, while 语句, do-while 语句可以相互嵌套, 构成多重循环</p>
</li>
</ol>
<h2 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h2><ul>
<li>概念: 在 for 语句, while 语句, do-while 语句的循环体中还可以是任何一个完整的循环语句, 形成循环的嵌套, 称为多重循环 </li>
</ul>
<h1 id="break-语句和-continue-语句"><a href="#break-语句和-continue-语句" class="headerlink" title="break 语句和 continue 语句"></a>break 语句和 continue 语句</h1><h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><ul>
<li>作用范围: break 语句只能用在 switch 语句或循环语句中, 起作用是跳出 switch 语句或跳出本层循环, 转去执行后面的程序, 由于 break 语句的转移方向是明确的, 所以不需要语句标号与之配合</li>
</ul>
<h4>break 语句一般形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure>
<br>

<h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><ul>
<li>其意义是: 结束本次循环, 即不再执行循环条中 continue 语句之后的语句, 转入下一次循环条件的判断与执行</li>
</ul>
<ul>
<li>注意: 本语句只结束本次的循环, 并不跳出循环体, 而执行 break 语句则跳出循环</li>
</ul>
<h4>continue 语句一般形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">continue</span>;<br></code></pre></td></tr></table></figure>
<br>


]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 指针</title>
    <url>/C-Pointer.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="地址-指针和变量"><a href="#地址-指针和变量" class="headerlink" title="地址 指针和变量"></a>地址 指针和变量</h1><h2 id="地址和指针的基本概念"><a href="#地址和指针的基本概念" class="headerlink" title="地址和指针的基本概念"></a>地址和指针的基本概念</h2><ul>
<li><p>在程序中定义每一个变量, 当编译时系统就会根据程序中定义的变量的类型, 分配定字节数的存储空间内存中的每一个字节都有一个编号,也就是地址,它相当于旅馆中的房间号, 在地址所标志的单元存储数据, 这相当于旅馆中的房间住一个旅客一样</p>
<ul>
<li>变量: 命名的内存空间, 变量在内存中占有一定空间,用于存放各种类型的数据</li>
</ul>
<ul>
<li>变量名: 变量名是给内存空间取的一个容易记忆的名字</li>
</ul>
</li>
</ul>
<pre><code>* 变量的地址: 变量所使用的内存空间的地址

+ 变量值: 在变量的地址所对应的内存空间中存放的数值即为变量的值或变量的内容, &amp;符号为取地址符号, 可以取任何变量的地址</code></pre>
<br>

<p><strong>指针通常指向常量</strong></p>
<h3 id="变量的地址"><a href="#变量的地址" class="headerlink" title="变量的地址"></a>变量的地址</h3><ul>
<li><p>概念: 内存变量简称变量, 在C语言中, 每定义一个变量, 系统就会给变量分配一块内存, 而内存是有地址的, 如果把计算机的内存区域比喻成大宾馆, 每块内存的地址就像房间的编号</p>
<ul>
<li>C 语言采用运算符 &amp; 来获取变的地址</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>注意</strong></p>
<ul>
<li>每次取地址不同的原因: 程序每次运行的时候, 向系统申请个内存, 系统每次随机分配个内存</li>
</ul>
<ul>
<li>在printf函数中, 输入内存地址的格式控制符是 %p , 地址采用十六进制的数字显示 </li>
</ul>
</li>
</ul>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><ul>
<li>概念: 指针是一种特别变量, 全称是指针变量, 专用于存放其它变量在内存中的地址编号, 指针在使用之前要先声明</li>
</ul>
<h4>指针的声明</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">存储类型 数据类型 *指针变量名 [ = 初始地址值 ];<br><span class="hljs-comment">// 存储类型: 主要有 auto ( 自动 ) , register ( 寄存器 ) , staitic ( 静态 ) 和 extern ( 外部 ) 这四种 可省略</span><br><br><span class="hljs-comment">// 数据类型: 是int, char, float 等基本类型, 也可是数组等构造类型</span><br><br><span class="hljs-comment">// * 星号表示指针</span><br></code></pre></td></tr></table></figure>
<!-- ~~~ C
datatype *varname
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs -->"><br>&lt;br&gt;<br><br>+ 说明<br>    <br>    * 指针变量是用来存放变量的地址的<br><br>    + 指针变量前面的 * 表示该变量为指针变量<br><br>    * 一个指针变量只能指向同一个类型的变量<br><br>    + 指针变量存放地址值, 在16位系统环境下, 用两个字节表示一个地址, 所以指变量无论什么类型,其本身在内存中占用的空间是两个字节<br><br><br># 对指针的赋值<br><br>- 地址是什么类型, 指针就是什么类型 一一对应<br><br>+ 地址跟指针的关系, 地址是实实在在的编号, 指针是用存放这个编号的, &lt;font color&#x3D;&quot;#DC143C&quot;&gt;指针是用来存放地址的&lt;&#x2F;font&gt;<br><br><br># 指针的应用场景<br><br>* 使用指针的好处: 减少内存开销<br><br>+ 函数的参数<br><br>* 函数的返回值<br><br># 空指针<br><br>+ 概念: 没有赋值的指针不了 ( 没有指向内存的变量地址 ) , 对空指针操作会造成程序的 Core dump<br><br># 野指针<br><br>* 概念: 指针指向内存已释放, 但指针的值不会被清零, 对野指针操作的结果不可预测<br><br>+ 解决方法: 代码规范化<br><br># 数组的地址<br><br>* 概念: 在 C 语言中, 数组占用的内存空间是连续的, 数组名是数组元素的首地址, 也是数组的地址<br><br>+ C 语言数组名是数组的首地址也称为指针常量<br><br>&lt;h4&gt;a[i][j]找位置&lt;&#x2F;h4&gt;<br><br>&lt;br&gt;<br><br>~~~ C<br>&#x2F;&#x2F; 5种表达式<br>a[i][j] &#x2F;&#x2F; 以i和j为例子 i是行 j是列<br><br>&amp;a[i][j] <br><br>*(a+i)+j<br><br>&amp;a[0][0]+4*i+j<br><br>a[0]+4*i+j<br>

<br>

<h4>相应的意思说明</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">&amp;a <span class="hljs-comment">// 表示二维数组地址</span><br><br>a <span class="hljs-comment">// 表示首行地址</span><br><br>&amp;a[<span class="hljs-number">0</span>] <span class="hljs-comment">// 表示首行地址</span><br><br>a[<span class="hljs-number">0</span>] <span class="hljs-comment">// 表示首行首元素地址</span><br><br>a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] <span class="hljs-comment">// 表示首行首元素的值</span><br><br>&amp;a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] <span class="hljs-comment">// 表示首行首元素地址</span><br></code></pre></td></tr></table></figure>
<br>

<table>
<thead>
<tr>
<th align="center">二维数组个元素内容的关系</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">a[0]</td>
<td align="center">* (a[0]+0)</td>
<td align="center">* (a[0]+1)</td>
<td align="center">* (a[0]+2)</td>
<td align="center">* (a[0]+3)</td>
</tr>
<tr>
<td align="center">a[1]</td>
<td align="center">* (a[0]+0)</td>
<td align="center">* (a[0]+1)</td>
<td align="center">* (a[0]+2)</td>
<td align="center">* (a[0]+3)</td>
</tr>
<tr>
<td align="center">a[2]</td>
<td align="center">* (a[0]+0)</td>
<td align="center">* (a[0]+1)</td>
<td align="center">* (a[0]+2)</td>
<td align="center">* (a[0]+3)</td>
</tr>
<tr>
<td align="center">a[0]</td>
<td align="center">* (*(a+0)+0)</td>
<td align="center">* (*(a+0)+1)</td>
<td align="center">* (*(a+0)+2)</td>
<td align="center">* (*(a+0)+3)</td>
</tr>
<tr>
<td align="center">a[1]</td>
<td align="center">* (*(a+1)+0)</td>
<td align="center">* (*(a+1)+1)</td>
<td align="center">* (*(a+1)+2)</td>
<td align="center">* (*(a+1)+3)</td>
</tr>
<tr>
<td align="center">a[2]</td>
<td align="center">* (*(a+2)+0)</td>
<td align="center">* (*(a+2)+1)</td>
<td align="center">* (*(a+2)+2)</td>
<td align="center">* (*(a+2)+3)</td>
</tr>
</tbody></table>
<br>

<h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><ul>
<li>C程序的每一个函数都有一个入口地址, 函数指针是指向函数入口地址的指针变量, 有了指向函数的指针变量后可以用函数指针变量调用函数, 就像用指针变量操作其他类型变量一样</li>
</ul>
<ul>
<li>函数指针有两个用途: 调用函数和做函数的参数</li>
</ul>
<br>]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 数据类型 运算符 表达式</title>
    <url>/C-type-operator-operator.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="C语-数据类型"><a href="#C语-数据类型" class="headerlink" title="C语 数据类型"></a>C语 数据类型</h1><ol>
<li><p>基本数据类型: 整型 实型(又称浮点型) 字符型 三种</p>
</li>
<li><p>构造类型: 数组类型 结构体类型 检举类型 联合类型</p>
</li>
<li><p>指针类型: 指针是一种特殊的, 同时又是具有重要作用的数据类型, 其值用来表示某个变量在内存中的地址</p>
</li>
<li><p>空类型: 空类型 void用来声明函数的返回值类型为空(既不需要函数的返回值)</p>
</li>
</ol>
<div class="mermaid">
    graph LR
    A[" 数据类型 "]-->B[" 基本类型 "] 
    B[" 基本类型 "]-->U[" 整型 "]
    B[" 基本类型 "]-->D[" 字符型 "]
    B[" 基本类型 "]-->E[" 实型(浮点型) "]
    A[" 数据类型 "]-->F[" 构造类型 "] 
    F[" 构造类型 "]-->G[" 数组类型 "]
    F[" 构造类型 "]-->H[" 结构体类型 "]
    F[" 构造类型 "]-->I[" 共有类型 "]
    F[" 构造类型 "]-->J[" 检举类型 "]
    A[" 数据类型 "]-->K[" 指针类型 "] 
    A[" 数据类型 "]-->L[" 空类型 "] 
</div>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<h3 id="整型有-基本整型-短整型-长整型-无符号整型-无符号短整型-无符号长整型"><a href="#整型有-基本整型-短整型-长整型-无符号整型-无符号短整型-无符号长整型" class="headerlink" title="整型有 基本整型 短整型 长整型 无符号整型 无符号短整型 无符号长整型"></a>整型有 基本整型 短整型 长整型 无符号整型 无符号短整型 无符号长整型</h3><h3 id="实型-又称浮点型-有-单精度实型-双精度实型"><a href="#实型-又称浮点型-有-单精度实型-双精度实型" class="headerlink" title="实型(又称浮点型)有 单精度实型 双精度实型"></a>实型(又称浮点型)有 单精度实型 双精度实型</h3><br>

<table>
<thead>
<tr>
<th align="center">类型关键字</th>
<th align="center">长度/字节</th>
<th align="center">取值范围</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int</td>
<td align="center">2</td>
<td align="center">-32 768~32 767</td>
<td align="center">有符号的基本整型</td>
</tr>
<tr>
<td align="center">unsigned</td>
<td align="center">2</td>
<td align="center">0~65 535</td>
<td align="center">无符号的基本整型</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">2</td>
<td align="center">-32 768~32768</td>
<td align="center">有符号短整型</td>
</tr>
<tr>
<td align="center">unsigned short</td>
<td align="center">2</td>
<td align="center">0~65 535</td>
<td align="center">无符号短整型</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">4</td>
<td align="center">-2 147 383 648~2 147 383 648</td>
<td align="center">有符号长整型</td>
</tr>
<tr>
<td align="center">unsigned long</td>
<td align="center">4</td>
<td align="center">0~4 294 967 295</td>
<td align="center">无符号长整型</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">4</td>
<td align="center">-3.4×10³⁸~3.4×10³⁸</td>
<td align="center">单精度实型</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8</td>
<td align="center">-1.7×10³⁰⁸~1.7×10³⁰⁸</td>
<td align="center">双精度实型</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">1</td>
<td align="center">0~255</td>
<td align="center">字符型</td>
</tr>
</tbody></table>
<br>

<h1 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h1><h4>整型常量</h4>

<ul>
<li><p>十进制整数: 由数字1<del>9开头, 其余各位由0</del>9组成</p>
</li>
<li><p>八进制整数: 由数字0开头, 其余各位由0~7组成, 在书写时要加前缀 0 (零)</p>
</li>
<li><p>十六进制整数: 由数字 0x 或者 0X 开头, 其余各位由0<del>9与字母a</del>f (0X 开头为A~F)组成, 在书写时要加前缀 0x 或者 0X</p>
</li>
</ul>
<h4>实型常量</h4>

<ul>
<li><p>十进制整数: 由数字和小数点组成 (注意必须加小数点)</p>
</li>
<li><p>指数型势: 用带指数记数法来表示 123E2 或 123e2 都代表 123x10²</p>
</li>
</ul>
<h4>字符型常量</h4>

<ul>
<li><p>字符常量: 一对单引号括起来的单个字符 包括字符和字符之间的空格</p>
</li>
<li><p>字符串常量: 一对双引号括起来的字符序列 包括字符(字符串)和字符(字符串)之间的空格</p>
</li>
<li><p>字符串中字符的格式代表字符串的长度 长度为0的字符串(即一个字符都没有的字符串)称作: 空串</p>
</li>
</ul>
<p><strong>C语言规定: 在储存字符串常量时, 由系统在字符串末尾自动添加一个 \0 作为字符串的结束标志</strong></p>
<!-- <br>

| s | d | q | \0 |

| :----: | :----: | :----: | :----: | -->

<br>

<table>
   <tr align="center">
     <th>s</th>
     <th>d</th>
     <th>q</th>
     <th>\0</th>
   </tr>
</table> 

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li><p>概念: 在程序运行过程中其值可以改变的量称为变量 变量要有变量名, 在内存中占有一定的存储单元, 储存单元存放的是该变量的值 所以每个变量要有 变量名 和 变量值 两要素</p>
</li>
<li><p>变量名: 每个变量都必须有一个变量名, 变量命名遵守标识符命名规则, 变量名应取见名知意</p>
</li>
<li><p>变量值: 在程序运行过程中, 变量值储存在内存中, 不同类型的变量占用的内存单元(字节)数不同 在程序中, 通过变量名来引用变量的值</p>
</li>
<li><p>总体概况: 变量名实际上是一个符合的地址, 在对程序编译连接时由系统给每一个变量名分配一个内存地址 在程序中从变量中取值, 实际上是通过变量名找到相应的内存地址, 从其储存单元中读取数据</p>
</li>
</ul>
<h3 id="整体变量"><a href="#整体变量" class="headerlink" title="整体变量"></a>整体变量</h3><h5>整体变量的分类: </h5>

<ul>
<li><p>整型变量分四类:</p>
<ul>
<li><p>基本整型(int)</p>
</li>
<li><p>短整型(short[int])</p>
</li>
<li><p>长整型(long[int])</p>
</li>
<li><p>无符号整型</p>
<ul>
<li><p>无符号整型(unsigned[int]) 只能用来储存无符号整数</p>
</li>
<li><p>无符号短整型(unsigned short) 只能用来储存无符号整数</p>
</li>
<li><p>无符号长整型(unsigned long ) 只能用来储存无符号整数</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5>整体变量在内存中占用的内存字节数和值域: </h5>

<ul>
<li><p>16位操作系统 int占2个字节</p>
</li>
<li><p>32位操作系统 int占4个字节</p>
</li>
<li><p>long型 ≥ int型 ≥ short型 </p>
</li>
</ul>
<h5>整形变量的定义</h5>

<ul>
<li>先定义, 后使用</li>
</ul>
<h3 id="实型-浮点型-变量"><a href="#实型-浮点型-变量" class="headerlink" title="实型(浮点型)变量"></a>实型(浮点型)变量</h3><ul>
<li><p>单精度型: 类型关键字为float, 一般占4个字节(32位), 携带7个有效数字</p>
</li>
<li><p>双精度型: 类型关键字为double, 一般占8个字节(32位), 提供15个有效数字</p>
</li>
</ul>
<h3 id="字符变量"><a href="#字符变量" class="headerlink" title="字符变量"></a>字符变量</h3><ul>
<li>字符型: 类型关键字为char, 一般占1个字节内存单元</li>
</ul>
<h1 id="变量赋初值"><a href="#变量赋初值" class="headerlink" title="变量赋初值"></a>变量赋初值</h1><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">变量类型 变量名 = 值;<br></code></pre></td></tr></table></figure>
<h1 id="各类数值型数据间混合运算"><a href="#各类数值型数据间混合运算" class="headerlink" title="各类数值型数据间混合运算"></a>各类数值型数据间混合运算</h1><div class="mermaid">
graph TB
    A[" 低 "]-->B[" 高 "]
    C[" float "]-->D[" double "]
    E[" long "]-->D[" double "]
    F[" unsigned "]-->E[" long "]
    G[" int "]-->F[" unsigned "]
    H[" char "]-->G[" int "]
    I[" short "]-->G[" int "]
</div>

<br>

<br>

<br>

<br>

<br>


<h5>保值转换</h5>

<ul>
<li>若运算符两端操作类型不一致, 在运算前应先将类型等级较低的数据类型转换成等级较高的, 这种不同级别的转换叫保值转换</li>
</ul>
<h1 id="C语言的运算符和表达式"><a href="#C语言的运算符和表达式" class="headerlink" title="C语言的运算符和表达式"></a>C语言的运算符和表达式</h1><h5>掌握方法:</h5>

<ul>
<li><p>运算符号</p>
</li>
<li><p>运算规则, 即所进行的操作</p>
</li>
<li><p>运算的优先级别</p>
</li>
<li><p>运算顺序</p>
</li>
<li><p>运算对象</p>
</li>
<li><p>运算结果</p>
</li>
</ul>
<h3 id="1-基本算数运算符"><a href="#1-基本算数运算符" class="headerlink" title="1.基本算数运算符"></a>1.基本算数运算符</h3><ul>
<li><p>(加法) + </p>
</li>
<li><p>(减法/取负) —</p>
</li>
<li><p>(乘法) *</p>
</li>
<li><p>(除法) /</p>
<ul>
<li>除法运算商为整数</li>
</ul>
</li>
<li><p>(求余) %</p>
<ul>
<li>要求: 运算符两侧的操作数均为整数</li>
</ul>
</li>
</ul>
<h3 id="2-表达式和算术表达式"><a href="#2-表达式和算术表达式" class="headerlink" title="2.表达式和算术表达式"></a>2.表达式和算术表达式</h3><ul>
<li>表达式的概念: 用运算符和括号将运算对象(常量, 变量和函数等)连起来的, 符合C语言语法规则都式子, 称为 表达式</li>
</ul>
<ul>
<li>简单表达式的概念: 将单个常量, 变量或函数构成的表达式, 称为 简单表达式</li>
</ul>
<ul>
<li>复杂表达式的概念: 除简单表达式的其他表达式称为 复杂表达式</li>
</ul>
<h5>表达式求值规则:</h5>

<ul>
<li><p>按运算符优先级高低顺序执行</p>
</li>
<li><p>算数运算符的结合方向: 从左至右</p>
</li>
</ul>
<h3 id="3-强制类型转换"><a href="#3-强制类型转换" class="headerlink" title="3.强制类型转换"></a>3.强制类型转换</h3><h5>格式:</h5>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">(&lt;要转换的数据类型名&gt;) (&lt;被转换的表达式&gt;);<br></code></pre></td></tr></table></figure>
<h3 id="4-自增-自减-–"><a href="#4-自增-自减-–" class="headerlink" title="4.自增(++) 自减(–)"></a>4.自增(++) 自减(–)</h3><ul>
<li><p><strong>前置运算</strong> 运算符放在变量之前</p>
<ul>
<li>++变量 –变量</li>
</ul>
</li>
<li><p><strong>后置运算</strong> 运算符放在变量之后</p>
<ul>
<li>变量++ 变量</li>
</ul>
</li>
</ul>
<h3 id="5-关系运算符和关系表达式"><a href="#5-关系运算符和关系表达式" class="headerlink" title="5.关系运算符和关系表达式"></a>5.关系运算符和关系表达式</h3><ul>
<li>优先级由高到低: 关系运算符( &lt; &lt;= &gt; &gt;= )  大于 赋值运算符( == != )</li>
</ul>
<h3 id="6-逻辑运算符和逻辑表达式"><a href="#6-逻辑运算符和逻辑表达式" class="headerlink" title="6.逻辑运算符和逻辑表达式"></a>6.逻辑运算符和逻辑表达式</h3><ul>
<li><p>&amp;&amp;: 逻辑与(相当于 “并且”)</p>
<ul>
<li>当且仅当两个运算符的值都为<font color="#DC143C">真</font>时才为<font color="#DC143C">真</font>, 否则为<font color="#1790ff">假</font></li>
</ul>
</li>
<li><p>||: 逻辑或(相当于 “或者”)</p>
<ul>
<li>当且仅当两个运算符的值都为<font color="#1790ff">假</font>时才为<font color="#1790ff">假</font>, 否则为<font color="#DC143C">真</font></li>
</ul>
</li>
<li><p>!: 逻辑非(相当于 “否定”)</p>
<ul>
<li><p><strong>取反</strong></p>
<ul>
<li>当运算符的值为<font color="#1790ff">假</font>时<font color="#DC143C">真</font></li>
</ul>
<ul>
<li>当运算符的值为<font color="#DC143C">真</font>时<font color="#1790ff">假</font></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="7-赋值运算符和赋值表达式"><a href="#7-赋值运算符和赋值表达式" class="headerlink" title="7.赋值运算符和赋值表达式"></a>7.赋值运算符和赋值表达式</h3><h5>1.赋值运算:</h5>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">&lt;变量&gt; = &lt;赋值表达式&gt;;<br></code></pre></td></tr></table></figure>
<h5>2.复合赋值运算:</h5>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">&lt;变量&gt; &lt;双目运算符&gt; = &lt;表达式&gt;;<br><span class="hljs-comment">// 它等价于</span><br>&lt;变量&gt; = &lt;变量&gt;双目运算符(表达式);<br></code></pre></td></tr></table></figure>
<h5>3.赋值运算:</h5>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">&lt;变量&gt; = [&lt;复合赋值运算符&gt;] = &lt;表达式&gt;;<br></code></pre></td></tr></table></figure>

<h3 id="8-条件运算符和条件表达式"><a href="#8-条件运算符和条件表达式" class="headerlink" title="8.条件运算符和条件表达式"></a>8.条件运算符和条件表达式</h3><h5>一般格式:</h5>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">&lt;表达式<span class="hljs-number">1</span>&gt; ? &lt;表达式<span class="hljs-number">2</span>&gt; : &lt;表达式<span class="hljs-number">3</span>&gt;;<br></code></pre></td></tr></table></figure>
<h5>运算规则:</h5>

<ul>
<li>如果 “表达式1” 的值为非0(即逻辑真), 则运算符结果等于 “表达式2” 的值, 否则运算结果等于 “表达式3” 的值</li>
</ul>
<h5>运算符的优先级别与结合性:</h5>

<ul>
<li>条件运算符的优先级, 高于赋值运算符, 但低于关系运算符和算数运算符, 其结合性为 从右到左” (即右结合性)</li>
</ul>
<h3 id="9-逗号运算符和逗号表达式"><a href="#9-逗号运算符和逗号表达式" class="headerlink" title="9.逗号运算符和逗号表达式"></a>9.逗号运算符和逗号表达式</h3><h5>一般格式:</h5>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">&lt;表达式<span class="hljs-number">1</span>&gt;, &lt;表达式<span class="hljs-number">2</span>&gt;, ..., &lt;表达式n&gt;;<br></code></pre></td></tr></table></figure>
<h5>求解过程: 从左至右, 依次计算各表达式的值, 最后 "表达式n" 的值即为整个逗号表达式的值</h5>

<h5>注意: 并不是任何时候出现逗号运算符都是逗号运算符, 大多情况逗号仅用于分隔符</h5>

<h3 id="10-位逻辑运算"><a href="#10-位逻辑运算" class="headerlink" title="10.位逻辑运算"></a>10.位逻辑运算</h3><h4>按位逻辑运算:</h4>

<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">运算规则</th>
<th align="center">主要用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;</strong></td>
<td align="center">按位与</td>
<td align="center">对应位为1时才为1, 否则为0</td>
<td align="center">将应该数的某(些)位置0, 其余位保留不变</td>
</tr>
<tr>
<td align="center"><strong>∣</strong></td>
<td align="center">按位或</td>
<td align="center">对应位为0时才为0, 否则为1</td>
<td align="center">将应该数的某(些)位置1, 其余位保留不变</td>
</tr>
<tr>
<td align="center"><strong>^</strong></td>
<td align="center">按位异或</td>
<td align="center">对应位相同为0, 不同时为1</td>
<td align="center">使一个数的某(些)位置1, 其余位保留不变</td>
</tr>
<tr>
<td align="center"><strong>~</strong></td>
<td align="center">按位取反</td>
<td align="center">各位翻转, 即1变0, 0变1</td>
<td align="center">间接地构造一个数, 以增强程序的可移植性</td>
</tr>
</tbody></table>
<h4>说明:

<ul>
<li><p>参与运算时, 操作数都必须首先转换成二进制数, 然后再执行相应的按位运算</p>
</li>
<li><p>按位取反运算符的优先级别与其它单目运算符相同, 运算自右向左进行, 双目&amp;运算符的优先级高于 | 运算符,  | 运算符高于 ^ 运算符</p>
</li>
<li><p>位双目运算符的优先级别低于关系运算符, 高于逻辑运算符, 运算自左向右进行</p>
</li>
</ul>
<h3 id="11-位逻辑运算和位运算赋值运算符"><a href="#11-位逻辑运算和位运算赋值运算符" class="headerlink" title="11.位逻辑运算和位运算赋值运算符"></a>11.位逻辑运算和位运算赋值运算符</h3><h4>位移运算符:</h4>

<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">运算规则</th>
<th align="center">说明</th>
<th align="center">实际操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移</td>
<td align="center">a &lt;&lt; b, a左移b位</td>
<td align="center">使操作各位左移, 低位补0, 高位移出舍去</td>
<td align="center">操作数乘以2ⁿ (n位左移的位数)</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移</td>
<td align="center">a &gt;&gt; b, a右移b位</td>
<td align="center">使操作各位右移, 移出低位舍去</td>
<td align="center">操作数除以2ⁿ (n位右移的位数)</td>
</tr>
</tbody></table>
<h4>说明:</h4>

<ul>
<li><p>高位: 对无符号和有符号中的正数</p>
</li>
<li><p>补0: 有符号中的负数, 取决于所使用的系统, 补0的称为”逻辑右移”</p>
</li>
<li><p>补1: 称为 “算数右移”</p>
</li>
<li><p>位移 &lt;&lt;, &gt;&gt;同级, 它们的优先级别较高, 仅次于算术双目运算符, 算数方向从左向右</p>
</li>
</ul>
<p><strong>左移运算符: 可以把一个数的各个二进制位全部左移若干位</strong></p>
<p><strong>右移运算符: 移动到右端低位被舍弃, 对无符号数, 高位补0</strong></p>
<h3 id="12-位运算符赋值运算符"><a href="#12-位运算符赋值运算符" class="headerlink" title="12.位运算符赋值运算符"></a>12.位运算符赋值运算符</h3><ul>
<li>所有位运算赋值运算符符优先级别向同, 与赋值优先级别相同, 运算方向自右向左运算</li>
</ul>
<h4>位运算赋值运算符:</h4>

<table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">名称</th>
<th align="center">运算规则</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;=</strong></td>
<td align="center">位与赋值</td>
<td align="center">a &amp;= b等价于 a = a &amp; b</td>
<td align="center">操作数均为整数</td>
</tr>
<tr>
<td align="center"><strong>∣=</strong></td>
<td align="center">位或赋值</td>
<td align="center">a ∣= b等价于 a = a ∣ b</td>
<td align="center">操作数均为整数</td>
</tr>
<tr>
<td align="center"><strong>^=</strong></td>
<td align="center">按位异与赋值</td>
<td align="center">a ^= b等价于 a = a ^ b</td>
<td align="center">操作数均为整数</td>
</tr>
<tr>
<td align="center"><strong>&lt;&lt;=</strong></td>
<td align="center">位左移赋值</td>
<td align="center">a &lt;&lt;= b等价于 a = a &lt;&lt; b</td>
<td align="center">操作数均为整数</td>
</tr>
<tr>
<td align="center"><strong>&gt;&gt;=</strong></td>
<td align="center">位右移赋值</td>
<td align="center">a &gt;&gt;= b等价于 a = a &gt;&gt; b</td>
<td align="center">操作数均为整数</td>
</tr>
</tbody></table>
<h3 id="运算符的优先级与结合性"><a href="#运算符的优先级与结合性" class="headerlink" title="运算符的优先级与结合性"></a>运算符的优先级与结合性</h3><h4>运算符的优先级与结合性:</h4>

<table>
<thead>
<tr>
<th align="center">优先级</th>
<th align="center">运算符</th>
<th align="center">含义</th>
<th align="center">运输类型</th>
<th align="center">结合性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1 (最高)</td>
<td align="center">()<br>[]<br>-&gt;<br>.</td>
<td align="center">园括号, 函数参数列表<br>数组元素下标<br>指向元素成员<br>结构体成员</td>
<td align="center"></td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">!<br>~<br>++<br>–<br>(类型)<br>*<br>&amp;<br>sizeof</td>
<td align="center">逻辑非<br>按位取反<br>自增 1<br>自减 1<br>求负<br>强制类型转换<br>指针运算符<br>求地址运算符<br>长度运算符</td>
<td align="center">单目运算</td>
<td align="center">自右至左</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">*<br>/<br>%</td>
<td align="center">乘法<br>除法<br>求余运算符</td>
<td align="center">双目运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">+<br>-</td>
<td align="center">加法运算符<br>除法运算符</td>
<td align="center">双目运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">&lt;&lt;<br>&gt;&gt;<br>%</td>
<td align="center">左移运算符<br>右移运算符</td>
<td align="center">位移运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">&lt;<br>&lt;=<br>&gt;<br>&gt;=</td>
<td align="center">小于<br>小于等于<br>大于<br>大于等于</td>
<td align="center">关系运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">==<br>!=<br></td>
<td align="center">等于<br>不等于运算符<br></td>
<td align="center">关系运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">&amp;</td>
<td align="center">按位与</td>
<td align="center">位运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">^</td>
<td align="center">按位异或</td>
<td align="center">位运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">∣</td>
<td align="center">按位或</td>
<td align="center">位运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">&amp;&amp;</td>
<td align="center">按位与</td>
<td align="center">逻辑运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">∣∣</td>
<td align="center">按位或</td>
<td align="center">逻辑运算</td>
<td align="center">自左至右</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">? :</td>
<td align="center">条件运算</td>
<td align="center">三目运算</td>
<td align="center">自右至左</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">=<br>+=<br>-=<br>*=<br>/=<br>%=<br>&gt;&gt;=<br>&lt;&lt;=<br>&amp;=<br>^=<br>!=</td>
<td align="center">赋值<br>运算赋值</td>
<td align="center">双目运算</td>
<td align="center">自右至左</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">,</td>
<td align="center">逗号运算 (顺序求值)</td>
<td align="center">顺序运算</td>
<td align="center">自左至右</td>
</tr>
</tbody></table>
<br></h4>]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 数组</title>
    <url>/C-Array.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><h4>一维数组的定义:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">储存类型 数据类型 数组名 [ 常量表达式 ] = &#123; 初始值 &#125;<br></code></pre></td></tr></table></figure>

<br>


<h4>数组定义格式:</h4>

<ul>
<li>储存类型是任意项, 可以是 auto, static, extern 储存类型, 但没有 register 型</li>
</ul>
<ul>
<li>数据类型可以是 int, float, char</li>
</ul>
<ul>
<li>数据名符号标识符定义, 但不能与其它变量同名</li>
</ul>
<ul>
<li>数组元素的下标是从0开始编号的, 否则会产生数组越界</li>
</ul>
<ul>
<li>常量表达式中可以包含常量和符号, 不能包含变量</li>
</ul>
<br>

<h4>一维数组的赋值例子:</h4>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-class"><span class="hljs-keyword">class</span>[5] =</span> &#123;<span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">88</span>,<span class="hljs-number">77</span>,<span class="hljs-number">66</span>&#125;<span class="hljs-comment">// 全部赋初值</span><br><span class="hljs-type">int</span> <span class="hljs-class"><span class="hljs-keyword">class</span>[5] =</span> &#123;<span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">88</span>&#125;<span class="hljs-comment">// 部分赋初值, 未赋值的元素默认为0</span><br><span class="hljs-type">int</span> <span class="hljs-class"><span class="hljs-keyword">class</span>[ ] =</span> &#123;<span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">88</span>,<span class="hljs-number">77</span>,<span class="hljs-number">66</span>&#125;<span class="hljs-comment">// 元素个数5 省略长度赋初值, 数组的长度(数组的元素个数) 根据赋初值的数决定</span><br><br><span class="hljs-comment">// 初值的个数不能超过长度</span><br></code></pre></td></tr></table></figure>
<br>

<h4>一维数组的储存例子:</h4>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-keyword">define</span> SIZE 5 <span class="hljs-comment">// 定义5个数</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a0,a1,a2,a3,a4;<br>    <span class="hljs-type">int</span> sdq[SIZE]; <span class="hljs-comment">// int是4个字节 5个数相当于 4*5</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(a0)); <span class="hljs-comment">// 输出4个字节</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;总字节数: %d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sdq)); <span class="hljs-comment">// 输出20个字节 int有4字节, 有5个数 4*5=20</span><br><br>    <span class="hljs-comment">// 数组长度 = 总字节数 / sizeof(类型)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;长度: %d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sdq) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">// int = a0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;长度: %d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sdq) / <span class="hljs-keyword">sizeof</span>(a0)); <span class="hljs-comment">// a0 = int</span><br><br>    <span class="hljs-comment">// 总字节数 = sizeof(数组类型) * 数组个数(长度)  </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h3 id="一维数组元素的引用"><a href="#一维数组元素的引用" class="headerlink" title="一维数组元素的引用"></a>一维数组元素的引用</h3><ul>
<li>数组元素的实质为该数组所属数据类型的一个具有下标的变量, 故又称下标变量, 因此, 数组元素与具有相同数据类型的普通变量的引用完全相同</li>
</ul>
<ul>
<li><h1 id="如果数组int-arr-N-则数组的下标为-0-N-1-即最大的下标为数组长度-1"><a href="#如果数组int-arr-N-则数组的下标为-0-N-1-即最大的下标为数组长度-1" class="headerlink" title="如果数组int arr[N]; 则数组的下标为: 0 ~ N-1 即最大的下标为数组长度-1"></a>如果数组int arr[N]; 则数组的下标为: 0 ~ N-1 即最大的下标为数组长度-1</h1></li>
</ul>
<h4>数组元素的引用形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">数组名 [ 下标 ]<br></code></pre></td></tr></table></figure>
<br>

<h3 id="一维数组元素的初始化"><a href="#一维数组元素的初始化" class="headerlink" title="一维数组元素的初始化"></a>一维数组元素的初始化</h3><ul>
<li>注意: [ ]中括号不能省略</li>
</ul>
<ul>
<li>可以对数组全部元素赋值 </li>
</ul>
<ul>
<li>也可以对部分元素赋初值</li>
</ul>
<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">数组类型 数组名 [ 数组元素个数 ] = &#123; 值<span class="hljs-number">1</span>, 值 <span class="hljs-number">2</span>, ..., 值 n &#125;; <br></code></pre></td></tr></table></figure>
<br>

<h4>一维数组的遍历例子:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-keyword">define</span> N 4 <span class="hljs-comment">// 定义4个数</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a[M] = &#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span> &#125;; <span class="hljs-comment">//定义数组长度为3的一维数组</span><br><br>    <span class="hljs-comment">// 定义一个3行4列的二维数组 相当于3个数组长度为4的一维数组</span><br>    <span class="hljs-type">int</span> b[M][N] = &#123;&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> &#125;, &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span> &#125;&#125;;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;M;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><br>

<h4>二维数组的定义:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">储存类型 数据类型 数组名 [ 行 ] [ 列 ];<br></code></pre></td></tr></table></figure>
<br>

<h4>二维数组的储存例子:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-keyword">define</span> M 3 <span class="hljs-comment">// 定义3个数</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> N 4 <span class="hljs-comment">// 定义4个数</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> a[M]; <span class="hljs-comment">// 定义长度为3的一维数组</span><br><br>    <span class="hljs-comment">// 相当于3个数组长度为4的一维数组</span><br>    <span class="hljs-type">int</span> sdq[M][N]; <span class="hljs-comment">// 定义3行4列的二维数组 M行 N列</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;总字节数: %d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(sdq)); <br><br>    <span class="hljs-comment">// 总字节数 = sizeof(数组类型) * 行数 * 列数  </span><br><br>    <span class="hljs-comment">// a[i][j]在数组中的位置的公式:  i * 总列数 * j</span><br>    <span class="hljs-comment">// 例如 a[1][2] 相当于 1 * 4 + 2 = 6</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><br>

<h4>二维数组的初始化:</h4>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 按行全部赋初值</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;&#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span> &#125;,&#123; <span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span> &#125;&#125;;<br><br><span class="hljs-comment">// 按储存顺序全部赋初值</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>,<span class="hljs-number">600</span> &#125;;<br><br><span class="hljs-comment">// 部分赋初值 (按存储顺序) 未赋值的元素均为零</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span> &#125;;<br><br><span class="hljs-comment">// 部分赋初值 (按行)</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;&#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span> &#125;,&#123; <span class="hljs-number">40</span> &#125;&#125;;<br><br><span class="hljs-comment">// 省略行数赋初值</span><br><span class="hljs-type">int</span> a[ ][<span class="hljs-number">3</span>] = &#123;&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;,&#123; <span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;,&#123; <span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span> &#125;&#125;;<br><span class="hljs-type">int</span> a[ ][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span> &#125;;<br></code></pre></td></tr></table></figure>
<br>

<h4>一维数组的遍历例子:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-keyword">define</span> M 3 <span class="hljs-comment">// 定义3个数</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> N 4 <span class="hljs-comment">// 定义4个数</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[M][N] = &#123;&#123; <span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span> &#125;, &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>&#125;, &#123; <span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span> &#125;&#125;&#125;; <span class="hljs-comment">//定义3行4列的二维数组</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;M;i++) <span class="hljs-comment">// 行下标遍历</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;N;j++) <span class="hljs-comment">// 列下标遍历</span><br>        &#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,a[i][j]); <br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
<br>


<h3 id="二维数组元素的引用"><a href="#二维数组元素的引用" class="headerlink" title="二维数组元素的引用"></a>二维数组元素的引用</h3><ul>
<li>不论是一维数组还是二维数组, 都不能对数组进行整体引用, 只能对具体的元素进行访问</li>
</ul>
<ul>
<li>在数组元素引用要特别注意下标越界, 因为系统不检查下标越界问题, 所以程序设计者要特别注意</li>
</ul>
<h4>数组元素的引用形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">数组名 [ 下标 <span class="hljs-number">1</span> ] [ 下标 <span class="hljs-number">2</span> ]<br></code></pre></td></tr></table></figure>
<br>

<h3 id="二维数组元素的初始化"><a href="#二维数组元素的初始化" class="headerlink" title="二维数组元素的初始化"></a>二维数组元素的初始化</h3><ul>
<li>对数组全部元素赋值, 这时允许二维数组定义中缺省行下标, 但不能缺省列下标</li>
</ul>
<ul>
<li>也可以对部分元素赋初值</li>
</ul>
<h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><h2 id="字符数组的定义"><a href="#字符数组的定义" class="headerlink" title="字符数组的定义"></a>字符数组的定义</h2><h4>一维数组的定义形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">储存类型 <span class="hljs-type">char</span> 数组名 [ 常量表达式 ] = &#123; 初始值 &#125;;<br></code></pre></td></tr></table></figure>
<br>

<h4>二维数组的定义形式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">储存类型 <span class="hljs-type">char</span> 数组名 [ 常量表达式 e1 ] [ 常量表达式 e2 ] = &#123; 初始值 &#125;;<br></code></pre></td></tr></table></figure>
<br>

<h3 id="字符数组元素的初始化"><a href="#字符数组元素的初始化" class="headerlink" title="字符数组元素的初始化"></a>字符数组元素的初始化</h3><ul>
<li>定义数组同时又可以缺省数组定义的长度, 对于二维数组, 可以缺省行下标, 但不能省列下标</li>
</ul>
<ul>
<li>可以用字符串常量初始化数组: 该初始化法自动在末尾一个字符后加 ‘ \0 ‘作为结束符, 用字符串常量方式赋值比用字符常量赋值方式每行要多占一个字节</li>
</ul>
<ul>
<li>在初始化中, 如果提供的字符个数多余数组元素的个数, 则作为语法错误处理, 如果字符个数小于元素个数, 则多余的数组元素自动赋空格字符</li>
</ul>
<h1 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h1><h3 id="字符串输出函数-puts"><a href="#字符串输出函数-puts" class="headerlink" title="字符串输出函数 puts"></a>字符串输出函数 puts</h3><ul>
<li>功能: 将一个字符串 ( 以 ‘ \0 ‘ 结束的字符序列 ) 输出到终端 用 puts 函数输出的字符串中可以包含转义字符</li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">puts</span> (字符串数组名);<br></code></pre></td></tr></table></figure>
<br>



<h3 id="字符串输入函数-gets"><a href="#字符串输入函数-gets" class="headerlink" title="字符串输入函数 gets"></a>字符串输入函数 gets</h3><ul>
<li>功能: 从键盘输入一个字符串到字符数组, 并且得到一个函数值, 该函数数值是字符数组的起始地址 </li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">gets (字符串数组名);<br></code></pre></td></tr></table></figure>
<br>

<h3 id="字符串连接函数-strcat"><a href="#字符串连接函数-strcat" class="headerlink" title="字符串连接函数 strcat"></a>字符串连接函数 strcat</h3><ul>
<li>功能: 把字符数组 2 中的字符串接到字符数组 1中的字符串后面, 结果放在字符数组 1 中, 并取消字符数组 1 中的 ‘ \0 ‘, 函数调用后得到的返回值为字符数组 1 的首地址 </li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">strcat</span> ( 字符数组 <span class="hljs-number">1</span>, 字符数组 <span class="hljs-number">2</span> );<br></code></pre></td></tr></table></figure>
<br>

<h3 id="字符串复制函数-strcpy"><a href="#字符串复制函数-strcpy" class="headerlink" title="字符串复制函数 strcpy"></a>字符串复制函数 strcpy</h3><ul>
<li><p>功能: 把字符数组 2 复制到字符数组 1 中去, 串结束符 ‘ \0 ‘ 也一同复制, 字符数组 2 可以为字符串常量, 使用时要注意</p>
<ol>
<li><p>字符数组 1 必须定义得足够大, 以便能存放被复制的字符串, 字符数组 2 的长度</p>
</li>
<li><p>“ 字符数组 1 “ 必须写成数组名形式, 不能为字符串常量</p>
</li>
<li><p>不能用赋值语句将一个字符串常量或字符数组直接赋给一个字符数组 </p>
</li>
</ol>
</li>
</ul>
<ul>
<li>使用时, 字符数组 1 必须足够大, 以便容纳连接后的新字符串 </li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">strcpy</span> ( 字符串数组 <span class="hljs-number">1</span> , 字符数组 <span class="hljs-number">2</span> );<br></code></pre></td></tr></table></figure>
<br>

<h3 id="字符串比较函数-strcmp"><a href="#字符串比较函数-strcmp" class="headerlink" title="字符串比较函数 strcmp"></a>字符串比较函数 strcmp</h3><ul>
<li>功能: 按照 ASCII 码顺序比较两个字符数组中的字符串, 由函数返回值可以比较结果, 也可以用于比较两个字符串常量或数组与字符串常量</li>
</ul>
<p><strong>比较结果:</strong></p>
<ul>
<li>字符串 1 == 字符串 2, 函数值为0</li>
</ul>
<ul>
<li>字符串 1 &gt; 字符串 2, 函数值为正整数</li>
</ul>
<ul>
<li>字符串 1 &lt; 字符串 2, 函数值为负整数</li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">strcmp</span> ( 字符数组 <span class="hljs-number">1</span> , 字符数组 <span class="hljs-number">2</span> );<br></code></pre></td></tr></table></figure>
<br>

<h3 id="检测字符串长度函数-strlen"><a href="#检测字符串长度函数-strlen" class="headerlink" title="检测字符串长度函数 strlen"></a>检测字符串长度函数 strlen</h3><ul>
<li>功能: 该函数值为字符串实际长度, 即字符串中不包含 ‘ \0 ‘在内的字符个数</li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">strlen</span> ( 字符数组 );<br></code></pre></td></tr></table></figure>
<br>

<h3 id="大写字母转换为小写字母函数-strlwr"><a href="#大写字母转换为小写字母函数-strlwr" class="headerlink" title="大写字母转换为小写字母函数 strlwr"></a>大写字母转换为小写字母函数 strlwr</h3><ul>
<li>功能: 将字符串中大写字母转换成小写字母</li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">strlwr ( 字符数组 );<br></code></pre></td></tr></table></figure>
<br>

<h3 id="小写字母转换为大写字母-strupr"><a href="#小写字母转换为大写字母-strupr" class="headerlink" title="小写字母转换为大写字母 strupr"></a>小写字母转换为大写字母 strupr</h3><ul>
<li>功能: 将字符串中小写字母转换成大写字母</li>
</ul>
<h4>字符串输出函数 puts的格式:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">strupr ( 字符数组 );<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 概述(程序结构)</title>
    <url>/C-main().html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h1><ul>
<li>一个完整的C语言程序是由一个且<font color="#FA8072">只能有一个 main() 函数 (又称主要函数)</font> 和 若干个其他函数结合而成, 或仅由一个 main() 构成</li>
</ul>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p><font color="#FA8072">函数</font>是C语言的<font color="#FA8072">基本单位</font>, 所有的C语言程序都是由一个 mian() 函数或一个 mian() 函数与多个其它函数构成的 mian() 函数的作用相当于其他高级语言的<font color="#FA8072">主程序</font> 其他函数的作用相当于子程序</p>
</li>
<li><p><font color="#FA8072">函数</font>一般包括数据的定义部分和执行部分 <font color="#FA8072">数据定义部分 (也称声明部分)</font>用于定义程序用到的所有<font color="#FA8072">变量的名字和变量类型</font>, 并可以对变量指定初值 执行部分用于完成程序所规定的各项操作</p>
</li>
<li><p>C语言程序总是从 mian() 函数开始执行 一个C语言开始执行 一个C语言程序总是从 mian() 函数开始执行, 而不论其在程序中位置如何 主函数执行完毕, 亦即程序执行完毕 习惯上将主函数  mian() 放在最前头</p>
</li>
</ul>
<h1 id="函数的一般结构"><a href="#函数的一般结构" class="headerlink" title="函数的一般结构"></a>函数的一般结构</h1><ul>
<li>任何函数(包括主函数 main() )都是由函数说明和函数体两部分组成</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">[函数类型] 函数名 (函数参数表)   <span class="hljs-comment">/* 函数说明部分 */</span><br>&#123;<br>    说明语句部分;   <span class="hljs-comment">/* 函数体部分 */</span><br>    执行语句部分；  <span class="hljs-comment">/* 函数体部分 */</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="语法符号约定"><a href="#语法符号约定" class="headerlink" title="语法符号约定"></a>语法符号约定</h3><ul>
<li>[…]  方括号表示可选 (既可以指定也可以缺省)</li>
<li>… 省略号表示前面的项可以重复</li>
<li>| 表示是两侧的项必选其一 </li>
</ul>
<h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><ul>
<li>由函数类型(可缺省) 函数名和函数参数表 三部分组成</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">数据类型 参数<span class="hljs-number">1</span> [, 数据类型 参数<span class="hljs-number">2</span> .]<br></code></pre></td></tr></table></figure>
<h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><ul>
<li>大括号(必须配对使用)内的说明语句部分和执行【语句部分为函数体</li>
</ul>
<h4 id="说明语句部分"><a href="#说明语句部分" class="headerlink" title="说明语句部分"></a>说明语句部分</h4><ul>
<li>说明语句部分由变量定义, 自定义类型定义, 自定义函数说明, 外部变量说明等部分组成, 其中变量定义是主要的</li>
</ul>
<h4 id="执行语句部分"><a href="#执行语句部分" class="headerlink" title="执行语句部分"></a>执行语句部分</h4><ul>
<li>执行语句部分由若干条执行语句构成</li>
</ul>
<h4 id="源程序书写格式"><a href="#源程序书写格式" class="headerlink" title="源程序书写格式"></a>源程序书写格式</h4><ul>
<li><p>所有语句都必须以分号 “;” 结束, 函数的最后一个语句也不例外</p>
</li>
<li><p>程序行的书写格式自由, 即允许一条内写几条语句, 也允许一条语句分成几行写</p>
</li>
<li><p>/* 要注释的代码 */ 必须按照注释格式注释</p>
</li>
<li><p>注释可以单站一行, 也可以跟在语句的后面, 如果一行写不下, 可另起一行继续写</p>
</li>
<li><p>注释中 /* 可以是任意中文 符合  */ 在非中文 环境显示乱码 但是不影响程序的执行</p>
</li>
</ul>
<h1 id="C语言的编译过程"><a href="#C语言的编译过程" class="headerlink" title="C语言的编译过程:"></a>C语言的编译过程:</h1><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">编辑 -&gt; 预处理 -&gt; 编译 -&gt; 汇编 -&gt; 链接 -&gt; 运行<br></code></pre></td></tr></table></figure>
<br>

<h1 id="C语言的关键字"><a href="#C语言的关键字" class="headerlink" title="C语言的关键字"></a>C语言的关键字</h1><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">auto</span>: 声明自动变量<br><br><span class="hljs-keyword">break</span>: 跳出当前循环<br><br><span class="hljs-keyword">case</span>: 开关语句分支<br><br><span class="hljs-type">char</span>: 声明字符型变量或函数返回值类型<br><br><span class="hljs-keyword">const</span>: 声明只读变量<br><br><span class="hljs-keyword">continue</span>: 结束当前循环, 开始下一轮循环<br><br><span class="hljs-keyword">default</span>: 开关语句中的 <span class="hljs-string">&quot;默认&quot;</span> 分支<br><br><span class="hljs-keyword">do</span>: 循环语句的循环体<br><br><span class="hljs-type">double</span>: 声明双精度浮点型变量或函数返回值类型<br><br><span class="hljs-keyword">else</span>: 条件语句否定分支 (与<span class="hljs-keyword">if</span>连用 )<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span>:</span> 声明枚举类型<br><br><span class="hljs-keyword">extern</span>: 声明变量或函数是在其它文件或本文件的其他位置定义<br><br><span class="hljs-type">float</span>: 声明浮点型变量或函数返回值类型<br><br><span class="hljs-keyword">for</span>: 一种循环语句<br><br><span class="hljs-keyword">goto</span>: 无条件跳转语句<br><br><span class="hljs-keyword">if</span>: 条件语句<br><br><span class="hljs-type">int</span>: 声明整型变量或函数<br><br><span class="hljs-type">long</span>: 声明长整型变量或函数返回值类型<br><br><span class="hljs-keyword">register</span>: 声明寄存器变量<br><br><span class="hljs-keyword">return</span>: 子程序返回语句 (可以带参数, 也可不带参数 )<br><br><span class="hljs-type">short</span>: 声明短整型变量或函数<br><br><span class="hljs-type">signed</span>: 声明有符号类型变量或函数<br><br><span class="hljs-keyword">sizeof</span>: 计算数据类型或变量长度 (即所占字节数 )<br><br><span class="hljs-keyword">static</span>: 声明静态变量<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span>:</span> 声明结构体类型<br><br><span class="hljs-keyword">switch</span>: 用于开关语句<br><br><span class="hljs-keyword">typedef</span>: 用以给数据类型取别名<br><br><span class="hljs-type">unsigned</span>: 声明无符号类型变量或函数<br><br><span class="hljs-class"><span class="hljs-keyword">union</span>:</span> 声明共用体类型<br><br><span class="hljs-type">void</span>: 声明函数无返回值或无参数, 声明无类型指针<br><br><span class="hljs-keyword">volatile</span>: 说明变量在程序执行中可被隐含地改变<br><br><span class="hljs-keyword">while</span>: 循环语句的循环条件<br></code></pre></td></tr></table></figure>
<br>

<h1 id="C语言中数据元素是基本单位-数据项是最小单位不可分割"><a href="#C语言中数据元素是基本单位-数据项是最小单位不可分割" class="headerlink" title="C语言中数据元素是基本单位, 数据项是最小单位不可分割"></a>C语言中数据元素是基本单位, 数据项是最小单位不可分割</h1><h2 id="C语言中-算法的复杂性"><a href="#C语言中-算法的复杂性" class="headerlink" title="C语言中 算法的复杂性"></a>C语言中 算法的复杂性</h2><ul>
<li><h3 id="时间效率度量是-时间复杂性"><a href="#时间效率度量是-时间复杂性" class="headerlink" title="时间效率度量是 时间复杂性"></a>时间效率度量是 时间复杂性</h3><ul>
<li>时间复杂性是指运行时间</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="算法复杂性量度是-空间复杂性"><a href="#算法复杂性量度是-空间复杂性" class="headerlink" title="算法复杂性量度是 空间复杂性"></a>算法复杂性量度是 空间复杂性</h3><ul>
<li>空间复杂性是运行时候程序所占有空间变量</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="时空复杂性有最好情况和最坏情况-一般指的是平均复杂性"><a href="#时空复杂性有最好情况和最坏情况-一般指的是平均复杂性" class="headerlink" title="时空复杂性有最好情况和最坏情况, 一般指的是平均复杂性"></a>时空复杂性有最好情况和最坏情况, 一般指的是平均复杂性</h3></li>
</ul>
<br>
]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 符号</title>
    <url>/C-Symbols.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul>
<li><p>只能由英文字母, 数字和下划线构成, 长度 1 ~ 32</p>
</li>
<li><p>必须以字母或者下划线开头</p>
</li>
<li><p>严格区分<font color="    #FA8072">大</font> <font color="#7bafea">小</font>写</p>
</li>
<li><p>不能以 <font color="    #FA8072">关键字</font> 作为标识符</p>
</li>
<li><p>由于系统内部使用了一些以下划线开头的标识符, 为了防止冲突建议用户尽量避免使用下划线开头的标识符</p>
</li>
<li><p>标识符应该做到 见名知意 用英文或者缩写或者拼音</p>
</li>
</ul>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h4>C语言系统定义了32个专用名字</h4>

<div class="mermaid">
graph LR
A[" 控制语句关键字 (12个) "]-->B[" break "]
A[" 控制语句关键字 (12个) "]-->C[" case "]
A[" 控制语句关键字 (12个) "]-->D[" continue "]
A[" 控制语句关键字 (12个) "]-->E[" defaulf "]
A[" 控制语句关键字 (12个) "]-->F[" do "]
A[" 控制语句关键字 (12个) "]-->G[" break "]
A[" 控制语句关键字 (12个) "]-->H[" else "]
A[" 控制语句关键字 (12个) "]-->I[" for "]
A[" 控制语句关键字 (12个) "]-->J[" goto "]
A[" 控制语句关键字 (12个) "]-->K[" if "]
A[" 控制语句关键字 (12个) "]-->L[" return "]
A[" 控制语句关键字 (12个) "]-->M[" switch "]
A[" 控制语句关键字 (12个) "]-->N[" while "]
</div>

<div class="mermaid">
graph LR
A[" 数据类型关键字 (12个) "]-->B[" char "]
A[" 数据类型关键字 (12个) "]-->C[" enum "]
A[" 数据类型关键字 (12个) "]-->D[" double "]
A[" 数据类型关键字 (12个) "]-->E[" long "]
A[" 数据类型关键字 (12个) "]-->F[" float "]
A[" 数据类型关键字 (12个) "]-->G[" int "]
A[" 数据类型关键字 (12个) "]-->H[" shoat "]
A[" 数据类型关键字 (12个) "]-->I[" int "]
A[" 数据类型关键字 (12个) "]-->J[" short "]
A[" 数据类型关键字 (12个) "]-->K[" signed "]
A[" 数据类型关键字 (12个) "]-->L[" stuct "]
A[" 数据类型关键字 (12个) "]-->M[" unsigned "]
A[" 数据类型关键字 (12个) "]-->N[" union "]
A[" 数据类型关键字 (12个) "]-->O[" void "]
</div>


<div class="mermaid">
graph LR
A[" 储存类型关键字 (4个) "]-->B[" auto "]
A[" 储存类型关键字 (4个) "]-->C[" exetern "]
A[" 储存类型关键字 (4个) "]-->D[" register "]
A[" 储存类型关键字 (4个) "]-->E[" static "]
</div>

<div class="mermaid">
graph LR
A[" 其它关键字 (4个) "]-->B[" const "]
A[" 其它关键字 (4个) "]-->C[" sizeof "]
A[" 其它关键字 (4个) "]-->D[" typedef "]
A[" 其它关键字 (4个) "]-->E[" volatle "]
</div>

<br>]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 结构体 共用体 检举类型</title>
    <url>/C-struct-union-enum.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><ul>
<li>概念: <strong>结构体是一种可以由自己定义的数据类型</strong></li>
</ul>
<ul>
<li>结构体可以定义成全局变量也可以定义在函数里面成局部变量 </li>
</ul>
<ul>
<li>先声明, 再定义</li>
</ul>
<h4>结构体的定义:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> 结构体名&#123;</span><br>    数据类型 成员变量名<span class="hljs-number">1</span>;  <span class="hljs-comment">// 成员列表</span><br>    数据类型 成员变量名<span class="hljs-number">2</span>;  <span class="hljs-comment">// 成员列表</span><br>    数据类型 成员变量名<span class="hljs-number">3</span>;  <span class="hljs-comment">// 成员列表</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="在声明类型的同时定义变量"><a href="#在声明类型的同时定义变量" class="headerlink" title="在声明类型的同时定义变量"></a>在声明类型的同时定义变量</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> 结构体名&#123;</span> <br>    数据类型 成员变量名<span class="hljs-number">1</span>;<br>    数据类型 成员变量名<span class="hljs-number">2</span>;<br>    数据类型 成员变量名<span class="hljs-number">3</span>;  <br>&#125;变量名列表;<br></code></pre></td></tr></table></figure>
<h3 id="省略结构体名-直接定义结构体变量"><a href="#省略结构体名-直接定义结构体变量" class="headerlink" title="省略结构体名, 直接定义结构体变量"></a>省略结构体名, 直接定义结构体变量</h3><ul>
<li>注意: <strong>只能定义一次, 接下来不能再定义结构体变量</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    数据类型 成员变量名<span class="hljs-number">1</span>;<br>    数据类型 成员变量名<span class="hljs-number">2</span>;<br>    数据类型 成员变量名<span class="hljs-number">3</span>;  <br>&#125;变量名列表;<br></code></pre></td></tr></table></figure>
<h3 id="结构体变量也可以定义数组"><a href="#结构体变量也可以定义数组" class="headerlink" title="结构体变量也可以定义数组"></a>结构体变量也可以定义数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> 结构体名&#123;</span> <br>    数据类型 成员变量名<span class="hljs-number">1</span>;<br>    数据类型 数组变量名<span class="hljs-number">2</span> [ 数组 ];<br>    数据类型 成员变量名<span class="hljs-number">3</span>;  <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> 结构体名 变量名 =</span> &#123; 成员<span class="hljs-number">1</span>, &#123; 数组<span class="hljs-number">1</span>, 数组<span class="hljs-number">2</span>, 数组<span class="hljs-number">3</span> &#125;, 成员<span class="hljs-number">3</span> &#125;<br></code></pre></td></tr></table></figure>
<h1>结构体的普通变量 <font color="#DC143C">通过 . 来访问成员</font> <br> 结构体的指针变量 <font color="#DC143C">通过 -> 来访问成员</font>  <h1>


<ul>
<li><strong>给变量类型别名</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// #define 别名 要替换的数 (作用类似于)</span><br><span class="hljs-keyword">typedef</span> 数据类型 别名;   <span class="hljs-comment">// 区别 typedef 要声明数据类型 而 #define 不用</span><br><br>别名 变量名 = 赋值;<br></code></pre></td></tr></table></figure>
<h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> 数据类型 名称;   <br>&#123;<br>    数据类型<span class="hljs-number">1</span> 变量名<span class="hljs-number">1</span>;<br>    数据类型<span class="hljs-number">2</span> 变量名<span class="hljs-number">2</span>;<br>    数据类型<span class="hljs-number">3</span> 变量名<span class="hljs-number">3</span>;<br>&#125;别名;<br><br><span class="hljs-comment">// 然后再调用</span><br><br>别名 要声明的变量 [数组];<br></code></pre></td></tr></table></figure>
<h3 id="结合一起"><a href="#结合一起" class="headerlink" title="结合一起"></a>结合一起</h3><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> 结构体名&#123;</span><br>    数据类型 成员变量名<span class="hljs-number">1</span>;<br>    数据类型 成员变量名<span class="hljs-number">2</span>;<br>    数据类型 成员变量名<span class="hljs-number">3</span>;  <br>&#125;别名;  <span class="hljs-comment">// 定义别名后, 原先的结构体名称也可以用 </span><br></code></pre></td></tr></table></figure>
<h1 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h1><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">数据名 *指针 = &amp;地址;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, b-&gt;成员)<br><span class="hljs-comment">// 或者</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, (*b).成员)<br></code></pre></td></tr></table></figure>
<p><strong>注意: 访问成员用 . 点号</strong></p>
<h1 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h1><h3 id="结构体和共用体的区别-共用体可以共用内存-结构体不行"><a href="#结构体和共用体的区别-共用体可以共用内存-结构体不行" class="headerlink" title="结构体和共用体的区别: 共用体可以共用内存, 结构体不行"></a>结构体和共用体的区别: 共用体可以共用内存, 结构体不行</h3><h2 id="共用体-1"><a href="#共用体-1" class="headerlink" title="共用体:"></a>共用体:</h2><br>

<div class="mermaid">
    graph LR
    A[(" 共用体 ")]-->B[" 变量名1<br>变量名2<br>变量名3 "] 
</div>

<br>

<h2 id="结构体-1"><a href="#结构体-1" class="headerlink" title="结构体:"></a>结构体:</h2><br>

<div class="mermaid">
    graph LR
    A[(" 结构体 ")]-->B[" 变量名1"]
    A[(" 结构体 ")]-->C[" 变量名2"] 
    A[(" 结构体 ")]-->D[" 变量名3"]  
</div>

<br>

<h4>共用体的定义:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">union</span> 共用体名</span><br>&#123;<br>    成员列表<br>&#125;;<br></code></pre></td></tr></table></figure>
<h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><ul>
<li>枚举类型作用就是美化代码, 让代码由复杂到简单</li>
</ul>
<h4>枚举类型的定义:</h4>

<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">enum</span> 标识名</span><br>&#123;<br>    枚举项<span class="hljs-number">0</span>, 枚举项<span class="hljs-number">1</span>, 枚举项<span class="hljs-number">2</span>; <br>&#125;;<br></code></pre></td></tr></table></figure>
<p><strong>注意: 枚举项没赋值的情况下是从 0 开始, 赋值之后是从 赋值的那个值往后 依次加 1</strong></p>
<br></h1></h1>]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 选择结构程序设计</title>
    <url>/C-if.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>
<h5>C语言提供了两种类型的选择结构</h5>

<ul>
<li>条件选择结构: 根据给定的条件表达式进行判断, 决定执行某个分支中的程序段</li>
</ul>
<ul>
<li>开关选择结构: 根据给定的整型表达式的值进行判断, 然后决定执行多个分支中的某个分支</li>
</ul>
<h1 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h1><div class="mermaid">
    graph LR
    A([" 起始框 "])

<pre><code>E[/&quot; 输入/输出框&quot; /]

B&#123;&quot; 判断框 &quot;&#125;

D[&quot; 处理框 &quot;]--&gt;流程线C((&quot; 连接点 &quot;))</code></pre>
</div>


<h1 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h1><h2 id="if的三种格式"><a href="#if的三种格式" class="headerlink" title="if的三种格式"></a>if的三种格式</h2><h3 id="单分支选择结构"><a href="#单分支选择结构" class="headerlink" title="单分支选择结构"></a>单分支选择结构</h3><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ( 表达式 )<br>&#123; 语句; &#125;<br></code></pre></td></tr></table></figure>
<br>

<h4>单分支选择结构图</h4>

<br>

<div class="mermaid">
    graph TB
    A([" 开始 "])-->B{" 表达式 "}
    B{" 表达式 "}--非0 / 真-->D[" 语句 "]
    D[" 语句 "]-->E[" 结果 "]
    B{" 表达式 "}--0 / 假-->E[" 结果 "]
</div>

<h3 id="双分支选择结构"><a href="#双分支选择结构" class="headerlink" title="双分支选择结构"></a>双分支选择结构</h3><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ( 表达式 )<br>&#123; 语句<span class="hljs-number">1</span>; &#125;<br><span class="hljs-keyword">else</span><br>&#123; 语句<span class="hljs-number">2</span>; &#125;<br></code></pre></td></tr></table></figure>
<br>

<h4>双分支选择结构图</h4>

<br>

<div class="mermaid">
    graph TB
    A([" 开始 "])-->B{" 表达式 "}
    B{" 表达式 "}--真-->D[" A "]
    B{" 表达式 "}--假-->F[" B "]
    D[" A "]-->E[" 结果 "]
    F[" B "]-->E[" 结果 "]
</div>

<h3 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构"></a>多分支选择结构</h3><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">1</span> ) &#123; 语句<span class="hljs-number">1</span>; &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">2</span> ) &#123; 语句<span class="hljs-number">2</span>; &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">3</span> ) &#123; 语句<span class="hljs-number">3</span>; &#125;<br>...<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( 表达式n ) &#123; 语句n; &#125;<br><span class="hljs-keyword">else</span> &#123; 语句 n+<span class="hljs-number">1</span>; &#125;<br></code></pre></td></tr></table></figure>
<br>

<h4>多分支选择结构图</h4>

<br>

<div class="mermaid">
    graph TD
    A([" 开始 "])-->B{" 表达式1 "}
    B{" 表达式1 "}--非0/真-->D[" 语句1 "]
    B{" 表达式1 "}--0/假-->C{" 表达式2 "}

<pre><code>C&#123;&quot; 表达式2 &quot;&#125;--0/假--&gt;F&#123;&quot; 表达式3 &quot;&#125;
C&#123;&quot; 表达式2 &quot;&#125;--非0/真--&gt;G[&quot; 语句2 &quot;]

F&#123;&quot; 表达式3 &quot;&#125;--0/假--&gt;H&#123;&quot; 表达式4 &quot;&#125;
F&#123;&quot; 表达式3 &quot;&#125;--非0/真--&gt;I[&quot; 语句3 &quot;]

H&#123;&quot; 表达式4 &quot;&#125;--0/假--&gt;J[&quot; 语句5 &quot;]
H&#123;&quot; 表达式4 &quot;&#125;--非0/真--&gt;K[&quot; 语句4 &quot;]

D[&quot; 语句1 &quot;]--&gt;L[&quot; 结果 &quot;]
G[&quot; 语句2 &quot;]--&gt;L[&quot; 结果 &quot;]
I[&quot; 语句3 &quot;]--&gt;L[&quot; 结果 &quot;]
J[&quot; 语句4 &quot;]--&gt;L[&quot; 结果 &quot;]
K[&quot; 语句5 &quot;]--&gt;L[&quot; 结果 &quot;]</code></pre>
</div>

<h3 id="if-语句的嵌套"><a href="#if-语句的嵌套" class="headerlink" title="if 语句的嵌套"></a>if 语句的嵌套</h3><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">1</span> )<br>    <span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">11</span> ) 语句<span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">else</span> 语句<span class="hljs-number">12</span>; <br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">2</span> ) 语句<span class="hljs-number">21</span>;<br>    <span class="hljs-keyword">else</span> 语句<span class="hljs-number">22</span>;<br><br><span class="hljs-comment">// 其中要注意以下两种if语句结构的差别</span><br><br><span class="hljs-comment">// 第一种</span><br><span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">1</span> )<br>    <span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">11</span> ) 语句<span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">else</span> 语句<span class="hljs-number">12</span>; <br><br><span class="hljs-comment">// 第二种</span><br><span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">1</span> )<br>    &#123; <span class="hljs-keyword">if</span> ( 表达式<span class="hljs-number">11</span> ) 语句<span class="hljs-number">11</span>; &#125;<br>    <span class="hljs-keyword">else</span> 语句<span class="hljs-number">12</span>;<br></code></pre></td></tr></table></figure>
<br>

<h4>双分支选择结构图</h4>

<br>

<h2 id="多分支选择语句-switch-语句"><a href="#多分支选择语句-switch-语句" class="headerlink" title="多分支选择语句 ( switch 语句 )"></a>多分支选择语句 ( switch 语句 )</h2><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">switch</span> ( 表达式 )<br>&#123;<br>    <span class="hljs-keyword">case</span> 常量表达式<span class="hljs-number">1</span>: 语句组<span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 常量表达式<span class="hljs-number">2</span>: 语句组<span class="hljs-number">2</span>; <span class="hljs-keyword">break</span>;<br>    ...<br>    <span class="hljs-keyword">case</span> 常量表达式n: 语句组n; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:          语句组n+<span class="hljs-number">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h4>switch语句执行流程图</h4>

<br>

<div class="mermaid">
    graph TB
    A([" 开始 "])-->B{" 表达式 "}
    B{" 表达式 "}--值1-->F[" 语句1 "]
    B{" 表达式 "}--值2-->G[" 语句2 "]
    B{" 表达式 "}--值n-->H[" 语句n "]
    B{" 表达式 "}--default-->I[" 语句n+1 "]
    F[" 语句1 "]-->E[" 结果 "]
    G[" 语句2 "]-->E[" 结果 "]
    H[" 语句n "]-->E[" 结果 "]
    I[" 语句n+1 "]-->E[" 结果 "]
</div>

<ol>
<li><p>switch 后面小括号里的表达式可以是任何类型的, 其常用的是字符或整型表达式</p>
</li>
<li><p>case 后面的常量表达式是由常量组成的表达式, 其中的使用常量表达式的值必须互不相同, 且常量表达式的值必须与 switch 后面表达式的值类型相同</p>
</li>
<li><p>语句组是由若干个语句组成的, 但不需要用大括号括起来, 其中的语句可以是任何 C语言 的可执行语句, 当然也可以是另一个 switch 语句 ( 称为嵌套 switch 语句 ) ,即 switch 语句也是可以嵌套使用</p>
</li>
<li><p>break 是 C语言的一种语句, 其功能是跳出当前 switch 语句, 在  switch 语句中 当执行某个语句组后, 后面若有 break , 变退出该  switch 语句, 如果省略了 break 语句, 则执行完某个语句组后, 将连续执行其后的语句组, 直至遇到下一个 break 语句, 如果后面没有 break 语句, 则一直执行到 switch 语句的最后一个语句</p>
</li>
<li><p>在书写格式上, 所有的 case 应对齐, 每个 case 后的语句缩格并对齐, 以方便看出各个分支的条件依据和应执行的操作</p>
</li>
<li><p>注意 case 和常量表达式之间要有空格</p>
</li>
<li><p>当  switch 后面表达式的值与某个 case 后面常量表达式的值一直时, 就会执行该 case 后面的语句组, 若所有 case 后面常量表达式的值和 switch 后面表达式的值都不相同时, 便执行 default 后面的语句组</p>
</li>
<li><p>default 语句可以省略</p>
</li>
<li><p>case 和 default 语句的出现次序是任意的, 可以变换位置, 这并不影响 switch 的功能, 如可以先出现 “ default : … “, 再出现 “ case ‘B’ : … “, 然后是 “ case ‘A’ : … “</p>
</li>
<li><p>可将相同操作的 case 语句及对应的常量表达式连续排序, 其对应操作的语句组及 break 只在最后一个 case 语句后出现</p>
</li>
</ol>
<br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">switch</span> ( 表达式<span class="hljs-number">1</span> )<br>&#123;<br>    <span class="hljs-keyword">case</span> 常用表达式 <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">case</span> 常用表达式 <span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">case</span> 常用表达式 <span class="hljs-number">3</span>:      语句组<span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br><br>    ...                      ...<br><br>    <span class="hljs-keyword">case</span> 常用表达式 n<span class="hljs-number">-1</span>:<br>    <span class="hljs-keyword">case</span> 常用表达式 n:      语句组n; <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:               语句组 n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<!-- 
+ [矩形]

- [[暂不支持]]

- [(圆柱)]

- [{暂不支持}]

- [/平行四边形/]

- [\平行四边形\]

- [/梯形\]

- [\梯形/]

+ (圆角矩形)

- ((圆形))

- ([体育场])

- ({暂不支持})

+ {菱形}

- 

<ul>
<li><p>{[暂不支持]}</p>
</li>
<li><p>{(暂不支持)}</p>
</li>
</ul>
<ul>
<li><blockquote>
<p>不对称矩形] </p>
</blockquote>
</li>
</ul>
<p>–&gt;</p>
-->]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 顺序结构程序设计</title>
    <url>/C-Sequence-Structure.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<h1 id="C语言概述"><a href="#C语言概述" class="headerlink" title="C语言概述"></a>C语言概述</h1><h3 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h3><ul>
<li>表达式后面加一个分号, 就构成了一个表达式语句</li>
</ul>
<h3 id="函数调用语句"><a href="#函数调用语句" class="headerlink" title="函数调用语句"></a>函数调用语句</h3><ul>
<li>函数调用语句由一个函数加一个分号构成</li>
</ul>
<h3 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h3><ul>
<li>程序中用花括号 {} 将多个语句组合在一起, 称为复合语句, 又称为语句块(Block)</li>
</ul>
<h3 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h3><ul>
<li>只有一个分号 ( ; )的语句称为空语句经常被用作循环体</li>
</ul>
<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><ul>
<li><p>控制程序执行顺序, 实现基本结构的语句</p>
<ul>
<li><p>if-else: 条件语句</p>
</li>
<li><p>switch: 多分支选择语句</p>
</li>
<li><p>for: 循环语句</p>
</li>
<li><p>while: 循环语句</p>
</li>
<li><p>do-while: 循环语句</p>
</li>
<li><p>continue: 结束本次循环语句</p>
</li>
<li><p>break: 终止执行循环语句或switch语句</p>
</li>
<li><p>goto: 转向语句</p>
</li>
<li><p>return: 函数返回值语句</p>
</li>
</ul>
</li>
</ul>
<h1 id="程序的三种基本结构"><a href="#程序的三种基本结构" class="headerlink" title="程序的三种基本结构"></a>程序的三种基本结构</h1><ul>
<li><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3></li>
</ul>
<div class="mermaid">
    graph TB
    A[" A "]-->B[" B "] 
</div>

<ul>
<li><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3></li>
</ul>
<h4>单分支选择结构</h4>

<div class="mermaid">
    graph TB
    A([" 起始框 "])-->P{" P "} 
    P{" P "}-->C[" 真 "]
    C[" 真 "]-->E[" 结果 A "]
    P{" P "}-->D[" 假 "]
</div>

<h4>双分支选择结构</h4>

<div class="mermaid">
    graph TB
    A([" 起始框 "])-->P{" P "} 
    P{" P "}-->C[" 真 "]
    C[" 真 "]-->E[" 结果 A "]
    P{" P "}-->D[" 假 "]
    D[" 假 "]-->F[" 结果 B "]
</div>

<h4>多分支选择结构</h4>

<div class="mermaid">
    graph TB
    A([" 起始框 "])-->P{" P "} 
    P{" P "}--值1-->B[" 语句1 "]
    P{" P "}--值2-->C[" 语句2 "]
    P{" P "}--值n-->D[" 语句n "]
    P{" P "}--值n+1-->E[" 语句n+1 "]
    B[" 语句1 "]-->F[" 结果 "]
    C[" 语句2 "]-->F[" 结果 "]
    D[" 语句n "]-->F[" 结果 "]
    E[" 语句n+1 "]-->F[" 结果 "]
</div>

<ul>
<li><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3></li>
</ul>
<h4>当型循环结构</h4>

<div class="mermaid">
    graph TB
    P{" P "}-->C[" 不成立 "]
    A([" 起始框 "])-->P{" P "} 
    P{" P "}-->B[" 成立 "]
    B[" 成立 "]-->D[" A "]
    D[" A "]-->P{" P "} 
</div>

<h4>直到循环结构</h4>

<div class="mermaid">
    graph TB
    A([" 起始框 "])-->D[" A "]    
    D[" A "]-->P{" P "}   
    P{" P "}-->B[" 成立 "]
    B[" 成立 "]-->A([" 起始框 "])
    P{" P "}-->C[" 不成立 "]
</div>

<h1 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h1><ul>
<li>C语言中的赋值号 “ = “ 是一个运算符, 而在其它大多数高级语言中, 赋值号不是运算符</li>
</ul>
<ul>
<li>要区别赋值表达式和赋值语句</li>
</ul>
<h4>赋值语句其基本形式:</h4>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">变量 = 表达式;<br></code></pre></td></tr></table></figure>
<h1 id="格式输入与输出"><a href="#格式输入与输出" class="headerlink" title="格式输入与输出"></a>格式输入与输出</h1><h2 id="printf-函数-格式输入函数"><a href="#printf-函数-格式输入函数" class="headerlink" title="printf()函数(格式输入函数)"></a>printf()函数(格式输入函数)</h2><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;格式控制&quot;</span>, 输出列表)<br></code></pre></td></tr></table></figure>
<br>

<h4>printf()函数格式说明</h4>

<br>

<table>
<thead>
<tr>
<th align="center">格式说明</th>
<th align="center">功 能</th>
<th align="left">实例</th>
<th align="center">输出结果</th>
<th align="left">说 明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%d<br>%i</td>
<td align="center">输出带符号的十进制整数</td>
<td align="left">int x = -1;<br>printf(“%d”,x);</td>
<td align="center">-1</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">%u</td>
<td align="center">输出无符号的十进制整数</td>
<td align="left">int x = 153;<br>printf(“%u”,x);</td>
<td align="center">153</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">%x<br>%X</td>
<td align="center">输出不带前导符 0X 或 0x 的无符号十六进制整数</td>
<td align="left">int x = 2000;<br>printf(“%X”,x);</td>
<td align="center">7D0</td>
<td align="left">%x 表示符号 a<del>f 以小写形式表示<br>%X 表示符号 A</del>F 以大写形式表示</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="center">输出无符号形式的八进制整数</td>
<td align="left">int x = 2000;<br>printf(“%o”,x);</td>
<td align="center">3720</td>
<td align="left">不带前导符0</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">输出小数形式的 单 双 精度实数</td>
<td align="left">float x = 123.456;<br>printf(“%f”,x);</td>
<td align="center">123.456000</td>
<td align="left">默认6为小数</td>
</tr>
<tr>
<td align="center">%e<br>%E</td>
<td align="center">输出科学计数法形式的实数</td>
<td align="left">float x = 123.456;<br>printf(“%e”,x);</td>
<td align="center">1.23456e+02</td>
<td align="left">尾部部分6位数字(包括1位整数位, 1位小数点)</td>
</tr>
<tr>
<td align="center">%c</td>
<td align="center">输出单个字符</td>
<td align="left">char x = ‘a’;<br>printf(“%c”,x);</td>
<td align="center">a</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">%s</td>
<td align="center">输出字符串</td>
<td align="left">char x[8] = “abcdfg\0”;<br>printf(“%s”,x);</td>
<td align="center">abcdfg</td>
<td align="left">必须以\0结束或给定长度</td>
</tr>
</tbody></table>
<br>

<ul>
<li><p>格式控制:  格式控制也称 “控制字符串”, 是由双引号括起来的字符串, 用于指定输出的格式 它由格式说明, 控制字符和普通字符三部分组成</p>
<ol>
<li><p>格式说明: 由 “%” 字符开始, 在 “%” 后面跟有各种格式的字符, 以说明输出数据的类型, 形式, 长度, 小数位等格式 </p>
</li>
<li><p>控制字符: 控制字符用于控制设备的动作</p>
</li>
<li><p>普通字符: 除格式说明和控制字符之外, 其它字符均属于普通字符, 打印时按原样输出 例如常见的双引号内的逗号, 空格和普通字母等</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>输出列表: 需要输出的数据项由若干表达式组成, 表达式之间逗号分隔 需注意以下两点</p>
<ul>
<li><p>表达式可以由变量构成, 也可以由常量构成</p>
</li>
<li><p>表达式之间的逗号不是逗号表达式, 而是确实计算顺序自右向左进行的</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>附加说明符: 在格式说明中, 为了满足用户的高级需求, 还可在%与格式字符间插入几种附件说明, 其组成为 “% 附件说明字符格式符” </li>
</ul>
<br>


<table>
<thead>
<tr>
<th align="center">附加说明字符</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">用于长整型, 可以加在格式符 d, o, x, u 的前面</td>
</tr>
<tr>
<td align="center">m(正整数)</td>
<td align="left">数据输出的最小宽度, 当数据实际宽度超过 m 时, 则按实际宽度输出; 如实际宽度短于 m 时, 则输出时前面补0或空格</td>
</tr>
<tr>
<td align="center">.n(正整数)</td>
<td align="left">对实数表示输出 n 位小数, 对字符串表示从左截取的字符个数</td>
</tr>
<tr>
<td align="center">-</td>
<td align="left">输出的字符或数字在域内向左对齐, 默认右对齐</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">输出的数字前带有正负号</td>
</tr>
<tr>
<td align="center">0</td>
<td align="left">在实际前多余空格处补0</td>
</tr>
<tr>
<td align="center">#</td>
<td align="left">用在格式字符 o 或 x 前, 输出八进制或十六进制数时带前缀 0 或 0x</td>
</tr>
</tbody></table>
<h2 id="scanf-函数-格式输入函数"><a href="#scanf-函数-格式输入函数" class="headerlink" title="scanf()函数(格式输入函数)"></a>scanf()函数(格式输入函数)</h2><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;格式控制&quot;</span>, 地址列表)<br></code></pre></td></tr></table></figure>
<h4>scanf函数的格式字符及作用</h4>

<br>

<table>
<thead>
<tr>
<th align="center">格式字符</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%d<br>%i</td>
<td align="left">输出带符号的十进制整数</td>
</tr>
<tr>
<td align="center">%u</td>
<td align="left">输出无符号的十进制整数</td>
</tr>
<tr>
<td align="center">%x<br>%X</td>
<td align="left">输出无符号十六进制整数(不区分大小写)</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="left">输出无符号形式的八进制整数</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="left">输出实数, 可以用小数形式或指数形式输入</td>
</tr>
<tr>
<td align="center">%e<br>%E<br>%g<br>%G</td>
<td align="left">与 %f 作用相同, %e, %f, %g 可以互相替换使用</td>
</tr>
<tr>
<td align="center">%c</td>
<td align="left">输出单个字符</td>
</tr>
<tr>
<td align="center">%s</td>
<td align="left">输出字符串, 将字符串送到一个字符数组中, 在输入时以非空字符开始, 遇到 回车 或 空格字符 结束</td>
</tr>
</tbody></table>
<br>

<h4>scanf函数的附加格式字符及作用</h4>

<br>

<table>
<thead>
<tr>
<th align="center">格式修饰符</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">L <br> l</td>
<td align="left">用在格式字符 d, o, x, u之间, 表示输入长整型数据<br>用在 f 或 e 之前, 表示输入 double型数据</td>
</tr>
<tr>
<td align="center">h</td>
<td align="left">用在格式字符 d, I, o, x 之前, 表示输入短整型数据</td>
</tr>
<tr>
<td align="center">m</td>
<td align="left">指定输入数据所占宽度, 不能用来指定实数型宽度, 应为正整数</td>
</tr>
<tr>
<td align="center">*</td>
<td align="left">表示该输入项在读入后不赋值给相应的变量</td>
</tr>
</tbody></table>
<br>

<ul>
<li><h3 id="格式控制-格式控制是由双引号括起来的字符串-与-printf-函数中的-“格式控制”-字符串含义相同-其中的格式说明-也与-printf-函数的格式说明相似-以-“-“-字符开始-以一个格式字符结束-中间可以插入附件说明字符-在格式控制字符串中若有普通字符-则输入时原因输入"><a href="#格式控制-格式控制是由双引号括起来的字符串-与-printf-函数中的-“格式控制”-字符串含义相同-其中的格式说明-也与-printf-函数的格式说明相似-以-“-“-字符开始-以一个格式字符结束-中间可以插入附件说明字符-在格式控制字符串中若有普通字符-则输入时原因输入" class="headerlink" title="格式控制: 格式控制是由双引号括起来的字符串, 与 printf 函数中的 “格式控制” 字符串含义相同, 其中的格式说明, 也与 printf 函数的格式说明相似, 以 “ % “ 字符开始, 以一个格式字符结束, 中间可以插入附件说明字符, 在格式控制字符串中若有普通字符, 则输入时原因输入"></a>格式控制: 格式控制是由双引号括起来的字符串, 与 printf 函数中的 “格式控制” 字符串含义相同, 其中的格式说明, 也与 printf 函数的格式说明相似, 以 “ % “ 字符开始, 以一个格式字符结束, 中间可以插入附件说明字符, 在格式控制字符串中若有普通字符, 则输入时原因输入</h3></li>
</ul>
<ul>
<li><h3 id="地址列表-变量地址列表是用逗号分隔的若干接收输入数据的变量地址-变量地址由地址运算符-“-amp-“-后跟变量名组成-变量地址间用逗号-“-“-分隔"><a href="#地址列表-变量地址列表是用逗号分隔的若干接收输入数据的变量地址-变量地址由地址运算符-“-amp-“-后跟变量名组成-变量地址间用逗号-“-“-分隔" class="headerlink" title="地址列表: 变量地址列表是用逗号分隔的若干接收输入数据的变量地址, 变量地址由地址运算符 “ &amp; “ 后跟变量名组成, 变量地址间用逗号 “ , “ 分隔"></a>地址列表: 变量地址列表是用逗号分隔的若干接收输入数据的变量地址, 变量地址由地址运算符 “ &amp; “ 后跟变量名组成, 变量地址间用逗号 “ , “ 分隔</h3></li>
</ul>
<ul>
<li><h3 id="使用-scanf-函数时应注意的问题"><a href="#使用-scanf-函数时应注意的问题" class="headerlink" title="使用 scanf() 函数时应注意的问题"></a>使用 scanf() 函数时应注意的问题</h3></li>
</ul>
<ol>
<li><p>scanf()函数地址列表中的各个参量都是变量地址, 而不是变量名 </p>
</li>
<li><p>如果在 “格式控制” 字符串中除格式说明以外还有其它字符, 则输入数据时在对应位置应输入与这些字符相同的字符</p>
</li>
<li><p>对于实型数据, 输入时不能规定其精度 </p>
</li>
<li><p>在用 “ %c “ 格式输入字符时, 空格符和转义字符都将作为有效的字符输入 </p>
</li>
<li><p>在输入数据时, 若遇到下列情况, 则认为输入数据结束 </p>
<ul>
<li>遇空格, 按 Enter 键 或 Tab 键 </li>
</ul>
<ul>
<li>遇宽度限制 </li>
</ul>
<ul>
<li>遇非法输入 </li>
</ul>
</li>
<li><p>当使用多个是 scanf() 函数连续给多个字符变量赋值 每次输入都必须按 Enter 键 </p>
</li>
<li><p>对应 unsiged 型变量所需的数据, 可以用 “ %u, %d “ 或 “ %o, %x” 格式输入 </p>
</li>
<li><p>在格式控制符中加入星号时, scanf()函数将读取对应数值, 但不赋给相应变量 </p>
</li>
</ol>
<br>

<h1 id="putchar-函数-字符输出函数"><a href="#putchar-函数-字符输出函数" class="headerlink" title="putchar()函数(字符输出函数)"></a>putchar()函数(字符输出函数)</h1><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">putchar</span>(字符形或整形的常量, 变量, 表达式); <span class="hljs-comment">// 整形则输出 ASCII 码值对应的字符</span><br></code></pre></td></tr></table></figure>
<br>

<ul>
<li>注意: 使用 putchar() 函数时必须要用文件包含命令  <strong>#include&lt;stdio.h&gt;</strong></li>
</ul>
<h1 id="getchar-函数-字符输入函数"><a href="#getchar-函数-字符输入函数" class="headerlink" title="getchar() 函数(字符输入函数)"></a>getchar() 函数(字符输入函数)</h1><br>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">getchar(字符); <span class="hljs-comment">// 其函数的返回值是从输入设备输入的一个字符</span><br></code></pre></td></tr></table></figure>
<br>

<ul>
<li><p>使用 getchar() 函数时需要注意以下问题</p>
<ul>
<li>getchar() 函数没有参数</li>
</ul>
<ul>
<li>getchar() 函数只能接受一个字符(包括控制字符)</li>
</ul>
<ul>
<li>使用 getchar() 函数前, 需加上文件包含命令  <strong>#include&lt;stdio.h&gt;</strong></li>
</ul>
<ul>
<li>getchar() 函数接到的字符可以赋给一个字符型变量或整型变量, 也可以作为表达式的一部分</li>
</ul>
</li>
</ul>
<br>

<br>

<br>]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>C语 填空题</title>
    <url>/C-x.html</url>
    <content><![CDATA[<p><strong>C语学习笔记</strong></p>
<a id="more"></a>

<p>一个C程序至少包含一个 主函数 , 即  main函数</p>
<p>一个函数由两部分组成, 它们是  函数的说明部分 和 函数体   </p>
<p>函数体的范围是 最外层的一对大括弧内的部分    </p>
<p>函数体一般包括  变量定义部分  和  执行部分   </p>
<p>C语言是通过  输入和输出函数   来进行输入输出的</p>
<p>在C语言中, 凡在一个标识符后面紧跟着一对圆括弧, 就表明它是一个  函数 </p>
<p>主函数名后面的一对圆括号中间可以为空, 但一对圆括号不能 省略      </p>
<p>在ASCII码表中可以看到每个小写字母的ASCII码比相应的大写字母 大32</p>
<p>%d   int类型变量的值<br>%c   char类型变量的值<br>%f   float类型变量的值<br>%lf  double类型变量的值</p>
]]></content>
      <categories>
        <category>C语</category>
      </categories>
  </entry>
  <entry>
    <title>EJS常用标签</title>
    <url>/EJS.html</url>
    <content><![CDATA[<p><strong>EJS个人整理</strong></p>
<a id="more"></a>

<h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs EJS"> &#x2F;&#x2F;用于控制流<br> &lt;%    %&gt;    &#x2F;&#x2F;逻辑代码输出(JS编辑), 如 if, for等使用 <br><br> &#x2F;&#x2F;用于转义的输出 <br> &lt;%&#x3D;  %&gt;     &#x2F;&#x2F;输出 HTML转义后  的字符串 到模板中      用于转义的输出<br><br> &#x2F;&#x2F;用于非转义的输出<br> &lt;%-  %&gt;     &#x2F;&#x2F;输出 原始的HTML串到模板中, 不对HTML进行转义    &lt;&gt;被浏览器识别  看做HTML  <br><br> &lt;%_ _%&gt;     &#x2F;&#x2F;控制流使用空白字符移除模式<br> <br> &lt;%#   %&gt;    &#x2F;&#x2F;注释<br><br> &lt;%%  %&gt;     &#x2F;&#x2F;直接输出 &lt;%  %&gt;<br><br> -%&gt;         &#x2F;&#x2F;结束标签用于换行移除模式<br><br>自定义分隔符 (例如, 使用 &#39;&lt;? ?&gt;&#39; 代替 &#39;&lt;% %&gt;&#39;)<br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>EJS</category>
      </categories>
  </entry>
  <entry>
    <title>ES6 let知识</title>
    <url>/ES6-let.html</url>
    <content><![CDATA[<p><strong>ES6学习笔记</strong></p>
<a id="more"></a>

<h2 id="let声明变量"><a href="#let声明变量" class="headerlink" title="let声明变量"></a>let声明变量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-comment">// 声明变量</span><br>    <span class="hljs-keyword">let</span> a;<br>    <span class="hljs-keyword">let</span> b, c, d;<br>    <span class="hljs-keyword">let</span> e = <span class="hljs-number">333</span>;<br>    <span class="hljs-comment">// 变量可以是数字 字符串 数组</span><br>    <span class="hljs-keyword">let</span> f = <span class="hljs-number">521</span>,g = <span class="hljs-string">&quot;我叫史迪奇&quot;</span>,h = [];<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h2 id="let变量不可重复利用"><a href="#let变量不可重复利用" class="headerlink" title="let变量不可重复利用"></a>let变量不可重复利用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-comment">// 声明变量</span><br>    <span class="hljs-keyword">let</span> sdq = <span class="hljs-string">&quot;史迪奇&quot;</span>;<br>    <span class="hljs-comment">// let sdq = &quot;史迪仔&quot;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-comment">//  全局 函数 eval都属于块级作用域</span><br>    <span class="hljs-comment">// 像if else while for 都属于块级 都不支持let</span><br>    &#123;<br>        <span class="hljs-comment">// &#123;&#125;也是块级</span><br>        <span class="hljs-keyword">let</span> sdq = <span class="hljs-string">&#x27;史迪奇&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h2 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdz);<br>    <span class="hljs-keyword">let</span> sdz = <span class="hljs-string">&#x27;史迪仔&#x27;</span>; <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h2 id="不影响作用域链"><a href="#不影响作用域链" class="headerlink" title="不影响作用域链"></a>不影响作用域链</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-keyword">let</span> sdq = <span class="hljs-string">&#x27;史迪奇&#x27;</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">SDQ</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq);<br>    &#125;<br>    <span class="hljs-title function_">SDQ</span>()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h2 id="点击变色的案例"><a href="#点击变色的案例" class="headerlink" title="点击变色的案例"></a>点击变色的案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>        &lt;h2 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;变色&lt;/h2&gt;<br>        &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/div&gt;<br>        &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/div&gt;<br>        &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Angel &quot;</span>&gt;安琪&lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">//获取div元素对象</span><br>        <span class="hljs-keyword">let</span> sdqs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;sdq&#x27;</span>);<br><br>        <span class="hljs-comment">//遍历并绑定事件</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;sdqs.<span class="hljs-property">length</span>;i++)&#123;<br>            sdqs[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//修改当前元素的背景颜色</span><br>                <span class="hljs-comment">// this.style.background = &#x27;#F08080&#x27;;</span><br>                sdqs[i].<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&#x27;#F08080&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<iframe id="iframe" scrolling="no" src="/html/let案例.html"></iframe>

<br>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
  </entry>
  <entry>
    <title>Git 知识</title>
    <url>/Git.html</url>
    <content><![CDATA[<p><strong>Git学习笔记</strong></p>
<a id="more"></a>

<h1 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置"></a>Git 全局设置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta"># </span><span class="language-bash">名称</span><br>git config --global user.name &quot;名称&quot;<br><span class="hljs-meta"># </span><span class="language-bash">邮箱</span><br>git config --global user.email &quot;邮箱&quot;<br></code></pre></td></tr></table></figure>


<h2 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库"></a>创建 git 仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta"># </span><span class="language-bash">创建sdq文件夹</span><br>mkdir sdq<br><br><span class="hljs-meta"># </span><span class="language-bash">打开sdq文件夹</span><br>cd sdq<br><br><span class="hljs-meta"># </span><span class="language-bash">初始化</span><br>git init<br><span class="hljs-meta"># </span><span class="language-bash">创建说明文档</span><br>touch README.md<br><br><span class="hljs-meta"># </span><span class="language-bash">添加说明文档</span><br>git add README.md<br><br><span class="hljs-meta"># </span><span class="language-bash">添加说明内容</span><br>git commit -m &quot;史迪奇&quot;<br><br><span class="hljs-meta"># </span><span class="language-bash">关联远程存储库 sdz为存储库名</span><br>git remote add sdz https:#gitee.com/sdq3/web.git<br><br><span class="hljs-meta"># </span><span class="language-bash">开始上传 master分支名称</span><br>git push -u sdz master<br></code></pre></td></tr></table></figure>
<h1 id="git-分支查看与切换"><a href="#git-分支查看与切换" class="headerlink" title="git 分支查看与切换"></a>git 分支查看与切换</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta"># </span><span class="language-bash">查看所有分支</span><br>git branch -a<br><br><span class="hljs-meta"># </span><span class="language-bash">查看当前使用分支(结果列表中前面标*号的表示当前使用分支)</span><br>git branch<br><br><span class="hljs-meta"># </span><span class="language-bash">切换分支</span><br>git checkout [分支名]<br></code></pre></td></tr></table></figure>
<h1 id="常用基本步骤"><a href="#常用基本步骤" class="headerlink" title="常用基本步骤"></a>常用基本步骤</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta"># </span><span class="language-bash">先把仓库拷贝下来</span><br>git clone https://github.com/xxx/xxx.git<br><br><span class="hljs-meta"># </span><span class="language-bash">改完代码后</span><br><span class="hljs-meta"># </span><span class="language-bash">写备注</span><br>git add .<br><br>git commit -m 第N次提交<br><br><span class="hljs-meta"># </span><span class="language-bash">上传代码</span><br>git push<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>ES6 箭头函数</title>
    <url>/ES6-Arrow-function.html</url>
    <content><![CDATA[<p><strong>ES6学习笔记</strong></p>
<a id="more"></a>

<h2 id="正常函数"><a href="#正常函数" class="headerlink" title="正常函数"></a>正常函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;史迪奇&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">const</span> fun = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;史迪奇&quot;</span>;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fun</span>());<br></code></pre></td></tr></table></figure>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><strong>箭头函数相当于return</strong></p>
<ul>
<li>()中定义参数, 如果只有一个参数, 可以不写括号()</li>
<li>{}中写函数体, 如果函数体中只有返回值, 可以不写return</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fun</span>() = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;史迪奇&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 一个返回值</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fun</span>() = <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&quot;史迪奇&quot;</span><br><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fun</span>());<br></code></pre></td></tr></table></figure>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>this指向不同</li>
<li>普通函数 哪里调用 this指向哪里</li>
<li>箭头函数 哪里定义 this指向哪里</li>
</ul>
<p><strong>正常函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> sdq = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    <span class="hljs-attr">species</span>:<span class="hljs-string">&quot;外星生物&quot;</span>, <br>    <span class="hljs-title function_">myName</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 模板字符串 $&#123;this.name&#125;</span><br>        <span class="hljs-comment">// console.log(`我叫$&#123;this.name&#125;`);</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我叫&quot;</span>+ <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>正常函数 this指向</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> sdq = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    <span class="hljs-attr">species</span>:<span class="hljs-string">&quot;外星生物&quot;</span>, <br>    <span class="hljs-title function_">myName</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-comment">// 指向windous对象</span><br>           <span class="hljs-comment">// console.log(this); </span><br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(self.<span class="hljs-property">name</span>); <br>        &#125;,<span class="hljs-number">500</span>)<br>    &#125;<br>&#125;<br>sdq.<span class="hljs-title function_">myName</span>();<br></code></pre></td></tr></table></figure>
<p><strong>箭头函数 this指向</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> sdq = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    <span class="hljs-attr">species</span>:<span class="hljs-string">&quot;外星生物&quot;</span>, <br>    <span class="hljs-title function_">myName</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>           <span class="hljs-comment">// 指向sdq对象</span><br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);     <br>        &#125;,<span class="hljs-number">500</span>)<br>    &#125;<br>&#125;<br>sdq.<span class="hljs-title function_">myName</span>();<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>ES6</category>
      </categories>
  </entry>
  <entry>
    <title>HTML iframe内联框架</title>
    <url>/HTML-iframe.html</url>
    <content><![CDATA[<p><strong>HTML个人整理</strong></p>
<a id="more"></a>

<h1 id="iframe-内联框架"><a href="#iframe-内联框架" class="headerlink" title="iframe 内联框架"></a>iframe 内联框架</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mainFrame&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://sdq3.gitee.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;mainFrame&quot;</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>其中path是引用页面地址 mainFrame是框架标识名</strong></p>
<h1 id="Iframe-删除边框"><a href="#Iframe-删除边框" class="headerlink" title="Iframe - 删除边框"></a>Iframe - 删除边框</h1><p><strong>frameborder 属性规定是否显示 iframe 周围的边框 设置属性值为 “0” 就可以移除边框</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo_iframe.html&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="使用-iframe-作为链接的目标"><a href="#使用-iframe-作为链接的目标" class="headerlink" title="使用 iframe 作为链接的目标"></a>使用 iframe 作为链接的目标</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx/xxx.html&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://sdq3.gitee.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML 基本控件大集合</title>
    <url>/HTML-operation.html</url>
    <content><![CDATA[<p><strong>HTML个人整理</strong></p>
<a id="more"></a>

<h1 id="输入框与密码框"><a href="#输入框与密码框" class="headerlink" title="输入框与密码框"></a>输入框与密码框</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>名字: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-comment">&lt;!-- text指输入框  size 文本框的长度 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-comment">&lt;!-- password指密码框   maxlength最大长度 --&gt;</span>   <br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>名字: <input type="text" name="username" size="33"></p>    
<p>密码: <input type="password" name="pwd" maxlength="8" size="33"></p> 
</body>
</html>


<!-- <font size=28 color='#00BFFF'>-------------------------------------------------------------------</font> -->

<h1 id="get与post"><a href="#get与post" class="headerlink" title="get与post"></a>get与post</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;史迪奇的第一个网站.html&quot;</span> <span class="hljs-attr">mathod</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>    <span class="hljs-comment">&lt;!-- get方式提交 uil可以看到提交信息 不安全 但是高效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;史迪奇的第一个网站.html&quot;</span> <span class="hljs-attr">mathod</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>   <span class="hljs-comment">&lt;!-- post方式提交 Form Data可以看到提交信息 比较安全 传输大文件 --&gt;</span><br></code></pre></td></tr></table></figure>


<h1 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h1><p><strong>单选框 radio 要value表示单选框的值 name表示组用来实现单选效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;boy&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;girl&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>女<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="radio" value="boy" name="sex">男
    <input type="radio" value="girl" name="sex">女
</p>
</body>
</html>



<h1 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h1><p><strong>多选框 checkbox 也要value表示单选框的值 name表示组用来实现单选效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;</span>敲代码<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sleep&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;</span>睡觉<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;eat&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;</span>吃饭<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="checkbox" value="code" name="hobby">敲代码
    <input type="checkbox" value="sleep" name="hobby">睡觉
    <input type="checkbox" value="eat" name="hobby">吃饭
</p>
</body>
</html>



<h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;btn1&quot;</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- button普通按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- 图片按钮 这里懒得添加图片了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>       <span class="hljs-comment">&lt;!-- submit提交 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- reset重置 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="button" value="code" name="btn1">
    <input type="image" src="...">
    <input type="submit">  
    <input type="reset">   
</p>
</body>
</html>



<h1 id="下拉框-列表框"><a href="#下拉框-列表框" class="headerlink" title="下拉框/列表框"></a>下拉框/列表框</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>地区:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;列表名称&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;</span>金星<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;</span>木星<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;</span>水星<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;</span>火星<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;</span>图星<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;</span>地球<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
地区:
    <select name="列表名称">
    <option value="选择地区">金星</option>
    <option value="选择地区">木星</option>
    <option value="选择地区">水星</option>
    <option value="选择地区">火星</option>
    <option value="选择地区">土星</option>
    <option value="选择地区">地球</option>
    </select>
</p>
</body>
</html>



<h1 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>反馈:<br>     <span class="hljs-comment">&lt;!--textarea表示文本域 cols表示列 row表示行 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">row</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合t</title>
</head>
<body>
<p>反馈:
    <textarea name="textarea" cols="50" row="10">文本内容</textarea>    
</p>
</body>
</html>



<h1 id="文件域"><a href="#文件域" class="headerlink" title="文件域"></a>文件域</h1><p><strong>通过name属性上传, 没有name属性就上传不了</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请选择文件:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;files&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>请选择文件:
    <input type="file" name="files">
    <input type="button" value="上传" name="upload">
</p>
</body>
</html>



<h1 id="简单验证"><a href="#简单验证" class="headerlink" title="简单验证"></a>简单验证</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>邮箱:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!-- email表示邮箱 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>网址:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>       <span class="hljs-comment">&lt;!-- url表示网址 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>商品数量:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>       <span class="hljs-comment">&lt;!-- number表示数字 max表示最大值 min表示最小值 step表示步长 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>声音大小:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;voice&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;1&quot;</span> &gt;</span>       <span class="hljs-comment">&lt;!-- range表示滑块 max表示最大值 min表示最小值 step表示步长 --&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>搜索框:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span>       <span class="hljs-comment">&lt;!-- search表示搜索框 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>    
</head>
<body>
<p>邮箱:
    <input type="email" name="email">   
</p>
<p>网址:
    <input type="url" name="url">       
</p>
<p>商品数量:
    <input type="number" name="num" max="100" min="0" step="1">       
</p>
<p>声音大小:
    <input type="range" name="voice" max="100" min="0" step="1" style="width:350px;">       
</p>
<p>搜索框:
    <input type="search" name="search">       
</p>
</body>
</html>



<h1 id="表单应用"><a href="#表单应用" class="headerlink" title="表单应用"></a>表单应用</h1><p><strong>隐藏域 hidden</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>名字: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;33&quot;</span> <span class="hljs-attr">hidden</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-comment">&lt;!-- hidden表示隐藏 --&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>名字: <input type="text" name="username" size="33"></p>
<p>密码: <input type="password" name="pwd" maxlength="8" size="33" hidden></p> 
</body>
</html>



<p><strong>只读 readonly</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>贱贱的操作:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>名字: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;史迪奇国王&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>   <span class="hljs-comment">&lt;!-- readonly表示只读 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<span>贱贱的操作:</span>
 <p>名字: <input type="text" name="username" value="史迪奇国王" readonly></p>
 <p>密码: <input type="password" name="pwd"></p>
</body>
</html>



<p><strong>禁用 checked disabled</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;boy&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;girl&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span> <span class="hljs-attr">disabled</span>/&gt;</span>女  <span class="hljs-comment">&lt;!-- checked disabled表示禁用 假如你是男生也会默认给你性别女, 并且不能更改 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="radio" value="boy" name="sex" disabled>男
    <input type="radio" value="girl" name="sex" checked disabled>女  
</p>
</body>
</html>



<h1 id="扩大鼠标范围"><a href="#扩大鼠标范围" class="headerlink" title="扩大鼠标范围"></a>扩大鼠标范围</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span>扩大范围至文字<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <span class="hljs-comment">&lt;!-- label标签扩充鼠标的可用性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <label for="sdq">扩大范围至文字</label>
    <input type="text" id="sdq">
</p>
</body>
</html>



<h1 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>账户: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;33&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入账号&quot;</span> <span class="hljs-attr">required</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>   <span class="hljs-comment">&lt;!-- required表示非空状态 也就是说必须要填 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;8&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;33&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>   <span class="hljs-comment">&lt;!-- placeholder表示提示信息 --&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>账户: <input type="text" name="username" size="33" placeholder="请输入账号" required></p>
<p>密码: <input type="password" name="pwd" maxlength="8" size="33" placeholder="请输入密码"></p>
</body>
</html>



<h1 id="正则表达式-pattern"><a href="#正则表达式-pattern" class="headerlink" title="正则表达式 pattern"></a>正则表达式 pattern</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>自定义邮箱<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;diymain&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;邮箱的正则表达式&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- pattern表示正则表达式  diy意思是自定义 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>自定义邮箱
    <input type="text" name="diymain" pattern="邮箱的正则表达式">
</p></body>
</html>

<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>指定元素的类型 text password chckbox radio submit reset file hidden image button 默认是text</td>
<td></td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>指定表单元的名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>元素的初始值 type为radio时必须指定一个值</td>
<td></td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>指定表单元素的初始宽度 如果type为text或者password时表单大小以字节为单位 对于其他类型宽度可能以像素为单位</td>
<td></td>
<td></td>
</tr>
<tr>
<td>maxlength</td>
<td>type为text或者password时输入最大字符数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>checked</td>
<td>type为radio或者checkbox指定按钮是否被选中</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<!-- ![](/images/HTML可操作大集合/表单元素格式.jpg) -->

<h1 id="只要input都需要value值和name值-这样就可以养成好习惯"><a href="#只要input都需要value值和name值-这样就可以养成好习惯" class="headerlink" title="只要input都需要value值和name值, 这样就可以养成好习惯"></a>只要input都需要value值和name值, 这样就可以养成好习惯</h1><br>




]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML 表格</title>
    <url>/HTML-form.html</url>
    <content><![CDATA[<p><strong>HTML个人整理</strong></p>
<a id="more"></a>

<h1 id="table"><a href="#table" class="headerlink" title="table"></a>table</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">tr  //行<br>td  //列<br></code></pre></td></tr></table></figure>

<h1 id="跨列"><a href="#跨列" class="headerlink" title="跨列"></a>跨列</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tb</span> <span class="hljs-attr">cospan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tb</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>关于Hexo搭建博客我所踩过的坑和小白安装教程</title>
    <url>/Hexo-install.html</url>
    <content><![CDATA[<p><strong>搭建博客笔记</strong></p>
<a id="more"></a>

<h1 id="第一是-Hexo-环境搭建"><a href="#第一是-Hexo-环境搭建" class="headerlink" title="第一是 Hexo 环境搭建"></a>第一是 Hexo 环境搭建</h1><p>前提是需要安装 Node.js,不懂的可以百度下载然后按照<a href="https://www.bilibili.com/video/BV1wA411s7re?from=search&seid=11841654225437997570">B站的安装视频按照</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure>
<h1 id="第二是-Hexo初始化博客"><a href="#第二是-Hexo初始化博客" class="headerlink" title="第二是 Hexo初始化博客"></a>第二是 Hexo初始化博客</h1><p><strong>cd 到你想存放博客源码的一个目录里面, 这时会自动建立一个博客文件夹</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo init blog  //hexo init (博客名字自定义)<br></code></pre></td></tr></table></figure>

<h1 id="第三是-给安装博客依赖"><a href="#第三是-给安装博客依赖" class="headerlink" title="第三是 给安装博客依赖"></a>第三是 给安装博客依赖</h1><p><strong>cd 进刚创建的博客文件夹, 安装依赖模块命令如下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure>
<h1 id="第四是-找主题"><a href="#第四是-找主题" class="headerlink" title="第四是 找主题"></a>第四是 找主题</h1><p><strong>到这个 <a href="https://hexo.bootcss.com/themes/">Hexo网站</a> 去找主题</strong></p>
<h1 id="第五是-清除静态文件"><a href="#第五是-清除静态文件" class="headerlink" title="第五是 清除静态文件"></a>第五是 清除静态文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure>
<h1 id="第六是-生成静态文件和"><a href="#第六是-生成静态文件和" class="headerlink" title="第六是 生成静态文件和"></a>第六是 生成静态文件和</h1><p><strong>部署在GitHub 或者 Gitee服务器上, 生成静态文件, 生成的静态文件在博客工程的 public文件夹下 到哪里找就行了</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure>
<h1 id="第七是-部署"><a href="#第七是-部署" class="headerlink" title="第七是 部署"></a>第七是 部署</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure>
<h1 id="第八是-本地运行"><a href="#第八是-本地运行" class="headerlink" title="第八是 本地运行"></a>第八是 本地运行</h1><p><strong>这里地址是localhost:4000</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure>
<h1 id="查看你有没有被百度收录文章"><a href="#查看你有没有被百度收录文章" class="headerlink" title="查看你有没有被百度收录文章"></a>查看你有没有被百度收录文章</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">site:(你的博客)  //直接复制命令百度搜索<br></code></pre></td></tr></table></figure>
<h1 id="amp-的作用"><a href="#amp-的作用" class="headerlink" title="&amp;的作用"></a>&amp;的作用</h1><p><strong>表示清除静态文件和部署</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean &amp; hexo d <br></code></pre></td></tr></table></figure>
<h1 id="改变文章链接规则"><a href="#改变文章链接规则" class="headerlink" title="改变文章链接规则"></a>改变文章链接规则</h1><p><strong>Ctrl+f搜索 permalink</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">permalink: :id.html   //填入:id.html<br></code></pre></td></tr></table></figure>
<p><strong>然后在指定位置填入id即可 数字随意, 只要保证每篇文章里面的数字不要一样就行</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e522a942e0f.jpg"></p>
<br>]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title>Java Swing 图形界面速背表(未完工)</title>
    <url>/Java-Swing.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<blockquote>
<h1 id="JavaSwing-布局管理器"><a href="#JavaSwing-布局管理器" class="headerlink" title="JavaSwing 布局管理器"></a>JavaSwing 布局管理器</h1></blockquote>
<p>getWigth 得到宽度 或者 控件的高度<br>getHeight 得到高度 或者 控件的宽度<br>root.setLayout(layoutMgr) 给容器设置一个布局器<br>layoutMgr.layoutContainer(…) 当容器改变大小时, 自动调用布局器重新布局<br>Perferred Size 指控件最佳大小<br>Dimension 表示尺寸信息 size.width/size.height</p>
<h1 id="FlowLayout-流式布局"><a href="#FlowLayout-流式布局" class="headerlink" title="FlowLayout (流式布局)"></a>FlowLayout (流式布局)</h1><p>setPreferred Size() 控制每个控件的显示高度和宽度</p>
<p>GridLayout (网格布局)</p>
<p>GridBagLayout (网格袋布局)</p>
<p>BoxLayout (箱式布局)</p>
<p>GroupLayout (分组布局)</p>
<p>AFXLayout  (水平布局)</p>
<h1 id="AfAnyWhere-自由位置布局"><a href="#AfAnyWhere-自由位置布局" class="headerlink" title="AfAnyWhere (自由位置布局)"></a>AfAnyWhere (自由位置布局)</h1><p>new AfMargin(top,left,botton,right)</p>
<h1 id="CardLayout-卡片布局"><a href="#CardLayout-卡片布局" class="headerlink" title="CardLayout (卡片布局)"></a>CardLayout (卡片布局)</h1><p>CardLayout.show(pane,”name”)</p>
<h1 id="BorderLayout-边界布局"><a href="#BorderLayout-边界布局" class="headerlink" title="BorderLayout (边界布局)"></a>BorderLayout (边界布局)</h1><p>setPreferrendSize() 对于上下边界调高度, 左右边界调宽度<br>PAGE_START 上边界<br>PAGE_END 下边界<br>LINE_START 左边界<br>LINE_END 右边<br>CENTER 中央</p>
<p>SpringLayout (弹性布局)</p>
<p>null (绝对布局)</p>
<blockquote>
<h1 id="JavaSwing-基本组件"><a href="#JavaSwing-基本组件" class="headerlink" title="JavaSwing 基本组件"></a>JavaSwing 基本组件</h1></blockquote>
<h1 id="JLabel-标签"><a href="#JLabel-标签" class="headerlink" title="JLabel (标签)"></a>JLabel (标签)</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-type">JLabel</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;我是JLabel&quot;</span>);<br>contenntPane.add(x);<br><span class="hljs-comment">//也可以用一行</span><br>contenntPane.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;我是JLabel&quot;</span>);<br></code></pre></td></tr></table></figure>
<p>JLabel 用于显示短文本或图标<br>setText() 设置文件<br>setFont() 设置字体<br>setForeground() 设置文件颜色<br>setToolTipText() 设置工具提示<br>getText() 取得用户输入</p>
<h2 id="JButton-按钮"><a href="#JButton-按钮" class="headerlink" title="JButton (按钮)"></a>JButton (按钮)</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-type">JButton</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;我是JButton&quot;</span>);<br>contenntPane.add(x);<br><span class="hljs-comment">//也可以用一行</span><br>contenntPane.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;我是JButton&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>JRadioButton (单选按钮)</p>
<h1 id="JCheckBox-复选框"><a href="#JCheckBox-复选框" class="headerlink" title="JCheckBox (复选框)"></a>JCheckBox (复选框)</h1><p>getSelected() 选中状态<br>setSelected() 设置<br>getText() 选项文字<br>addActionListener() 用户选中/取消时触发</p>
<p>JToggleButton (开关按钮)</p>
<h1 id="JTextField-文本框-或者-单行文本框"><a href="#JTextField-文本框-或者-单行文本框" class="headerlink" title="JTextField (文本框 或者 单行文本框)"></a>JTextField (文本框 或者 单行文本框)</h1><p>JTextField 用于显示单行文本<br>new JTextField(10) 其中,10用于表示列数, 用于计算宽度(并不是字数限制)<br>setText() 设置文本<br>getText() 获取文本<br>setFont() 设置字体</p>
<h1 id="JoptionPane-消息框"><a href="#JoptionPane-消息框" class="headerlink" title="JoptionPane 消息框"></a>JoptionPane 消息框</h1><p>JoptionPane.showMessageDialog() 提示消息框<br>showMessageDialog  简单消息提示<br>showConfirmDialog  简单消息确认<br>showInputDialog  简单数据输入<br>showoptionDialog  简单选择输入<br>Blocked 阻塞<br>JoptionPane.showInputDialog() 提示消息框</p>
<p>JPasswordField (密码框)</p>
<h2 id="JTextArea-文本区域-或者-多行文本框"><a href="#JTextArea-文本区域-或者-多行文本框" class="headerlink" title="JTextArea (文本区域 或者 多行文本框)"></a>JTextArea (文本区域 或者 多行文本框)</h2><p>JComboBox (下拉列表框)</p>
<p>JList (列表框)</p>
<p>JProgressBar (进度条)</p>
<p>JSlider (滑块)</p>
<blockquote>
<h1 id="JavaSwing-面板组件"><a href="#JavaSwing-面板组件" class="headerlink" title="JavaSwing 面板组件"></a>JavaSwing 面板组件</h1></blockquote>
<p>JPanel (面板)</p>
<p>JScrollPane (滚动面板)</p>
<p>JSplitPane (分隔面板)</p>
<p>JTabbedPane (选项卡面板)</p>
<p>JLayeredPane (层级面板)</p>
<blockquote>
<h1 id="JavaSwing-其他组件"><a href="#JavaSwing-其他组件" class="headerlink" title="JavaSwing 其他组件"></a>JavaSwing 其他组件</h1></blockquote>
<p>JFrame (窗口)[一般存放标题]<br>setTitle  (设置标题)</p>
<p>Container (内容面板)</p>
<h1 id="setVisible-设置窗口大小-和-setVisble-显示窗口大小"><a href="#setVisible-设置窗口大小-和-setVisble-显示窗口大小" class="headerlink" title="setVisible (设置窗口大小) 和 setVisble(显示窗口大小)"></a>setVisible (设置窗口大小) 和 setVisble(显示窗口大小)</h1><p>setVisible(boolean)方法是用来显示/隐藏GUI组件的<br>需要显示则使用true, 需要隐藏则使用false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">setVisible(<span class="hljs-literal">true</span>)  <span class="hljs-comment">//例如这个</span><br></code></pre></td></tr></table></figure>
<p>意思是说数据模型已经构造好了, 允许JVM可以根据数据模型执行paint方法开始画图并显示到屏幕上了, 并不是显示图形, 而是可以运行开始画图, 要把setVisible()方法放到最后面, 代码是按顺序执行的 , 如果把setVisible()放在前边, 后边再添加其他组件的时候, 有可能不会显示出来</p>
<p>JDialog, JOptionPane (对话框)</p>
<p>JFileChooser (文件选择器)</p>
<p>JColorChooser (颜色选择器)</p>
<h1 id="JMenuBar-菜单栏"><a href="#JMenuBar-菜单栏" class="headerlink" title="JMenuBar (菜单栏)"></a>JMenuBar (菜单栏)</h1><p>JMenuBar (菜单项)<br>JMenu (菜单)<br>JMenuItem (菜单项)</p>
<h1 id="JToolBar-工具栏"><a href="#JToolBar-工具栏" class="headerlink" title="JToolBar (工具栏)"></a>JToolBar (工具栏)</h1><p>JButton 工具按钮<br>setIcin() 图标<br>setAction Command() 命令<br>setToolTipText() 提示文字<br>add Action Listener() 事件处理</p>
<p>JPopupMenu (弹出菜单 或者 上下文菜单 或者 右键菜单)<br>JPopupMenu 创建<br>JMenuItem  添加<br>添加鼠标右键的响应, 显示窗口菜单<br>菜单项被点击时, 执行事件处理</p>
<p>JTable (表格)</p>
<p>JTree (树)</p>
<p>JInternalFrame (内部窗口)</p>
<blockquote>
<h1 id="JavaSwing-相关特性-了解就行"><a href="#JavaSwing-相关特性-了解就行" class="headerlink" title="JavaSwing 相关特性(了解就行)"></a>JavaSwing 相关特性(了解就行)</h1></blockquote>
<p>组件的位置和尺寸</p>
<h1 id="组件边框-Border"><a href="#组件边框-Border" class="headerlink" title="组件边框 (Border)"></a>组件边框 (Border)</h1><p>Border本身就是一个接口<br>Padding: 边框与它的内容之间的间距<br>Margin: 边框与它外面的容器之间的间距</p>
<h1 id="AfBorder-添加边框和边距"><a href="#AfBorder-添加边框和边距" class="headerlink" title="AfBorder 添加边框和边距"></a>AfBorder 添加边框和边距</h1><p>addPadding() 内边距<br>addMargin() 外边距<br>addOuterBorder() 外边添加Border<br>addInnerBorder() 里面添加Border</p>
<h1 id="AfPanel-用于快速布局"><a href="#AfPanel-用于快速布局" class="headerlink" title="AfPanel 用于快速布局"></a>AfPanel 用于快速布局</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-type">AfPanel</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AfPanel</span>();<br>p.padding();  <span class="hljs-comment">//设置内边距</span><br>p.margin();  <span class="hljs-comment">//设置外边距</span><br>p.preferredWidth();  <span class="hljs-comment">//设置PrefedSise的宽度</span><br>p.preferredHeight();  <span class="hljs-comment">//设置PrefedSise的高度</span><br></code></pre></td></tr></table></figure>
<h1 id="图片缩放工具"><a href="#图片缩放工具" class="headerlink" title="图片缩放工具"></a>图片缩放工具</h1><p>fitXY()  XY方向拉伸占满<br>fitCenter()  居中显示, 并保持长宽比<br>fitCenterInside() 如果图片较小, 则居中显示, 如果图片越出范围, 则舒服显示</p>
<h1 id="图片显示控件"><a href="#图片显示控件" class="headerlink" title="图片显示控件"></a>图片显示控件</h1><p>AfImageView  图片显示控件<br>setScaleType()  设置缩放类型<br>setImage()  显示图片<br>setBgColor()  设置背景图</p>
<h1 id="鼠标事件-MouseEvent"><a href="#鼠标事件-MouseEvent" class="headerlink" title="鼠标事件 MouseEvent"></a>鼠标事件 MouseEvent</h1><p>addMouseliskener()<br>鼠标点击 mouseClicked<br>鼠标按下 mousePressed<br>鼠标抬起 mouseExited<br>鼠标移入 mouseEntered<br>鼠标移出 mouseExited<br>addMouseMotionliskener()<br>鼠标移动 mouseMoved<br>鼠标拖动 mouseDragged<br>addMouseWheelListener<br>鼠标滚动 mouseWheelMoved</p>
<p>事件处理</p>
<p>多线程并发与线程安全</p>
<p>拖拽功能</p>
<p>系统托盘 (System Tray)</p>
<p>闪屏 (Splash Screen)</p>
<h1 id="Java-AWT-Swing-其他相关"><a href="#Java-AWT-Swing-其他相关" class="headerlink" title="Java AWT/Swing 其他相关"></a>Java AWT/Swing 其他相关</h1><p>Java绘图: 使用Graphics类绘制线段, 矩形, 椭圆/圆弧/扇形, 图片, 文本</p>
<p>Java图片操作 — 图片的读取, 绘制, 缩放, 裁剪, 保存</p>
<p>Java代码截屏: 使用 Java 代码截取电脑屏幕并保存</p>
<p>Java模拟鼠标键盘输入事件 — Robot 类</p>
<p>Java操作桌面应用 — Desktop 类</p>
<p>Java操作系统剪贴板(Clipboard)实现复制和粘贴 –&gt;</p>
<h1 id="特别提醒-AWT-例如-Label-Button"><a href="#特别提醒-AWT-例如-Label-Button" class="headerlink" title="特别提醒 AWT 例如: Label,Button"></a>特别提醒 AWT 例如: Label,Button</h1><h1 id="特别提醒-Swing-例如-JLabel-JButton-只要是以J开头的"><a href="#特别提醒-Swing-例如-JLabel-JButton-只要是以J开头的" class="headerlink" title="特别提醒 Swing 例如: JLabel,JButton 只要是以J开头的"></a>特别提醒 Swing 例如: JLabel,JButton 只要是以J开头的</h1><h1 id="ActionListener-是一个接口-所以派生时用impleme"><a href="#ActionListener-是一个接口-所以派生时用impleme" class="headerlink" title="ActionListener 是一个接口, 所以派生时用impleme"></a>ActionListener 是一个接口, 所以派生时用impleme</h1><p>addActionListener(…)  传入的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">Button.addActionListener(x);  <span class="hljs-comment">//意思是把什么交给谁, 例如button(按键) 和 x </span><br></code></pre></td></tr></table></figure>
<h1 id="演示drawString-方法的示例程序"><a href="#演示drawString-方法的示例程序" class="headerlink" title="演示drawString () 方法的示例程序:"></a>演示drawString () 方法的示例程序:</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">drawString示例程序<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.applet.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldApplet</span>扩展Applet &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span>&#123; <br>g.drawString(<span class="hljs-string">&quot;Hello World&quot;</span>, <span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="显示消息对话框"><a href="#显示消息对话框" class="headerlink" title="显示消息对话框"></a>显示消息对话框</h1><p>showMessageDialog(“里面的文字”)<br>f.setVisible(true)<br>f.setTitle(“框框上的文字”)<br>charAt<br>看见actionPerformed 就要implements ActionListener<br><strong>(Button saveButton = new Button)</strong><br>saveButton.addActionListener(this);没什么加就this<br>(ActionListener=监听器)<br>(this=当前对象的意思)<br>(super是父级对象)<br><strong>如果Container contentPane = newContainer();</strong><br><strong>就Container contentPane = getContentPane();</strong><br>有Thread就想起Runnable</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript jQuery</title>
    <url>/JavaScript-jQuery.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script src=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br><br><br>&lt;script&gt;<br>   <span class="hljs-comment">// 选择器就是css的选择器</span><br>   $(<span class="hljs-string">&#x27;#test-jquey&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我叫史迪奇&#x27;</span>)<br>   )<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br><span class="hljs-comment">//原生js的css选择器</span><br>    <span class="hljs-comment">// 标签选择器</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>();<br>    <span class="hljs-comment">// id选择器</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsById</span>();<br>    <span class="hljs-comment">// 类 class选择器</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>();<br>    <br><span class="hljs-comment">// jQuery的css选择器</span><br>    <span class="hljs-comment">// 标签选择器</span><br>    $(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">click</span>()<br>    <span class="hljs-comment">// id选择器</span><br>    $(<span class="hljs-string">&#x27;#id3&#x27;</span>).<span class="hljs-title function_">click</span>()<br>    <span class="hljs-comment">// 类 class选择器</span><br>    $(<span class="hljs-string">&#x27;.class3&#x27;</span>).<span class="hljs-title function_">click</span>()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>鼠标事件</strong><br>    + mousedown()按下<br>    + mouseenter()当鼠标指针穿过元素时<br>    + mouseleave()离开<br>    + mousemove()移动<br>    + mouseout()当鼠标指针从元素上移开时<br>    + mouseover()点击结束<br>    + mouseup()元素上放松鼠标按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>定位板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        #divMove &#123;<br>            width: 500px;<br>            height: 500px;<br>            border: 1px solid blue;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--要求: 获取鼠标当前的一个坐标--&gt;</span><br>    mouse: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouseMove&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;divMove&quot;</span>&gt;</span><br>        在这里移动鼠标<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        // 当网页元素加载完毕之后, 响应事件<br>        $(function() &#123;<br>            $(&#x27;#divMove&#x27;).mousemove(function(e) &#123;<br>                $(&#x27;#mouseMove&#x27;).text(&#x27;x:&#x27; + e.pageX + &#x27;y:&#x27; + e.pageY)<br>            &#125;)<br>        &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<!DOCTYPE html>
<html lang="cn">

<head>
    <title>定位板</title>
    <script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"></script>
    <style>
        #divMove {
            width: 500px;
            height: 500px;
            border: 1px solid blue;
        }
    </style>
</head>

<body>
    <!--要求: 获取鼠标当前的一个坐标-->
    mouse: <span id="mouseMove"></span>
    <div id="divMove">
        在这里移动鼠标
    </div>
    <script>
        // 当网页元素加载完毕之后, 响应事件
        $(function() {
            $('#divMove').mousemove(function(e) {
                $('#mouseMove').text('x:' + e.pageX + 'y:' + e.pageY)
            })
        });
    </script>
</body>

</html>

<h1 id="操作-DOM元素"><a href="#操作-DOM元素" class="headerlink" title="操作 DOM元素"></a>操作 DOM元素</h1><h3 id="节点文本操作"><a href="#节点文本操作" class="headerlink" title="节点文本操作"></a>节点文本操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;head&gt;<br>    &lt;title&gt;节点文本操作&lt;/title&gt;<br>    &lt;script src=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;ul id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品<br>        &lt;li name=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/li&gt;<br>        &lt;li name=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/li&gt;<br>        &lt;li name=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">text</span>()<br>        $(<span class="hljs-string">&#x27;#Syp&#x27;</span>).<span class="hljs-property">html</span><br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 获得值</span><br>$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">text</span>()<br><span class="hljs-comment">// 设置值</span><br>$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;我叫史迪奇&quot;</span>)<br><span class="hljs-comment">// 获得值</span><br>$(<span class="hljs-string">&#x27;#Syp&#x27;</span>).<span class="hljs-title function_">html</span>()<br><span class="hljs-comment">// 设置值</span><br>$(<span class="hljs-string">&#x27;#Syp&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;strong&gt;我叫史迪奇&lt;/strong&gt;&quot;</span>)<br></code></pre></td></tr></table></figure>
<h3 id="css的操作"><a href="#css的操作" class="headerlink" title="css的操作"></a>css的操作</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;blue&quot;</span>&#125;)<br></code></pre></td></tr></table></figure>
<h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 本质 display: none;</span><br>    <span class="hljs-comment">// 显示</span><br>    $(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">show</span>()<br>    <span class="hljs-comment">// 隐藏</span><br>    $(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">hide</span>()<br></code></pre></td></tr></table></figure>
<h3 id="window操作"><a href="#window操作" class="headerlink" title="window操作"></a>window操作</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 查看窗口宽度</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">width</span>()<br><span class="hljs-comment">// 查看窗口高度</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>()<br><span class="hljs-comment">// 切换显示与隐藏</span><br>$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">toggle</span>();<br></code></pre></td></tr></table></figure>
<h3 id="ajax操作"><a href="#ajax操作" class="headerlink" title="ajax操作"></a>ajax操作</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&quot;#Syp&quot;</span>).<span class="hljs-title function_">ajax</span>()<br><br>$.<span class="hljs-title function_">ajax</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;test.html&quot;</span>, <span class="hljs-attr">context</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>&#125;&#125;);<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">以下为实验对象</font></p>
<!DOCTYPE html>
<html lang="cn">

<head>
    <title>节点文本操作</title>
    <script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"></script>
</head>

<body>
    <ul id="Syp">实验品
        <li name="Stitch">史迪奇</li>
        <li name="Reuben">鲁本</li>
        <li name="Angel">安琪</li>
    </ul>
    <script>
        $('#Syp li[name=Stitch]').text()
        $('#Syp').html
    </script>
</body>

</html>

<br>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript BOM</title>
    <url>/JavaScript-BOM.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><p><strong>作用: 有关浏览器窗口</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br>undefind<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span><br><span class="hljs-number">790</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span><br><span class="hljs-number">918</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerHeight</span><br><span class="hljs-number">28</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerWidth</span><br><span class="hljs-number">160</span><br></code></pre></td></tr></table></figure>
<h1 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h1><p><strong>作用: 封装浏览器信息</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">navigator.<span class="hljs-property">appName</span><br><span class="hljs-string">&quot;Netscape&quot;</span><br>navigator.<span class="hljs-property">appVersion</span><br><span class="hljs-string">&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span><br>navigator.<span class="hljs-property">userAgent</span><br><span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span><br>navigator.<span class="hljs-property">platform</span><br><span class="hljs-string">&quot;Win32&quot;</span><br></code></pre></td></tr></table></figure>
<h1 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h1><p><strong>作用: 代表屏幕尺寸</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">screen.<span class="hljs-property">width</span><br><span class="hljs-number">1536</span><br>screen.<span class="hljs-property">height</span><br><span class="hljs-number">864</span><br></code></pre></td></tr></table></figure>
<h1 id="location-重要"><a href="#location-重要" class="headerlink" title="location (重要)"></a>location (重要)</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 主机</span><br><span class="hljs-attr">host</span>: <span class="hljs-string">&quot;www.baidu.com&quot;</span><br><span class="hljs-comment">// 当前指向的位置</span><br><span class="hljs-attr">href</span>: <span class="hljs-string">&quot;http://www.baidu.com/&quot;</span><br><span class="hljs-comment">// 协议</span><br><span class="hljs-attr">protocol</span>: <span class="hljs-string">&quot;http:&quot;</span><br><span class="hljs-comment">//重新加载/刷新</span><br><span class="hljs-attr">reload</span>: ƒ <span class="hljs-title function_">reload</span>()<br><span class="hljs-comment">// 设置新的地址</span><br>location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&#x27;https://sdq3.gitee.io/&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="document"><a href="#document" class="headerlink" title="document"></a>document</h1><p><strong>document 表示当前页面, HTML DOM文档树</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span><br><span class="hljs-string">&quot;百度一下, 你就知道&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><span class="hljs-string">&quot;我叫史迪奇&quot;</span><br></code></pre></td></tr></table></figure>
<p><strong>获取具体的文档树节点</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    var dl = document.getElementById(&#x27;app&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>获取cookie</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span><br><span class="hljs-string">&quot;BIDUPSID=EC9E21CA08B01D9E2E577F635293067...&quot;</span><br></code></pre></td></tr></table></figure>
<p><strong>劫持cookie原理</strong><br>    + 劫持cookie: 获取你的cookie然后上传的它的服务器<br>    + 预防: 服务器端设置 cokie: httpOnly</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script src=<span class="hljs-string">&quot;sdq.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1><p><strong>代表浏览器的历史记录</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 前进</span><br>history.<span class="hljs-title function_">forward</span>()<br><span class="hljs-comment">// 返回</span><br>history.<span class="hljs-title function_">back</span>()<br></code></pre></td></tr></table></figure>
<br>














]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript DOM</title>
    <url>/JavaScript-DOM.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="操作DOM对象"><a href="#操作DOM对象" class="headerlink" title="操作DOM对象"></a>操作DOM对象</h1><h2 id="获得DOM节点"><a href="#获得DOM节点" class="headerlink" title="获得DOM节点"></a>获得DOM节点</h2><p><strong>浏览器网页就是一个DOM树形结构</strong><br>    + 更新: 更新DOM节点<br>    + 遍历DOM节点: 得到DOM节点<br>    + 删除: 删除一个DOM节点<br>    + 添加: 添加一个新的节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 要操作一个DOM节点就必须先获得这个DOM节点</span><br><span class="hljs-comment">// 获得DOM节点</span><br>&lt;div id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;<br>    &lt;h1&gt;实验品&lt;/h1&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-comment">// 对应 css选择器</span><br>    <span class="hljs-keyword">var</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;h1&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Reuben</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Reuben&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Angel</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByclassName</span>(<span class="hljs-string">&quot;Angel&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Stitch</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Stitch&quot;</span>)<br>    <span class="hljs-comment">// 获取父节点下的所有子节点</span><br>    <span class="hljs-keyword">var</span> childrens = <span class="hljs-title class_">Syp</span>.<span class="hljs-property">hildrens</span>;<br>    <span class="hljs-comment">// Syp.firstChild</span><br>    <span class="hljs-comment">// Syp.LastChild</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="更新DOM节点"><a href="#更新DOM节点" class="headerlink" title="更新DOM节点"></a>更新DOM节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 要操作一个DOM节点就必须先获得这个DOM节点</span><br><span class="hljs-comment">// 获得DOM节点</span><br>&lt;div id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;<br>    &lt;h1&gt;实验品&lt;/h1&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h3 id="操作文本"><a href="#操作文本" class="headerlink" title="操作文本"></a>操作文本</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 修改文本的值</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;我叫史迪奇&#x27;</span>;<br><span class="hljs-comment">// 可以解析HTML文本标签</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;strong&gt;我叫史迪奇&lt;/strong&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h3 id="操作css"><a href="#操作css" class="headerlink" title="操作css"></a>操作css</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 属性使用 字符串 包起来</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;blue&#x27;</span>;<br><span class="hljs-comment">// fontSize是驼峰命名</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&#x27;333px&#x27;</span>;<br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">style</span>.<span class="hljs-property">padding</span> = <span class="hljs-string">&#x27;3em&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><strong>步骤: 先获取父节点, 再获取子节点, 然后通过父节点删除子节点</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;<br>    &lt;h1&gt;实验品&lt;/h1&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-comment">// 先获取父节点</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-title class_">Reuben</span>.<span class="hljs-property">parentElement</span>;<br>    <span class="hljs-comment">// 再获取子节点</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Reuben</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Reuben&quot;</span>)<br>    <span class="hljs-comment">// 然后通过父节点删除子节点</span><br>    <span class="hljs-title class_">Syp</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-title class_">Reuben</span>)<br><br>    <span class="hljs-comment">// 删除是一个动态过程 一删除其余的也跟着删除</span><br>    <span class="hljs-title class_">Syp</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-title class_">Syp</span>.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h2 id="插入DOM节点"><a href="#插入DOM节点" class="headerlink" title="插入DOM节点"></a>插入DOM节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 追加效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 追加<br>list.appendChild(Stitch);<br></code></pre></td></tr></table></figure>

<h2 id="创建DOM新节点"><a href="#创建DOM新节点" class="headerlink" title="创建DOM新节点"></a>创建DOM新节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br><br>    <span class="hljs-comment">// 通过 JS 创建新的p节点</span><br>    <span class="hljs-keyword">var</span> sdq = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;p&quot;</span>)<br>    <span class="hljs-comment">// 给它创建id</span><br>    sdq.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;sdq&quot;</span><br>    <span class="hljs-comment">// 内容</span><br>    sdq.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><br>    list.<span class="hljs-property">appendChild</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 创建<br>list.appendChild(sdq);<br></code></pre></td></tr></table></figure>
<h3 id="创建一个script标签节点"><a href="#创建一个script标签节点" class="headerlink" title="创建一个script标签节点"></a>创建一个script标签节点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br>    <span class="hljs-keyword">var</span> sdq = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;p&quot;</span>)<br>    sdq.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;sdq&quot;</span><br>    sdq.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><br>    <span class="hljs-comment">// 通过这个属性, 可以设置任意的值</span><br>    <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br>    script.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;text/javascript&#x27;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 创建<br>list.appendChild(script);<br></code></pre></td></tr></table></figure>
<h3 id="创建一个script标签节点-1"><a href="#创建一个script标签节点-1" class="headerlink" title="创建一个script标签节点"></a>创建一个script标签节点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br>    <span class="hljs-keyword">var</span> sdq = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;p&quot;</span>)<br>    sdq.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;sdq&quot;</span><br>    sdq.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><br>    <span class="hljs-comment">// 创建空style标签</span><br>    <span class="hljs-keyword">var</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>    style.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;text/css&#x27;</span>);<br>    <span class="hljs-comment">// 标签内容</span><br>    style.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;body&#123;background-color: chartreuse;&#125;&#x27;</span><br>    <span class="hljs-comment">// document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(style)</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 创建style<br>document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(style)<br></code></pre></td></tr></table></figure>
<h2 id="操作表单-验证"><a href="#操作表单-验证" class="headerlink" title="操作表单 (验证)"></a>操作表单 (验证)</h2><ul>
<li>文本框 text</li>
<li>下拉框 <select></select></li>
<li>单选框 radio</li>
<li>多选框 checkbox</li>
<li>隐藏域 hidden</li>
<li>密码框  password</li>
</ul>
<h3 id="获得提交的信息"><a href="#获得提交的信息" class="headerlink" title="获得提交的信息"></a>获得提交的信息</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;form action=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>&lt;p&gt;<br>    &lt;span&gt;实验品编号: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>    &lt;!-- 多选框的值, 就是定义好value --&gt;<br>    &lt;p&gt;<br>        &lt;span&gt;实验品编号: &lt;/span&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;See&quot;</span> vlaue=<span class="hljs-string">&quot;Yes&quot;</span> id=<span class="hljs-string">&quot;Yes&quot;</span>&gt;有看过<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;See&quot;</span> vlaue=<span class="hljs-string">&quot;No&quot;</span> id=<span class="hljs-string">&quot;No&quot;</span>&gt;没看过<br>    &lt;/p&gt;<br><br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">See</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Yes</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">NO</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;No&quot;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 得到输入框的值<br>See.value<br>// 修改输入框的值<br>See.value = &#x27;333&#x27;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<p>
    <span>实验品编号: </span><input type="text" id="name">
</p>
    <!-- 多选框的值, 就是定义好value -->
    <p>
        <span>实验品编号: </span>
        <input type="radio" name="See" vlaue="Yes" id="Yes">有看过
        <input type="radio" name="See" vlaue="No" id="No">没看过
    </p>



<script>
    var See = document.getElementById("name")
    var Yes = document.getElementById("Yes")
    var NO = document.createRlement("No")
</script>


<h2 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;!-- <span class="hljs-variable constant_">MD5</span> 工具类 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;form action=<span class="hljs-string">&quot;#&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>&lt;p&gt;<br>    &lt;span&gt;实验品编号: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>&lt;p&gt;<br>    &lt;span&gt;密&amp;emsp;&amp;emsp;&amp;emsp;码: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-pwd&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> id=<span class="hljs-string">&quot;md5-pwd&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>    &lt;!-- 绑定事件 onclick 被点击 --&gt;<br>    &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> onclick=<span class="hljs-string">&quot;dianji()&quot;</span>&gt;登陆&lt;/button&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">dianji</span>(<span class="hljs-params"></span>)<br>        <span class="hljs-keyword">var</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">var</span> pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pwd&quot;</span>);<br>        <span class="hljs-keyword">var</span> md5pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;md5-pwd&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name.<span class="hljs-property">value</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pwd.<span class="hljs-property">value</span>);<br><br>        <span class="hljs-comment">// MD5 算法</span><br>        pwd.<span class="hljs-property">value</span> = <span class="hljs-title function_">md5</span>(pwd.<span class="hljs-property">value</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pwd.<span class="hljs-property">value</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!-- MD5 工具类 -->
<script src="https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"></script>
<form action="#" method="post">
<p>
    <span>实验品编号: </span><input type="text" id="name">
</p>
<p>
    <span>密&emsp;&emsp;&emsp;码: </span><input type="password" id="input-pwd">
</p>
    <input type="hidden" id="md5-pwd" name="password">
    <!-- 绑定事件 onclick 被点击 -->
    <button type="submit" onclick="dianji()">登陆</button>

<script>
    function dianji()
        var name = document.getElementById("name");
        var pwd = document.getElementById("pwd");
        var md5pwd = document.getElementById("md5-pwd");
        console.log(name.value);
        console.log(pwd.value);

        // MD5 算法
        md5pwd.value = md5(pwd.value)
        console.log(pwd.value);
</script>

<h1>加强版</h1>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;!-- <span class="hljs-variable constant_">MD5</span> 工具类 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;!-- 表单绑定提交事件onsubmit= 绑定应该提交检查的函数 trur和<span class="hljs-literal">false</span>将结果返回给表单用 --&gt;<br>&lt;form action=<span class="hljs-string">&quot;http://www.baidu.com/&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> onsubit=<span class="hljs-string">&quot;dianji()&quot;</span>&gt;<br>&lt;p&gt;<br>    &lt;span&gt;实验品编号: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>&lt;p&gt;<br>    &lt;span&gt;密&amp;emsp;&amp;emsp;&amp;emsp;码: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-pwd&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> id=<span class="hljs-string">&quot;md5-pwd&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>    &lt;!-- 绑定事件 onclick 被点击 --&gt;<br>    &lt;button type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登陆&lt;/button&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">dianji</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">var</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">var</span> pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pwd&quot;</span>);<br>        <span class="hljs-keyword">var</span> md5pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;md5-pwd&quot;</span>);<br>        <span class="hljs-comment">// MD5 算法</span><br>        md5pwd.<span class="hljs-property">value</span> = <span class="hljs-title function_">md5</span>(pwd.<span class="hljs-property">value</span>);<br>        <span class="hljs-comment">// 可以判断表单内容 true 通过提交 false 阻止提交</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!-- MD5 工具类 -->
<script src="https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"></script>

<!-- 表单绑定提交事件onsubmit= 绑定应该提交检查的函数 trur和false将结果返回给表单用 -->
<form action="http://www.baidu.com/" method="post" onsubit="dianji()">
<p>
    <span>实验品编号: </span><input type="text" id="name">
</p>
<p>
    <span>密&emsp;&emsp;&emsp;码: </span><input type="password" id="input-pwd">
</p>
    <input type="hidden" id="md5-pwd" name="password">
    <!-- 绑定事件 onclick 被点击 -->
    <button type="submit">登陆</button>

<script>
    function dianji(){
        alert(1);
        var name = document.getElementById("name");
        var pwd = document.getElementById("pwd");
        var md5pwd = document.getElementById("md5-pwd");
        // MD5 算法
        md5pwd.value = md5(pwd.value);
        // 可以判断表单内容 true 通过提交 false 阻止提交
        return true;
    }
</script>

<br>





</form></form>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 函数</title>
    <url>/JavaScript-apply-Data.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h1><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p><strong>方法就是把函数放在对象里面 对象只有两个东西: 属性和方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,、<br>    <span class="hljs-comment">// 编号</span><br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br><br>    <span class="hljs-comment">//方法</span><br>    计算编号: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 今年 - 编号</span><br>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>():<br>        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">nuber</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 属性</span><br>sdq.<span class="hljs-property">name</span><br><span class="hljs-comment">// 方法 (方法一定带括号)</span><br>sdq.<span class="hljs-title function_">number</span>()<br></code></pre></td></tr></table></figure>
<p><strong>另类写法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSdq</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>():<br>        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">nuber</span>;<br>    &#125;<br><br><span class="hljs-keyword">var</span> sdq = &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,、<br>    <span class="hljs-comment">// 编号</span><br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">sdq3</span>: getSdq<br>&#125;<br><br><span class="hljs-comment">// 提示: 正常</span><br>sdq.<span class="hljs-property">name</span><br><span class="hljs-comment">// 提示: NaN window</span><br>sdq.<span class="hljs-title function_">number</span>()<br></code></pre></td></tr></table></figure>
<h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h1><p><strong>控制this指向</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSdq</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>():<br>        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">nuber</span>;<br>    &#125;<br><br><span class="hljs-keyword">var</span> sdq = &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,、<br>    <span class="hljs-comment">// 编号</span><br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">sdq3</span>: getSdq<br>&#125;<br><br><span class="hljs-comment">// this 指向 sdq 参数为空</span><br>etSdq.<span class="hljs-title function_">apply</span>(sdq,[]);<br></code></pre></td></tr></table></figure>
<h1 id="var和let和const的区别"><a href="#var和let和const的区别" class="headerlink" title="var和let和const的区别"></a>var和let和const的区别</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> 定义常量<br><span class="hljs-keyword">let</span> 有区域<br><span class="hljs-keyword">var</span> 整个函数内都有效<br></code></pre></td></tr></table></figure>
<h1 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h1><h2 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">typeof</span> <span class="hljs-number">333</span><br><span class="hljs-string">&quot;number&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;333&#x27;</span><br><span class="hljs-string">&quot;string&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span><br><span class="hljs-string">&quot;boolean&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Na</span>N<br><span class="hljs-string">&quot;number&quot;</span><br><br><span class="hljs-keyword">typeof</span> []<br><span class="hljs-string">&quot;object&quot;</span><br><br><span class="hljs-keyword">typeof</span> &#123;&#125;<br><span class="hljs-string">&quot;object&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Math</span>.<span class="hljs-property">sdq</span><br><span class="hljs-string">&quot;function&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><br><span class="hljs-string">&quot;undefined&quot;</span><br></code></pre></td></tr></table></figure>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>now.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">// 年</span><br>now.<span class="hljs-title function_">getMonth</span>();    <span class="hljs-comment">// 月 0-11</span><br>now.<span class="hljs-title function_">getDate</span>();     <span class="hljs-comment">// 日</span><br>now.<span class="hljs-title function_">getDay</span>();      <span class="hljs-comment">// 星期几</span><br>now.<span class="hljs-title function_">getHours</span>();    <span class="hljs-comment">// 时</span><br>now.<span class="hljs-title function_">getMinutes</span>();  <span class="hljs-comment">// 分</span><br>now.<span class="hljs-title function_">getseconds</span>();  <span class="hljs-comment">// 秒</span><br>now.<span class="hljs-title function_">getTime</span>();     <span class="hljs-comment">// 时间截 全世界统一 1970 1.1 0:00:00 毫秒数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(一窜数字))  <span class="hljs-comment">//时间截转为时间</span><br></code></pre></td></tr></table></figure>
<p><strong>转换</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(一窜数字);<br><br><span class="hljs-title class_">Sat</span> <span class="hljs-title class_">Jan</span> <span class="hljs-number">04</span> <span class="hljs-number">2021</span> <span class="hljs-number">10</span>:<span class="hljs-number">48</span>:<span class="hljs-number">35</span> <span class="hljs-variable constant_">GMT</span>+<span class="hljs-number">0800</span> (中国标准时间)<br><br>now.<span class="hljs-property">toLocaleString</span>  <span class="hljs-comment">// 注意, 调用是一个方法/方式 非属性</span><br><br>f <span class="hljs-title function_">toLocaleString</span>(<span class="hljs-params"></span>) &#123;[native code]&#125;<br><br>now.<span class="hljs-title function_">toLocaleString</span>()<br><span class="hljs-string">&quot;2020/1/4 上午10:51:25&quot;</span><br><br>now.<span class="hljs-title function_">toGMTString</span>()<br><span class="hljs-string">&quot;Sat, 03 Jan 2021 05:48:42&quot;</span><br></code></pre></td></tr></table></figure>
<h2 id="json字符串js对象的转换"><a href="#json字符串js对象的转换" class="headerlink" title="json字符串js对象的转换"></a>json字符串js对象的转换</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;未知&quot;</span><br>&#125;<br><br><span class="hljs-comment">// 对象转化json字符串 &#123;&quot;name&quot;:&quot;史迪奇&quot;, &quot;number&quot;:626, &quot;sex&quot;: &quot;未知&quot;&#125;</span><br><span class="hljs-keyword">var</span> jsonUser = <span class="hljs-variable constant_">JSON</span>.<span class="hljs-title function_">stringify</span>(user);<br><br><span class="hljs-comment">// json 字符串转化对象 参数为 json字符串</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-variable constant_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;史迪奇&quot;, &quot;number&quot;:626, &quot;sex&quot;: &quot;未知&quot;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ul>
<li>原生的js写法 xhr 异步请求</li>
<li>jQuey 封装的方法 $(“#name”).ajax(“”)</li>
<li>axios 请求</li>
</ul>
<br>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript (函数之定义和获取)</title>
    <url>/JavaScript-definition-obtain.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>一旦执行return 代表函数结束,返回结果 没有执行return, 函数执行完也会返回结果 undefined</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>function(x){….}是匿名函数, 可以把结果赋值给abs, 可以调用函数</strong></p>
<h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><p><strong>可以传任意个参数, 也可以不传递参数 假设不传递参数, 如何规避</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-comment">//手动抛出异常来判断</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x!== <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>        thow <span class="hljs-string">&quot;Not a Number&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="arguments-传递进来的所有的参数是一个数组"><a href="#arguments-传递进来的所有的参数是一个数组" class="headerlink" title="arguments 传递进来的所有的参数是一个数组"></a>arguments 传递进来的所有的参数是一个数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;x=&gt;&quot;</span>+x)<br>        thow <span class="hljs-string">&quot;Not a Number&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-variable language_">console</span>,<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[i]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h1><p><strong>以前:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.;length&gt;<span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;i++) &#123;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>ES6的引入的新特性, 获取除了已经定义的参数之外的所有参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdq</span>(<span class="hljs-params">s,d,q,... rest</span>) &#123;&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;s=&gt;&quot;</span>+s);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;d=&gt;&quot;</span>+d);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;q=&gt;&quot;</span>+q);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>rest参数只能写在最后面, 必须用…标识</strong></p>
<br>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 函数的定义和参数获取</title>
    <url>/JavaScript-definition-obtain.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>概念: 对象(属性, 函数/方法)</strong><br>    + 函数放在对象里面叫方法<br>    + 放在外面是函数</p>
<h3 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h3><p><strong>后端写法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 如果没有执行return函数执行完也会返回结果, 结果是undefined</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdq</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>前端写法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// function(x)&#123;...&#125;这是一个匿名函数, 但是可以把结果赋值给sdq, 通过sdq调用函数</span><br><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">sdq</span>(<span class="hljs-number">3</span>)  <span class="hljs-comment">//输出3</span><br><span class="hljs-title function_">sdq</span>(-<span class="hljs-number">3</span>)  <span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></figure>
<h3 id="异常判断"><a href="#异常判断" class="headerlink" title="异常判断"></a>异常判断</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-comment">// x的类型(typeof)是不是数字(number)不是数字规避</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x!== <span class="hljs-string">&#x27;number&#x27;</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;压根不是数字&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="arguments-数组"><a href="#arguments-数组" class="headerlink" title="arguments 数组"></a>arguments 数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;x=&gt;&quot;</span>+x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// if (arguments.length&gt;1)&#123;</span><br>    <span class="hljs-comment">//  arguments[1]</span><br>    <span class="hljs-comment">//&#125;</span><br><br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h3><p><strong>ES6 引入的型特性, 获取除了已经定义的参数之外的所有参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// rest参数只能写在最后面, 必须用...标识</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdq</span>(<span class="hljs-params">s,d,q,...rest</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;s=&gt;&quot;</span>+s);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;d=&gt;&quot;</span>+d);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;q=&gt;&quot;</span>+q);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 函数的定义和参数获取</title>
    <url>/JavaScript-function.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>概念: 对象(属性, 函数/方法)</strong><br>    + 函数放在对象里面叫方法<br>    + 放在外面是函数</p>
<h3 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h3><p><strong>后端写法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 如果没有执行return函数执行完也会返回结果, 结果是undefined</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdq</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>前端写法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// function(x)&#123;...&#125;这是一个匿名函数, 但是可以把结果赋值给sdq, 通过sdq调用函数</span><br><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 一旦执行到return代表函数结束, 返回结果</span><br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">sdq</span>(<span class="hljs-number">3</span>)  <span class="hljs-comment">//输出3</span><br><span class="hljs-title function_">sdq</span>(-<span class="hljs-number">3</span>)  <span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></figure>
<h3 id="异常判断"><a href="#异常判断" class="headerlink" title="异常判断"></a>异常判断</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-comment">// x的类型(typeof)是不是数字(number)不是数字规避</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x!== <span class="hljs-string">&#x27;number&#x27;</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;压根不是数字&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="arguments-数组"><a href="#arguments-数组" class="headerlink" title="arguments 数组"></a>arguments 数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;x=&gt;&quot;</span>+x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// if (arguments.length&gt;1)&#123;</span><br>    <span class="hljs-comment">//  arguments[1]</span><br>    <span class="hljs-comment">//&#125;</span><br><br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h3><p><strong>ES6 引入的型特性, 获取除了已经定义的参数之外的所有参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// rest参数只能写在最后面, 必须用...标识</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdq</span>(<span class="hljs-params">s,d,q,...rest</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;s=&gt;&quot;</span>+s);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;d=&gt;&quot;</span>+d);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;q=&gt;&quot;</span>+q);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(Map和Set)</title>
    <url>/JavaScript-Map-Set.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*ES6 Map*/</span><br><span class="hljs-comment">/*学生的成绩, 学生的名字 两种方式*/</span><br><span class="hljs-keyword">var</span> names = [<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-string">&quot;强霸&quot;</span>];<br><span class="hljs-keyword">var</span> scores = [<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">36</span>]<br><span class="hljs-comment">/*另一种*/</span><br><span class="hljs-keyword">var</span> map = naw <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;强霸&quot;</span>,<span class="hljs-number">36</span>]]);<br><span class="hljs-keyword">var</span> name = map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;史迪奇&quot;</span>);    <span class="hljs-comment">/*通过key获得value*/</span> <br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;独眼霹雳&quot;</span>,<span class="hljs-number">60</span>);          <span class="hljs-comment">/*新增或修改*/</span> <br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;强霸&quot;</span>);              <span class="hljs-comment">/*删除*/</span><br></code></pre></td></tr></table></figure>
<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">set.<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>)                 <span class="hljs-comment">/*添加*/</span>  <br>set.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;强霸&quot;</span>);        <span class="hljs-comment">/*删除*/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set.<span class="hljs-title function_">has</span>(<span class="hljs-number">3</span>))    <span class="hljs-comment">/*是否包含某个元素*/</span><br></code></pre></td></tr></table></figure>
<h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p><strong>遍历数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*通过for of, for in 下标 */</span>  <br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> arr)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>遍历map</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;强霸&quot;</span>,<span class="hljs-number">100</span>]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> map)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>遍历set</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title function_">set</span>([[<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;强霸&quot;</span>,<span class="hljs-number">100</span>]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> set)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(分支和循环)</title>
    <url>/JavaScript-branch-loop.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="if-判断-循环"><a href="#if-判断-循环" class="headerlink" title="if 判断/循环"></a>if 判断/循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span>(sdq &gt; <span class="hljs-number">3</span>)&#123;    <span class="hljs-comment">/*第一个判断*/</span><br> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;史迪奇骑士&quot;</span>);<br> &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sdq &lt; <span class="hljs-number">5</span>)&#123;    <span class="hljs-comment">/*第二个判断*/</span><br> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;史迪奇国王&quot;</span>);<br> &#125;<br><span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">/*否则*/</span><br> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;史迪奇战士&quot;</span>);<br> &#125; <br></code></pre></td></tr></table></figure>
<h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">while</span>(sdq &lt; <span class="hljs-number">100</span>)&#123;<br>     sdq = sdq + <span class="hljs-number">1</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq)<br>     &#125;  <br></code></pre></td></tr></table></figure>
<h1 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">do</span> &#123;<br>     sdq = sdq + <span class="hljs-number">1</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq)<br>     &#125; <br> <span class="hljs-keyword">while</span>(sdq &lt; <span class="hljs-number">100</span>) <br></code></pre></td></tr></table></figure>
<h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="forEach-循环"><a href="#forEach-循环" class="headerlink" title="forEach 循环"></a>forEach 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br><span class="hljs-comment">/*函数*/</span><br>sdq.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h1 id="for-…-in-循环"><a href="#for-…-in-循环" class="headerlink" title="for … in 循环"></a>for … in 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> sdq <span class="hljs-keyword">in</span> age) &#123;<br>    <span class="hljs-keyword">if</span> (sdq.<span class="hljs-title function_">hasOwnProperty</span>(sdz)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;存在&quot;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq[sdz])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(字符串类型)</title>
    <url>/JavaScript-string.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="字符串常用"><a href="#字符串常用" class="headerlink" title="字符串常用"></a>字符串常用</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-string">&quot;字符串&quot;</span>     <span class="hljs-comment">/*双引号包裹*/</span><br><span class="hljs-string">&#x27;字符串&#x27;</span>     <span class="hljs-comment">/*单引号包裹*/</span><br></code></pre></td></tr></table></figure>

<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">\<span class="hljs-string">&#x27;           /*代表它是一个字符串*/</span><br>\n           <span class="hljs-comment">/*换行*/</span><br>\t           <span class="hljs-comment">/*tab*/</span><br>\u5d3d       <span class="hljs-comment">/*Unicode字符*/</span><br>\x45         <span class="hljs-comment">/*Asll字符*/</span><br></code></pre></td></tr></table></figure>
<h1 id="多行字符串编写"><a href="#多行字符串编写" class="headerlink" title="多行字符串编写"></a>多行字符串编写</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*tab键上面  esc键下面*/</span><br>  <span class="hljs-keyword">var</span> msg =<br>      haha<br> 哈哈<br> 蛤蛤  <br></code></pre></td></tr></table></figure>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*tab键上面  esc键下面*/</span><br>  <span class="hljs-keyword">let</span> sdq = <span class="hljs-string">&quot;史迪奇&quot;</span>;<br>  <span class="hljs-keyword">let</span> sdz = <span class="hljs-string">&quot;史迪仔&quot;</span>;<br>  <span class="hljs-keyword">let</span> age = <span class="hljs-number">119</span>;<br>  <span class="hljs-keyword">let</span> sdqz = <span class="hljs-string">&#x27;我叫.$&#123;sdq&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h1 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">str.<span class="hljs-property">length</span><br></code></pre></td></tr></table></figure>
<h1 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*是方法不是属性*/</span><br>sdq.<span class="hljs-title function_">toUpperCase</span>()          <span class="hljs-comment">/*大写*/</span><br>sdq.<span class="hljs-title class_">LowerCase</span>()          <span class="hljs-comment">/*小写*/</span><br></code></pre></td></tr></table></figure>
<h1 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h1><p><strong>subsrting</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">sdq.<span class="hljs-title function_">subsrting</span>(<span class="hljs-number">1</span>)          <span class="hljs-comment">/*从第一个字符串截取到最后一个字符串*/</span><br>sdq.<span class="hljs-title class_">LowerCase</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)          <span class="hljs-comment">/*包头不包尾*/</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(对象)</title>
    <url>/JavaScript-object.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="JavaScript也是一种面向对象的语言-所有的键都是字符串-值可以是任意对象"><a href="#JavaScript也是一种面向对象的语言-所有的键都是字符串-值可以是任意对象" class="headerlink" title="JavaScript也是一种面向对象的语言 所有的键都是字符串 值可以是任意对象"></a>JavaScript也是一种面向对象的语言 所有的键都是字符串 值可以是任意对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> 对象名 = &#123;    <br>    属性名: 属性值<br>    属性名: 属性值<br>    属性名: 属性值<br>&#125; <br><br><span class="hljs-comment">/*通过下标取值和赋值*/</span><br><span class="hljs-keyword">var</span> person = &#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;sdq&quot;</span>,<br>   <span class="hljs-attr">age</span>: <span class="hljs-number">3</span>,<br>   <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;???????@???&quot;</span><br>   <span class="hljs-attr">score</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>若干个键值对 js中对象, {…..}表示一个对象, 键值对描述属性xxxx: xxxx, 多个属性之间使用逗号隔开, 最后一个属性不加逗号</strong></p>
<h1 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;sdq&quot;</span>      <span class="hljs-comment">/*这里赋值sdq*/</span><br>person.<span class="hljs-property">name</span>              <span class="hljs-comment">/*这里输出sdq*/</span><br></code></pre></td></tr></table></figure>
<h1 id="undefined-使用不存在对象-不会报错"><a href="#undefined-使用不存在对象-不会报错" class="headerlink" title="undefined 使用不存在对象, 不会报错"></a>undefined 使用不存在对象, 不会报错</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-property">sdz</span><br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure>
<h1 id="delete-动态的删减属性"><a href="#delete-动态的删减属性" class="headerlink" title="delete 动态的删减属性"></a>delete 动态的删减属性</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">delete</span> person.<span class="hljs-property">name</span><br><span class="hljs-literal">true</span><br>person<br></code></pre></td></tr></table></figure>
<h1 id="动态的添加给新的属性添加值"><a href="#动态的添加给新的属性添加值" class="headerlink" title="动态的添加给新的属性添加值"></a>动态的添加给新的属性添加值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-property">sdq</span> = <span class="hljs-string">&quot;sdz&quot;</span>  <span class="hljs-comment">/*这里赋值sdz*/</span><br>person      <br></code></pre></td></tr></table></figure>
<h1 id="判断属性值是否在这个对象-属性值是否在这个对象"><a href="#判断属性值是否在这个对象-属性值是否在这个对象" class="headerlink" title="判断属性值是否在这个对象  属性值是否在这个对象"></a>判断属性值是否在这个对象  属性值是否在这个对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-string">&quot;sdq&quot;</span> <span class="hljs-keyword">in</span> person        <br><span class="hljs-literal">true</span>         <br><span class="hljs-string">&quot;sdqz&quot;</span> <span class="hljs-keyword">in</span> person   <br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>
<h1 id="判断属性是否是这个对象自身拥有的-hasOwnProperty"><a href="#判断属性是否是这个对象自身拥有的-hasOwnProperty" class="headerlink" title="判断属性是否是这个对象自身拥有的 hasOwnProperty()"></a>判断属性是否是这个对象自身拥有的 hasOwnProperty()</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;toString&quot;</span>)<br><span class="hljs-literal">false</span>       <br>person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;sdq&quot;</span>)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<br>




]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 面向对象</title>
    <url>/JavaScript-object-oriented.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="面向对象原型继承"><a href="#面向对象原型继承" class="headerlink" title="面向对象原型继承"></a>面向对象原型继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义实验品</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;星际宝贝&quot;</span>)<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Sdq</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span><br>&#125;;<br><br><span class="hljs-comment">// 原型对象</span><br><span class="hljs-title class_">Sdq</span>.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Syp</span>;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Sdz</span> = &#123;<br>    <span class="hljs-attr">destruction</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;疯狂破坏&quot;</span>)<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 史迪仔的原型 是 实验品</span><br><span class="hljs-title class_">Sdz</span>.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Syp</span>;<br></code></pre></td></tr></table></figure>
<h1 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h1><h2 id="定义类-属性-方法"><a href="#定义类-属性-方法" class="headerlink" title="定义类 属性 方法"></a>定义类 属性 方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义实验品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp</span> = &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br><br>    <span class="hljs-title function_">destruction</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;破坏&quot;</span>)<br>    &#125;<br><br><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>(<span class="hljs-string">&quot;史迪奇&quot;</span>);<br><span class="hljs-keyword">var</span> sdz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>(<span class="hljs-string">&quot;史迪仔&quot;</span>);<br><br>sdq.<span class="hljs-title class_">Syp</span>()<br>sdz.<span class="hljs-title class_">Syp</span>()<br></code></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义实验品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp</span> = &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br><br>    <span class="hljs-title function_">destruction</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;破坏&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp626</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Syp</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,grade</span>)&#123;<br>    <span class="hljs-variable language_">super</span>.(name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade;<br>    &#125;<br><br>    <span class="hljs-title function_">myGrade</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;搞破坏&quot;</span>)<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>(<span class="hljs-string">&quot;小怪物&quot;</span>);<br><span class="hljs-keyword">var</span> sdz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>626(<span class="hljs-string">&quot;小怪物&quot;</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure>
<p><strong>原型链</strong></p>
<div class="mermaid">
    graph TB
    A([" Person <br> (构造函数) "])-->C([" person "])
    C([" person "])-->| __proto__  |B([" Person.prototype <br> (实例原型) "])
    A([" Person <br> (构造函数) "])--prototype-->B([" Person.prototype <br> (实例原型) "])
    B([" Person.prototype <br> (实例原型) "])--constructor-->A([" Person <br> (构造函数) "])
    B([" Person.prototype <br> (实例原型) "])-->| __proto__  |E([" Object.prototype "])
    E([" Object.prototype "])-->| __proto__  |H([" null "])
    L([" Oject() "])--prototype-->E([" Object.prototype "])
    E([" Object.prototype "])--constructor-->L([" Oject() "])
</div>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>



<!-- ~~~ JavaScript

       prototype
      /￣￣￣￣￣↘
Person           Person.prototype
(构造函数)         (实例原型)
    |  ↖__________/      |
    |   constructor    ↑  |
    |                  |  |
    |                  |  |
    |                  |  |
   person ——————————————  |  _proto_
                          |
                          |
                          |
        prototype         |
       /￣￣￣￣￣↘       |
Object()           Object.prototype
      ↖__________/       |
       constructor        |  _proto_
                          |
                          ↓
                         null
~~~ -->


















]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维</title>
    <url>/Object-oriented.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>String color;  <span class="hljs-comment">//颜色</span><br><span class="hljs-type">int</span> wheel;   <span class="hljs-comment">//轮子</span><br><span class="hljs-type">int</span> seat;   <span class="hljs-comment">//座位</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><p><strong>例如车能飞</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;车能飞&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>例如车可以潜水</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">diving</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;车可以下水&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[ ] args)</span> &#123;<br> <span class="hljs-type">Car</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();   <span class="hljs-comment">//先创建一辆车</span><br> c.fly();  <span class="hljs-comment">//.表示调用  众所周知所以车都是可以飞的</span><br> c.diving();  <span class="hljs-comment">//.表示调用  众所周知所以车都是可以下水的</span><br> c.color = <span class="hljs-string">&quot;透明&quot;</span>;  <span class="hljs-comment">//我的车是透明色</span><br> c.wheel = <span class="hljs-number">5</span>; <span class="hljs-comment">//众所周知所以车都是5个轮子</span><br> c.seat = <span class="hljs-number">9</span>;  <span class="hljs-comment">//我的车 里面坐4个 车前绑1个人用来刹车 车顶坐1个人 剩下3个人的拿板拿雨伞凳坐后车厢 尾气管那面绑上1个人 用来吸收尾气</span><br> System.out.println(c.color);<br> System.out.println(c.wheel);<br> System.out.println(c.seat);<br>&#125;<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(数组类型)</title>
    <url>/JavaScript-array.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="Array可以包含任意的数据类型"><a href="#Array可以包含任意的数据类型" class="headerlink" title="Array可以包含任意的数据类型"></a>Array可以包含任意的数据类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];     <span class="hljs-comment">/*通过下标取值和赋值*/</span><br>arr[<span class="hljs-number">0</span>]<br>arr[<span class="hljs-number">3</span>] = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<h1 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">arr.<span class="hljs-property">length</span>      <span class="hljs-comment">/*赋值过小值, 元素就会丢失*/</span><br></code></pre></td></tr></table></figure>
<h1 id="indexOf-通过元素获得下标"><a href="#indexOf-通过元素获得下标" class="headerlink" title="indexOf  通过元素获得下标"></a>indexOf  通过元素获得下标</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]; <br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">/*输出1  字符串&quot;1&quot;和数字1是不同的*/</span><br></code></pre></td></tr></table></figure>
<h1 id="slice-截取Array的一部分-返回一个数组"><a href="#slice-截取Array的一部分-返回一个数组" class="headerlink" title="slice() 截取Array的一部分, 返回一个数组"></a>slice() 截取Array的一部分, 返回一个数组</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$ <span class="hljs-title function_">slice</span>()   <span class="hljs-comment">/*类似于String中的substring*/</span><br></code></pre></td></tr></table></figure>
<h1 id="push-和pop-尾部"><a href="#push-和pop-尾部" class="headerlink" title="push()和pop()尾部"></a>push()和pop()尾部</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">push</span>:    <span class="hljs-comment">/*压入到头部*/</span><br><span class="hljs-attr">shift</span>:   <span class="hljs-comment">/*弹出头部的一个元素*/</span><br></code></pre></td></tr></table></figure>


<h1 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 sort()"></a>排序 sort()</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]         <span class="hljs-comment">/*排序前*/</span><br>arr.<span class="hljs-title function_">sort</span>()         <br>(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]         <span class="hljs-comment">/*排序后*/</span><br></code></pre></td></tr></table></figure>
<h1 id="元素反转-reverse"><a href="#元素反转-reverse" class="headerlink" title="元素反转 reverse()"></a>元素反转 reverse()</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]         <span class="hljs-comment">/*反转前*/</span><br>arr.<span class="hljs-title function_">reverse</span>()        <br>(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]         <span class="hljs-comment">/*反转后*/</span><br></code></pre></td></tr></table></figure>
<h1 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h1><p><strong>注意concat()并没有修改数组, 只是会返回一个新的数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]<br>arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])        <br>(<span class="hljs-number">6</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr<br>(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]<br></code></pre></td></tr></table></figure>
<h1 id="join-连接符"><a href="#join-连接符" class="headerlink" title="join 连接符"></a>join 连接符</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>] <br>arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>)         <span class="hljs-comment">/*使用特定的字符串连接*/</span>   <br><span class="hljs-comment">/*结果输出&quot;C-B-A&quot;*/</span>       <br></code></pre></td></tr></table></figure>
<h1 id="多位数组"><a href="#多位数组" class="headerlink" title="多位数组"></a>多位数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">arr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>]];<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]   <br><span class="hljs-comment">/*结果输出4*/</span>  <br></code></pre></td></tr></table></figure>
<br>




]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维之getter和setter(作用)</title>
    <url>/Object-oriented-getter-setter.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h1><p><strong>主要是给成员变量赋值, 做一定的保护</strong></p>
<h1 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h1><p><strong>从成员变量中获取数据</strong></p>
<br>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java核心面向对象之this</title>
    <url>/Object-oriented-this.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>	String color;  <span class="hljs-comment">//颜色</span><br>	<span class="hljs-type">int</span> wheel;   <span class="hljs-comment">//轮子</span><br>	<span class="hljs-type">int</span> seat;   <span class="hljs-comment">//座位</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>显示属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.color);    <span class="hljs-comment">//颜色</span><br>System.out.println(<span class="hljs-built_in">this</span>.wheel);    <span class="hljs-comment">//轮子</span><br>System.out.println(<span class="hljs-built_in">this</span>.seat);     <span class="hljs-comment">//座位</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><p><strong>例如车能飞</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fly</span>()&#123;<br>System.out.println(<span class="hljs-built_in">this</span>.color+<span class="hljs-string">&quot;车能飞&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>例如车可以潜水</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">diving</span>()&#123;<br>System.out.println(<span class="hljs-built_in">this</span>.color+<span class="hljs-string">&quot;车可以下水&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[ ] args)</span> &#123;<br>	  <span class="hljs-type">Car</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();   <span class="hljs-comment">//先创建一辆车</span><br>	  c1.color = <span class="hljs-string">&quot;透明&quot;</span>;  <span class="hljs-comment">//我的车是透明色</span><br>	  c1.wheel = <span class="hljs-number">5</span>;  <span class="hljs-comment">//众所周知所以车都是5个轮子</span><br>    c1.seat = <span class="hljs-number">9</span>; <span class="hljs-comment">//我的车 里面坐4个 车前绑1个人用来刹车 车顶坐1个人</span><br>    c1.run();<br>    c1.fly();<br>    c1.diving();<br><br>    <span class="hljs-type">Car</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();   <span class="hljs-comment">//先创建一辆车</span><br>	c2.color = <span class="hljs-string">&quot;黄&quot;</span>;  <span class="hljs-comment">//我的车是屎黄</span><br>	c2.wheel = <span class="hljs-number">5</span>;  <span class="hljs-comment">//众所周知所以车都是5个轮子</span><br>    c2.seat = <span class="hljs-number">9</span>; <span class="hljs-comment">//我的车 里面坐4个 车前绑1个人用来刹车 车顶坐1个人</span><br>    c2.run();<br>    c2.fly();<br>    c2.diving();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><p><strong>this: 当前类的对象</strong></p>
<p><strong>this可以在方法内部获取到对象中的属性信息</strong></p>
<p><strong>this还可以区分局部变量和成员变量</strong></p>
<br>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维之构造方法</title>
    <url>/Object-oriented-constructor.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>String color;  <span class="hljs-comment">//颜色</span><br><span class="hljs-type">int</span> wheel;   <span class="hljs-comment">//轮子</span><br><span class="hljs-type">int</span> seat;   <span class="hljs-comment">//座位</span><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">自动生成一个无参数的构造方法 <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123; <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String color, <span class="hljs-type">int</span> wheel, <span class="hljs-type">int</span> seat)</span> &#123; <span class="hljs-comment">//这里给它添加参数  </span><br>   设置属性信息<br>   <span class="hljs-built_in">this</span>.color = color; 颜色<br>   <span class="hljs-built_in">this</span>.wheel = wheel; 轮子<br>   <span class="hljs-built_in">this</span>.seat = seat; 座位<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><p><strong>例如 车能飞</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fly</span>()&#123;<br>System.out.println(<span class="hljs-built_in">this</span>.color+<span class="hljs-string">&quot;车能飞&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>例如 车可以潜水</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">diving</span>()&#123;<br>System.out.println(<span class="hljs-built_in">this</span>.diving+<span class="hljs-string">&quot;车可以下水&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[ ] args)</span> &#123;<br>   <span class="hljs-type">Car</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;透明&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>);<br>   <span class="hljs-type">Car</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;黄&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>);<br>   c1.fly();<br>   c1.diving();<br><br>   c2.fly();<br>   c2.diving();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="构造方法需要注意"><a href="#构造方法需要注意" class="headerlink" title="构造方法需要注意"></a>构造方法需要注意</h1><p><strong>没有返回值这一项</strong></p>
<p><strong>在new的时候, 给对象设置属性信息</strong></p>
<p><strong>Java会默认自动的送每个类一个无参数的构造方法, 如果你写了构造方法, 那么Java就不送了</strong></p>
<br>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维之构造方法需的重载</title>
    <url>/Object-oriented-constructor-heavy-load.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>String color;  <span class="hljs-comment">//颜色</span><br><span class="hljs-type">int</span> wheel;   <span class="hljs-comment">//轮子</span><br><span class="hljs-type">int</span> seat;   <span class="hljs-comment">//座位</span><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String color,  <span class="hljs-type">int</span> seat)</span> &#123; <br>   设置属性信息<br>   <span class="hljs-built_in">this</span>.color = color; 颜色<br>   <span class="hljs-built_in">this</span>.seat = seat; 座位<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String color, <span class="hljs-type">int</span> wheel, <span class="hljs-type">int</span> seat)</span> &#123; <br>   设置属性信息<br>   <span class="hljs-built_in">this</span>(color,seat);  <span class="hljs-comment">//this还可以调用当前累中其他的构造方法</span><br>   <span class="hljs-built_in">this</span>.wheel = wheel; 轮子<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"> <span class="hljs-comment">//成员方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[ ] args)</span> &#123;<br>   <span class="hljs-type">Car</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;透明&quot;</span>,<span class="hljs-number">9</span>);<br>   <span class="hljs-type">Car</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;黄&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="注意是this-可以访问其他构造方法"><a href="#注意是this-可以访问其他构造方法" class="headerlink" title="注意是this()可以访问其他构造方法"></a>注意是this()可以访问其他构造方法</h1><br>















]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令(未完工)</title>
    <url>/Linux-command.html</url>
    <content><![CDATA[<p><strong>Linux基本命令</strong></p>
<a id="more"></a>

<blockquote>
<h1 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h1></blockquote>
<p><strong>命令英文原意: list</strong><br><strong>命令所在路径: /bin/ls</strong><br><strong>执行权限: 所有用户</strong><br><strong>功能描述: 显示目录文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ls 显示当前目录下文件<br><br>ls 目录名 显示指定目录下文件<br><br>ls -l 长格式显示目录文件<br><br>ls -l 文件名 长格式显示指定文件<br><br>ls -a 显示所有文件包含隐藏文件<br><br>ls -al 长格式显示当前目录下所有文件<br><br>ls -h 文件大小显示为常见大小单位 B KB MB …<br><br>ls -d 显示目录本身, 而不是里面的子文件<br></code></pre></td></tr></table></figure>
<h1 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h1><p><strong>命令英文原意: change directory</strong><br><strong>命令所在路径: shell内置命令</strong><br><strong>执行权限: 所有用户</strong><br><strong>功能描述: 切换所在目录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /xx  切换到指定路径(使用绝对路径方式)<br><br>cd ~    进入当前用户的家目录<br><br>cd –    进入上次目录<br><br>cd ..   进入上一级目录<br><br>cd .    进入当前目录<br></code></pre></td></tr></table></figure>
<br>

<!-- ~~~ shell

~~~ -->


]]></content>
  </entry>
  <entry>
    <title>React AJAX</title>
    <url>/React-AJAX.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><ul>
<li><p>React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取, 当从服务端获取数据时可以将数据存储在 state 中, 再用 this.setState 方法重新渲染 UI</p>
</li>
<li><p>当使用异步加载数据时, 在组件卸载前使用 componentWillUnmount 来取消未完成的请求</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class UserGist extends React.Component &#123;<br>  constructor(props) &#123;<br>      super(props);<br>      this.state = &#123;username: &#x27;&#x27;, lastGistUrl: &#x27;&#x27;&#125;;<br>  &#125;<br><br> <br>  componentDidMount() &#123;<br>    this.serverRequest = $.get(this.props.source, function (result) &#123;<br>      var lastGist = result[0];<br>      this.setState(&#123;<br>        username: lastGist.owner.login,<br>        lastGistUrl: lastGist.html_url<br>      &#125;);<br>    &#125;.bind(this));<br>  &#125;<br> <br>  componentWillUnmount() &#123;<br>    this.serverRequest.abort();<br>  &#125;<br> <br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;this.state.username&#125; 史迪奇的博客:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;this.state.lastGistUrl&#125;</span>&gt;</span>&#123;this.state.lastGistUrl&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br> <br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">UserGist</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;https://sdq3.gitee.io&quot;</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Hooks</title>
    <url>/React-Hooks.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><p><strong>作用: 让函数式组件用 state, props, refs的属性</strong></p>
<h1 id="三个常用Hook"><a href="#三个常用Hook" class="headerlink" title="三个常用Hook"></a>三个常用Hook</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">State</span> <span class="hljs-title class_">Hook</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>()<br><span class="hljs-title class_">Effect</span> <span class="hljs-title class_">Hook</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>()<br><span class="hljs-title class_">Ref</span> <span class="hljs-title class_">Hook</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useRef</span>()<br></code></pre></td></tr></table></figure>

<h1 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h1><h3 id="嵌套函数回调来实现增加"><a href="#嵌套函数回调来实现增加" class="headerlink" title="嵌套函数回调来实现增加"></a>嵌套函数回调来实现增加</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是Dome&quot;</span>)<br><br>  &#123;<span class="hljs-comment">/*  随便起名[count, setCount] = [状态, 更新状态的方法]  */</span>&#125;  <br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>    &#123;<span class="hljs-comment">/*  加了回调  */</span>&#125;  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count+<span class="hljs-number">1</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h1&gt;点了&#123;count&#125;次&lt;/h1&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">(<span class="hljs-params">add</span>) =&gt;</span><br>        点我+<span class="hljs-number">1</span><br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="嵌套函数回调来实现增加和改名"><a href="#嵌套函数回调来实现增加和改名" class="headerlink" title="嵌套函数回调来实现增加和改名"></a>嵌套函数回调来实现增加和改名</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是Dome&quot;</span>)<br><br>  &#123;<span class="hljs-comment">/*  随便起名[count, setCount] = [状态, 更新状态的方法]  */</span>&#125;  <br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> [count, setName] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;史迪奇&quot;</span>);<br><br>  &#123;<span class="hljs-comment">/*  加了回调  */</span>&#125;  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count+<span class="hljs-number">1</span>)<br>  &#125;<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeName</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;史迪仔&quot;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h1&gt;点了&#123;count&#125;次&lt;/h1&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">(<span class="hljs-params">add</span>) =&gt;</span><br>        点我+<span class="hljs-number">1</span><br>      &lt;/button&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">(<span class="hljs-params">changeName</span>) =&gt;</span><br>        点我改名<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h1><ul>
<li>Effect Hook 可以让你在函数组中执行副作用操作(用于模拟类组件中的生命钩子) 说白了就是使用生命周期钩</li>
</ul>
<p><strong>React中的副作用操作:</strong></p>
<ul>
<li>发ajax请求数据获取</li>
<li>设置订阅 / 启动定时器</li>
<li>手动更改真实DOM</li>
</ul>
<p><strong>语法和说明:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  在此可以执行任何带副作用操作  */</span>&#125;  <br>useEffect (<span class="hljs-function">() =&gt;</span> &#123;<br>    &#123;<span class="hljs-comment">/*  在组件卸载前执行  */</span>&#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      &#123;<span class="hljs-comment">/*  在此做一些收尾工作, 比如清除定时器/取消订阅等  */</span>&#125;  <br>    &#125;<br>&#123;<span class="hljs-comment">/*  如果指定的是[], 回调函数只会在第一次render()后执行  */</span>&#125;  <br>&#125;, [stateValue])<br></code></pre></td></tr></table></figure>

<p><strong>可以把useEffect Hook 看做这三个函数的组合</strong></p>
<ul>
<li>componentDidMount() </li>
<li>componzentDidUpdate() </li>
<li>componentWillUnmount()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>DOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>)&#123;<br>	<span class="hljs-comment">//console.log(&#x27;Demo&#x27;);</span><br><br>	<span class="hljs-keyword">const</span> [count,setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  &#123;<span class="hljs-comment">/*  Ref Hook  */</span>&#125;<br>	<span class="hljs-keyword">const</span> myRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useRef</span>()<br><br>	<span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>		<span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>			<span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count+<span class="hljs-number">1</span> )<br>		&#125;,<span class="hljs-number">1000</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>			<span class="hljs-built_in">clearInterval</span>(timer)<br>		&#125;<br>	&#125;,[])<br><br>	<span class="hljs-comment">//加的回调</span><br>	<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-comment">//setCount(count+1) //第一种写法</span><br>		<span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count+<span class="hljs-number">1</span> )<br>	&#125;<br><br>	<span class="hljs-comment">//提示输入的回调</span><br>	<span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-title function_">alert</span>(myRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>)<br>	&#125;<br><br>	<span class="hljs-comment">//卸载组件的回调</span><br>	<span class="hljs-keyword">function</span> <span class="hljs-title function_">unmount</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">unmountComponentAtNode</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> (<br>		&lt;div&gt;<br>			&lt;input type=<span class="hljs-string">&quot;text&quot;</span> ref=&#123;myRef&#125;/&gt;<br>			&lt;h2&gt;当前求和为：&#123;count&#125;&lt;/h2&gt;<br>			&lt;button onClick=&#123;add&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>			&lt;button onClick=&#123;unmount&#125;&gt;卸载组件&lt;/button&gt;<br>			&lt;button onClick=&#123;show&#125;&gt;点我提示数据&lt;/button&gt;<br>		&lt;/div&gt;<br>	)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Demo</span><br></code></pre></td></tr></table></figure>


<h1 id="Ref-Hook"><a href="#Ref-Hook" class="headerlink" title="Ref Hook"></a>Ref Hook</h1><ul>
<li>可以在函数组件中储存/查找组件内的标签或任意其它数据</li>
<li>语法: const refContainer = useRef()</li>
<li>作用: 保存标签对象, 功能与React.createRef()一样</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>DOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>)&#123;<br>	<span class="hljs-comment">//console.log(&#x27;Demo&#x27;);</span><br><br>	<span class="hljs-keyword">const</span> [count,setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  &#123;<span class="hljs-comment">/*  Ref Hook  */</span>&#125;<br>	<span class="hljs-keyword">const</span> myRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useRef</span>()<br><br>	<span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>		<span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>			<span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count+<span class="hljs-number">1</span> )<br>		&#125;,<span class="hljs-number">1000</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>			<span class="hljs-built_in">clearInterval</span>(timer)<br>		&#125;<br>	&#125;,[])<br><br>	<span class="hljs-comment">//加的回调</span><br>	<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-comment">//setCount(count+1) //第一种写法</span><br>		<span class="hljs-title function_">setCount</span>(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count+<span class="hljs-number">1</span> )<br>	&#125;<br><br>	<span class="hljs-comment">//提示输入的回调</span><br>	<span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-title function_">alert</span>(myRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>)<br>	&#125;<br><br>	<span class="hljs-comment">//卸载组件的回调</span><br>	<span class="hljs-keyword">function</span> <span class="hljs-title function_">unmount</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">unmountComponentAtNode</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> (<br>		&lt;div&gt;<br>			&lt;input type=<span class="hljs-string">&quot;text&quot;</span> ref=&#123;myRef&#125;/&gt;<br>			&lt;h2&gt;当前求和为：&#123;count&#125;&lt;/h2&gt;<br>			&lt;button onClick=&#123;add&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>			&lt;button onClick=&#123;unmount&#125;&gt;卸载组件&lt;/button&gt;<br>			&lt;button onClick=&#123;show&#125;&gt;点我提示数据&lt;/button&gt;<br>		&lt;/div&gt;<br>	)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Demo</span><br></code></pre></td></tr></table></figure>

<br>



]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React JSX</title>
    <url>/React-JSX.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="JSX的优点"><a href="#JSX的优点" class="headerlink" title="JSX的优点"></a>JSX的优点</h1><ul>
<li>JSX 执行更快, 因为它在编译为 JavaScript 代码后进行了优化</li>
<li>它是类型安全的, 在编译过程中就能发现错误</li>
<li>使用 JSX 编写模板更加简单快速</li>
</ul>
<h3 id="标识符像-class-和-for-不建议作为-XML-属性名-作为替代-React-DOM-使用-className-和-htmlFor-来做对应的属性"><a href="#标识符像-class-和-for-不建议作为-XML-属性名-作为替代-React-DOM-使用-className-和-htmlFor-来做对应的属性" class="headerlink" title="标识符像 class 和 for 不建议作为 XML 属性名 作为替代 React DOM 使用 className 和 htmlFor 来做对应的属性"></a>标识符像 class 和 for 不建议作为 XML 属性名 作为替代 React DOM 使用 className 和 htmlFor 来做对应的属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>.sdq&#123;<br>	float: left; <br>  heigh: 50px;<br>  width: 50px;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>  &#123;/*  className = class  */&#125; <br>	const element = <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>	ReactDOM.render(element, document.getElementById(&#x27;root&#x27;));<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="使用-JSX"><a href="#使用-JSX" class="headerlink" title="使用 JSX"></a>使用 JSX</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>    ReactDOM.render(<br>    	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    	<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    	<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>安琪<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      &#123;/*  添加自定义属性需要使用 data- 前缀  */&#125; <br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">data-myattribute</span> = <span class="hljs-string">&quot;somevalue&quot;</span>&gt;</span>鲁本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    	,<br>    	document.getElementById(&#x27;example&#x27;)<br>    );<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="独立文件"><a href="#独立文件" class="headerlink" title="独立文件"></a>独立文件</h3><p><strong>React JSX 代码可以放在一个独立文件上</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sdq.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>      ReactDOM.render(<br>      	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>          &#123;/*  逻辑运算 表达式写在花括号 &#123;&#125;  */&#125;<br>      	  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>https://sdq&#123;1+2&#125;.gitee.io<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      	,<br>      	document.getElementById(&#x27;example&#x27;)<br>      );<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>JSX 中不能使用 if else 语句, 但可以使用 conditional (三元运算) 表达式来替代</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br> var i = 3;<br>    ReactDOM.render(<br>    	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    	  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;i == 3 ? &#x27;True!&#x27; : &#x27;False&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;i != 3 ? &#x27;True!&#x27; : &#x27;False&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    	,<br>    	document.getElementById(&#x27;example&#x27;)<br>    );<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>    &#123;/*  创建数组  */&#125;<br>    var arr = [<br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>,<br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>安琪<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>,<br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>鲁本<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    ];<br>    ReactDOM.render(<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;arr&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>,<br>      document.getElementById(&#x27;example&#x27;)<br>    );<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React JSX进一步学习</title>
    <url>/React-JSX-one.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则:"></a>jsx语法规则:</h1><ul>
<li>定义虚拟DOM时, 不要写引号</li>
<li>标签中混入JS表达式时要用{}</li>
<li>样式的类名指定不要用class, 要用className</li>
<li>内联样式, 要用style=的形式去写</li>
<li>只有一个根标签</li>
<li>标签必须闭合</li>
<li>标签首字母<ul>
<li>若小写字母开头, 则将该标签转为html中同名元素, 若html中无该标签对应的同名元素, 则报错</li>
<li>若大写字母开头, react就去渲染对应的组件, 若组件没有定义, 则报错</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">	<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>		.title&#123;<br>			background-color: orange;<br>			width: 333px;<br>		&#125;<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 准备好一个&quot;容器&quot;--&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;引入react核心库&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;引入react-dom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;引入babel&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span> &gt;</span><br>		const myId = &#x27;Stitch&#x27;<br>		const myData = &#x27;My Name is Stitch&#x27;<br><br>		//1.创建虚拟DOM<br>		const VDOM = (<br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myId.toLowerCase()&#125;</span>&gt;</span><br>					<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span>&#x27;<span class="hljs-attr">white</span>&#x27;,<span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">29px</span>&#x27;&#125;&#125;&gt;</span>&#123;myData.toLowerCase()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myId.toUpperCase()&#125;</span>&gt;</span><br>					<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span>&#x27;<span class="hljs-attr">white</span>&#x27;,<span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">29px</span>&#x27;&#125;&#125;&gt;</span>&#123;myData.toLowerCase()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		)<br>		//2.渲染虚拟DOM到页面<br>		ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;))<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>		<span class="hljs-comment">//模拟一些数据</span><br>		<span class="hljs-keyword">const</span> data = [<span class="hljs-string">&#x27;Angular&#x27;</span>,<span class="hljs-string">&#x27;React&#x27;</span>,<span class="hljs-string">&#x27;Vue&#x27;</span>]<br>		<span class="hljs-comment">//1.创建虚拟DOM</span><br>		<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>			&lt;div&gt;<br>				&lt;h1&gt;前端js框架列表&lt;/h1&gt;<br>				&lt;ul&gt;<br>					&#123;<br>						data.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>							<span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>						&#125;)<br>					&#125;<br>				&lt;/ul&gt;<br>			&lt;/div&gt;<br>		)<br>		<span class="hljs-comment">//2.渲染虚拟DOM到页面</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>	&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">效果</font></p>
<iframe id="iframe" src="/html/jsx小练习.html"></iframe>

<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Refs</title>
    <url>/React-Refs.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h3 id="绑定一个-ref-属性到-render-的返回值"><a href="#绑定一个-ref-属性到-render-的返回值" class="headerlink" title="绑定一个 ref 属性到 render 的返回值"></a>绑定一个 ref 属性到 render 的返回值</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myInput&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="this-refs-获取支撑"><a href="#this-refs-获取支撑" class="headerlink" title="this.refs 获取支撑"></a>this.refs 获取支撑</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">myInput</span>;<br><span class="hljs-keyword">var</span> inputValue = input.<span class="hljs-property">value</span>;<br><span class="hljs-keyword">var</span> inputRect = input.<span class="hljs-title function_">getBoundingClientRect</span>();<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class MyNameIsStitch extends React.Component &#123;<br>  handleClick() &#123;<br>    &#123;/*  使用原生的 DOM API 获取焦点  */&#125; <br>    this.refs.myInput.focus();<br>  &#125;<br>  render() &#123;<br>    &#123;/*  当组件插入到 DOM 后, ref 属性添加一个组件的引用于到 this.refs  */&#125; <br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      &#123;/*  可以通过使用 this 来获取当前 React 组件, 或使用 ref 来获取组件的引用  */&#125; <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myInput&quot;</span> /&gt;</span><br>        &lt;input<br>          type=&quot;button&quot;<br>          value=&quot;点我输入框获取焦点&quot;<br>          onClick=&#123;this.handleClick.bind(this)&#125;<br>        /&gt;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/React Refs.html"></iframe>

<br>

]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React Props</title>
    <url>/React-Props.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h3 id="state-和-props-主要的区别在于-props-是不可变的-而-state-可以根据与用户交互来改变-这就是为什么有些容器组件需要定义-state-来更新和修改数据-而子组件只能通过-props-来传递数据"><a href="#state-和-props-主要的区别在于-props-是不可变的-而-state-可以根据与用户交互来改变-这就是为什么有些容器组件需要定义-state-来更新和修改数据-而子组件只能通过-props-来传递数据" class="headerlink" title="state 和 props 主要的区别在于 props 是不可变的,  而 state 可以根据与用户交互来改变  这就是为什么有些容器组件需要定义 state 来更新和修改数据, 而子组件只能通过 props 来传递数据"></a>state 和 props 主要的区别在于 props 是不可变的,  而 state 可以根据与用户交互来改变  这就是为什么有些容器组件需要定义 state 来更新和修改数据, 而子组件只能通过 props 来传递数据</h3><h1 id="最基本的使用-Props"><a href="#最基本的使用-Props" class="headerlink" title="最基本的使用 Props"></a>最基本的使用 Props</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function MyNameIsStitch(props) &#123;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫 &#123;props.name&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br><br>const element = <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;史迪奇&quot;</span>/&gt;</span>;<br><br>ReactDOM.render(<br>	element,<br>	document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h1 id="默认-Props"><a href="#默认-Props" class="headerlink" title="默认 Props"></a>默认 Props</h1><p><strong>解析: 通过组件类的 defaultProps 属性为 props 设置默认值</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class MyNameIsStitch extends React.Component &#123;<br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>MyNameIsStitch.defaultProps = &#123;<br>  name: &#x27;史迪奇&#x27;<br>&#125;;<br><br>const element = <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span>/&gt;</span>;<br><br>ReactDOM.render(<br>  element,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="State-和-Props"><a href="#State-和-Props" class="headerlink" title="State 和 Props"></a>State 和 Props</h1><p><strong>解析: 父组件中设置 state 并通过在子组件上使用 props 将其传递到子组件上</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br><br>class WebSite extends React.Component &#123;<br>  constructor() &#123;<br>      super();<br><br>      this.state = &#123;<br>        name: &quot;我叫史迪奇&quot;,<br>        site: &quot;https://sdq3.gitee.io&quot;<br>      &#125;<br>    &#125;<br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Name</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;this.state.name&#125;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Site</span> <span class="hljs-attr">site</span>=<span class="hljs-string">&#123;this.state.site&#125;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br><br><br>class Name extends React.Component &#123;<br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br> <br>class Site extends React.Component &#123;<br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;this.props.site&#125;</span>&gt;</span><br>        &#123;this.props.site&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br> <br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">WebSite</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="Props-验证"><a href="#Props-验证" class="headerlink" title="Props 验证"></a>Props 验证</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>var title = &quot;史迪奇&quot;;<br><br>class MyNameIsStitch extends React.Component &#123;<br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫&#123;this.props.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>MyNameIsStitch.propTypes = &#123;<br>  title: PropTypes.string<br>&#125;;<br>ReactDOM.render(<br>    <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;title&#125;</span> /&gt;</span>,<br>    document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="更多验证器"><a href="#更多验证器" class="headerlink" title="更多验证器"></a>更多验证器</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">MyComponent</span>.<span class="hljs-property">propTypes</span> = &#123;<br>   &#123;<span class="hljs-comment">/*  可以声明 prop 为指定的 JS 基本数据类型, 默认情况, 这些数据是可选的  */</span>&#125;<br>   <span class="hljs-attr">optionalArray</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">array</span>,<br>    <span class="hljs-attr">optionalBool</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">bool</span>,<br>    <span class="hljs-attr">optionalFunc</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">func</span>,<br>    <span class="hljs-attr">optionalNumber</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span>,<br>    <span class="hljs-attr">optionalObject</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">object</span>,<br>    <span class="hljs-attr">optionalString</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">string</span>,<br> <br>     可以被渲染的对象 numbers, strings, elements 或 array<br>    <span class="hljs-attr">optionalNode</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">node</span>,<br> <br>    &#123;<span class="hljs-comment">/*  React 元素  */</span>&#125; <br>    <span class="hljs-attr">optionalElement</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">element</span>,<br> <br>    &#123;<span class="hljs-comment">/*  用 JS 的 instanceof 操作符声明 prop 为类的实例  */</span>&#125; <br>    <span class="hljs-attr">optionalMessage</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-title function_">instanceOf</span>(<span class="hljs-title class_">Message</span>),<br> <br>    &#123;<span class="hljs-comment">/*  用 enum 来限制 prop 只接受指定的值  */</span>&#125; <br>    <span class="hljs-attr">optionalEnum</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-title function_">oneOf</span>([<span class="hljs-string">&#x27;News&#x27;</span>, <span class="hljs-string">&#x27;Photos&#x27;</span>]),<br> <br>    &#123;<span class="hljs-comment">/*  可以是多个对象类型中的一个  */</span>&#125; <br>    <span class="hljs-attr">optionalUnion</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-title function_">oneOfType</span>([<br>      <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">string</span>,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span>,<br>      <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-title function_">instanceOf</span>(<span class="hljs-title class_">Message</span>)<br>    ]),<br> <br>    &#123;<span class="hljs-comment">/*  指定类型组成的数组  */</span>&#125; <br>    <span class="hljs-attr">optionalArrayOf</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-title function_">arrayOf</span>(<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span>),<br> <br>    &#123;<span class="hljs-comment">/*  指定类型的属性构成的对象  */</span>&#125; <br>    <span class="hljs-attr">optionalObjectOf</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-title function_">objectOf</span>(<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span>),<br> <br>    &#123;<span class="hljs-comment">/*  特定 shape 参数的对象  */</span>&#125; <br>    <span class="hljs-attr">optionalObjectWithShape</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-title function_">shape</span>(&#123;<br>      <span class="hljs-attr">color</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">string</span>,<br>      <span class="hljs-attr">fontSize</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span><br>    &#125;),<br> <br>    &#123;<span class="hljs-comment">/*  任意类型加上 `isRequired` 来使 prop 不可空  */</span>&#125; <br>    <span class="hljs-attr">requiredFunc</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,<br> <br>    &#123;<span class="hljs-comment">/*  不可空的任意类型  */</span>&#125; <br>    <span class="hljs-attr">requiredAny</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">any</span>.<span class="hljs-property">isRequired</span>,<br> <br>    &#123;<span class="hljs-comment">/*  自定义验证器如果验证失败需要返回一个 Error 对象不要直接使用 `console.warn` 或抛异常, 因为这样 `oneOfType` 会失效  */</span>&#125; <br>    <span class="hljs-attr">customProp</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">props, propName, componentName</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/matchme/</span>.<span class="hljs-title function_">test</span>(props[propName])) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Validation failed!&#x27;</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React State(状态)</title>
    <url>/React-State.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>


<h1 id="将生命周期方法添加到类中"><a href="#将生命周期方法添加到类中" class="headerlink" title="将生命周期方法添加到类中"></a>将生命周期方法添加到类中</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class MyNameIsStitch extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.state = &#123;date: new Date()&#125;;<br>  &#125;<br>  &#123;/*  生命周期钩子 钩子上设置一个定时器  */&#125;<br>  componentDidMount() &#123;<br>    this.timerID = setInterval(<br>      () =&gt; this.tick(),<br>      1000<br>    );<br>  &#125;<br>  &#123;/*  生命周期钩子 钩子中卸载定时器  */&#125;<br>  componentWillUnmount() &#123;<br>    clearInterval(this.timerID);<br>  &#125;<br><br>  tick() &#123;<br>    this.setState(&#123;<br>      date: new Date()<br>    &#125;);<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你浪费的时间 &#123;this.state.date.toLocaleTimeString()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h1 id="自顶向下或单向数据流"><a href="#自顶向下或单向数据流" class="headerlink" title="自顶向下或单向数据流"></a>自顶向下或单向数据流</h1><p><strong>解析: 所有组件都是真正隔离的</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function FormattedDate(props) &#123;<br>  return <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你浪费的时间 &#123;props.date.toLocaleTimeString()&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>;<br>&#125;<br><br>class MyNameIsStitch extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.state = &#123;date: new Date()&#125;;<br>  &#125;<br><br>  componentDidMount() &#123;<br>    this.timerID = setInterval(<br>      () =&gt; this.tick(),<br>      1000<br>    );<br>  &#125;<br><br>  componentWillUnmount() &#123;<br>    clearInterval(this.timerID);<br>  &#125;<br><br>  tick() &#123;<br>    this.setState(&#123;<br>      date: new Date()<br>    &#125;);<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">FormattedDate</span> <span class="hljs-attr">date</span>=<span class="hljs-string">&#123;this.state.date&#125;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>function App() &#123;<br>  return (<br>    &#123;/*  创建App 组件 它渲染三个  */&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  );<br>&#125;<br><br>ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>, document.getElementById(&#x27;example&#x27;));<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>有状态组件中使用无状态组件   也可以在无状态组件中使用有状态组件</strong></p>
<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 事件处理</title>
    <url>/React-event-processing.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h3 id="React-元素的事件处理和-DOM-元素类似但是有一点语法上的不同"><a href="#React-元素的事件处理和-DOM-元素类似但是有一点语法上的不同" class="headerlink" title="React 元素的事件处理和 DOM 元素类似但是有一点语法上的不同:"></a>React 元素的事件处理和 DOM 元素类似但是有一点语法上的不同:</h3><ul>
<li>React 事件绑定属性的命名采用驼峰式写法, 而不是小写</li>
<li>如果采用 JSX 的语法你需要传入一个函数作为事件处理函数, 而不是一个字符串(DOM 元素的写法)</li>
</ul>
<p><strong>HTML写法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;activateLasers()&quot;</span>&gt;</span><br>  激活按钮<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>React写法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;activateLasers&#125;</span>&gt;</span><br>  激活按钮<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>组件渲染一个让用户切换开关状态的按钮eact写法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class MyNameIsStitch extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.state = &#123;isMyNameIsStitch: true&#125;;<br><br>    &#123;/*  这边绑定是必要的, 这样 `this` 才能在回调函数中使用  */&#125; <br>    this.handleClick = this.handleClick.bind(this);<br>  &#125;<br><br>  handleClick() &#123;<br>    this.setState(prevState =&gt; (&#123;<br>      isMyNameIsStitch: !prevState.isMyNameIsStitch<br>    &#125;));<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span><br>        &#123;this.state.isMyNameIsStitch ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<script src="/js/three.js"></script>
<body>
<div id="example"></div>
<script type="text/babel">
class MyNameIsStitch extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isMyNameIsStitch: true};

<pre><code>&#123;/*  这边绑定是必要的, 这样 `this` 才能在回调函数中使用  */&#125; 
this.handleClick = this.handleClick.bind(this);</code></pre>
<p>  }</p>
<p>  handleClick() {<br>    this.setState(prevState =&gt; ({<br>      isMyNameIsStitch: !prevState.isMyNameIsStitch<br>    }));<br>  }</p>
<p>  render() {<br>    return (<br>      <button onClick={this.handleClick}><br>        {this.state.isMyNameIsStitch ? ‘ON’ : ‘OFF’}<br>      </button><br>    );<br>  }<br>}</p>
<p>ReactDOM.render(<br>  <MyNameIsStitch />,<br>  document.getElementById(‘example’)<br>);<br></script><p></p>
</body>


<h1 id="向事件处理程序传递参数"><a href="#向事件处理程序传递参数" class="headerlink" title="向事件处理程序传递参数"></a>向事件处理程序传递参数</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class MyNameIsStitch extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.state = &#123;isMyNameIsStitch: true&#125;;<br><br>    &#123;/*  这边绑定是必要的, 这样 `this` 才能在回调函数中使用  */&#125; <br>    this.handleClick = this.handleClick.bind(this);<br>  &#125;<br><br>  handleClick() &#123;<br>    this.setState(prevState =&gt; (&#123;<br>      isMyNameIsStitch: !prevState.isMyNameIsStitch<br>    &#125;));<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span><br>        &#123;this.state.isMyNameIsStitch ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>没有使用属性初始化器语法, 你可以在回调函数中使用 箭头函数</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">class MyNameIsStitch extends React.Component &#123;<br>  handleClick() &#123;<br>    console.log(&#x27;this is:&#x27;, this);<br>  &#125;<br> <br>  render() &#123;<br>    &#123;/*  这个语法确保了 `this` 绑定在  handleClick 中  */&#125;  <br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> this.handleClick(e)&#125;&gt;<br>        我叫史迪奇<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="向事件处理程序传递参数-1"><a href="#向事件处理程序传递参数-1" class="headerlink" title="向事件处理程序传递参数"></a>向事件处理程序传递参数</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">&#123;/*  参数 e 作为 React 事件对象将会被作为第二个参数进行传递<br>通过箭头函数的方式, 事件对象必须显式的进行传递, 但bind 的方式, 事件对象以及更多的参数会被隐式的进行传递<br>bind 方式向监听函数传参 在类组件中定义的监听函数 事件对象 e 要排在所传递参数的后面  */&#125;  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> this.deleteRow(id, e)&#125;&gt;Delete Row<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.deleteRow.bind(this,</span> <span class="hljs-attr">id</span>)&#125;&gt;</span>Delete Row<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 元素渲染</title>
    <url>/React-Render-Elements.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h1><h2 id="元素是构成-React-应用的最小单位-用于描述屏幕上输出的内容"><a href="#元素是构成-React-应用的最小单位-用于描述屏幕上输出的内容" class="headerlink" title="元素是构成 React 应用的最小单位   用于描述屏幕上输出的内容"></a>元素是构成 React 应用的最小单位   用于描述屏幕上输出的内容</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- eact 的核心库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 提供与 DOM 相关的功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Babel 可以将 ES6 代码转为 ES5 代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 将元素渲染到 DOM 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>// 要将React元素渲染到根DOM节点中 通过把它们都传递给 ReactDOM.render()的方法来将其渲染到页面上<br>const element =<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>ReactDOM.render(<br>    element,<br>    document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="更新元素渲染"><a href="#更新元素渲染" class="headerlink" title="更新元素渲染"></a>更新元素渲染</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function tick() &#123;<br>  const element = (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你已经浪费了的时间 &#123;new Date().toLocaleTimeString()&#125;秒<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  );<br>  // 当前更新界面的唯一办法<br>  ReactDOM.render(<br>    element,<br>    document.getElementById(&#x27;example&#x27;)<br>  );<br>&#125;<br> <br>setInterval(tick, 1000);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="用函数来表示"><a href="#用函数来表示" class="headerlink" title="用函数来表示"></a>用函数来表示</h3><p><strong>React 只会更新必要的部分</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function Clock(props) &#123;<br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    // this当前对象<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>现在是 &#123;this.props.date.toLocaleTimeString()&#125;你又在这浪费时间<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    // <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>现在是 &#123;props.date.toLocaleTimeString()&#125;你又在这浪费时间<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  );<br>&#125;<br><br>function tick() &#123;<br>  ReactDOM.render(<br>    <span class="hljs-tag">&lt;<span class="hljs-name">Clock</span> <span class="hljs-attr">date</span>=<span class="hljs-string">&#123;new</span> <span class="hljs-attr">Date</span>()&#125; /&gt;</span>,<br>    document.getElementById(&#x27;example&#x27;)<br>  );<br>&#125;<br><br>setInterval(tick, 1000);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 条件渲染</title>
    <url>/React-conditional-rendering.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class LoginControl extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.handleLoginClick = this.handleLoginClick.bind(this);<br>    this.handleLogoutClick = this.handleLogoutClick.bind(this);<br>    this.state = &#123;isLoggedIn: false&#125;;<br>  &#125;<br><br>  handleLoginClick() &#123;<br>    this.setState(&#123;isLoggedIn: true&#125;);<br>  &#125;<br><br>  handleLogoutClick() &#123;<br>    this.setState(&#123;isLoggedIn: false&#125;);<br>  &#125;<br><br>  render() &#123;<br>    const isLoggedIn = this.state.isLoggedIn;<br>    let button;<br><br>    if (isLoggedIn) &#123;<br>      button = <span class="hljs-tag">&lt;<span class="hljs-name">LogoutButton</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span>;<br>    &#125; else &#123;<br>      button = <span class="hljs-tag">&lt;<span class="hljs-name">LoginButton</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleLoginClick&#125;</span> /&gt;</span>;<br>    &#125;<br><br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Greeting</span> <span class="hljs-attr">isLoggedIn</span>=<span class="hljs-string">&#123;isLoggedIn&#125;</span> /&gt;</span><br>        &#123;button&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>function UserGreeting(props) &#123;<br>  return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>给你一拳<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br><br>function GuestGreeting(props) &#123;<br>  return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>请先注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br><br>function Greeting(props) &#123;<br>  const isLoggedIn = props.isLoggedIn;<br>  if (isLoggedIn) &#123;<br>    return <span class="hljs-tag">&lt;<span class="hljs-name">UserGreeting</span> /&gt;</span>;<br>  &#125;<br>  return <span class="hljs-tag">&lt;<span class="hljs-name">GuestGreeting</span> /&gt;</span>;<br>&#125;<br><br>function LoginButton(props) &#123;<br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;props.onClick&#125;</span>&gt;</span><br>      注册<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  );<br>&#125;<br><br>function LogoutButton(props) &#123;<br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;props.onClick&#125;</span>&gt;</span><br>      退出<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  );<br>&#125;<br><br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">LoginControl</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/元素变量.html"></iframe>


<h1 id="与运算符-amp-amp"><a href="#与运算符-amp-amp" class="headerlink" title="与运算符 &amp;&amp;"></a>与运算符 &amp;&amp;</h1><p><strong>true &amp;&amp; expression 总是返回expression 而 false &amp;&amp; expression 总是返回 false 条件是 true, &amp;&amp; 右侧的元素就会被渲染 是 false会忽略</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function Mailbox(props) &#123;<br>  const unreadMessages = props.unreadMessages;<br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      &#123;unreadMessages.length &gt; 0 &amp;&amp;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>          您浪费了&#123;unreadMessages.length&#125; 秒<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  );<br>&#125;<br><br>const messages = [&#x27;React&#x27;, &#x27;Re: React&#x27;, &#x27;Re:Re: React&#x27;];<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">Mailbox</span> <span class="hljs-attr">unreadMessages</span>=<span class="hljs-string">&#123;messages&#125;</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/与运算符 &&.html"></iframe>

<h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">condition ? true : false<br></code></pre></td></tr></table></figure>
<h1 id="阻止组件渲染"><a href="#阻止组件渲染" class="headerlink" title="阻止组件渲染"></a>阻止组件渲染</h1><p><strong>根据属性 warn 的值条件渲染 warn 的值是 false则组件不会渲染</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>button &#123;<br>  height: 40px;<br>  width: 200px;<br>&#125;<br>.warning &#123;<br>  background-color: red;<br>  text-align: center;<br>  width: 100%;<br>  padding: 10px;<br><br>  font-size: 14pt;<br>  color: white;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function WarningBanner(props) &#123;<br>  if (!props.warn) &#123;<br>    return null;<br>  &#125;<br><br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span><br>      给你一拳<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  );<br>&#125;<br><br>class Page extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.state = &#123;showWarning: true&#125;<br>    this.handleToggleClick = this.handleToggleClick.bind(this);<br>  &#125;<br><br>  handleToggleClick() &#123;<br>    this.setState(prevState =&gt; (&#123;<br>      showWarning: !prevState.showWarning<br>    &#125;));<br>  &#125;<br>  <br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">WarningBanner</span> <span class="hljs-attr">warn</span>=<span class="hljs-string">&#123;this.state.showWarning&#125;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleToggleClick&#125;</span>&gt;</span><br>          &#123;this.state.showWarning ? &#x27;刷新&#x27; : &#x27;点击&#x27;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">Page</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/阻止组件渲染.html"></iframe>

<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 列表 &amp; Keys</title>
    <url>/React-list-keys.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>    function NumberList(props) &#123;<br>      const numbers = props.numbers;<br>      const listItems = numbers.map((number) =&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;number.toString()&#125;</span>&gt;</span><br>          &#123;number&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      );<br>      return (<br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      );<br>    &#125;<br>    const numbers = [1, 2, 3, 4, 5];<br>    ReactDOM.render(<br>      <span class="hljs-tag">&lt;<span class="hljs-name">NumberList</span> <span class="hljs-attr">numbers</span>=<span class="hljs-string">&#123;numbers&#125;</span> /&gt;</span>,<br>      document.getElementById(&#x27;example&#x27;)<br>    );<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/React 列表.html"></iframe>

<h1 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function ListItem(props) &#123;<br>  &#123;/*  这里不需要指定key  */&#125;<br>  return <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>;<br>&#125;<br><br>function NumberList(props) &#123;<br>  const numbers = props.numbers;<br>  &#123;/*  一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串  */&#125; <br>  const listItems = numbers.map((number) =&gt;<br>    &#123;/*  key在数组的上下文中被指定  */&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;number.toString()&#125;</span></span><br>              value=&#123;number&#125; /&gt;<br>  );<br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      &#123;listItems&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  );<br>&#125;<br><br>const numbers = [1, 2, 3, 4, 5];<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">NumberList</span> <span class="hljs-attr">numbers</span>=<span class="hljs-string">&#123;numbers&#125;</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/React key.html"></iframe>

<h1 id="用keys提取组件"><a href="#用keys提取组件" class="headerlink" title="用keys提取组件"></a>用keys提取组件</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function ListItem(props) &#123;<br>  return <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>;<br>&#125;<br><br>function NumberList(props) &#123;<br>  const numbers = props.numbers;<br>  const listItems = numbers.map((number) =&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;number.toString()&#125;</span></span><br>              value=&#123;number&#125; /&gt;<br>  );<br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      &#123;listItems&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  );<br>&#125;<br><br>const numbers = [1, 2, 3, 4, 5];<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">NumberList</span> <span class="hljs-attr">numbers</span>=<span class="hljs-string">&#123;numbers&#125;</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/元素的 key 在他的兄弟元素之间应该唯一.html"></iframe>

<h1 id="在-jsx-中嵌入-map"><a href="#在-jsx-中嵌入-map" class="headerlink" title="在 jsx 中嵌入 map()"></a>在 jsx 中嵌入 map()</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function ListItem(props) &#123;<br>  return <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>;<br>&#125;<br><br>function NumberList(props) &#123;<br>  const numbers = props.numbers;<br>  return (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      &#123;numbers.map((number) =&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;number.toString()&#125;</span></span><br>                  value=&#123;number&#125; /&gt;<br>      )&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  );<br>&#125;<br><br>const numbers = [1, 2, 3, 4, 5];<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">NumberList</span> <span class="hljs-attr">numbers</span>=<span class="hljs-string">&#123;numbers&#125;</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/在 jsx 中嵌入 map().html"></iframe>

<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 第一枪</title>
    <url>/React-Foundation.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="React全家桶包括"><a href="#React全家桶包括" class="headerlink" title="React全家桶包括:"></a>React全家桶包括:</h1><ul>
<li>React基础      (基础篇)</li>
<li>React-Router   (专门做路由的库)</li>
<li>PubSub         (消息管理的库)</li>
<li>Redux          (专门做集中式状态管理的库)</li>
<li>Ant-Design     (UI组件库)</li>
</ul>
<h1 id="React和Vue不同的地方"><a href="#React和Vue不同的地方" class="headerlink" title="React和Vue不同的地方"></a>React和Vue不同的地方</h1><ul>
<li>Vue只能弄内部变量而React内外变量都可以使用</li>
</ul>
<h1 id="开枪认识React"><a href="#开枪认识React" class="headerlink" title="开枪认识React"></a>开枪认识React</h1><h2 id="React的Hello-world"><a href="#React的Hello-world" class="headerlink" title="React的Hello world"></a>React的Hello world</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- eact 的核心库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 提供与 DOM 相关的功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Babel 可以将 ES6 代码转为 ES5 代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需要使用 JSX 则 &lt;script&gt; 标签的 type 属性需要设置为 text/babel --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>ReactDOM.render(<br>	<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>,<br>    // 以上代码将一个 h1 标题 插入 id=&quot;example&quot; 节点中<br>	document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="create-react-app-快速构建-React-开发环境"><a href="#create-react-app-快速构建-React-开发环境" class="headerlink" title="create-react-app 快速构建 React 开发环境"></a>create-react-app 快速构建 React 开发环境</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">// 安装依赖<br>cnpm install <span class="hljs-literal">-g</span> create<span class="hljs-literal">-react-sdq</span><br>// 自动创建的项目是基于 Webpack + ES6 <br>create<span class="hljs-literal">-react-app</span> my<span class="hljs-literal">-sdq</span><br>// 打开文件夹<br><span class="hljs-built_in">cd</span> my<span class="hljs-literal">-sdq</span>/<br>// 启动服务<br>npm <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure>
<p><strong>然后修改 my-sdq/src/App.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.svg&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span>;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;App&quot;</span>&gt;<br>        &lt;div className=<span class="hljs-string">&quot;App-header&quot;</span>&gt;<br>          &lt;img src=&#123;logo&#125; className=<span class="hljs-string">&quot;App-logo&quot;</span> alt=<span class="hljs-string">&quot;logo&quot;</span> /&gt;<br>          &lt;h2&gt;你已经中了幻术, 浪费了你两秒的生命&lt;/h2&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e522ea7a2a9.jpgg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span>;<br><br><span class="hljs-keyword">let</span> wbbl = <span class="hljs-string">&quot;外部变量&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> nbbl = <span class="hljs-string">&quot;内部变量&quot;</span><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=<span class="hljs-string">&quot;App&quot;</span>&gt;<br>      &lt;header className=<span class="hljs-string">&quot;App-header&quot;</span>&gt;<br>        &lt;h1&gt;&#123;nbbl&#125;&lt;/h1&gt;<br>        &lt;h1&gt;&#123;wbbl&#125;&lt;/h1&gt;<br>      &lt;/header&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span>;<br>&#123;<span class="hljs-comment">/*  useState是钩子函数  */</span>&#125;<br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  &#123;<span class="hljs-comment">/*  初始值 = 数组  */</span>&#125;<br>  <span class="hljs-keyword">const</span> [nbbl, setTitle] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;内部变量&quot;</span>)<br>    nbbl = <span class="hljs-string">&quot;本来就是内部变量&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nbbl)<br>  <br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=<span class="hljs-string">&quot;App&quot;</span>&gt;<br>      &lt;header className=<span class="hljs-string">&quot;App-header&quot;</span>&gt;<br>        &lt;h1 onClik=<span class="hljs-string">&quot;&quot;</span><span class="hljs-title class_">App</span>-header&gt;&#123;nbbl&#125;&lt;/h1&gt; <br>      &lt;/header&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 模块与组件(模块与组件的理解)</title>
    <url>/React-JSX-one.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul>
<li><p>理解: 向外提供特定功能的js程序, 一般就是一个js文件</p>
</li>
<li><p>为什么要拆成模块: 随着业务逻辑增加, 代码越来越多且复杂</p>
</li>
<li><p>作用: 复用js, 简化js的编写, 提高js运行效率</p>
</li>
</ul>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a><a href="/React-Component-oriented.html">组件</a></h1><ul>
<li><p>理解: 用来实现局部功能效果的代码和资源的集合(html/css/js/image等等)</p>
</li>
<li><p>为什么要用组件:  一个界面的功能更复杂</p>
</li>
<li><p>作用: 复用编码, 简化项目编码, 提高运行效率</p>
</li>
</ul>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><ul>
<li>当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</li>
</ul>
<h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><ul>
<li>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</li>
</ul>
<p><strong>工具推荐: React Developer Tools</strong></p>
<ul>
<li><p>Components: 观察这个网页有多少组件组成</p>
</li>
<li><p>Profiler: 用于记录网站的性能</p>
</li>
</ul>
<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 组件</title>
    <url>/React-subassembly.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>


<h1 id="封装组件"><a href="#封装组件" class="headerlink" title="封装组件"></a>封装组件</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function Name(props) &#123;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网站名称：&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br>function Url(props) &#123;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网站地址：&#123;props.url&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br>function Nickname(props) &#123;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网站小名：&#123;props.nickname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br>function App() &#123;<br>	return (<br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">Name</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;史迪奇的博客&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">Url</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;https://sdq3.gitee.io&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">Nickname</span> <span class="hljs-attr">nickname</span>=<span class="hljs-string">&quot;我叫史迪奇&quot;</span> /&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	);<br>&#125;<br><br>ReactDOM.render(<br>	 <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>,<br>	document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>正常定义组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">function MyNameIsStitch(props) &#123;<br>    return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>ES6 class 来定义组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">class MyNameIsStitch extends React.Component &#123;<br>  render() &#123;<br>    return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>用户自定义组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function MyNameIsStitch(props) &#123;<br>  &#123;/*  name 属性通过 props.name 来获取  */&#125;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我叫&#123;props.name&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br><br>const element = <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;史迪奇&quot;</span>/&gt;</span>;<br><br>ReactDOM.render(<br>	element,<br>	document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h1><p><strong>解析: 就是可以通过创建多个组件来合成一个组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>function Name(props) &#123;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网站名称：&#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br>function Url(props) &#123;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网站地址：&#123;props.url&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br>function Nickname(props) &#123;<br>	return <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网站小名：&#123;props.nickname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>;<br>&#125;<br>function App() &#123;<br>	return (<br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">Name</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;史迪奇的博客&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">Url</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;https://sdq3.gitee.io&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">Nickname</span> <span class="hljs-attr">nickname</span>=<span class="hljs-string">&quot;我叫史迪奇&quot;</span> /&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	);<br>&#125;<br><br>ReactDOM.render(<br>	 <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>,<br>	document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 组件实例的三大属性</title>
    <url>/React-state-props-refs.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="props基本使用"><a href="#props基本使用" class="headerlink" title="props基本使用"></a>props基本使用</h1><h2 id="批量传递props-批量传递标签属性"><a href="#批量传递props-批量传递标签属性" class="headerlink" title="批量传递props / 批量传递标签属性"></a>批量传递props / 批量传递标签属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 准备好一个&quot;容器&quot; --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>		// 创建组件<br>		class Person extends React.Component&#123;<br>			render()&#123;<br>				// console.log(this);<br>				const &#123;name,age,sex&#125; = this.props<br>				return (<br>					<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>						<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名: &#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>						<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别: &#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>						<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄: &#123;age+1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>					<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>				)<br>			&#125;<br>		&#125;<br>		// 渲染组件到页面<br>		ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;19&#125;</span>  <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span>,document.getElementById(&#x27;test1&#x27;))<br>		ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span>,document.getElementById(&#x27;test2&#x27;))<br><br>		const p = &#123;name:&#x27;兰莉&#x27;,age:18,sex:&#x27;女&#x27;&#125;<br>		// console.log(&#x27;@&#x27;,...p);<br>		// ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;p.name&#125;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;p.age&#125;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&#123;p.sex&#125;/</span>&gt;</span>,document.getElementById(&#x27;test3&#x27;))<br><br>		//  展开运算符<span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...p</span>&#125;/&gt;</span> 相当于 &#123;name:&#x27;兰莉&#x27;,age:18,sex:&#x27;女&#x27;&#125;<br>        &#123;...p&#125; 中&#123; &#125;是转义字符, 实际上是..p发挥作用, ..p仅在标签对中可以使用<br>		ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...p</span>&#125;/&gt;</span>,document.getElementById(&#x27;test3&#x27;))<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p><strong>数组加减</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;<br>		<span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>		<span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>]<br>           <span class="hljs-comment">// 展开一个数组</span><br>		<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...arr1); <br>           <span class="hljs-comment">// 连接数组</span><br>		<span class="hljs-keyword">let</span> arr3 = [...arr1,...arr2]<br>		<br>		<span class="hljs-comment">//  数组求和    在函数中使用</span><br>		<span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...numbers</span>)&#123;<br>			<span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">preValue,currentValue</span>)=&gt;</span>&#123;<br>				<span class="hljs-keyword">return</span> preValue + currentValue<br>			&#125;)<br>		&#125;<br>		<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));<br>           &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<p><strong>克隆</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><br>		// 构造字面量对象时使用展开语法<br>		let person = &#123;name:&#x27;tom&#x27;,age:18&#125;<br>           //  展开运算符复制一个对象<br>		let person2 = &#123;...person&#125;<br>		// console.log(...person); <br>           // 报错, 展开运算符不能展开对象<br>		person.name = &#x27;jerry&#x27;<br>		console.log(person2);<br>		console.log(person);<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>合并</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><br>		// 合并<br>		let person3 = &#123;...person,name:&#x27;jack&#x27;,address:&quot;地球&quot;&#125;<br>		console.log(person3);<br>		<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;!-- 引入prop-types, 用于对组件标签属性进行限制 --&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../js/prop-types.js&quot;</span>&gt;&lt;/script&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>		<span class="hljs-comment">//创建组件</span><br>		<span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>			<span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>				<span class="hljs-comment">// console.log(this);</span><br>				<span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>				<span class="hljs-comment">//props是只读的</span><br>				<span class="hljs-comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错, 因为props是只读的</span><br>				<span class="hljs-keyword">return</span> (<br>					&lt;ul&gt;<br>						&lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;<br>						&lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;<br>						&lt;li&gt;年龄：&#123;age&#125;&lt;/li&gt;<br>					&lt;/ul&gt;<br>				)<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">//对标签属性进行类型、必要性的限制</span><br>		<span class="hljs-title class_">Person</span>.<span class="hljs-property">propTypes</span> = &#123;<br>            <span class="hljs-comment">//限制name必传, 且为字符串</span><br>			<span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>            <span class="hljs-comment">//限制sex为字符串</span><br>			<span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<br>            <span class="hljs-comment">//限制age为数值</span><br>			<span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,<br>            <span class="hljs-comment">//限制speak为函数 func = function</span><br>			<span class="hljs-attr">speak</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>,<br>            <br>		&#125;<br>		<span class="hljs-comment">//指定默认标签属性值</span><br>		<span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>			<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男女同体&#x27;</span>,<span class="hljs-comment">//sex默认值为男女同体</span><br>			<span class="hljs-attr">age</span>:<span class="hljs-string">&quot;已经死了&quot;</span> <span class="hljs-comment">//age默认值为已经死了</span><br>		&#125;<br>		<span class="hljs-comment">//渲染组件到页面</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;哈哈哈&quot;</span> <span class="hljs-attr">speak</span>=<span class="hljs-string">&#123;speak&#125;/</span>&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test1&#x27;</span>))<br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;女&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test2&#x27;</span>))<br><br>		<span class="hljs-keyword">const</span> p = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;老刘&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;<br>		<span class="hljs-comment">// console.log(&#x27;@&#x27;,...p);</span><br>		<span class="hljs-comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#x27;test3&#x27;))</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...p</span>&#125;/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test3&#x27;</span>))<br><br>		<span class="hljs-keyword">function</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>)&#123;<br>			<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我会讲话了&#x27;</span>);<br>		&#125;<br>	&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<h3 id="构造器能省略尽量省略"><a href="#构造器能省略尽量省略" class="headerlink" title="构造器能省略尽量省略"></a>构造器能省略尽量省略</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 构造器是否接收props 是否传递给super 取决于是否希望在构造器中通过this访问props</span><br><span class="hljs-title function_">costructor</span>(<span class="hljs-params">props</span>)&#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props)<br>	<span class="hljs-comment">// 构造器必写super 传值作用</span><br>	<span class="hljs-variable language_">super</span>(props)<br>	<span class="hljs-comment">// 接props或者不接props, 可以用this.props来分析区别</span><br>	<span class="hljs-comment">// console.log(&#x27;costructor&#x27;,this.props);</span><br>	<span class="hljs-comment">// 相当于</span><br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;costructor&#x27;</span>,props);<br>&#125;<br><br><span class="hljs-comment">// 也可以</span><br><br>state = &#123;&#125;<br><br><span class="hljs-comment">// 也可以用箭头函数</span><br><br>demo = <span class="hljs-function">()=&gt;</span>&#123;<br>	<span class="hljs-comment">// 函数体</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="函数式组件使用props"><a href="#函数式组件使用props" class="headerlink" title="函数式组件使用props"></a>函数式组件使用props</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>	functiom <span class="hljs-title class_">Person</span> (props)&#123;<br>		<span class="hljs-keyword">const</span> &#123; name, age, sex &#125; = props<br>		<span class="hljs-keyword">return</span> (<br>			&lt;ul&gt;<br>				&lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;<br>				&lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;<br>				&lt;li&gt;年龄：&#123;age&#125;&lt;/li&gt;<br>			&lt;/ul&gt;<br>		)<br>	&#125;<br>	<span class="hljs-comment">// 渲染组件到页面</span><br>	<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;史迪奇&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;未知&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;未知&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test1&#x27;</span>))<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<h2 id="函数式组件也可以进行限制"><a href="#函数式组件也可以进行限制" class="headerlink" title="函数式组件也可以进行限制"></a>函数式组件也可以进行限制</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>	functiom <span class="hljs-title class_">Person</span> (props)&#123;<br>		<span class="hljs-keyword">const</span> &#123; name, age, sex &#125; = props<br>		<span class="hljs-keyword">return</span> (<br>			&lt;ul&gt;<br>				&lt;li&gt;姓名：&#123;name&#125;&lt;/li&gt;<br>				&lt;li&gt;性别：&#123;sex&#125;&lt;/li&gt;<br>				&lt;li&gt;年龄：&#123;age&#125;&lt;/li&gt;<br>			&lt;/ul&gt;<br>		)<br>	&#125;<br>			<span class="hljs-title class_">Person</span>.<span class="hljs-property">propTypes</span> = &#123;<br>			<span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, <span class="hljs-comment">//限制name必传, 且为字符串</span><br>			<span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<span class="hljs-comment">//限制sex为字符串</span><br>			<span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<span class="hljs-comment">//限制age为字符串</span><br>		&#125;<br><br>		<span class="hljs-comment">//指定默认标签属性值</span><br>		<span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>			<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;未知&#x27;</span>,<span class="hljs-comment">//sex默认值为未知</span><br>			<span class="hljs-attr">age</span>:<span class="hljs-string">&quot;未知&quot;</span> <span class="hljs-comment">//age默认值为未知</span><br>		&#125;<br>	<span class="hljs-comment">// 渲染组件到页面</span><br>	<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;史迪奇&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;未知&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;未知&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test1&#x27;</span>))<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><h2 id="字符串写法-不建议用"><a href="#字符串写法-不建议用" class="headerlink" title="字符串写法 不建议用"></a>字符串写法 不建议用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>		<span class="hljs-comment">//创建组件</span><br>		<span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>			<span class="hljs-comment">// 展示左侧输入框的数据</span><br>			showData = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span><br>				<span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>)<br>			&#125;<br>			<span class="hljs-comment">// 展示右侧输入框的数据</span><br>			showData2 = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-keyword">const</span> &#123;input2&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span><br>				<span class="hljs-title function_">alert</span>(input2.<span class="hljs-property">value</span>)<br>			&#125;<br>			<span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>				<span class="hljs-keyword">return</span>(<br>					&lt;div&gt;<br>						&lt;input ref=<span class="hljs-string">&quot;input1&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;&amp;nbsp;<br>						&lt;button onClick=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">showData</span>&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;<br>						&lt;input ref=<span class="hljs-string">&quot;input2&quot;</span> onBlur=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">showData2</span>&#125; type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;失去焦点提示数据&quot;</span>/&gt;<br>					&lt;/div&gt;<br>				)<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">// 渲染组件到页面</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>	&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">字符串写法效果</font></p>
<iframe id="iframe" src="/html/字符串形式的ref.html"></iframe>

<h2 id="回调函数的ref"><a href="#回调函数的ref" class="headerlink" title="回调函数的ref"></a>回调函数的ref</h2><p><strong>解释: 定义但没调用</strong></p>
<p><strong>特点</strong><br>      <ol style="list-style-type:number"><br>        <li>定义</li><br>        <li>调2用</li><br>        <li>执行</li><br>      </ol></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>		<span class="hljs-comment">// 创建组件</span><br>		<span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>			<span class="hljs-comment">// 展示左侧输入框的数据</span><br>			showData = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span><br>				<span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>)<br>			&#125;<br>			<span class="hljs-comment">// 展示右侧输入框的数据</span><br>			showData2 = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-keyword">const</span> &#123;input2&#125; = <span class="hljs-variable language_">this</span><br>				<span class="hljs-title function_">alert</span>(input2.<span class="hljs-property">value</span>)<br>			&#125;<br>			<span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>				<span class="hljs-keyword">return</span>(<br>					&lt;div&gt;<br>						&#123;<span class="hljs-comment">/*  cref=&#123;c =&gt; this.input1 = c &#125;是回调函数 剩下的交给React 仅ref  */</span>&#125; <br>						&lt;input ref=&#123;<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = c &#125; type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;&amp;nbsp;<br>						&lt;button onClick=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">showData</span>&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;<br>						&lt;input onBlur=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">showData2</span>&#125; ref=&#123;<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">input2</span> = c &#125; type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;失去焦点提示数据&quot;</span>/&gt;&amp;nbsp;<br>					&lt;/div&gt;<br>				)<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">//渲染组件到页面</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>	&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">回调函数效果</font></p>
<iframe id="iframe" src="/html/回调函数形式的ref.html"></iframe>

<h3 id="回调ref函数执行次数"><a href="#回调ref函数执行次数" class="headerlink" title="回调ref函数执行次数"></a>回调ref函数执行次数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>		<span class="hljs-comment">//创建组件</span><br>		<span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><br>			state = &#123;<span class="hljs-attr">isPai</span>:<span class="hljs-literal">false</span>&#125;<br><br>			showInfo = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span><br>				<span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>)<br>			&#125;<br><br>			changeWeather = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-comment">//获取原来的状态</span><br>				<span class="hljs-keyword">const</span> &#123;isPai&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>				<span class="hljs-comment">//更新状态</span><br>				<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">isPai</span>:!isPai&#125;)<br>			&#125;<br><br>			saveInput = <span class="hljs-function">(<span class="hljs-params">c</span>)=&gt;</span>&#123;<br>				<span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = c;<br>				<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;@&#x27;</span>,c);<br>			&#125;<br><br>			<span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>				<span class="hljs-keyword">const</span> &#123;isPai&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>				<span class="hljs-keyword">return</span>(<br>					&lt;div&gt;<br>						&lt;h2&gt;派大星是&#123;isPai ? <span class="hljs-string">&#x27;大聪明&#x27;</span>:<span class="hljs-string">&#x27;骚话王&#x27;</span>&#125;&lt;/h2&gt;<br>						&#123;<span class="hljs-comment">/*&lt;input ref=&#123;(c)=&gt;&#123;this.input1 = c;console.log(&#x27;@&#x27;,c);&#125;&#125; type=&quot;text&quot;/&gt;&lt;br/&gt;&lt;br/&gt;*/</span>&#125;<br>						&lt;input ref=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">saveInput</span>&#125; type=<span class="hljs-string">&quot;text&quot;</span>/&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>						&lt;button onClick=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">showInfo</span>&#125;&gt;点我提示输入的数据&lt;/button&gt;<br>						&lt;button onClick=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">changeWeather</span>&#125;&gt;点击切换头衔&lt;/button&gt;<br>					&lt;/div&gt;<br>				)<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">//渲染组件到页面</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>	&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">回调ref函数执行次数</font></p>
<iframe id="iframe" src="/html/回调ref中回调执行次数的问题.html"></iframe>

<h3 id="createRef的使用"><a href="#createRef的使用" class="headerlink" title="createRef的使用"></a>createRef的使用</h3><p><strong>createRef的官方推荐, alert(this.sDq.current.value) 用几个就要保证上方的 sDq = React.createRef() 就是需要创建的几个Ref的容器</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>		<span class="hljs-comment">// 创建组件</span><br>		<span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>			<span class="hljs-comment">/* </span><br>				<span class="hljs-title class_">React</span>.<span class="hljs-property">createRef</span>调用后可以返回一个容器, 该容器可以存储被ref所标识的节点,该容器是<span class="hljs-string">&quot;专人专用&quot;</span>的<br>			 */<br>			sDq = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>			sDz = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>			<span class="hljs-comment">//展示左侧输入框的数据</span><br>			showData = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sDq</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>			&#125;<br>			<span class="hljs-comment">//展示右侧输入框的数据</span><br>			showData2 = <span class="hljs-function">()=&gt;</span>&#123;<br>				<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sDz</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>			&#125;<br>			<span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>				<span class="hljs-keyword">return</span>(<br>					&lt;div&gt;<br>						&lt;input ref=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">sDq</span>&#125; type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;&amp;nbsp;<br>						&#123;<span class="hljs-comment">/* 点击焦点 onClick */</span>&#125;<br>						&lt;button onClick=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">showData</span>&#125;&gt;点我提示左侧的数据&lt;/button&gt;&amp;nbsp;<br>						&#123;<span class="hljs-comment">/* 失去焦点onBlur */</span>&#125;<br>						&lt;input onBlur=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">showData2</span>&#125; ref=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">sDz</span>&#125; type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;失去焦点提示数据&quot;</span>/&gt;&amp;nbsp;<br>					&lt;/div&gt;<br>				)<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">// 渲染组件到页面</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>	&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">回调ref函数执行次数</font></p>
<iframe id="iframe" src="/html/createRef的使用.html"></iframe>

<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 组件 API</title>
    <url>/React-API.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h1><ul>
<li><p>设置状态: setState</p>
</li>
<li><p>替换状态: replaceState</p>
</li>
<li><p>设置属性: setProps</p>
</li>
<li><p>替换属性: replaceProps</p>
</li>
<li><p>强制更新: forceUpdate</p>
</li>
<li><p>获取DOM节点: findDOMNode</p>
</li>
<li><p>判断组件挂载状态: isMounted</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  nextState将要设置的新状态, 该状态会和当前的state合并  */</span>&#125; <br><span class="hljs-title function_">setState</span>(object nextState[, <span class="hljs-keyword">function</span> callback])<br><br>&#123;<span class="hljs-comment">/*  callback可选参数, 回调函数 该函数会在setState设置成功, 且组件重新渲染后调用  */</span>&#125; <br><span class="hljs-title function_">setState</span>(object callback[, <span class="hljs-keyword">function</span> callback])<br></code></pre></td></tr></table></figure>
<p><strong>关于setState</strong></p>
<ul>
<li><p>不能在组件内部通过this.state修改状态, 因为该状态会在调用setState()后被替换 </p>
</li>
<li><p>setState()并不会立即改变this.state, 而是创建一个即将处理的state setState()并不一定是同步的, 为了提升性能React会批量执行state和DOM渲染 </p>
</li>
<li><p>setState()总是会触发一次组件重绘, 除非在shouldComponentUpdate()中实现了一些条件渲染逻辑</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>    class MyNameIsStitch extends React.Component&#123;<br>      constructor(props) &#123;<br>          super(props);<br>          this.state = &#123;clickCount: 0&#125;;<br>          this.handleClick = this.handleClick.bind(this);<br>      &#125;<br>      <br>      handleClick() &#123;<br>        this.setState(function(state) &#123;<br>          return &#123;clickCount: state.clickCount + 1&#125;;<br>        &#125;);<br>      &#125;<br>      render () &#123;<br>        return (<span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>点击 点击次数为: &#123;this.state.clickCount&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>);<br>      &#125;<br>    &#125;<br>    ReactDOM.render(<br>      <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>      document.getElementById(&#x27;example&#x27;)<br>    );<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/setState.html"></iframe>

<h1 id="替换状态-replaceState"><a href="#替换状态-replaceState" class="headerlink" title="替换状态: replaceState"></a>替换状态: replaceState</h1><ul>
<li>replaceState()方法与setState()类似, 但是方法只会保留nextState中状态, 原state不在nextState中的状态都会被删除 <figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  nextState, 将要设置的新状态, 该状态会替换当前的state  */</span>&#125; <br><span class="hljs-title function_">setProps</span>(object nextProps[, <span class="hljs-keyword">function</span> callback]<br><br>&#123;<span class="hljs-comment">/*  callback, 可选参数, 回调函数 该函数会在replaceState设置成功, 且组件重新渲染后调用  */</span>&#125; <br><span class="hljs-title function_">setProps</span>(object callback[, <span class="hljs-keyword">function</span> callback]<br></code></pre></td></tr></table></figure>
<h1 id="设置属性-setProps"><a href="#设置属性-setProps" class="headerlink" title="设置属性: setProps"></a>设置属性: setProps</h1></li>
</ul>
<ul>
<li>设置组件属性, 并重新渲染组件 </li>
<li>props相当于组件的数据流, 它总是会从父组件向下传递至所有的子组件中 当和一个外部的JavaScript应用集成时, 我们可能会需要向组件传递数据或通知React.render()组件需要重新渲染, 可以使用setProps() </li>
<li>更新组件, 我可以在节点上再次调用React.render(), 也可以通过setProps()方法改变组件属性, 触发组件重新渲染 </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  nextProps, 将要设置的新属性, 该状态会和当前的props合并  */</span>&#125; <br><span class="hljs-title function_">replaceProps</span>(object nextProps[, <span class="hljs-keyword">function</span> callback])<br><br>&#123;<span class="hljs-comment">/*  callback, 可选参数, 回调函数 该函数会在setrops设置成功, 且组件重新渲染后调用  */</span>&#125; <br><span class="hljs-title function_">replaceProps</span>(object allback[, <span class="hljs-keyword">function</span> callback])<br></code></pre></td></tr></table></figure>
<h1 id="替换属性-replaceProps"><a href="#替换属性-replaceProps" class="headerlink" title="替换属性: replaceProps"></a>替换属性: replaceProps</h1><ul>
<li>replaceProps()方法与setProps类似, 但它会删除原有 props</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  nextProps, 将要设置的新属性, 该属性会替换当前的props  */</span>&#125; <br><span class="hljs-title function_">replaceProps</span>(object nextProps[, <span class="hljs-keyword">function</span> callback])<br><br>&#123;<span class="hljs-comment">/*  callback, 可选参数, 回调函数 该函数会在replaceProps设置成功, 且组件重新渲染后调用  */</span>&#125; <br><span class="hljs-title function_">replaceProps</span>(object allback[, <span class="hljs-keyword">function</span> callback])<br></code></pre></td></tr></table></figure>
<h1 id="强制更新-forceUpdate"><a href="#强制更新-forceUpdate" class="headerlink" title="强制更新: forceUpdate"></a>强制更新: forceUpdate</h1><ul>
<li>forceUpdate()方法会使组件调用自身的render()方法重新渲染组件, 组件的子组件也会调用自己的render()  但是, 组件重新渲染时, 依然会读取this.props和this.state, 如果状态没有改变, 那么React只会更新DOM  </li>
<li>forceUpdate()方法适用于this.props和this.state之外的组件重绘 (如: 修改了this.state后) , 通过该方法通知React需要调用render()</li>
<li>一般来说, 应该尽量避免使用forceUpdate(), 而仅从this.props和this.state中读取状态并由React触发render()调用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  callback, 可选参数, 回调函数 该函数会在组件render()方法调用后调用  */</span>&#125; <br><span class="hljs-title function_">forceUpdate</span>([<span class="hljs-keyword">function</span> callback])<br></code></pre></td></tr></table></figure>
<h1 id="获取DOM节点-findDOMNode"><a href="#获取DOM节点-findDOMNode" class="headerlink" title="获取DOM节点: findDOMNode"></a>获取DOM节点: findDOMNode</h1><ul>
<li>如果组件已经挂载到DOM中, 该方法返回对应的本地浏览器 DOM 元素 当render返回null 或 false时, this.findDOMNode()也会返回null 从DOM 中读取值的时候, 该方法很有用, 如：获取表单字段的值和做一些 DOM 操作<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  返回值: DOM元素DOMElement  */</span>&#125; <br>DOMElement <span class="hljs-title function_">findDOMNode</span>()<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="判断组件挂载状态-isMounted"><a href="#判断组件挂载状态-isMounted" class="headerlink" title="判断组件挂载状态: isMounted"></a>判断组件挂载状态: isMounted</h1><ul>
<li>isMounted()方法用于判断组件是否已挂载到DOM中 可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&#123;<span class="hljs-comment">/*  返回值: true或false, 表示组件是否已挂载到DOM中  */</span>&#125; <br>bool <span class="hljs-title function_">isMounted</span>()<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 组件生命周期</title>
    <url>/React-Component-Lifecycles.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h1><ul>
<li><p>设置状态: setState</p>
</li>
<li><p>替换状态: replaceState</p>
</li>
<li><p>设置属性: setProps</p>
</li>
<li><p>替换属性: replaceProps</p>
</li>
<li><p>强制更新: forceUpdate</p>
</li>
<li><p>获取DOM节点: findDOMNode</p>
</li>
<li><p>判断组件挂载状态: isMounted</p>
</li>
</ul>
<h2 id="生命周期的方法"><a href="#生命周期的方法" class="headerlink" title="生命周期的方法"></a>生命周期的方法</h2><ul>
<li><p>componentWillMount 在渲染前调用,在客户端也在服务端</p>
</li>
<li><p>componentDidMount : 在第一次渲染后调用, 只在客户端 之后组件已经生成了对应的DOM结构, 可以通过this.getDOMNode()来进行访问  如果你想和其他JavaScript框架一起使用, 可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异步操作阻塞UI) </p>
</li>
<li><p>componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用 这个方法在初始化render时不会被调用 </p>
</li>
<li><p>shouldComponentUpdate 返回一个布尔值 在组件接收到新的props或者state时被调用 在初始化时或者使用forceUpdate时不被调用 </p>
</li>
<li><p>可以在你确认不需要更新组件时使用 </p>
</li>
<li><p>componentWillUpdate在组件接收到新的props或者state但还没有render时被调用 在初始化时不会被调用 </p>
</li>
<li><p>componentDidUpdate 在组件完成更新后立即调用 在初始化时不会被调用 </p>
</li>
<li><p>componentWillUnmount在组件从 DOM 中移除之前立刻被调用</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>&#123;/*  通过 componentDidMount 方法设置一个定时器, 每隔100毫秒重新设置组件的透明度, 并重新渲染  */&#125; <br>class MyNameIsStitch extends React.Component &#123;<br> <br>  constructor(props) &#123;<br>      super(props);<br>      this.state = &#123;opacity: 1.0&#125;;<br>  &#125;<br> <br>  componentDidMount() &#123;<br>    this.timer = setInterval(function () &#123;<br>      var opacity = this.state.opacity;<br>      opacity -= .05;<br>      if (opacity &lt; 0.1) &#123;<br>        opacity = 1.0;<br>      &#125;<br>      this.setState(&#123;<br>        opacity: opacity<br>      &#125;);<br>    &#125;.bind(this), 100);<br>  &#125;<br> <br>  render () &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;opacity:</span> <span class="hljs-attr">this.state.opacity</span>&#125;&#125;&gt;</span><br>        我叫&#123;this.props.name&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br> <br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;史迪奇&quot;</span>/&gt;</span>,<br>  document.body<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/生命周期componentDidMount.html"></iframe>

<br>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>&#123;/*  初始化 state ,  setNewnumber 用于更新 state 所有生命周期在 Content 组件中  */&#125; <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class Button extends React.Component &#123;<br>  constructor(props) &#123;<br>      super(props);<br>      this.state = &#123;data: 0&#125;;<br>      this.setNewNumber = this.setNewNumber.bind(this);<br>  &#125;<br>  <br>  setNewNumber() &#123;<br>    this.setState(&#123;data: this.state.data + 1&#125;)<br>  &#125;<br>  render() &#123;<br>      return (<br>         <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#123;this.setNewNumber&#125;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Content</span> <span class="hljs-attr">myNumber</span> = <span class="hljs-string">&#123;this.state.data&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      );<br>    &#125;<br>&#125;<br><br><br>class Content extends React.Component &#123;<br>  componentWillMount() &#123;<br>      console.log(&#x27;Component WILL MOUNT!&#x27;)<br>  &#125;<br>  componentDidMount() &#123;<br>       console.log(&#x27;Component DID MOUNT!&#x27;)<br>  &#125;<br>  componentWillReceiveProps(newProps) &#123;<br>        console.log(&#x27;Component WILL RECEIVE PROPS!&#x27;)<br>  &#125;<br>  shouldComponentUpdate(newProps, newState) &#123;<br>        return true;<br>  &#125;<br>  componentWillUpdate(nextProps, nextState) &#123;<br>        console.log(&#x27;Component WILL UPDATE!&#x27;);<br>  &#125;<br>  componentDidUpdate(prevProps, prevState) &#123;<br>        console.log(&#x27;Component DID UPDATE!&#x27;)<br>  &#125;<br>  componentWillUnmount() &#123;<br>         console.log(&#x27;Component WILL UNMOUNT!&#x27;)<br>  &#125;<br> <br>    render() &#123;<br>      return (<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你的寿命减去&#123;this.props.myNumber&#125;年<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      );<br>    &#125;<br>&#125;<br>ReactDOM.render(<br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/初始化 state,setNewnumber 用于更新 state.html"></iframe>

<br>
]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 表单与事件</title>
    <url>/React-form-event.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class Content extends React.Component &#123;<br>  render() &#123;<br>    return  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            &#123;/*  设置了输入框 input 值 value = &#123;this.state.data&#125; 在输入框值发生变化时我们可以更新 state 我们可以使用 onChange 事件来监听 input 的变化, 并修改 state  */&#125; <br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.props.myDataProp&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.props.updateStateProp&#125;</span> /&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;this.props.myDataProp&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;<br>  &#125;<br>&#125;<br>class MyNameIsStitch extends React.Component &#123;<br>  constructor(props) &#123;<br>      super(props);<br>      this.state = &#123;value: &#x27;我叫史迪奇&#x27;&#125;;<br>      this.handleChange = this.handleChange.bind(this);<br>  &#125;<br> <br>  handleChange(event) &#123;<br>    this.setState(&#123;value: event.target.value&#125;);<br>  &#125;<br>  render() &#123;<br>    var value = this.state.value;<br>    return <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Content</span> <span class="hljs-attr">myDataProp</span> = <span class="hljs-string">&#123;value&#125;</span> </span><br>              updateStateProp = &#123;this.handleChange&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;<br>  &#125;<br>&#125;<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/React 表单与事件 实例1.html"></iframe>

<h1 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>    var Content = React.createClass(&#123;<br>      render: function() &#123;<br>        return  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                &#123;/*  在子组件上使用表单 onChange 方法将触发 state 的更新并将值传递到子组件的输入框的 value 上来重新渲染界面 需要在父组件通过创建事件句柄 (handleChange)并作为 prop (updateStateProp) 传递到子组件上  */&#125; <br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.props.myDataProp&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.props.updateStateProp&#125;</span> /&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;this.props.myDataProp&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;<br>      &#125;<br>    &#125;);<br>    var MyNameIsStitch = React.createClass(&#123;<br>      getInitialState: function() &#123;<br>        return &#123;value: &#x27;我叫史迪奇&#x27;&#125;;<br>      &#125;,<br>      handleChange: function(event) &#123;<br>        this.setState(&#123;value: event.target.value&#125;);<br>      &#125;,<br>      render: function() &#123;<br>        var value = this.state.value;<br>        return <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Content</span> <span class="hljs-attr">myDataProp</span> = <span class="hljs-string">&#123;value&#125;</span> </span><br>                  updateStateProp = &#123;this.handleChange&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;<br>      &#125;<br>    &#125;);<br>    ReactDOM.render(<br>      <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>      document.getElementById(&#x27;example&#x27;)<br>    );<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/React 表单与事件 实例1.html"></iframe>
<!-- <iframe id="iframe" src="/html/React 表单与事件 实例2.html"></iframe> -->

<h1 id="Select-下拉菜单"><a href="#Select-下拉菜单" class="headerlink" title="Select 下拉菜单"></a>Select 下拉菜单</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class FlavorForm extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.state = &#123;value: &#x27;coconut&#x27;&#125;;<br><br>    this.handleChange = this.handleChange.bind(this);<br>    this.handleSubmit = this.handleSubmit.bind(this);<br>  &#125;<br><br>  handleChange(event) &#123;<br>    this.setState(&#123;value: event.target.value&#125;);<br>  &#125;<br><br>  handleSubmit(event) &#123;<br>    alert(&#x27;你喜欢的实验品: &#x27; + this.state.value);<br>    event.preventDefault();<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>          选择您最喜欢的网站<br>          <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span>&gt;</span><br>            &#123;/*  不使用 selected 属性, 而在根 select 标签上用 value 属性来表示选中项  */&#125; <br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;</span>鲁本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Angel &quot;</span>&gt;</span>安琪<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">FlavorForm</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/Select 下拉菜单"></iframe>

<h1 id="多个表单"><a href="#多个表单" class="headerlink" title="多个表单"></a>多个表单</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class Reservation extends React.Component &#123;<br>  constructor(props) &#123;<br>    super(props);<br>    this.state = &#123;<br>      isGoing: true,<br>      numberOfGuests: 2<br>    &#125;;<br><br>    this.handleInputChange = this.handleInputChange.bind(this);<br>  &#125;<br><br>  handleInputChange(event) &#123;<br>    const target = event.target;<br>    const value = target.type === &#x27;checkbox&#x27; ? target.checked : target.value;<br>    const name = target.name;<br><br>    this.setState(&#123;<br>      [name]: value<br>    &#125;);<br>  &#125;<br><br>  render() &#123;<br>    return (<br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>          是否离开:<br>          &lt;input<br>            name=&quot;isGoing&quot;<br>            type=&quot;checkbox&quot;<br>            checked=&#123;this.state.isGoing&#125;<br>            onChange=&#123;this.handleInputChange&#125; /&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>          访客数:<br>          &lt;input<br>            name=&quot;numberOfGuests&quot;<br>            type=&quot;number&quot;<br>            value=&#123;this.state.numberOfGuests&#125;<br>            onChange=&#123;this.handleInputChange&#125; /&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    );<br>  &#125;<br>&#125;<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">Reservation</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/多个表单.html"></iframe>

<h1 id="React-事件"><a href="#React-事件" class="headerlink" title="React 事件"></a>React 事件</h1><h3 id="onClick-事件"><a href="#onClick-事件" class="headerlink" title="onClick 事件"></a>onClick 事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br><br>class MyNameIsStitch extends React.Component &#123;<br>  constructor(props) &#123;<br>      super(props);<br>      this.state = &#123;value: &#x27;My name is Stitch&#x27;&#125;;<br>      this.handleChange = this.handleChange.bind(this);<br>  &#125;<br>  <br>  handleChange(event) &#123;<br>    this.setState(&#123;value: &#x27;我叫史迪奇&#x27;&#125;)<br>  &#125;<br>  render() &#123;<br>    var value = this.state.value;<br>    return <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span>&gt;</span>翻译<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;<br>  &#125;<br>&#125;<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/React onClick 事件"></iframe>

<h3 id="更新父组件的-state"><a href="#更新父组件的-state" class="headerlink" title="更新父组件的 state"></a>更新父组件的 state</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>class Content extends React.Component &#123;<br>  render() &#123;<br>    return  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#123;this.props.updateStateProp&#125;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;this.props.myDataProp&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  &#125;<br>&#125;<br>class MyNameIsStitch extends React.Component &#123;<br>  constructor(props) &#123;<br>      super(props);<br>      this.state = &#123;value: &#x27;My name is Stitch&#x27;&#125;;<br>      this.handleChange = this.handleChange.bind(this);<br>  &#125;<br>  handleChange(event) &#123;<br>    this.setState(&#123;value: &#x27;我叫史迪奇&#x27;&#125;)<br>  &#125;<br>  render() &#123;<br>    var value = this.state.value;<br>    return <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Content</span> <span class="hljs-attr">myDataProp</span> = <span class="hljs-string">&#123;value&#125;</span> </span><br>              updateStateProp = &#123;this.handleChange&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;<br>  &#125;<br>&#125;<br>ReactDOM.render(<br>  <span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span> /&gt;</span>,<br>  document.getElementById(&#x27;example&#x27;)<br>);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">查看效果</font></p>
<iframe id="iframe" src="/html/React onClick 事件"></iframe>

<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 面向组件编程</title>
    <url>/React-Component-oriented.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="创建函数式组件"><a href="#创建函数式组件" class="headerlink" title="创建函数式组件"></a>创建函数式组件</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>		//创建函数式组件 需要定义的首字母一定要大写<br>		function MyNameIsStitch()&#123;<br>			console.log(this); //此处的this是undefined, 因为babel编译后开启了严格模式<br>			return <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用函数定义的组件(适用于 简单组件 的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>		&#125;<br>		//2.渲染组件到页面<br>		ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span>/&gt;</span>,document.getElementById(&#x27;test&#x27;))<br>		/* <br>			执行了ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span>/&gt;</span>,document.getElementById(&#x27;test&#x27;))<br>            之后, 发生了什么?<br>					1.React解析组件标签, 找到了MyNameIsStitch组件<br>					2.发现组件是使用函数定义的, 随后调用该函数, 将返回的虚拟DOM转为真实DOM, 随后呈现在页面中<br>		*/<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="创建类式组件"><a href="#创建类式组件" class="headerlink" title="创建类式组件"></a>创建类式组件</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-comment">&lt;!-- 准备好一个&quot;容器&quot; --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>		//创建类式组件<br>		class MyNameIsStitch extends React.Component &#123;<br>			render()&#123;<br>				//render是放在哪里的?—— MyNameIsStitch的原型对象上, 供实例使用<br>				//render中的this是谁?—— MyNameIsStitch的实例对象 &lt;=&gt; MyNameIsStitch组件实例对象<br>				console.log(&#x27;render中的this:&#x27;,this);<br>				return <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>			&#125;<br>		&#125;<br>		//渲染组件到页面<br>		ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span>/&gt;</span>,document.getElementById(&#x27;test&#x27;))<br>		/* <br>			执行了ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">MyNameIsStitch</span>/&gt;</span>.......之后, 发生了什么?<br>					React解析组件标签, 找到了MyNameIsStitch组件<br>					发现组件是使用类定义的, 随后new出来该类的实例, 并通过该实例调用到原型上的render方法<br>					将render返回的虚拟DOM转为真实DOM, 随后呈现在页面中<br>		*/<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>React 受控组件与非受控组件</title>
    <url>/React-Controlled-Uncontrolle.html</url>
    <content><![CDATA[<p><strong>React笔记</strong></p>
<a id="more"></a>

<h1 id="受控组件-推荐"><a href="#受控组件-推荐" class="headerlink" title="受控组件 (推荐)"></a>受控组件 (推荐)</h1><p><strong>特点: 现用现取</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><br>		//创建组件<br>		class Login extends React.Component&#123;<br>			handleSubmit = (event)=&gt;&#123;<br>				event.preventDefault() //阻止表单提交<br>				const &#123;username,password&#125; = this<br>				alert(`你输入的用户名是：$&#123;username.value&#125;,你输入的密码是：$&#123;password.value&#125;`)<br>			&#125;<br>			render()&#123;<br>				return(<br>					<span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span><br>						用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;<br>						密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;<br>						<span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>					<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>				)<br>			&#125;<br>		&#125;<br>		//渲染组件<br>		ReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span>,document.getElementById(&#x27;test&#x27;))<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h1><p><strong>特点: 随着输入维护状态就是受控</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;body&gt;<br>	&lt;script type=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;<br>		<span class="hljs-comment">//创建组件</span><br>		<span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>			handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>				event.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">//阻止表单提交</span><br>				<span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-variable language_">this</span><br>				<span class="hljs-title function_">alert</span>(<span class="hljs-string">`你输入的用户名是：<span class="hljs-subst">$&#123;username.value&#125;</span>,你输入的密码是：<span class="hljs-subst">$&#123;password.value&#125;</span>`</span>)<br>			&#125;<br>			<span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>				<span class="hljs-keyword">return</span>(<br>					&lt;form onSubmit=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">handleSubmit</span>&#125;&gt;<br>						用户名：&lt;input ref=&#123;<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span> = c&#125; type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>						密码：&lt;input ref=&#123;<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = c&#125; type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt;<br>						&lt;button&gt;登录&lt;/button&gt;<br>					&lt;/form&gt;<br>				)<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">//渲染组件</span><br>		<span class="hljs-title class_">React</span>DOM.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>	&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>React</category>
      </categories>
  </entry>
  <entry>
    <title>SQL Server T-SQL 从创建数据库到创建数据表到插入数据</title>
    <url>/SQL-kbl.html</url>
    <content><![CDATA[<p><strong>SQL Server个人整理</strong></p>
<a id="more"></a>

<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> DATABASE 数据库名;<br></code></pre></td></tr></table></figure>
<p><strong>例子</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> DATABASE sdz;<br></code></pre></td></tr></table></figure>
<h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>	参数 类型(位数),<br>	参数 类型(位数),<br>	参数 类型(位数),<br>	参数 类型(位数)<br>);<br></code></pre></td></tr></table></figure>
<p><strong>例子在sdz数据库创建sdq这个表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL">use sdq;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> bbs (<br>  id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) ,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) ,<br>  sex <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) ,<br>  age <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)  ,<br>  classid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <br>);<br></code></pre></td></tr></table></figure>

<h1 id="插入数据表内容"><a href="#插入数据表内容" class="headerlink" title="插入数据表内容"></a>插入数据表内容</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 数据表 (参数, 参数, 参数)<br><span class="hljs-keyword">VALUES</span> (参数, 参数, 参数); <br></code></pre></td></tr></table></figure>
<p><strong>例子</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> bbs (id,name,sex,age,classid) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;sdqz&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-number">2</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;sdq&#x27;</span>, <span class="hljs-keyword">NULL</span>,  <span class="hljs-keyword">NULL</span>,  <span class="hljs-number">3</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;sdz&#x27;</span>, <span class="hljs-keyword">NULL</span>,  <span class="hljs-keyword">NULL</span>,  <span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure>

<h1 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL">elect <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sdq<br></code></pre></td></tr></table></figure>
<h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure>
<p><strong>例子</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> sdq;<br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>SQL Server T-SQL 存储过程</title>
    <url>/SQL-storage.html</url>
    <content><![CDATA[<p><strong>SQL Server个人整理</strong></p>
<a id="more"></a>

<h1 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">declare</span> 变量名 数据类型 常量<br></code></pre></td></tr></table></figure>
<h1 id="查询变量"><a href="#查询变量" class="headerlink" title="查询变量"></a>查询变量</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> 变量名<br></code></pre></td></tr></table></figure>
<h1 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">Procedure</span> 存储过程名 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> 表名<br></code></pre></td></tr></table></figure>
<h1 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">EXECUTE</span> 存储过程名<br></code></pre></td></tr></table></figure>
<h1 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> proc 存储过程名<br></code></pre></td></tr></table></figure>
<h1 id="Procedure-简写为-proc"><a href="#Procedure-简写为-proc" class="headerlink" title="Procedure 简写为: proc"></a>Procedure 简写为: proc</h1><br>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>SQL Server T-SQL 视图</title>
    <url>/SQL-try.html</url>
    <content><![CDATA[<p><strong>SQL Server个人整理</strong></p>
<a id="more"></a>

<h1 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> 视图(字段别名) <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION<br></code></pre></td></tr></table></figure>
<h1 id="向视图插入数据"><a href="#向视图插入数据" class="headerlink" title="向视图插入数据"></a>向视图插入数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">insert</span> 视图 <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;数据&#x27;</span>) <br></code></pre></td></tr></table></figure>
<h1 id="查询视图数据"><a href="#查询视图数据" class="headerlink" title="查询视图数据"></a>查询视图数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> 视图<br></code></pre></td></tr></table></figure>
<h1 id="修改-更新-视图数据"><a href="#修改-更新-视图数据" class="headerlink" title="修改(更新)视图数据"></a>修改(更新)视图数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">update</span> 视图 <span class="hljs-keyword">set</span> 修改的字段<span class="hljs-operator">=</span><span class="hljs-string">&#x27;修改的数据&#x27;</span> <span class="hljs-keyword">where</span> 匹配字段<span class="hljs-operator">=</span><span class="hljs-string">&#x27;匹配数据&#x27;</span> <br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>大数据 Spark</title>
    <url>/Spark.html</url>
    <content><![CDATA[<p><strong>Spark个人整理</strong></p>
<a id="more"></a>

<h1 id="组成模块"><a href="#组成模块" class="headerlink" title="组成模块"></a>组成模块</h1><table>
<thead>
<tr>
<th>SQL处理</th>
<th>流式处理</th>
<th>机器学习</th>
<th>图计算</th>
</tr>
</thead>
<tbody><tr>
<td>Sprk SQL</td>
<td>Spark Steaming</td>
<td>MLlib(machine learning)</td>
<td>GraphX (graph)</td>
</tr>
<tr>
<td>Apche Spark Core</td>
<td>Apche Spark Core</td>
<td>Apche Spark Core</td>
<td>Apche Spark Core</td>
</tr>
</tbody></table>
<h1 id="Spark环境搭建-Local-本地模式"><a href="#Spark环境搭建-Local-本地模式" class="headerlink" title="Spark环境搭建-Local (本地模式)"></a>Spark环境搭建-Local (本地模式)</h1><h1 id="Spark环境搭载-Standalone-独立群"><a href="#Spark环境搭载-Standalone-独立群" class="headerlink" title="Spark环境搭载-Standalone (独立群)"></a>Spark环境搭载-Standalone (独立群)</h1><h1 id="Spark环境搭载-Standalone-HA-高可用模式"><a href="#Spark环境搭载-Standalone-HA-高可用模式" class="headerlink" title="Spark环境搭载-Standalone-HA (高可用模式)"></a>Spark环境搭载-Standalone-HA (高可用模式)</h1><h1 id="Spark环境搭载-Spark-On-Yarn-热门"><a href="#Spark环境搭载-Spark-On-Yarn-热门" class="headerlink" title="Spark环境搭载-Spark-On-Yarn (热门)"></a>Spark环境搭载-Spark-On-Yarn (热门)</h1><br>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>String 比较</title>
    <url>/String-compare.html</url>
    <content><![CDATA[<p><strong>个人笔记</strong></p>
<a id="more"></a>

<h1 id="String-比较"><a href="#String-比较" class="headerlink" title="String 比较"></a>String 比较</h1><p><strong>当String进行比较时应该用equals</strong></p>
<p><strong>因为equals是String类重写后的用于比较字符串内容的方法</strong></p>
<p><strong>为什么不用==进行比较, 因为==是用于比较地址值</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Three.js 向量</title>
    <url>/Three.js-vector.html</url>
    <content><![CDATA[<p><strong>Three.js学习笔记</strong></p>
<a id="more"></a>

<h1 id="二维向量-Vector2"><a href="#二维向量-Vector2" class="headerlink" title="二维向量-Vector2"></a>二维向量-Vector2</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// Vector2(x, y) 这里传2个值就是二维向量</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector</span>2( <span class="hljs-number">0</span>, <span class="hljs-number">1</span> );<br><br><span class="hljs-comment">//no arguments; will be initialised to (0, 0)</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector</span>2( );<br><br><span class="hljs-keyword">var</span> d = a.<span class="hljs-title function_">distanceTo</span>( b );<br></code></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li><p>Vector2( x : Float, y : Float )</p>
</li>
<li><p>x - 向量的x值, 默认为0</p>
</li>
<li><p>y - 向量的y值, 默认为0</p>
</li>
</ul>
<p><strong>属性</strong></p>
<p><strong>.isVector2</strong> : Boolean<br>用于测试这个类或者派生类是否为Vector2, 默认为true</p>
<p>你不应当对这个属性进行改变,因为它在内部使用, 以用于优化</p>
<p><strong>.height</strong> : Float</p>
<ul>
<li>y的别名</li>
</ul>
<p><strong>.width</strong> : Float</p>
<ul>
<li>x的别名</li>
</ul>
<p><strong>.x</strong> : Float<br><strong>.y</strong> : Float</p>
<p>方法<br><strong>.add</strong> ( v : Vector2 ) : this<br>将传入的向量v和这个向量相加</p>
<p><strong>.addScalar</strong> ( s : Float ) : this<br>将传入的标量s和这个向量的x值、y值相加</p>
<p><strong>.addScaledVector</strong> ( v : Vector2, s : Float ) : this<br>将所传入的v与s相乘所得乘积和这个向量相加</p>
<p><strong>.addVectors</strong> ( a : Vector2, b : Vector2 ) : this<br>将该向量设置为 a + b</p>
<p><strong>.angle</strong> () : Float<br>计算该向量相对于x轴正方向的弧度角度</p>
<p><strong>.applyMatrix3</strong> ( m : Matrix3 ) : this<br>将该向量乘以三阶矩阵m(第三个值隐式地为1)</p>
<p><strong>.ceil</strong> () : this<br>向量中的x分量和y分量向上取整为最接近的整数值</p>
<p><strong>.clamp</strong> ( min : Vector2, max : Vector2 ) : this<br>min - 在限制范围内, x和y的最小值<br>max - 在限制范围内, x和y的最大值</p>
<p>如果该向量的x值或y值大于限制范围内最大x值或y值, 则该值将会被所对应的值取代</p>
<p>如果该向量的x值或y值小于限制范围内最小x值或y值, 则该值将会被所对应的值取代</p>
<p><strong>.clampLength</strong> ( min : Float, max : Float ) : this<br>min - 长度将被限制为的最小值<br>max - 长度将被限制为的最大值</p>
<p>如果向量长度大于最大值, 则它将会被最大值所取代</p>
<p>如果向量长度小于最小值, 则它将会被最小值所取代</p>
<p><strong>.clampScalar</strong> ( min : Float, max : Float ) : this<br><strong>min</strong> - 分量将被限制为的最小值<br><strong>max</strong> - 分量将被限制为的最大值</p>
<p>如果该向量的x值或y值大于最大值, 则它们将被最大值所取代</p>
<p>如果该向量的x值或y值小于最小值, 则它们将被最小值所取代</p>
<p><strong>.clone</strong> () : Vector2<br>返回一个新的Vector2, 其具有和当前这个向量相同的x和y</p>
<p><strong>.copy</strong> ( v : Vector2 ) : this<br>将所传入Vector2的x和y属性复制给这一Vector2</p>
<p><strong>.distanceTo</strong> ( v : Vector2 ) : Float<br>计算该vector到传入的v的距离</p>
<p><strong>.manhattanDistanceTo</strong> ( v : Vector2 ) : Float<br>计算该vector到传入的v的曼哈顿距离(Manhattan distance)</p>
<p><strong>.distanceToSquared</strong> ( v : Vector2 ) : Float<br>计算该向量到传入的v的平方距离 如果你只是将该距离和另一个距离进行比较, 则应当比较的是距离的平方,  因为它的计算效率会更高一些</p>
<p><strong>.divide</strong> ( v : Vector2 ) : this<br>将该向量除以向量v</p>
<p><strong>.divideScalar</strong> ( s : Float ) : this<br>将该向量除以标量s<br>如果传入的s = 0, 则向量将被设置为( 0, 0 )</p>
<p><strong>.dot</strong> ( v : Vector2 ) : Float<br>计算该vector和所传入v的点积(dot product)</p>
<p><strong>.cross</strong> ( v : Vector2 ) : Float<br>计算该vector和所传入v的叉积(cross product) 请注意, “叉积”在2D中并没有被明确定义该函数计算的是2D图形中经常使用的几何叉积</p>
<p><strong>.equals</strong> ( v : Vector2 ) : Boolean<br>检查该向量和v的严格相等性</p>
<p><strong>.floor ()</strong> : this<br>向量中的x分量和y分量向下取整为最接近的整数值</p>
<p><strong>.fromArray</strong> ( array : Array, offset : Integer ) : this<br>array - 来源的数组<br>offset - (可选)在数组中的元素偏移量, 默认值为0</p>
<p>设置向量中的x值为array[ offset ], y值为array[ offset + 1 ]</p>
<p><strong>.fromBufferAttribute</strong> ( attribute : BufferAttribute, index : Integer ) : this<br>attribute - 来源的attribute<br>index - 在attribute中的索引</p>
<p>从attribute中设置向量的x值和y值 、</p>
<p><strong>.getComponent</strong> ( index : Integer ) : Float<br>index - 0 或 1</p>
<p>如果index值为0则返回x值<br>如果index值为1则返回y值</p>
<p><strong>.length</strong> () : Float<br>计算从(0, 0)到(x, y)的欧几里得长度 (Euclidean length, 即直线长度)</p>
<p><strong>.manhattanLength</strong> () : Float<br>计算该向量的曼哈顿长度(Manhattan length)</p>
<p><strong>.lengthSq</strong> () : Float<br>计算从(0, 0)到(x, y)的欧几里得长度 (Euclidean length, 即直线长度)的平方 如果你正在比较向量的长度, 应当比较的是长度的平方, 因为它的计算效率更高一些</p>
<p><strong>.lerp</strong> ( v : Vector2, alpha : Float ) : this<br>v - 朝着进行插值的Vector2<br>alpha - 插值因数, 其范围通常在[0, 1]闭区间</p>
<p>在该向量与传入的向量v之间的线性插值, alpha是沿着线的长度的百分比 —— alpha = 0 时表示的是当前向量, alpha = 1 时表示的是所传入的向量v</p>
<p><strong>.lerpVectors</strong> ( v1 : Vector2, v2 : Vector2, alpha : Float ) : this<br>v1 - 起始的Vector2<br>v2 - 朝着进行插值的Vector2<br>alpha - 插值因数, 其范围通常在[0, 1]闭区间</p>
<p>将此向量设置为在v1和v2之间进行线性插值的向量,  其中alpha为两个向量之间连线的长度的百分比 —— alpha = 0 时表示的是v1, alpha = 1 时表示的是v2</p>
<p><strong>.negate</strong> ()  : this<br>向量取反, 即： x = -x , y = -y</p>
<p><strong>.normalize</strong> () : this<br>将该向量转换为单位向量(unit vector),  也就是说, 将该向量的方向设置为和原向量相同, 但是其长度(length)为1</p>
<p><strong>.max</strong> ( v : Vector2 ) : this<br>如果该向量的x值或y值小于所传入v的x值或y值, 则将该值替换为对应的最大值</p>
<p><strong>.min</strong> ( v : Vector2 ) : this<br>如果该向量的x值或y值大于所传入v的x值或y值, 则将该值替换为对应的最小值</p>
<p><strong>.multiply</strong> ( v : Vector2 ) : this<br>将该向量与所传入的向量v进行相乘</p>
<p><strong>.multiplyScalar</strong> ( s : Float ) : this<br>将该向量与所传入的标量s进行相乘</p>
<p><strong>.rotateAround</strong> ( center : Vector2, angle : float ) : this<br>center - 将被围绕旋转的点<br>angle - 将要旋转的角度, 以弧度来表示</p>
<p>将向量围绕着center旋转angle弧度</p>
<p><strong>.round</strong> () : this<br>向量中的x分量和y分量四舍五入取整为最接近的整数值</p>
<p><strong>.roundToZero</strong> () : this<br>向量中的分量朝向0取整数(若分量为负数则向上取整, 若为正数则向下取整)</p>
<p><strong>.set</strong> ( x : Float, y : Float ) : this<br>设置该向量的x和y分量</p>
<p><strong>.setComponent</strong> ( index : Integer, value : Float ) : null<br>index - 0 或 1<br>value - Float</p>
<p>如果index值为0则将x值设置为value<br>如果index值为1则将y值设置为value</p>
<p><strong>.setLength</strong> ( l : Float ) : this<br>将该向量的方向设置为和原向量相同, 但是长度(length)为l</p>
<p><strong>.setScalar</strong> ( scalar : Float ) : this<br>将该向量的x、y值同时设置为等于传入的scalar</p>
<p><strong>.setX</strong> ( x : Float ) : this<br>将向量中的x值替换为x</p>
<p><strong>.setY</strong> ( y : Float ) : this<br>将向量中的y值替换为y</p>
<p><strong>.sub</strong> ( v : Vector2 ) : this<br>从该向量减去向量v</p>
<p><strong>.subScalar</strong> ( s : Float ) : this<br>从该向量的x和y中减去标量s</p>
<p><strong>.subVectors</strong> ( a : Vector2, b : Vector2 ) : this<br>将该向量设置为a - b</p>
<p><strong>.toArray</strong> ( array : Array, offset : Integer ) : Array<br>array - (可选)被用于存储向量的数组如果这个值没有传入, 则将创建一个新的数组<br>offset - (可选) 数组中元素的偏移量</p>
<p>返回一个数组[x, y], 或者将x和y复制到所传入的array中</p>
<h1 id="三维向量-Vector3"><a href="#三维向量-Vector3" class="headerlink" title="三维向量-Vector3"></a>三维向量-Vector3</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// Vector3(x, y, z) 这里传3个值就是二维向量</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector</span>3( <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//no arguments; will be initialised to (0, 0, 0)</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector</span>3( );<br><br><span class="hljs-keyword">var</span> d = a.<span class="hljs-title function_">distanceTo</span>( b );<br></code></pre></td></tr></table></figure>
<h1 id="四维向量-Vector4"><a href="#四维向量-Vector4" class="headerlink" title="四维向量-Vector4"></a>四维向量-Vector4</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// Vector4(x, y, z, w) 这里传4个值就是四维向量 </span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector</span>4( <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//no arguments; will be initialised to (0, 0, 0, 1)</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector</span>4( );<br><br><span class="hljs-keyword">var</span> d = a.<span class="hljs-title function_">dot</span>( b );<br></code></pre></td></tr></table></figure>
<br>


]]></content>
      <categories>
        <category>Three.js</category>
      </categories>
  </entry>
  <entry>
    <title>Three.js 第一枪</title>
    <url>/Three.html</url>
    <content><![CDATA[<p><strong>Three.js学习笔记</strong></p>
<a id="more"></a>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一枪<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    body &#123;<br>    /* 边距 */<br>      margin: 0;<br>      overflow: hidden;<br>      /* 隐藏body窗口区域滚动条 */<br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--这个是别人弄的网络连接--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.yanhuangxueyuan.com/versions/threejsR92/build/three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    /**<br>     * 创建场景对象sdq=Scene<br>     */<br>    let sdq = new THREE.Scene();<br>    /**<br>     * 创建网格模型<br>     */<br>    // let wuti = new THREE.SphereGeometry(90, 50, 150); //创建一个球体几何对象(大小, 圆度, 弧度)<br>    let wuti = new THREE.BoxGeometry(150, 150, 150); //创建一个立方体几何对象Geometry,(宽, 高, 长); <br>    let material = new THREE.MeshLambertMaterial(&#123;<br>    //   物体颜色<br>        color: 0xDC143C<br>    &#125;); //材质对象Material<br>    var mesh = new THREE.Mesh(wuti, material); //网格模型对象Mesh<br>    sdq.add(mesh); //网格模型添加到场景中<br>    /**<br>     * 光源设置<br>     */<br>    //点光源<br>    var point = new THREE.PointLight(0xffffff);<br><br>    point.position.set(260, 600, 200); //点光源位置(亮点位置, 光源强弱, 亮点位置)<br>    sdq.add(point); //点光源添加到场景中<br>    //环境光 <br>    var ambient = new THREE.AmbientLight(0x444444);<br>    // 是否照射<br>    sdq.add(ambient);<br>    /**<br>     * 相机设置<br>     */<br>    let width = window.innerWidth; //窗口宽度<br>    let height = window.innerHeight; //窗口高度<br>    let k = width / height; //窗口宽高比<br>    let s = 250; //大小 数值越小越大<br>    //创建了一个正射投影相机对象<br>    let camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);<br>    camera.position.set(200, 300, 200); //设置相机位置<br>    camera.lookAt(sdq.position); //设置相机方向(指向的场景对象)<br>    /**<br>     * 创建渲染器对象<br>     */<br>    let renderer = new THREE.WebGLRenderer();<br>    renderer.setSize(width, height);//设置渲染区域尺寸<br>    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色<br>    document.body.appendChild(renderer.domElement); //body元素中插入canvas对象<br>    //执行渲染操作   指定场景 相机作为参数<br>    renderer.render(sdq, camera);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">正方体</font></p>
<iframe id="iframe" src="/html/正方体.html"></iframe>

<p><font color="#DC143C">球体</font></p>
<iframe id="iframe" src="/html/球体.html"></iframe>

<br>
]]></content>
      <categories>
        <category>Three.js</category>
      </categories>
  </entry>
  <entry>
    <title>Three.js 第一枪</title>
    <url>/Three.html</url>
    <content><![CDATA[<p><strong>Three.js学习笔记</strong></p>
<a id="more"></a>

<h1 id="var和let和const的区别"><a href="#var和let和const的区别" class="headerlink" title="var和let和const的区别"></a>var和let和const的区别</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> 定义常量<br><span class="hljs-keyword">let</span> 有区域<br><span class="hljs-keyword">var</span> 整个函数内都有效<br></code></pre></td></tr></table></figure>


<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一枪<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    body &#123;<br>    /* 边距 */<br>      margin: 0;<br>      overflow: hidden;<br>      /* 隐藏body窗口区域滚动条 */<br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--这个是别人弄的网络连接--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.yanhuangxueyuan.com/versions/threejsR92/build/three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    /**<br>     * 创建场景对象sdq=Scene<br>     */<br>    let sdq = new THREE.Scene();<br>    /**<br>     * 创建网格模型<br>     */<br>    // let wuti = new THREE.SphereGeometry(90, 50, 150); //创建一个球体几何对象(大小, 圆度, 弧度)<br>    let wuti = new THREE.BoxGeometry(150, 150, 150); //创建一个立方体几何对象Geometry,(宽, 高, 长); <br>    let material = new THREE.MeshLambertMaterial(&#123;<br>    //   物体颜色<br>        color: 0xDC143C<br>    &#125;); //材质对象Material<br>    var mesh = new THREE.Mesh(wuti, material); //网格模型对象Mesh<br>    sdq.add(mesh); //网格模型添加到场景中<br>    /**<br>     * 光源设置<br>     */<br>    //点光源<br>    var point = new THREE.PointLight(0xffffff);<br><br>    point.position.set(260, 600, 200); //点光源位置(亮点位置, 光源强弱, 亮点位置)<br>    sdq.add(point); //点光源添加到场景中<br>    //环境光 <br>    var ambient = new THREE.AmbientLight(0x444444);<br>    // 是否照射<br>    sdq.add(ambient);<br>    /**<br>     * 相机设置<br>     */<br>    let width = window.innerWidth; //窗口宽度<br>    let height = window.innerHeight; //窗口高度<br>    let k = width / height; //窗口宽高比<br>    let s = 250; //大小 数值越小越大<br>    //创建了一个正射投影相机对象<br>    let camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);<br>    camera.position.set(200, 300, 200); //设置相机位置<br>    camera.lookAt(sdq.position); //设置相机方向(指向的场景对象)<br>    /**<br>     * 创建渲染器对象<br>     */<br>    let renderer = new THREE.WebGLRenderer();<br>    renderer.setSize(width, height);//设置渲染区域尺寸<br>    renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色<br>    document.body.appendChild(renderer.domElement); //body元素中插入canvas对象<br>    //执行渲染操作   指定场景 相机作为参数<br>    renderer.render(sdq, camera);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">正方体</font></p>
<iframe id="iframe" src="/html/正方体.html"></iframe>

<p><font color="#DC143C">球体</font></p>
<iframe id="iframe" src="/html/球体.html"></iframe>

<br>]]></content>
      <categories>
        <category>Three.js</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 打包代码</title>
    <url>/TypeScript-Parcel.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<p><strong><a href="https://wwr.lanzoui.com/iFfQ7shdb4d">未打包文件</a></strong></p>
<ul>
<li>密码: sdq3</li>
</ul>
<h1 id="Parcel打包"><a href="#Parcel打包" class="headerlink" title="Parcel打包"></a>Parcel打包</h1><h3 id="Parcel安装方法"><a href="#Parcel安装方法" class="headerlink" title="Parcel安装方法"></a>Parcel安装方法</h3><p><strong>用yarn来安装</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">yarn add <span class="hljs-literal">--dev</span> parcel@next<br></code></pre></td></tr></table></figure>
<p><strong>用npm来安装</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">npm install parcel@next <span class="hljs-literal">--save</span><br></code></pre></td></tr></table></figure>
<p><strong>用cnpm来安装</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">cnpm install parcel@next <span class="hljs-literal">--save</span><br></code></pre></td></tr></table></figure>
<h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;sdqts&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-comment">// 要打包路径</span><br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;parcel ./src/index.html&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;parcel&quot;</span>: <span class="hljs-string">&quot;^2.0.0-rc.0&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="引入-script"><a href="#引入-script" class="headerlink" title="引入 script"></a>引入 script</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script src=<span class="hljs-string">&quot;./page.ts&quot;</span>&gt;&lt;/script&gt;<br>   &lt;title&gt;史迪奇国王&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt; <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<h3 id="page-ts"><a href="#page-ts" class="headerlink" title="page.ts"></a>page.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> sdq : <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;史迪奇&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq)<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 使用Jquery库</title>
    <url>/TypeScript-Jquery.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<p><strong><a href="https://wwr.lanzoui.com/iFfQ7shdb4d">未打包文件</a></strong></p>
<ul>
<li>密码: sdq3</li>
</ul>
<h1 id="Jquery的引入"><a href="#Jquery的引入" class="headerlink" title="Jquery的引入"></a>Jquery的引入</h1><h3 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br><br>    &lt;!-- 引入jquery --&gt;<br>    &lt;script src=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;./page.ts&quot;</span>&gt;&lt;/script&gt;<br>   &lt;title&gt;史迪奇国王&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<h3 id="page-ts"><a href="#page-ts" class="headerlink" title="page.ts"></a>page.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 解决报错问题 或者 npm i @types/jquery 和 cnpm i @types/jquery </span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> <span class="hljs-attr">$</span>: <span class="hljs-built_in">any</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">sdq</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;史迪奇&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq);<br><br>$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;史迪奇&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 命名空间</title>
    <url>/TypeScript-NameSpace.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h3 id="首先创建文件夹然后终端定位到文件夹下生成-package-json"><a href="#首先创建文件夹然后终端定位到文件夹下生成-package-json" class="headerlink" title="首先创建文件夹然后终端定位到文件夹下生成 package.json"></a>首先创建文件夹然后终端定位到文件夹下生成 package.json</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">cnpm init <span class="hljs-literal">-y</span><br></code></pre></td></tr></table></figure>
<p><strong>没安装cnpm就执行以下命令</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">npm init <span class="hljs-literal">-y</span><br></code></pre></td></tr></table></figure>
<h3 id="第二-执行以下命令生成-tsconfig-json"><a href="#第二-执行以下命令生成-tsconfig-json" class="headerlink" title="第二 执行以下命令生成 tsconfig.json"></a>第二 执行以下命令生成 tsconfig.json</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">tsc <span class="hljs-literal">-init</span><br></code></pre></td></tr></table></figure>
<p><strong>然后建两文件夹 build 和 src, 然后根目录可以建html文件了, 在src目录下创建page.ts文件</strong></p>
<h3 id="第三-改-tsconfig-json里面的路径-找到-outDir-和-rootDir"><a href="#第三-改-tsconfig-json里面的路径-找到-outDir-和-rootDir" class="headerlink" title="第三 改 tsconfig.json里面的路径 找到 outDir 和 rootDir"></a>第三 改 tsconfig.json里面的路径 找到 outDir 和 rootDir</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;./build&quot;</span> ,  <span class="hljs-comment">// 生成js的目录 </span><br><span class="hljs-string">&quot;rootDir&quot;</span>: <span class="hljs-string">&quot;./src&quot;</span>     <span class="hljs-comment">// 存放ts的目录</span><br></code></pre></td></tr></table></figure>
<h3 id="第四-在page-ts写入以下代码"><a href="#第四-在page-ts写入以下代码" class="headerlink" title="第四 在page.ts写入以下代码"></a>第四 在page.ts写入以下代码</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">namespace</span> Home &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>        elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;史迪奇的头&quot;</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Content</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>        elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;史迪奇的身体&quot;</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Footer</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>        elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;史迪奇的脚&quot;</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Header</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Footer</span>();<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>
<h3 id="最后在html文件中加入"><a href="#最后在html文件中加入" class="headerlink" title="最后在html文件中加入"></a>最后在html文件中加入</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;cn&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br><br>    &lt;!-- 这是选择路径 --&gt;<br>    &lt;script src=<span class="hljs-string">&quot;./build/page.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;史迪奇国王&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;script&gt;<br><br>    &lt;!-- 这是生成文件 --&gt;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Home</span>.<span class="hljs-title class_">Page</span>();<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<p><strong><a href="https://wwr.lanzoui.com/iAy5hsgzzed">对比这个文件你会学到东西</a></strong></p>
<ul>
<li>密码: sdq3</li>
</ul>
<h1 id="命名空间的嵌套"><a href="#命名空间的嵌套" class="headerlink" title="命名空间的嵌套"></a>命名空间的嵌套</h1><p><strong>接着以上代码</strong></p>
<h3 id="第一-先在src里面创建-components-js"><a href="#第一-先在src里面创建-components-js" class="headerlink" title="第一 先在src里面创建 components.js"></a>第一 先在src里面创建 components.js</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">    <span class="hljs-keyword">namespace</span> Components &#123;<br><br>      <span class="hljs-comment">// 子命名空间</span><br>      <span class="hljs-keyword">export</span> <span class="hljs-keyword">namespace</span> SdqComponents&#123;<br>        <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sdz</span> &#123;&#125;<br>      &#125;<br><br>      <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>          elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;史迪奇的头&quot;</span>;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>        &#125;<br>      &#125;<br>    <br>      <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Content</span> &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>          elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;史迪奇的身体&quot;</span>;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>        &#125;<br>      &#125;<br>    <br>      <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Footer</span> &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>          elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;史迪奇的脚&quot;</span>;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>        &#125;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="第二-改page-ts"><a href="#第二-改page-ts" class="headerlink" title="第二 改page.ts"></a>第二 改page.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">namespace</span> Home &#123;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Components</span>.<span class="hljs-title class_">Header</span>();<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Components</span>.<span class="hljs-title class_">Content</span>();<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Components</span>.<span class="hljs-title class_">Footer</span>();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="第三-改-tsconfig-json里面的路径-找到-module把-commonjs改-amd-添加-outFile路径"><a href="#第三-改-tsconfig-json里面的路径-找到-module把-commonjs改-amd-添加-outFile路径" class="headerlink" title="第三 改 tsconfig.json里面的路径 找到 module把 commonjs改 amd 添加 outFile路径"></a>第三 改 tsconfig.json里面的路径 找到 module把 commonjs改 amd 添加 outFile路径</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;amd&quot;</span>, <br><span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;./build/page.js&quot;</span><br></code></pre></td></tr></table></figure>
<p><strong><a href="https://wwr.lanzoui.com/iioRtsh1bxa">对比这个文件你会学到进步很大</a></strong></p>
<h1 id="import语法"><a href="#import语法" class="headerlink" title="import语法"></a>import语法</h1><h3 id="page-ts用import引入"><a href="#page-ts用import引入" class="headerlink" title="page.ts用import引入"></a>page.ts用import引入</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 引入</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Header</span>, <span class="hljs-title class_">Content</span>, <span class="hljs-title class_">Footer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Header</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Footer</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="component-ts改成以下代码"><a href="#component-ts改成以下代码" class="headerlink" title="component.ts改成以下代码"></a>component.ts改成以下代码</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// export是ES6中的接口</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;This is Header&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Content</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;This is Content&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Footer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    elem.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;This is Footer&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(elem);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="html文件-引用"><a href="#html文件-引用" class="headerlink" title="html文件 引用"></a>html文件 引用</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- require.js 的 CDN 地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./build/page.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        // require.js方式引入<br>        require([&quot;page&quot;], function (page) &#123;<br>          // ES6基本写法<br>          new page.default();<br>        &#125;);<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript数据注解和类型推断</title>
    <url>/TypeScript-zjtd.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h1><p><strong>自动注解成Number</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">let</span> sdq : <span class="hljs-built_in">number</span>;<br>sdq = <span class="hljs-number">333</span>;<br><span class="hljs-keyword">let</span> countInference = <span class="hljs-number">333</span><br></code></pre></td></tr></table></figure>
<h1 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h1><p><strong>把鼠标悬浮在上面自动会出现推断</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTotal</span>(<span class="hljs-params">one, two</span>) &#123;<br>    <span class="hljs-keyword">return</span> one + two;<br>&#125;<br><span class="hljs-keyword">var</span> total = <span class="hljs-title function_">getTotal</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure>
<h1 id="工作使用问题"><a href="#工作使用问题" class="headerlink" title="工作使用问题"></a>工作使用问题</h1><ul>
<li>如果TS能够自动分析变量类型, 我们上面也不需要做了</li>
</ul>
<ul>
<li>如果TS无法自动分析变量的话, 我们就需要使用类型注释</li>
</ul>
<br>


]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript数组类型注解的方法</title>
    <url>/TypeScript-array.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<h3 id="常见的"><a href="#常见的" class="headerlink" title="常见的"></a>常见的</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">数字型<br><span class="hljs-keyword">const</span> numberArr : <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br><br>字符串型<br><span class="hljs-keyword">const</span> stringArr : <span class="hljs-built_in">string</span>[] = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>]<br></code></pre></td></tr></table></figure>
<h3 id="不常见的"><a href="#不常见的" class="headerlink" title="不常见的"></a>不常见的</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span>  : <span class="hljs-title class_">UndefinedArr</span> : <span class="hljs-title class_">Undefined</span>[] = [<span class="hljs-title class_">Undefined</span>,<span class="hljs-title class_">Undefined</span>,<span class="hljs-title class_">Undefined</span>]<br></code></pre></td></tr></table></figure>
<h3 id="多类型"><a href="#多类型" class="headerlink" title="多类型"></a>多类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> arr : (nuber | <span class="hljs-built_in">string</span>)[] = [<span class="hljs-number">2</span>,<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-attr">sdq</span>: &#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>,<span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>&#125;[] = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">2001</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">2001</span>&#125;<br>]<br></code></pre></td></tr></table></figure>
<p><strong>typr alias 类型别名</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">type</span> sdz =&#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>,<span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Madam</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">sdq</span>: <span class="hljs-title class_">Madam</span>[] = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">2001</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">2001</span>&#125;<br>]<br></code></pre></td></tr></table></figure>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-attr">sdq</span>:[<span class="hljs-built_in">string</span>,<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;史迪奇&#x27;</span>,<span class="hljs-string">&#x27;雄性&#x27;</span>,<span class="hljs-number">626</span>]<br></code></pre></td></tr></table></figure>
<p><strong>列表包元组</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-attr">sdq</span>:[<span class="hljs-built_in">string</span>,<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>] []= [<br>    [<span class="hljs-string">&#x27;史迪奇&#x27;</span>,<span class="hljs-string">&#x27;雄性&#x27;</span>,<span class="hljs-number">626</span>],<br>    [<span class="hljs-string">&#x27;鲁本&#x27;</span>,<span class="hljs-string">&#x27;雄性&#x27;</span>,<span class="hljs-number">625</span>],<br>    [<span class="hljs-string">&#x27;安琪&#x27;</span>,<span class="hljs-string">&#x27;雌性&#x27;</span>,<span class="hljs-number">624</span>]<br>]<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 枚举类型</title>
    <url>/TypeScript-Enum.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="非常常见的一种类型"><a href="#非常常见的一种类型" class="headerlink" title="非常常见的一种类型"></a>非常常见的一种类型</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-built_in">enum</span> <span class="hljs-title class_">Status</span> &#123;<br>  <span class="hljs-title class_">Reuben</span> = <span class="hljs-number">625</span>,<br>  <span class="hljs-title class_">Angel</span> = <span class="hljs-number">624</span>,<br>  <span class="hljs-title class_">Stitch</span> = <span class="hljs-number">626</span>,<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getServe</span>(<span class="hljs-params">status: <span class="hljs-built_in">any</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-title class_">Status</span>.<span class="hljs-property">Reuben</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;鲁本&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status === <span class="hljs-title class_">Status</span>.<span class="hljs-property">Angel</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;安琪&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status === <span class="hljs-title class_">Status</span>.<span class="hljs-property">Stitch</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;史迪奇&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">getServe</span>(<span class="hljs-title class_">Status</span>.<span class="hljs-property">AngelStitch</span>);<br><br><span class="hljs-comment">// 可以凭实验品编号查询</span><br><span class="hljs-comment">// const result = getServe(626);</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`实验品<span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 泛型</title>
    <url>/TypeScript-genericity.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="函数中使用泛型"><a href="#函数中使用泛型" class="headerlink" title="函数中使用泛型"></a>函数中使用泛型</h1><h3 id="泛型函数中基本使用"><a href="#泛型函数中基本使用" class="headerlink" title="泛型函数中基本使用"></a>泛型函数中基本使用</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> join&lt;sdq&gt;(<span class="hljs-attr">one</span>: sdq, <span class="hljs-attr">two</span>: sdq) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;one&#125;</span><span class="hljs-subst">$&#123;two&#125;</span>`</span>;<br>&#125;<br>join &lt;<span class="hljs-built_in">string</span>&gt; (<span class="hljs-string">&quot;我叫&quot;</span>, <span class="hljs-string">&quot;史迪奇&quot;</span>);<br></code></pre></td></tr></table></figure>
<h3 id="泛型中数组的使用"><a href="#泛型中数组的使用" class="headerlink" title="泛型中数组的使用"></a>泛型中数组的使用</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 定义数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title class_">MyName</span>&lt;<span class="hljs-variable constant_">SDQ</span>&gt;(<span class="hljs-attr">params</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-variable constant_">SDQ</span>&gt;) &#123;<br>  <span class="hljs-keyword">return</span> params;<br>&#125;<br><span class="hljs-title class_">MyName</span> &lt;<span class="hljs-built_in">string</span>&gt; ([<span class="hljs-string">&quot;626&quot;</span>, <span class="hljs-string">&quot;626&quot;</span>]);<br></code></pre></td></tr></table></figure>
<h3 id="多个泛型的定义"><a href="#多个泛型的定义" class="headerlink" title="多个泛型的定义"></a>多个泛型的定义</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 定义多个泛型</span><br><span class="hljs-keyword">function</span> join&lt;sdq, sdz&gt;(<span class="hljs-attr">one</span>: sdq, <span class="hljs-attr">two</span>: sdz) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;one&#125;</span><span class="hljs-subst">$&#123;two&#125;</span>`</span>;<br>&#125;<br>join &lt; <span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span> &gt; (<span class="hljs-number">626</span>, <span class="hljs-string">&quot;626&quot;</span>);<br></code></pre></td></tr></table></figure>
<h1 id="类中使用泛型"><a href="#类中使用泛型" class="headerlink" title="类中使用泛型"></a>类中使用泛型</h1><h3 id="泛型类中基本使用"><a href="#泛型类中基本使用" class="headerlink" title="泛型类中基本使用"></a>泛型类中基本使用</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp</span> &lt;sdq&gt; &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> syps: sdq[]</span>) &#123;&#125;<br>  <span class="hljs-title function_">getSyp</span>(<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>): sdq &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">syps</span>[index];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> syp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>([<span class="hljs-string">&quot;史迪奇&quot;</span>, <span class="hljs-string">&quot;鲁本&quot;</span>, <span class="hljs-string">&quot;安琪&quot;</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(syp.<span class="hljs-title function_">getSyp</span>(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure>
<h3 id="泛型中的继承"><a href="#泛型中的继承" class="headerlink" title="泛型中的继承"></a>泛型中的继承</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> SDQ&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-comment">// 继承SDQ</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp</span> &lt;sdq <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">SDQ</span>&gt; &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> syps: sdq[]</span>) &#123;&#125;<br>  <span class="hljs-title function_">getSyp</span>(<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">syps</span>[index].<span class="hljs-property">name</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> syp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>([<br>  &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;史迪奇&quot;</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;鲁本&quot;</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;安琪&quot;</span>&#125;<br>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(syp.<span class="hljs-title function_">getSyp</span>(<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure>
<h3 id="泛型的约束"><a href="#泛型的约束" class="headerlink" title="泛型的约束"></a>泛型的约束</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 约束: 要么是number要么是string</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp</span> &lt;sdq <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">number</span> | <span class="hljs-built_in">string</span>&gt; &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> syps: sdq[]</span>) &#123;&#125;<br>  <span class="hljs-title function_">getSyp</span>(<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>): sdq &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">syps</span>[index];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> syp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span> &lt;<span class="hljs-built_in">string</span>&gt;([<span class="hljs-string">&quot;史迪奇&quot;</span>, <span class="hljs-string">&quot;鲁本&quot;</span>, <span class="hljs-string">&quot;安琪&quot;</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(syp.<span class="hljs-title function_">getSyp</span>(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript类</title>
    <url>/TypeScript-class.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<h1 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">sdq是sdz是父类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sdq</span>&#123;<br>    content = <span class="hljs-string">&quot;史迪奇&quot;</span><br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span><br>    &#125;<br>&#125;<br><br>sdz是sdq是子类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sdz</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">sdq</span>&#123;<br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">sayHello</span>()+<span class="hljs-string">&#x27;是小恶魔&#x27;</span><br>    &#125;<br>    <span class="hljs-title function_">sayLove</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;史迪仔&quot;</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> goddess = <span class="hljs-keyword">new</span> <span class="hljs-title function_">sdz</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(goddess.<span class="hljs-title function_">sayHello</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(goddess.<span class="hljs-title function_">sayLove</span>())<br></code></pre></td></tr></table></figure>
<h1 id="publie-private-protected"><a href="#publie-private-protected" class="headerlink" title="publie private protected"></a>publie private protected</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">类的内部和类的外部<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SDQ</span>&#123;<br>    这里就是类的内部 <br>    name : <span class="hljs-built_in">string</span>;<br>    <span class="hljs-comment">//相当于 publie name : string;</span><br>&#125;<br><br>这里就是类的外部<br><span class="hljs-keyword">const</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SDQ</span>()<br>sdq.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;史迪奇&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq.<span class="hljs-property">name</span>)<br></code></pre></td></tr></table></figure>


<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p><strong>继承前</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SDQ</span> &#123;<br>    相当于<span class="hljs-number">1</span> <span class="hljs-keyword">public</span> name : <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name : <span class="hljs-built_in">string</span></span>)&#123;<br>    相当于<span class="hljs-number">2</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SDQ</span>(<span class="hljs-string">&quot;我叫史迪奇&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq.<span class="hljs-property">name</span>)<br></code></pre></td></tr></table></figure>
<p><strong>继承后</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SDQ</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name : <span class="hljs-built_in">string</span></span>)&#123;&#125;<br>&#125;<br><br>类的继承<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SDZ</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">SDQ</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> bianhao:<span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">super</span>(<span class="hljs-string">&quot;史迪仔&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> sdz = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SDZ</span>(<span class="hljs-number">626</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdz.<span class="hljs-property">bianhao</span>)<br></code></pre></td></tr></table></figure>
<h3 id="get和set"><a href="#get和set" class="headerlink" title="get和set"></a>get和set</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SDQ</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> _age: <span class="hljs-built_in">number</span></span>)&#123;&#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">age</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_age</span>-<span class="hljs-number">10</span><br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">age:<span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_age</span> = age+<span class="hljs-number">3</span> <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SDQ</span>(<span class="hljs-number">626</span>)<br>sdq.<span class="hljs-property">age</span>=<span class="hljs-number">25</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq.<span class="hljs-property">age</span>)<br></code></pre></td></tr></table></figure>
<h3 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h3><p><strong>statc</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SDQ</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title class_">MyName</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable constant_">SDQ</span>.<span class="hljs-title class_">MyName</span>())<br></code></pre></td></tr></table></figure>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">抽象类<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">sdq</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">skill</span>()<br>&#125;<br><br>抽象方法<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cifan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">sdq</span>&#123;<br>    业务逻辑<br>    <span class="hljs-title function_">skill</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进食&quot;</span>)<br>    &#125;<br>&#125;<br><br>抽象方法<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">shuijiao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">sdq</span>&#123;<br>    业务逻辑<br>    <span class="hljs-title function_">skill</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;睡觉&quot;</span>)<br>    &#125;<br>&#125;<br><br>抽象方法<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">pohuai</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">sdq</span>&#123;<br>    业务逻辑<br>    <span class="hljs-title function_">skill</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;破坏&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="只读方法"><a href="#只读方法" class="headerlink" title="只读方法"></a>只读方法</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SDQ</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> _name :<span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span> </span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SDQ</span>(<span class="hljs-string">&#x27;史迪仔&#x27;</span>)<br><br><span class="hljs-comment">// 无法分配到 &quot;_name&quot; , 因为它是只读属性</span><br>sdq.<span class="hljs-property">_name</span>= <span class="hljs-string">&#x27;史迪奇&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq.<span class="hljs-property">_name</span>)<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 联合类型和类型保护</title>
    <url>/TypeScript-Union-type-protection.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h1><p><strong>关键符好是 | 是联合类型</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 接口</span><br><span class="hljs-keyword">interface</span> SDQ &#123;<br>  <span class="hljs-attr">anjiao</span>: <span class="hljs-built_in">boolean</span>;<br>  <span class="hljs-attr">say</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br>&#125;<br><span class="hljs-comment">// 接口</span><br><span class="hljs-keyword">interface</span> SDZ &#123;<br>  <span class="hljs-attr">anjiao</span>: <span class="hljs-built_in">boolean</span>;<br>  <span class="hljs-attr">skill</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br>&#125;<br><br><span class="hljs-comment">// 联合类型的关键符合是 | </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">subject</span>(<span class="hljs-params"><span class="hljs-built_in">Number</span>: SDQ | SDZ</span>) &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">anjiao</span>)&#123;<br>    (<span class="hljs-title class_">Number</span> <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">SDZ</span>).<span class="hljs-property">skill</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    (<span class="hljs-title class_">Number</span> <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">SDQ</span>).<span class="hljs-property">say</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><p><strong>类型保护/类型断言</strong></p>
<h2 id="as语法"><a href="#as语法" class="headerlink" title="as语法"></a>as语法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 接口</span><br><span class="hljs-keyword">interface</span> SDQ &#123;<br>  <span class="hljs-attr">anjiao</span>: <span class="hljs-built_in">boolean</span>;<br>  <span class="hljs-attr">say</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br>&#125;<br><span class="hljs-comment">// 接口</span><br><span class="hljs-keyword">interface</span> SDZ &#123;<br>  <span class="hljs-attr">anjiao</span>: <span class="hljs-built_in">boolean</span>;<br>  <span class="hljs-attr">skill</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">subject</span>(<span class="hljs-params"><span class="hljs-built_in">Number</span>: SDQ | SDZ</span>) &#123;<br><span class="hljs-comment">// 可以通过断言number as Teacher然后直接调用skill方法</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">anjiao</span>)&#123;<br>    (<span class="hljs-title class_">Number</span> <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">SDZ</span>).<span class="hljs-property">skill</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    (<span class="hljs-title class_">Number</span> <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">SDQ</span>).<span class="hljs-property">say</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="in语法"><a href="#in语法" class="headerlink" title="in语法"></a>in语法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">subjectTwo</span>(<span class="hljs-params"><span class="hljs-built_in">Number</span>: SDQ | SDZ</span>) &#123;<br><span class="hljs-comment">// in来判断number里有没有skill()方</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;skill&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-title class_">Number</span>) &#123;<br>    <span class="hljs-title class_">Number</span>.<span class="hljs-title function_">skill</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title class_">Number</span>.<span class="hljs-title function_">say</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="typeof语法"><a href="#typeof语法" class="headerlink" title="typeof语法"></a>typeof语法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdq</span>(<span class="hljs-params">first: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>, second: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>) &#123;<br><span class="hljs-comment">// typeof来判断是不是string</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> first === <span class="hljs-string">&quot;string&quot;</span> || <span class="hljs-keyword">typeof</span> second === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;first&#125;</span><span class="hljs-subst">$&#123;second&#125;</span>`</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> first + second;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="instanceof语法"><a href="#instanceof语法" class="headerlink" title="instanceof语法"></a>instanceof语法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdz</span>(<span class="hljs-params">first: <span class="hljs-built_in">object</span> | NumberObj, second: <span class="hljs-built_in">object</span> | NumberObj</span>) &#123;<br>  <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">NumberObj</span> &amp;&amp; second <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">NumberObj</span>) &#123;<br>    <span class="hljs-keyword">return</span> first.<span class="hljs-property">count</span> + second.<span class="hljs-property">count</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript调用接口</title>
    <url>/TypeScript-interface.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<h3 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> Girl &#123;<br>    name : <span class="hljs-built_in">string</span>;<br>    age : <span class="hljs-built_in">number</span>;<br>    bust : <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> girl=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;史迪奇&#x27;</span>,<br>    age : <span class="hljs-number">0</span>,<br>    bust : <span class="hljs-number">999</span><br><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">screenResume</span> = (<span class="hljs-params">girl:Girl</span>) =&gt; &#123;<br>    girl.<span class="hljs-property">age</span> &lt; <span class="hljs-number">24</span> &amp;&amp; girl.<span class="hljs-property">bust</span> &gt;= <span class="hljs-number">90</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;进入战场&#x27;</span>)<br>    girl.<span class="hljs-property">age</span> &gt;= <span class="hljs-number">24</span> || girl.<span class="hljs-property">bust</span> &lt; <span class="hljs-number">90</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;已死亡&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getResume</span> = (<span class="hljs-params">girl:Girl</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;的年龄&#x27;</span>+girl.<span class="hljs-property">age</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;的实验品编号&#x27;</span>+girl.<span class="hljs-property">bust</span>)<br>&#125;<br><br><span class="hljs-title function_">screenResume</span>(girl)<br><span class="hljs-title function_">getResume</span>(girl)<br></code></pre></td></tr></table></figure>
<p><strong>接口不仅能限制对象还可以限制类</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">interface</span> Girl &#123;<br>    name : <span class="hljs-built_in">string</span>;<br>    age : <span class="hljs-built_in">number</span>;<br>    bust : <span class="hljs-built_in">number</span>;<br>    waistline ?: <span class="hljs-built_in">number</span>;<br>    [<span class="hljs-attr">propname</span>:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">any</span>;<br>    <span class="hljs-title function_">say</span>():<span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> syp <span class="hljs-keyword">extends</span> Girl&#123;<br>    <span class="hljs-title function_">syp</span>():<span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">const</span> girl=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;史迪奇&#x27;</span>,<br>    age : <span class="hljs-number">0</span>,<br>    bust : <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">waistline</span>:<span class="hljs-number">999</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;毁灭吧&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sdq</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Girl</span>&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;鲁本&#x27;</span><br>    age : <span class="hljs-number">0</span><br>    bust : <span class="hljs-number">625</span><br>    <span class="hljs-attr">waistline</span>:<span class="hljs-number">999</span><br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span><br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;毁灭吧&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">screenResume</span> = (<span class="hljs-params">girl:Girl</span>) =&gt; &#123;<br>    girl.<span class="hljs-property">age</span> &lt; <span class="hljs-number">24</span> &amp;&amp; girl.<span class="hljs-property">bust</span> &gt;= <span class="hljs-number">90</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;进入战场&#x27;</span>)<br>    girl.<span class="hljs-property">age</span> &gt;= <span class="hljs-number">24</span> || girl.<span class="hljs-property">bust</span> &lt; <span class="hljs-number">90</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;已死亡&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getResume</span> = (<span class="hljs-params">girl:Girl</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;的年龄&#x27;</span>+girl.<span class="hljs-property">age</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;的实验品编号&#x27;</span>+girl.<span class="hljs-property">bust</span>)<br>    girl.<span class="hljs-property">waistline</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;的战斗力&#x27;</span>+girl.<span class="hljs-property">waistline</span>)<br>    girl.<span class="hljs-property">sex</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(girl.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;的性别&#x27;</span>+girl.<span class="hljs-property">sex</span>)<br>&#125;<br><br><span class="hljs-title function_">screenResume</span>(girl)<br><span class="hljs-title function_">getResume</span>(girl)<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 配置文件</title>
    <url>/TypeScript-config.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h1><p><strong>命令行输入</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">tsc -init<br></code></pre></td></tr></table></figure>
<h1 id="常用tsconfig-json配置知识"><a href="#常用tsconfig-json配置知识" class="headerlink" title="常用tsconfig.json配置知识"></a>常用tsconfig.json配置知识</h1><h3 id="include-属性是用来指定要编译的文件的"><a href="#include-属性是用来指定要编译的文件的" class="headerlink" title="include 属性是用来指定要编译的文件的"></a>include 属性是用来指定要编译的文件的</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">&#123;<br>  <span class="hljs-string">&quot;include&quot;</span>:[<span class="hljs-string">&quot;demo.ts&quot;</span>],<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>      <span class="hljs-comment">//any something</span><br>      <span class="hljs-comment">//........</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="exclude-除什么文件之外"><a href="#exclude-除什么文件之外" class="headerlink" title="exclude 除什么文件之外"></a>exclude 除什么文件之外</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">&#123;<br>  <span class="hljs-string">&quot;exclude&quot;</span>:[<span class="hljs-string">&quot;demo.ts&quot;</span>],<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>      <span class="hljs-comment">//any something</span><br>      <span class="hljs-comment">//........</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="files-配置效果和include几乎一样"><a href="#files-配置效果和include几乎一样" class="headerlink" title="files 配置效果和include几乎一样"></a>files 配置效果和include几乎一样</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript">&#123;<br>  <span class="hljs-string">&quot;files&quot;</span>:[<span class="hljs-string">&quot;demo.ts&quot;</span>],<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>      <span class="hljs-comment">//any something</span><br>      <span class="hljs-comment">//........</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="常用complierOptions配置知识"><a href="#常用complierOptions配置知识" class="headerlink" title="常用complierOptions配置知识"></a>常用complierOptions配置知识</h1><h3 id="removeComments-属性"><a href="#removeComments-属性" class="headerlink" title="removeComments 属性"></a>removeComments 属性</h3><p><strong>作用: removeComments的值设置为true, 就是在js中不显示注释</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;removeComments&quot;</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>
<h3 id="strict-属性"><a href="#strict-属性" class="headerlink" title="strict 属性"></a>strict 属性</h3><p><strong>作用: 把这个设置为false或者注释掉, 意思是我们可以对设置一些不严格的写法</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>
<h3 id="noImplicitAny-属性"><a href="#noImplicitAny-属性" class="headerlink" title="noImplicitAny 属性"></a>noImplicitAny 属性</h3><p><strong>作用: 允许你的注解类型 any 不用特意表明</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;noImplicitAny&quot;</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<h3 id="strictNullChecks-属性"><a href="#strictNullChecks-属性" class="headerlink" title="strictNullChecks 属性"></a>strictNullChecks 属性</h3><p><strong>作用: 不强制检查 NULL 类型</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;strictNullChecks&quot;</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<h3 id="rootDir属性-和-outDir属性"><a href="#rootDir属性-和-outDir属性" class="headerlink" title="rootDir属性 和 outDir属性"></a>rootDir属性 和 outDir属性</h3><p><strong>作用: 就是存放路径和生成路径</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;./build&quot;</span> ,  <span class="hljs-comment">// 生成js的目录 </span><br><span class="hljs-string">&quot;rootDir&quot;</span>: <span class="hljs-string">&quot;./src&quot;</span>     <span class="hljs-comment">// 存放ts的目录</span><br></code></pre></td></tr></table></figure>
<h3 id="sourceMap-属性"><a href="#sourceMap-属性" class="headerlink" title="sourceMap 属性"></a>sourceMap 属性</h3><p><strong>作用: 里面储存着位置信息</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;sourceMap&quot;</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<h3 id="noUnusedLocals属性-和-noUnusedParameters属性"><a href="#noUnusedLocals属性-和-noUnusedParameters属性" class="headerlink" title="noUnusedLocals属性 和 noUnusedParameters属性"></a>noUnusedLocals属性 和 noUnusedParameters属性</h3><p><strong>作用: 提示未使用变量和未使用方法</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-string">&quot;noUnusedLocals&quot;</span>: <span class="hljs-literal">true</span>,       <span class="hljs-comment">//打包时进行提示未使用的变量    </span><br><span class="hljs-string">&quot;noUnusedParameters&quot;</span>: <span class="hljs-literal">true</span>    <span class="hljs-comment">//打包是进行提示未使用的方法</span><br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript静态数据类型</title>
    <url>/TypeScript-type.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="TypeScript中的基础静态数据类型有"><a href="#TypeScript中的基础静态数据类型有" class="headerlink" title="TypeScript中的基础静态数据类型有"></a>TypeScript中的基础静态数据类型有</h1><ul>
<li><p>Undefined : 未定义类型;</p>
</li>
<li><p>Number : 数值类型;</p>
</li>
<li><p>string : 字符串类型;</p>
</li>
<li><p>Boolean : 布尔类型;</p>
</li>
<li><p>enum : 枚举类型;</p>
</li>
<li><p>any : 任意类型, 一个牛X的类型;</p>
</li>
<li><p>void : 空类型;</p>
</li>
<li><p>Array : 数组类型;</p>
</li>
<li><p>Tuple : 元祖类型;</p>
</li>
<li><p>Null : 空类型</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> count : <span class="hljs-built_in">number</span> = <span class="hljs-number">333</span>;<br><span class="hljs-keyword">const</span> myNname : <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;史迪奇&quot;</span>;<br></code></pre></td></tr></table></figure>
<h1 id="还包含对象类型-数组类型-类类型-函数类型"><a href="#还包含对象类型-数组类型-类类型-函数类型" class="headerlink" title="还包含对象类型 数组类型 类类型 函数类型"></a>还包含对象类型 数组类型 类类型 函数类型</h1><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> sdq : &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>&#125; = &#123;<br>    name = <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    age = <span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p><strong>对象类型也可以是数组, 但是类型必须一致</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> sdq : <span class="hljs-built_in">string</span> [] = [<span class="hljs-string">&#x27;史迪奇&#x27;</span>,<span class="hljs-string">&#x27;独眼霹雳&#x27;</span>,<span class="hljs-string">&#x27;强霸&#x27;</span>]<br></code></pre></td></tr></table></figure>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Experimentalarticle</span>&#123;&#125;<br><span class="hljs-keyword">const</span> sdq : <span class="hljs-title class_">Experimentalarticle</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Experimentalarticle</span>()<br><br><span class="hljs-keyword">const</span> sdz : <span class="hljs-function">()=&gt;</span><span class="hljs-built_in">string</span> = <span class="hljs-function">() =&gt;</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;史迪奇&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript函数参数和返回类型的注解</title>
    <url>/TypeScript-hscsfhlxdzj.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<p><strong>先复制对象再对象后面加个类型</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTotal</span>(<span class="hljs-params">&#123;one, two&#125;</span>) : &#123;one : <span class="hljs-built_in">number</span>,two : <span class="hljs-built_in">number</span>&#125; &#123;<br>    <span class="hljs-keyword">return</span> one + two;<br>&#125;<br><span class="hljs-keyword">const</span> total = <span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">one</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">two</span>:<span class="hljs-number">2</span>&#125;)<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>UML与Rose</title>
    <url>/UML-Rose.html</url>
    <content><![CDATA[<p><strong>需求分析图</strong></p>
<a id="more"></a>

<h1 id="UML图常见的包括"><a href="#UML图常见的包括" class="headerlink" title="UML图常见的包括"></a>UML图常见的包括</h1><h3 id="类图-Class-Diagram"><a href="#类图-Class-Diagram" class="headerlink" title="类图 (Class Diagram):"></a>类图 (Class Diagram):</h3><ul>
<li>什么是类图?<ul>
<li>描述类的信息(包括属性 方法)以及类和类之间的关系信息</li>
<li>描述类的信息, 以及类和类之间的关系信息</li>
<li>画一个类图: 通常在Ratonal Rose工具的Logical View目录下实现类图, 一般会创建一些目录用来组织这些类图, 因为类可能会比较多</li>
</ul>
</li>
</ul>
<h3 id="用例图-Use-Case-Diagram"><a href="#用例图-Use-Case-Diagram" class="headerlink" title="用例图 (Use Case Diagram):"></a>用例图 (Use Case Diagram):</h3><ul>
<li>什么是用例图?<ul>
<li>站在系统用户(系统角色)的角度分析系统存在哪些功能</li>
<li>实现用例图的时候, 需要先进行系统角色的抽取</li>
<li>画一个用例图: 通常在Ratonal Rose工具的Use Case View当中实现用例图</li>
</ul>
</li>
</ul>
<h3 id="时序图-Sequence-Diagram-描述程序的执行过程-方法的调用过程-方法的返回值等信息-程序是一步一步怎么执行-怎么调用的"><a href="#时序图-Sequence-Diagram-描述程序的执行过程-方法的调用过程-方法的返回值等信息-程序是一步一步怎么执行-怎么调用的" class="headerlink" title="时序图 (Sequence Diagram): 描述程序的执行过程, 方法的调用过程, 方法的返回值等信息(程序是一步一步怎么执行, 怎么调用的)"></a>时序图 (Sequence Diagram): 描述程序的执行过程, 方法的调用过程, 方法的返回值等信息(程序是一步一步怎么执行, 怎么调用的)</h3><br>]]></content>
      <categories>
        <category>需求分析图</category>
      </categories>
  </entry>
  <entry>
    <title>第一个Vue.js</title>
    <url>/Vue-one.html</url>
    <content><![CDATA[<p><strong>Vue.js个人整理</strong></p>
<a id="more"></a>

<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Vue学习&lt;/title&gt;<br>    &lt;script src=<span class="hljs-string">&quot;js/vue.min.js&quot;</span>&gt;&lt;/script&gt; <br>    &lt;!-- 导入Vue.js --&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id = <span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;请点击&lt;/button&gt;<br>        &lt;p&gt;&#123;&#123;ms&#125;&#125;&lt;/p&gt;<br>        &lt;!-- &#123;&#123;massage&#125;&#125; --&gt;<br>    &lt;/div&gt;<br>    <br>        &lt;script&gt;<br>            var app = new Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            Model : 数据<br>             data:&#123;<br>                 ms: <span class="hljs-string">&quot;hello,vue!&quot;</span>,<br>             &#125;,<br>             methods:&#123;<br>                 <span class="hljs-function"><span class="hljs-title">showInfo</span></span>()&#123;<br>                        this.ms = <span class="hljs-string">&quot;你好666999, Vue&quot;</span><br>                 &#125;<br>             &#125;<br>        &#125;);<br>        &lt;/script&gt;<br>    &lt;/script&gt;<br>    <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<h1 id="view和Model双向绑定"><a href="#view和Model双向绑定" class="headerlink" title="view和Model双向绑定"></a>view和Model双向绑定</h1><br>

]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js 基础</title>
    <url>/Vue-Basics.html</url>
    <content><![CDATA[<p><strong>Vue.js个人整理</strong></p>
<a id="more"></a>

<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span><br>        Counter: &#123;&#123; counter &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        // 声明变量<br>        const Counter = &#123;<br>            data() &#123;<br>                return &#123;<br>                // 一开始是0<br>                counter: 0<br>                &#125;<br>            &#125;,<br>            mounted() &#123;<br>                setInterval(() =&gt; &#123;<br>                // 每过1秒增加1次<br>                this.counter++<br>                &#125;, 1000)<br>            &#125;<br>            &#125;<br>        // 将里面的内容传到 id位sdq的 counter<br>         Vue.createApp(Counter).mount(&#x27;#sdq&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="v-bind-title"><a href="#v-bind-title" class="headerlink" title="v-bind:title"></a>v-bind:title</h3><p><strong>v-bind attribute 被称为指令指令带有前缀 v-, 以表示它们是 Vue 提供的特殊 attribute可能你已经猜到了, 它们会在渲染的 DOM 上应用特殊的响应式行为在这里, 该指令的意思是: 将这个元素节点的 title attribute 和当前活跃实例的 message property 保持一致</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bind-attribute&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定元素的title与实例属性一致 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>      鼠标悬停几秒钟查看此处动态绑定的提示信息<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>  const AttributeBinding = &#123;<br>    data() &#123;<br>      return &#123;<br>        message: &#x27;我叫史迪奇 &#x27; + new Date().toLocaleString()<br>      &#125;<br>    &#125;<br>  &#125;<br>  <br>  Vue.createApp(AttributeBinding).mount(&#x27;#bind-attribute&#x27;)<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fangzhuang&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reverseMessage&quot;</span>&gt;</span>反转 Message<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>            // const定义的基本类型不能改变,但是定义的对象是可以通过修改对象属性等方法来改变的<br>            const EventHandling = &#123;<br>            data() &#123;<br>                return &#123;<br>                // 一开始声明<br>                message: &#x27;我叫史迪奇&#x27;<br>                &#125;<br>            &#125;,<br>            methods: &#123;<br>                reverseMessage() &#123;<br>                this.message = this.message<br>                    // 分割成字符串数组<br>                    .split(&#x27;&#x27;)<br>                    // 颠倒数组中元素的顺序<br>                    .reverse()<br>                    //指定的分隔符进行分隔<br>                    .join(&#x27;&#x27;)<br>                &#125;<br>            &#125;<br>            &#125; <br>            Vue.createApp(EventHandling).mount(&#x27;#fangzhuang&#x27;)<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conditional-rendering&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>            const ConditionalRendering = &#123;<br>            data() &#123;<br>                return &#123;<br>                // 改 false看不见<br>                seen: true<br>                &#125;<br>            &#125;<br>            &#125;<br><br>            Vue.createApp(ConditionalRendering).mount(&#x27;#conditional-rendering&#x27;)<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list-rendering&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span><br>        &#123;&#123; todo.text &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    const ListRendering = &#123;<br>        data() &#123;<br>            return &#123;<br>            todos: [<br>                &#123; text: &#x27;史迪奇&#x27; &#125;,<br>                &#123; text: &#x27;鲁本&#x27; &#125;,<br>                &#123; text: &#x27;安琪&#x27; &#125;<br>            ]<br>            &#125;<br>        &#125;<br>        &#125;<br><br>    Vue.createApp(ListRendering).mount(&#x27;#list-rendering&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h2 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 创建一个 todo-item 组件实例 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    // 创建 Vue 应用<br>    const app = Vue.createApp()<br><br>    // 定义名为 todo-item 的新组件<br>    app.component(&#x27;todo-item&#x27;, &#123;<br>    template: `<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>This is a todo<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>`<br>    &#125;)<br><br>    // 挂载 Vue 应用<br>    app.mount()<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>综合案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>      &lt;todo-item<br>        v-for=&quot;item in groceryList&quot;<br>        v-bind:todo=&quot;item&quot;<br>        v-bind:key=&quot;item.id&quot;<br>      &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    const ComponentsApp = &#123;<br>    data() &#123;<br>        return &#123;<br>        groceryList: [<br>            &#123; id: 0, text: &#x27;史迪奇&#x27; &#125;,<br>            &#123; id: 1, text: &#x27;鲁本&#x27; &#125;,<br>            &#123; id: 2, text: &#x27;安琪&#x27; &#125;<br>        ]<br>        &#125;<br>    &#125;<br>    &#125;<br><br>    const app = Vue.createApp(ComponentsApp)<br><br>    app.component(&#x27;todo-item&#x27;, &#123;<br>    props: [&#x27;todo&#x27;],<br>    template: `<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>`<br>    &#125;)<br><br>    app.mount(&#x27;#components-app&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js 表单输入绑定的基础用法</title>
    <url>/Vue-usage.html</url>
    <content><![CDATA[<p><strong>Vue.js个人整理</strong></p>
<a id="more"></a>

<h1 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h1><!--more-->
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app1&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        请输入你喜欢的城市<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;cname&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            你选择的城市:&#123;&#123;cname&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        回复评论: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;huifu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            你选回复是:&#123;&#123;huifu&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        var app = new Vue(&#123;<br>        el:&#x27;#app1&#x27;,<br>        data : &#123;<br>            cname : &quot;哈哈哈尔滨市&quot;,<br>            huifu : &quot;我叫史迪奇&quot;,<br>        &#125;<br>    &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="/html/文本.html"></iframe>



<h1 id="输入多行文本"><a href="#输入多行文本" class="headerlink" title="输入多行文本"></a>输入多行文本</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app2&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你的名字: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name &quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的名字&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            你的名字:&#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        var app = new Vue(&#123;<br>        el:&#x27;#app2&#x27;,<br>        data : &#123;<br>            name : &quot;史迪奇&quot;,<br>        &#125;<br>    &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="/html/多行文本.html"></iframe>



<h1 id="输入单个复选框"><a href="#输入单个复选框" class="headerlink" title="输入单个复选框"></a>输入单个复选框</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app3&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            你的选择是: &#123;&#123;checked &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        var app = new Vue(&#123;<br>        el:&#x27;#app3&#x27;,<br>        data : &#123;<br>            checked : false,<br>        &#125;<br>    &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" scrolling="no" src="/html/单个复选框.html"></iframe>



<h1 id="输入多个复选框"><a href="#输入多个复选框" class="headerlink" title="输入多个复选框"></a>输入多个复选框</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;蓝色&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;红色&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yellow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;黄色&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;yellow&quot;</span>&gt;</span>黄色<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            你选择的颜色是: &#123;&#123;color&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        var app = new Vue(&#123;<br>        el:&#x27;#app4&#x27;,<br>        data : &#123;<br>            color : [],<br>        &#125;<br>    &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="/html/多个复选框.html"></iframe>



<h1 id="输入单选按钮"><a href="#输入单选按钮" class="headerlink" title="输入单选按钮"></a>输入单选按钮</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app5&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                你选择的性别是: &#123;&#123;sex&#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        var app = new Vue(&#123;<br>        el:&#x27;#app5&#x27;,<br>        data : &#123;<br>            sex :[]<br>        &#125;<br>    &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="/html/单选按钮.html"></iframe>



<h1 id="输入选择框单选时"><a href="#输入选择框单选时" class="headerlink" title="输入选择框单选时"></a>输入选择框单选时</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            请你选择你喜欢的季节:<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;season&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>春天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>夏天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>秋天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>冬天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            你喜欢的季节是: &#123;&#123;season&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        var app = new Vue(&#123;<br>        el:&#x27;#app6&#x27;,<br>        data : &#123;<br>            season: &quot;夏天&quot;,<br>        &#125;<br>    &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="/html/选择框单选时.html"></iframe>



<h1 id="输入选择框多选时"><a href="#输入选择框多选时" class="headerlink" title="输入选择框多选时"></a>输入选择框多选时</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app7&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>请你选择你喜欢的季节:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>  <span class="hljs-attr">multiple</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>春天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>夏天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>秋天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>冬天<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            你喜欢的季节是:&#123;&#123;selected&#125;&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            多选时按住, 往下拖<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>        var app = new Vue(&#123;<br>        el:&#x27;#app7&#x27;,<br>        data : &#123;<br>            selected:[&quot;夏天&quot;,&quot;冬天&quot;]<br>        &#125;<br>    &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="/html/选择框多选时.html"></iframe>

<br>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js 网页笔记本</title>
    <url>/Vue-network-books.html</url>
    <content><![CDATA[<p><strong>Vue.js个人整理</strong></p>
<a id="more"></a>

<h1 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/marked.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/moment.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/icon.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;notebook&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;side-bar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;addNote&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;addButtonTitle&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;material-icons&quot;</span>&gt;</span>add_box<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    新建笔记<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notes&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;note in notes&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;selectNote(note)&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;selected:note === selectedNote&#125;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon material-icons&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;note.favorite&quot;</span>&gt;</span>star<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    &#123;&#123;note.title&#125;&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;selectedNote&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectedNote.title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入笔记标题&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;removeNote&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;删除笔记&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;material-icons&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;favoriteNote&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;收藏笔记&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;material-icons&quot;</span>&gt;</span>&#123;&#123;selectedNote.favorite?&#x27;star&#x27;:&#x27;star_border&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectedNote.content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar status-bar&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>创建日期: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;selectedNote.created | changeDate&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lines&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>行数: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;linesCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;words&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>单词数: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;wordsCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;characters&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>字符数: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;charactersCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;preview&quot;</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;notePreview&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    var app=new Vue(&#123;<br>        el:&#x27;#notebook&#x27;,<br>        data()&#123;<br>            return&#123;<br>                notes:JSON.parse(localStorage.getItem(&#x27;notes&#x27;)) || [],<br>                selectedId:localStorage.getItem(&quot;selected-id&quot;) || null,<br>            &#125;<br>        &#125;,<br>        methods:&#123;<br>                    saveNote(v)&#123;<br>                        localStorage.setItem(&#x27;notes&#x27;,JSON.stringify(this.notes))<br>                        console.log(&quot;笔记已经保存! &quot;,new Date())<br>                    &#125;,<br>                    addNote()&#123;<br>                        const time = Date.now()<br>                        const note = <br>                        &#123;<br>                            id:String(time),<br>                            title:&#x27;New Note&#x27; + (this.notes.length+1),<br>                            content:&#x27;Hi,Wellcome to write a new note!&#x27;,<br>                            created:time,<br>                            favorite:false,<br>                        &#125;<br>                        this.notes.push(note)<br>                    &#125;,<br>                    selectNote(v)&#123;<br>                        this.selectedId=v.id<br>                    &#125;,<br>                    removeNote()&#123;<br>                        if (this.selectedNote &amp;&amp; confirm(&#x27;确定删除笔记?&#x27;))<br>                        &#123;<br>                            const index = this.notes.indexOf(this.selectedNote)<br>                            if(index !== -1)<br>                            &#123;<br>                                this.notes.splice(index,1)&#125;<br>                        &#125;<br>                    &#125;,<br>                    <br>                    favoriteNote()<br>                    &#123;<br>                        this.selectedNote.favorite=!this.selectedNote.favorite<br>                    &#125;<br>                &#125;,<br>        computed:&#123;<br>                notePreview()&#123;<br>                    return this.selectedNote?marked(this.selectedNote.content):&#x27;&#x27;<br>                &#125;,<br>                addButtonTitle()&#123;<br>                    return this.notes.length+&#x27; note(s) already&#x27;<br>                &#125;,<br>                selectedNote()&#123;<br>                    return this.notes.find(note=&gt;note.id===this.selectedId)<br>                &#125;,<br>                sortedNotes()&#123;<br>                    return this.notes.slice().sort((a,b)=&gt;a.created-b.created).sort((a,b)=&gt;(a.favorite===b.favorite)?0:a.favorite?-1:1)<br>                &#125;,<br>                linesCount()&#123;<br>                    if(this.selectedNote)<br>                    &#123;<br>                        return this.selectedNote.content.split(/\r\n|\r|\n/).length<br>                    &#125;<br>                &#125;,<br>            wordsCount()&#123;<br>                if(this.selectedNote)&#123;<br>                    var s = this.selectedNote.content;<br>                    s = s.replace(/\n/g,&#x27;&#x27;)<br>                    s = s.replace(/(^\s*)|(\s*$)/gi,&#x27;&#x27;)<br>                    s = s.replace(/\s\s+/gi,&#x27;&#x27;)<br>                    return s.split(&#x27; &#x27;).length<br>                &#125;<br>            &#125;,<br>                    charactersCount()&#123;<br>                        if(this.selectedNote)&#123;<br>                        return this.selectedNote.content.split(&#x27;&#x27;).length<br>                        &#125;<br>                    &#125;<br>            &#125;,<br>            watch:&#123;<br>                notes:&#123;<br>                    handler:&#x27;saveNote&#x27;,<br>                    deep:true,<br>                &#125;,<br>                selectedId(v)&#123;<br>                    localStorage.setItem(&#x27;selected-id&#x27;,v)<br>                &#125;<br>            &#125;,<br>            filters:&#123;<br>                changeDate(v)&#123;<br>                    return moment(v).format(&#x27;YYYY-MM-DD&#x27;)<br>                &#125;<br>            &#125;,<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<p><a href="./项目/项目工程.html" target="_blank">演示效果</a></p>
<br>


]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Arch wsl的傻瓜式安装 (有手就行)</title>
    <url>/Arch-Wsl-install.html</url>
    <content><![CDATA[<p><strong>本人是Arch教徒过来传一下教</strong> </p>
<img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c7189d153.jpg" style="width: 200px; height: 200px;">

<a id="more"></a>

<h1 id="第一步-程序与功能中打开-或者-以管理员身份打开-PowerShell-终端-输入命令如下"><a href="#第一步-程序与功能中打开-或者-以管理员身份打开-PowerShell-终端-输入命令如下" class="headerlink" title="第一步 程序与功能中打开 或者 以管理员身份打开 PowerShell 终端 输入命令如下"></a>第一步 程序与功能中打开 或者 以管理员身份打开 PowerShell 终端 输入命令如下</h1><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux<br></code></pre></td></tr></table></figure>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e5232864c3d.jpg"></p>
<p><strong>按照提示重启电脑</strong></p>
<h1 id="第二步-下载文件"><a href="#第二步-下载文件" class="headerlink" title="第二步 下载文件"></a>第二步 下载文件</h1><p><strong>然后下载<a href="https://github.com/yuk7/ArchWSL">Arch WSL</a></strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e523284e1bb.jpg"></p>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e523287db9e.jpg"></p>
<p><strong>那个安装证书是给appx版的arch wsl用的</strong></p>
<p><strong>你已经安装zip版的</strong></p>
<p><strong>没有必要安两次</strong></p>
<p><strong>只用需要用到zip</strong></p>
<h1 id="第三步-配置Arch-Wsl"><a href="#第三步-配置Arch-Wsl" class="headerlink" title="第三步 配置Arch Wsl"></a>第三步 配置Arch Wsl</h1><br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e52328742c1.jpg"></p>
<br>

<p><strong>反正按照我这个改, 保存是ctrl + x 回车</strong></p>
<h1 id="第四步-配置相关参数"><a href="#第四步-配置相关参数" class="headerlink" title="第四步 配置相关参数"></a>第四步 配置相关参数</h1><p><strong>这里会提示配置  按照我的方法配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Arch.exe//这个是启动后的显示<br>[root@PC-NAME user]<span class="hljs-comment"># passwd       //这个是用户名输完名字输密码</span><br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Arch.exe<br>[root@PC-NAME]<span class="hljs-comment"># EDITOR=nano visudo</span><br>    %wheel      ALL=(ALL) ALL<br>    (setup sudoers file.)<br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@PC-NAME]<span class="hljs-comment"># useradd -m -G wheel -s /bin/bash &#123;username&#125;</span><br>(add user)<br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@PC-NAME user]<span class="hljs-comment"># passwd &#123;username&#125;      //&#123;&#125;换成你的用户名,记住不需要打&#123;&#125;</span><br>(<span class="hljs-built_in">set</span> default user password)<br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@PC-NAME user]<span class="hljs-comment"># exit  //退出</span><br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Arch.exe config --default-user &#123;username&#125;<br>    (setting to default user)     //现在是root用户,不用加sudo<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo pacman-key --init<br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[user@PC-NAME]sudo pacman-key --init<br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@PC-NAME]sudo pacman-key --populate<br></code></pre></td></tr></table></figure>
<h1 id="第五步-安装完后操作"><a href="#第五步-安装完后操作" class="headerlink" title="第五步 安装完后操作"></a>第五步 安装完后操作</h1><p><strong>下面是<a href="https://mirrors.tuna.tsinghua.edu.cn/help/archlinux/">换源</a></strong></p>
<p><strong>打开nano /etc/pacman.d/mirrorlist 然后再最顶端添加 切记去##</strong></p>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e5232853c54.jpg"></p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Server = https:mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure>
<br>

<h4 id="然后就可以-更新软件包缓存"><a href="#然后就可以-更新软件包缓存" class="headerlink" title="然后就可以,更新软件包缓存"></a>然后就可以,更新软件包缓存</h4><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo pacman -Syy<br></code></pre></td></tr></table></figure>
<br>

<h1 id="neofetch查看系统"><a href="#neofetch查看系统" class="headerlink" title="neofetch查看系统"></a>neofetch查看系统</h1><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pacman -S neofetch<br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">neofetch<br></code></pre></td></tr></table></figure>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e5232874b5a.jpg"></p>
<br>

<h1 id="这个教程百分比可以看懂-如果你看不懂那只能说明你没认真去看"><a href="#这个教程百分比可以看懂-如果你看不懂那只能说明你没认真去看" class="headerlink" title="这个教程百分比可以看懂,如果你看不懂那只能说明你没认真去看"></a>这个教程百分比可以看懂,如果你看不懂那只能说明你没认真去看</h1><h1 id="认认真真的反复去看你真的可以看懂的"><a href="#认认真真的反复去看你真的可以看懂的" class="headerlink" title="认认真真的反复去看你真的可以看懂的"></a>认认真真的反复去看你真的可以看懂的</h1><h1 id="然后发现并不难"><a href="#然后发现并不难" class="headerlink" title="然后发现并不难"></a>然后发现并不难</h1><br>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>adb 卸载 Anroid 内置应用</title>
    <url>/Anroid-Uninstall-built-in-apps.html</url>
    <content><![CDATA[<p><strong>Android学习笔记</strong></p>
<a id="more"></a>

<h1 id="手机链接工作"><a href="#手机链接工作" class="headerlink" title="手机链接工作"></a>手机链接工作</h1><ul>
<li><h2 id="首先-进入开发者模式-通常-进入-关于手机-连续进点击软件版本号即可"><a href="#首先-进入开发者模式-通常-进入-关于手机-连续进点击软件版本号即可" class="headerlink" title="首先 进入开发者模式 通常 进入 关于手机 连续进点击软件版本号即可"></a>首先 进入开发者模式 通常 进入 关于手机 连续进点击软件版本号即可</h2></li>
</ul>
<ul>
<li><h2 id="然后-勾选开发者选项-USB调试即可"><a href="#然后-勾选开发者选项-USB调试即可" class="headerlink" title="然后 勾选开发者选项-USB调试即可"></a>然后 勾选开发者选项-USB调试即可</h2></li>
</ul>
<ul>
<li><h2 id="用数据线连接-手机-启动adb需要配环境变量"><a href="#用数据线连接-手机-启动adb需要配环境变量" class="headerlink" title="用数据线连接 手机 启动adb需要配环境变量"></a>用数据线连接 手机 启动<a href="https://wwc.lanzoum.com/iHTDR07xylqh">adb</a>需要配环境变量</h2><ul>
<li><strong>密码: sdq3</strong></li>
</ul>
</li>
</ul>
<h1 id="检查连接是否成功命令-有设备说明连接成功-不成功重启adb"><a href="#检查连接是否成功命令-有设备说明连接成功-不成功重启adb" class="headerlink" title="检查连接是否成功命令 有设备说明连接成功 不成功重启adb"></a>检查连接是否成功命令 有设备说明连接成功 不成功重启adb</h1><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">adb shell<br><br>// 显示 下面说明成功 PD1955: 是设备号<br>PD1955:/ $<br></code></pre></td></tr></table></figure>
<br>

<h1 id="然后输入以下命令-查看软件列表"><a href="#然后输入以下命令-查看软件列表" class="headerlink" title="然后输入以下命令 查看软件列表"></a>然后输入以下命令 查看软件列表</h1><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pm list packages<br></code></pre></td></tr></table></figure>
<br>

<h1 id="然后输入以下命令-卸载应用"><a href="#然后输入以下命令-卸载应用" class="headerlink" title="然后输入以下命令 卸载应用"></a>然后输入以下命令 卸载应用</h1><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// pm uninstall -k --user 0 后面跟着 包名(想卸载什么应用就输入什么包名)<br>PD1955:/ $ pm uninstall -k --user 0 com.vivo.browser<br><br>// 显示 Success 表示卸载成功<br>Success<br></code></pre></td></tr></table></figure>
<br>

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="https://player.bilibili.com/player.html?aid=556064402&bvid=BV1De4y1X74x&cid=775806890&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;"> </iframe></div>





<br>

<!-- <div style="position: relative; padding: 30% 45%;">
    <iframe style="
        position: absolute; 
        width: 100%; 
        height: 100%; 
        left: 0; top: 0;" 
        src="https://www.bilibili.com/video/BV1De4y1X74x" 
        scrolling="no" 
        border="0" 
        frameborder="no" 
        framespacing="0" 
        allowfullscreen="true">
    </iframe>
</div> -->]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>轻松理解json与python关系</title>
    <url>/json-python.html</url>
    <content><![CDATA[<p><strong>json笔记</strong></p>
<a id="more"></a>


<p><strong>导入json模块</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">import json<br></code></pre></td></tr></table></figure>

<h1 id="对应关系"><a href="#对应关系" class="headerlink" title="对应关系"></a>对应关系</h1><table>
<thead>
<tr>
<th align="center">JSON</th>
<th align="center">Python</th>
</tr>
</thead>
<tbody><tr>
<td align="center">object</td>
<td align="center">dict</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">list</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">str</td>
</tr>
<tr>
<td align="center">number(int)</td>
<td align="center">int,long</td>
</tr>
<tr>
<td align="center">number(real)</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">true</td>
<td align="center">True</td>
</tr>
<tr>
<td align="center">false</td>
<td align="center">False</td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">None</td>
</tr>
</tbody></table>
<p><strong>案例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span>   <br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;未知&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">626</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure>
<br>

<table>
<thead>
<tr>
<th align="center">解释</th>
<th align="center">JSON</th>
<th align="center">Python</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[]中括号起来的</td>
<td align="center">数组</td>
<td align="center">列表</td>
</tr>
<tr>
<td align="center">{}花括号起来的</td>
<td align="center">对象</td>
<td align="center">字典</td>
</tr>
<tr>
<td align="center">“name”</td>
<td align="center">属性的名</td>
<td align="center">字典的键</td>
</tr>
<tr>
<td align="center">“史迪奇”</td>
<td align="center">属性的值</td>
<td align="center">字典的值</td>
</tr>
<tr>
<td align="center">“未知”</td>
<td align="center">字符串</td>
<td align="center">字符串</td>
</tr>
<tr>
<td align="center">626</td>
<td align="center">整数</td>
<td align="center">int</td>
</tr>
</tbody></table>
<h1 id="json转python"><a href="#json转python" class="headerlink" title="json转python"></a>json转python</h1><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON">json_str=&#x27;&#x27;&#x27;<span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;未知&quot;</span><span class="hljs-punctuation">,</span><br>&quot;id&quot;:626,&#125;]&#x27;&#x27;&#x27;<br><br># 把json格式文件, 转换成python数据<br>rs = json.loads(json_str)<br>#查看类型<br>print(type(rs)) #列表<br>print(type(rs[0])) #字典<br><br># 把json格式文件, 转换成python类型的数据<br>with open(&#x27;data/sdq.json&#x27;) as fp:<br>    # 加载该文件对象, 转换为python类型的数据<br>    python_list = json.load(fp)<br>    print(type(python_list)) #列表<br>    print((type(python_list[0]))) #字典<br></code></pre></td></tr></table></figure>
<p><strong>举例图</strong></p>
<div class="mermaid">
graph LR
    A[" python数据类型 "]-->B[" json.dupmps(obj) "]
    B[" json.dupmps(obj) "]-->D[" json字符串<br>
json格式文件 "]
    A[" python数据类型 "]-->F[" json.dupmps(obj) "]
    F[" json.dupmps(obj,fp) "]-->D[" json字符串<br>
json格式文件 "]
</div>


<h1 id="python转json"><a href="#python转json" class="headerlink" title="python转json"></a>python转json</h1><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON">json_str=&#x27;&#x27;&#x27;<span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;未知&quot;</span><span class="hljs-punctuation">,</span><br>&quot;id&quot;:626,&#125;]&#x27;&#x27;&#x27;<br><br>rs = json.loads(json_str)<br># 把python转换json字符串<br>json_str = json.dump(rs)<br>print(json_str)<br><br># 把json格式文件, 转换成python类型的数据<br>with open(&#x27;data/sdz.json&#x27;,&#x27;w&#x27;) as fp:<br>    # 把python以json格式储存到文件中<br>    json.dump(re, fp,  ensure_ascii=False)<br></code></pre></td></tr></table></figure>






<br>
<!-- 
            /￣json.dupmps(obj)￣￣￣↘
           /                         json字符串
    python数据类型 
           \                         json格式文件
            \__json.dupmps(obj,fp)__↗ -->

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>下次一定</title>
    <url>/xcyd.html</url>
    <content><![CDATA[<p><strong>本人制作简单的一款软件</strong></p>
<a id="more"></a>

<h1 id><a href="#" class="headerlink" title></a><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e51c911a01f.jpg"></h1><h1 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e51c9119fd9.jpg" alt="下载"></h1><h1 id="声明一下电话救援和电量救援并不是卡-而是给你时间去打开微信-QQ等等软件-然后时间一到就弹出界面-并不是卡"><a href="#声明一下电话救援和电量救援并不是卡-而是给你时间去打开微信-QQ等等软件-然后时间一到就弹出界面-并不是卡" class="headerlink" title="声明一下电话救援和电量救援并不是卡, 而是给你时间去打开微信,QQ等等软件, 然后时间一到就弹出界面, 并不是卡"></a>声明一下电话救援和电量救援并不是卡, 而是给你时间去打开微信,QQ等等软件, 然后时间一到就弹出界面, 并不是卡</h1><h1 id="真无电买用法是死循环然后发热耗电-把电耗完了就不用买账了-蹭饭利器"><a href="#真无电买用法是死循环然后发热耗电-把电耗完了就不用买账了-蹭饭利器" class="headerlink" title="真无电买用法是死循环然后发热耗电, 把电耗完了就不用买账了, 蹭饭利器"></a>真无电买用法是死循环然后发热耗电, 把电耗完了就不用买账了, 蹭饭利器</h1><h1 id="除非然后不行就电话救援-设定好吃东西的时间-然后来个电话-然后去接一下电话-趁机开溜-然后微信发消息给同学-谎称家里有事先走了"><a href="#除非然后不行就电话救援-设定好吃东西的时间-然后来个电话-然后去接一下电话-趁机开溜-然后微信发消息给同学-谎称家里有事先走了" class="headerlink" title="除非然后不行就电话救援, 设定好吃东西的时间, 然后来个电话, 然后去接一下电话, 趁机开溜, 然后微信发消息给同学, 谎称家里有事先走了"></a>除非然后不行就电话救援, 设定好吃东西的时间, 然后来个电话, 然后去接一下电话, 趁机开溜, 然后微信发消息给同学, 谎称家里有事先走了</h1><br>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>人工智比赛资料</title>
    <url>/AI-trainer-match--examination.html</url>
    <content><![CDATA[<p><strong>人工智能训练师个人整理</strong></p>
<a id="more"></a>

<h1 id="人工智能训练师-初赛复习资料"><a href="#人工智能训练师-初赛复习资料" class="headerlink" title="人工智能训练师 初赛复习资料"></a>人工智能训练师 初赛复习资料</h1><p><strong>2021.8.12</strong></p>
<p><strong>1. JavaScript Object Notation(JavaScript 对象表示法, JSON是文本的数据交换格式 )      (考判断题+多选题)</strong></p>
<p><strong>2. JSON有两种表示结构, 对象和数组      (考判断题+多选题)</strong></p>
<p><strong>3. JSON对象结构以”{“开始, 以”}”结束中间部分由0或多个以”,”分隔的”key(关键字)/value(值)”对构成, 关键字和值之间以”:”分隔      (考判断题)</strong></p>
<p><strong>4. JSON数组结构以”[“开始, “]”结束中间由0或多个以”,”分隔的值列表组成   (考判断题)</strong></p>
<p><strong>5. XML可以用来标记数据, 定义数据类型   (考单选题+判断题+多选题)</strong></p>
<p><strong>6. XML标签对组成   (考判断题)</strong></p>
<p><strong>7. XML根元素   (考判断题)</strong></p>
<p><strong>8. XML关闭标签   (考判断题)</strong></p>
<p><strong>9. XML区分大小写字母   (考判断题)</strong></p>
<p><strong>10. XML属性必须加引号   (考判断题)</strong></p>
<p><strong>11. TXT是文本格式   (考判断题)</strong></p>
<p><strong>12. EXE File是可执行程序   (考判断题)</strong></p>
<p><strong>13. DOC是20世纪90年代, 微软的格式   (考单选题+判断题)</strong></p>
<p><strong>14. MOV它是Apple公司   (考单选题+判断题)</strong></p>
<p><strong>15. AVI微软公1992年11月视频格式   (考单选题+判断题)</strong></p>
<p><strong>16. JPEG后缀是.jpg或.jpeg   (考单选题+判断题)</strong></p>
<p><strong>17. CSV格式数字和文本   (考单选题+判断题)</strong></p>
<p><strong>18. CSV文件开头不留空, 以行为单位   (考判断题)</strong></p>
<p><strong>19. CSV文件可含或不含列名, 含列名则居文件第一行   (考单选题+判断题)</strong></p>
<p><strong>20. CSV文件一行数据不跨行, 无空行   (考判断题)</strong></p>
<p><strong>21. CSV文件格式(“”)包起来   (考单选题+判断题)</strong></p>
<p><strong>22. CSV文件内码格式不限 ASCII, Unicode 或者其他   (考单选题+判断题)</strong></p>
<p><strong>24. FLV是视频格式   (考单选题+判断题)</strong></p>
<p><strong>25. WPS最常用的文字, 表格, 演示, PDF阅读等多种功能   (考单选题+判断题+多选题)</strong></p>
<p><strong>26. BLP是图片压缩格式, 体积小, 不能直接编辑, 游戏中模型贴图应用格式   (考判断题)</strong></p>
<p><strong>27. XLS是常用的电子表格的格式   (考判断题)</strong></p>
<p><strong>28. 在同一台计算机中, 内存比外存存取速度快   (考判断题)</strong></p>
<p><strong>29. 32位微处理器中的32表示的技术指标是字长   (考判断题)</strong></p>
<p><strong>30. 目前制造计算机所采用的电子器件是超大规模集成电路   (考判断题)</strong></p>
<p><strong>31. Microsoft Office PowerPoint是演示文稿软件   (考判断题)</strong></p>
<p><strong>32. 文本编码类型有ASCII, GB2312, Unicode, UTF-8      (考判断题+多选题)</strong></p>
<p><strong>33. 二进制文件按二进制编码方式存储   (考判断题)</strong></p>
<p><strong>34. 数据以二进制编码方式存储   (考判断题)</strong></p>
<p><strong>35. 机器学习是一门多领域交叉学科, 涉及概率论, 统计学, 逼近论, 凸分析, 算法复杂度理论    (考判断题+多选题)</strong></p>
<p><strong>36. 深度学习是图像, 声音和文本      (考判断题+多选题)</strong></p>
<p><strong>37. 深度学习的主要方式是监督学习, 无监督学习, 半监督学习和强化学习</strong></p>
<p><strong>38. 监督学习是监督训练或有教师学习   (考判断题)</strong></p>
<p><strong>39. 无监督学习根据类别未知的解决模式识别中的各种问题   (考判断题)</strong></p>
<p><strong>40. 半监督学习是同时使用未标记数据和已标记数据来进行模式识别   (考判断题)</strong></p>
<p><strong>41. 强化学习, 用于实现特定目标的问题   (考判断题)</strong></p>
<p><strong>42. 智能语音处理技术包括身份识别, 语种识别, 情感识别, 语音分离, 语音合成等   (考多选题)</strong></p>
<p><strong>43. 生物特征识别技术包括步态识别, 声纹识别, 虹膜识别等   (考多选题)</strong></p>
<p><strong>44. 立体视觉是三维几何信息   (考判断题)</strong></p>
<p><strong>45. 自然语言处理技术未完全达到人类智能   (考判断题)</strong></p>
<p><strong>46. 自然语言处理不一定以经过标注过的数据作为输入   (考判断题)</strong></p>
<p><strong>47. 自然语言处理不一定以有监督学习的方式实现   (考判断题)</strong></p>
<p><strong>48. 自然语言处理可以通过无监督学习的方式实现   (考判断题)</strong></p>
<p><strong>49. 数据预处理是清洗, 集成, 归约, 变换  (考多选题)</strong></p>
<p><strong>50. 数据挖掘前数据预处理提高质量, 节省时间   (考判断题)</strong></p>
<p><strong>51. 数据变换方法包括平滑, 聚集, 泛化, 规范化等   (考多选题)</strong></p>
<p><strong>52. 监督学习模型时将数据集分为训练集, 验证集和测试集   (考多选题)</strong></p>
<p><strong>53. 数据分析方法包括聚类分析, 因子分析, 相关分析, 方差分析, 回归分析等   (考多选题)</strong></p>
<p><strong>54. 缺失数据处理方法包括删除含有缺失值的记录, 均值插补, 同类均值插补等   (考多选题)</strong></p>
<p><strong>55. 数据治理是指对于数据采集, 数据清洗, 数据标注每个阶段识别, 度量, 监控, 预警   (考多选题)</strong></p>
<p><strong>56. 数据分割 以便于重构, 存储, 重组和恢复, 创建索引和顺序扫描的效率   (考判断题+多选题)</strong></p>
<p><strong>57. 数据清洗就是排错   (考单选题+判断题)</strong></p>
<p><strong>58. 为了避免在数据不被窃取不被复制, 对数据传输进行压缩, 加密   (考单选题+判断题)</strong></p>
<p><strong>59. 数据一致性检查就是为了核对和纠正   (考单选题+判断题)</strong></p>
<p><strong>60. 采用区块链就是强加密算法和分布式   (考单选题+判断题)</strong></p>
<p><strong>61. TP是指正样本被预测判定为正, 称作判断为真的正确情况   (考判断题)</strong></p>
<p><strong>62. TN是指负样本被预测判定为负, 称作判断为假的正确情况   (考判断题)</strong></p>
<p><strong>63. FP是指负样本被模型预测为正,称为误报   (考判断题)</strong></p>
<p><strong>64. FN是指正样本被模型预测为负, 称为漏报   (考判断题)</strong></p>
<p><strong>65. 数据标注员具备的基本素质为: 学习力, 专注力, 责任感持续的学习力是标注工作的基础, 有耐心才能坚持在标注行业, 较强专注力可提高个人工作效率      (考判断题+多选题)</strong></p>
<p><strong>66. 数据标注员要参照数据标注规则   (考判断题)</strong></p>
<p><strong>67. 数据标注员遇到数据标注规则模糊的地方要进行询问   (考判断题)</strong></p>
<p><strong>68. 数据标注员要总结经验并及时汇报遇到的问题   (考判断题)</strong></p>
<p><strong>69. 初级数据标注员应具备的职业道德规范; 掌握行业基础知识; 具备基础业务能力      (考判断题+多选题)</strong></p>
<p><strong>70. 中级数据标注员具备职业道德和经验; 具备业务能力和责任心; 具备质检能力      (考判断题+多选题)</strong></p>
<p><strong>71. 高级数据标注员具备的从业经验; 具备业务能力和责任心; 能独立完成各类业务的示范模板和操作培训; 具备质检能力; 具备团队管理能力      (考判断题+多选题)</strong></p>
<p><strong>72.  数据标注规则需要不断完善; 需求方优先规则; 质检优先规则      (考判断题+多选题)</strong></p>
<p><strong>73. 数据标注的应用场景自动驾驶, 智能安防, 智慧医疗, 工业4.0, 新零售等   (考多选题)</strong></p>
<p><strong>74. 根据数据标注对象不同, 数据标注可分为文本标注, 语音标注, 图像标注和视频标注   (考多选题)</strong></p>
<p><strong>75. Labelme是图像标注软件, 使用 Python 语言编写, 图形界面使用Qt   (考判断题)</strong></p>
<p><strong>76. Labelme能对图像进行多边形, 矩形, 圆形, 多段线, 线段, 点形式, flag 形式的标注      (考判断题+多选题)</strong></p>
<p><strong>77. Labelme可以在Ubuntu, macOS, Windows操作系统上使用   (考判断题)</strong></p>
<p><strong>78. Labelme以JSON存储标注信息   (考判断题)</strong></p>
<p><strong>79. LabelImg是一个图像标注软件, 使用 Python 语言编写, 图形界面使用Qt   (考判断题)</strong></p>
<p><strong>80. LabelImg以PASCAL VOC格式的XML文件存储标注信息, 还支持YOLO格式   (考单选题+判断题)</strong></p>
<p><strong>81. Labelbox是一个图像标注软件</strong></p>
<p><strong>82. 常见的图像数据标注类型包括关键点标注, 矩形框标注, 图像分割, 3D框标注, 属性标注等   (考多选题)</strong></p>
<p><strong>83. 矩形框标注是一种对目标对象进行目标检测框标注的简单处理方式, 常用于标注自动驾驶下的人, 车, 物等   (考判断题)</strong></p>
<p><strong>84. 区域标注指是指将图像分成各具特性的区域并提取出感兴趣部分的过程   (考单选题+判断题)</strong></p>
<p><strong>85. 属性标注是用一个或多个标签标注目标物的属性   (考判断题)</strong></p>
<p><strong>86. 关键点标注一般用于人体脸部轮廓, 五官定位, 身体部位和动物头像等   (考多选题)</strong></p>
<p><strong>87. 视频数据标注任务包含视频标签的时间位置, 空间位置和标签信息标注等内容      (考判断题+多选题)</strong></p>
<p><strong>88. 视频源数据管理包含视频信息管理和视频目录管理两大块      (考判断题+多选题)</strong></p>
<p><strong>89. 视频信息管理包含视频上传, 视频修改, 视频查询, 视频删除, 下载视频等功能   (考多选题)</strong></p>
<p><strong>90. 视频目录管理包含添加目录, 删除目录和目录排序功能   (考多选题)</strong></p>
<p><strong>91. 视频数据标注通过语义, 内容等方式标注, 有利于视频数据搜索, 管理和收藏      (考判断题+多选题)</strong></p>
<p><strong>92. 相较于图像数据而言, 图像数据是在一个时间点上的数据, 而视频数据是在一段时间上连续的一系列图像数据的集合, 表达的信息更加丰富, 因此具有更广的应用场景   (考判断题)</strong></p>
<p><strong>93. 视频数据标注目的是对场景中活动目标进行位置, 形状, 动作, 色彩等有关特征进行标注      (考判断题+多选题)</strong></p>
<p><strong>94. 常用的图像数据标注工具包括LabelMe, LabelImg和LabelBox   (考多选题)</strong></p>
<p><strong>95. 目前常见的标注文档存储格式包括JSON, XML, TXT   (考多选题)</strong></p>
<p><strong>96. 图像标注是实现图像分类, 目标检测, 图像分割的基础   (考多选题)</strong></p>
<p><strong>97. ImageNet项目标注了一千四百多万张图像, 举办了八次图像任务挑战赛   (考单选题+判断题)</strong></p>
<p><strong>98. ImageNet项目吸引了全球的参赛队伍通过编写相关算法来完成分类, 检测和定位等子任务   (考单选题+判断题)</strong></p>
<p><strong>99. COCO数据集是一个大型的, 丰富的物体检测, 分割和字幕数据集   (考多选题)</strong></p>
<p><strong>100. MNIST数据集是由0-9手写数字图片和数字标签所组成的   (考单选题+判断题)</strong></p>
<p><strong>101. MNIST数据集由60000个训练样本和10000个测试样本组成   (考单选题+判断题)</strong></p>
<p>*<em>102. MNIST数据集每个样本都是一张28 * 28像素的灰度手写数字图像   (考单选题+判断题)*</em></p>
<p><strong>104. CIFAR-10是一个包含60000张图片的数据集   (考单选题+判断题)</strong></p>
<p>*<em>105. CIFAR-10中, 每个图像为32</em>32的彩色图像   (考单选题+判断题)**</p>
<p><strong>106. CIFAR-100有100个类, 每个类包含600个图像   (考单选题+判断题)</strong></p>
<p><strong>107. CIFAR-100中, 每类各有500个训练图像和100个测试图像      (考判断题+多选题)</strong></p>
<p><strong>108. 在图像数据标注中, 用户的角色可以分为3类, 分别是标注员, 审核员和管理员   (考判断题)</strong></p>
<p><strong>109. 标注员负责对图像数据进行标注   (考判断题)</strong></p>
<p><strong>110. 审核员负责对标注好的数据进行审核   (考判断题)</strong></p>
<p><strong>111. 管理员负责对相关人员进行管理, 并对标注任务进行发放及回收   (考判断题)</strong></p>
<p><strong>112. 图像数据标注流程: 图像获取-&gt;图像前处理-&gt;图像预识别-&gt;图像标注-&gt;结果输出      (考判断题+多选题)</strong></p>
<p><strong>113. 项目不同图像的获取方式也不同, 一般可通过下采集, 网络采集等方式获取所需的图像   (考单选题+判断题)</strong></p>
<p><strong>114. 图像前处理对图像进行查重处理, 将重复的图像删除   (考判断题)</strong></p>
<p><strong>115. 可通过特定的程序, 先对数据做一个预标注, 标注员只需校验标注结果即可, 进而大幅提高标注效率   (考判断题)</strong></p>
<p><strong>116. 在进行标注任务时, 首先要根据标注对象, 标注要求和不同的数据集格式选择合适的标注工具   (考判断题)</strong></p>
<p><strong>117. 图像数据标注产业的蓬勃发展为人工智能行业计算机视觉方向的兴起奠定了扎实的基础   (考判断题)</strong></p>
<p><strong>118. 不同行业对于数据的标注要求有所差异   (考判断题)</strong></p>
<p><strong>119. 自动驾驶行业利用带有标签的数据集来对自动驾驶模型进行训练, 使其对路面情况具备判断能力, 并能做出相应的应对策略   (考判断题)</strong></p>
<p><strong>120. 自动驾驶行业标注内容包括路面中行人识别, 车辆识别和道路识别等      (考判断题+多选题)</strong></p>
<p><strong>121. 智慧医疗行业主要包括对解剖部位或病变部位对应的点线面以及轮廓进行标记, 如CT断层成像数据, 需要根据病理特点标注肺部边界轮廓   (考判断题)</strong></p>
<p><strong>122. 智能安防行业通过对复杂条件下的人脸, 道路, 车辆, 动作的数据采集与标注实现城市道路监控, 车辆人流监测, 公共安全防范等应用      (考判断题+多选题)</strong></p>
<p><strong>123. 区域标注需同时满足均匀性和连通性的条件, 其中均匀性指的是该区域中的所有像素点都满足灰度, 纹理, 彩色等特征的某种相似性准则; 连通性是指在该区域内存在的连接任意两点的路径      (考判断题+多选题)</strong></p>
<p><strong>124. 与矩形框标注相比, 区域标注更加精确, 标注边缘可以是多边形甚至是柔性的, 常用于自动驾驶中的道路识别   (考单选题+判断题)</strong></p>
<p><strong>125. 标注框标注用矩形框, 四边形框框选出目标物      (考判断题+多选题)</strong></p>
<p><strong>126. 关键点标注用一个或多个关键点标注目标物特定局部的位置   (考单选题+判断题)</strong></p>
<p><strong>127. 区域标注用开区域或闭区域分割出目标物的轮廓   (考判断题)</strong></p>
<p><strong>128. 目前关键点标注常用于人脸识别, 人体骨骼检测, 手势确认等方面      (考判断题+多选题)</strong></p>
<p><strong>129. 关键点标注虽然看起来比较简单, 只要在需要标注的地方打点标注就行, 但是实现起来难度非常大, 在图片标注任务中属于高难度标注      (考判断题)</strong></p>
<p><strong>130. 关键点的数量一般较多, 在标注过程中需要搞清楚少则几个, 多则上百个点所代表的含义, 做得多就容易错得多      (考判断题)</strong></p>
<p><strong>131. 关键点判断标注合格的标准不是很明确, 导致标注人员不能检查自己犯的错误      (考判断题)</strong></p>
<p><strong>132. 在人脸关键点标注项目中, 标注的人脸图片通常是二维图片的, 但是需要标注员有三维立体感, 将标注后的图片具有立体效果   (考单选题+判断题)</strong></p>
<p><strong>133. 当遇到遮挡点或不可见点, 关键点标注需要标注人员在标注过程时具有丰富的空间想象能力   (考单选题+判断题)</strong></p>
<p><strong>134. 框标注包括矩形标注, 自由矩形标注, 3D框标注      (考判断题+多选题)</strong></p>
<p><strong>135. 框标注应用方位广泛, 通过拉框的方式, 选定框区域内的内容来对图片的特征进行提取</strong></p>
<p><strong>136. 在对图片进行框标注时, 由于框的图像形状受限, 会导致所标注的范围不够精确的问题      (考判断题)</strong></p>
<p><strong>137. 图像区域标注分为开区域标注和闭区域标注      (考判断题+多选题)</strong></p>
<p><strong>138. 开区域标注常见的标注有: 线标注; 闭区域标注常见的标注有: 曲线标注和多边形标注   (考单选题+判断题+多选题)</strong></p>
<p><strong>139. 针对自动分割对多目标或背景复杂的图像难以奏效, 手工标注极为耗时且标注结果不准确和不可重复这两大问题, 提出了交互式图像分割      (考判断题)</strong></p>
<p><strong>140. 交互式智能图像分割标注针对图像分割标注的预识别算法, 实现通过机器对图像进行智能分割, 再进行人工修边和筛选, 从而大幅提高生产效率, 减少人工成本, 减少人工差错      (考判断题+多选题)</strong></p>
<p><strong>141. 线标注通常用于自动驾驶应用中的车道线标注, 主要用于自动驾驶车辆的道路识别      (考判断题+多选题)</strong></p>
<p><strong>142. 多边形标注较为准确, 避免了大量白色空间的视觉模型偏差, 一般用于标注街景图片, 人物, 动物, 人体部位等      (考判断题+多选题)</strong></p>
<p><strong>147. 采样精度: 指存放一个采样值所使用的比特数采样率和采样精度越大, 记录的波形更接近原始信号, 但同时占用的存储空间也越大      (考判断题)</strong></p>
<p><strong>148. 声道: 声道指输入或输出信号的通道通常用多声道来输入或输出不同的信号   (考单选题+判断题)</strong></p>
<p><strong>149. 信噪比: 信噪比指信号与噪声之间的能量比, 录音时信噪比越高越好   (考单选题+判断题)</strong></p>
<p><strong>150. 声波: 声波是由物体震动产生, 使周围的介子(如空气)产生波动   (考单选题+判断题)</strong></p>
<p><strong>151. 声速: 声波每秒在介质中传播的距离   (考单选题+判断题)</strong></p>
<p><strong>152. 波长: 沿着声波传播方向, 声波震动一周所传播的距离或在波形上相同的相邻两点的距离   (考单选题+判断题)</strong></p>
<p><strong>153. 振幅: 震动物体离开平衡位置的最大距离称为振幅, 通常用A表示   (考单选题+判断题)</strong></p>
<p><strong>154. 分贝: 分贝是增益或衰减单位, 用来描述两个相同物理量之间的相对关系   (考单选题+判断题)</strong></p>
<p><strong>155. TTS(语音合成)即从文本到语音, 是人机对话的一部分, 是指让计算机能够说话   (考单选题+判断题)</strong></p>
<p><strong>156. TTS中最主要的一个指标是自然度, 也就是当我们听见计算机跟我们说话时, 能否区分出了是人还是计算机   (考单选题+判断题)</strong></p>
<p><strong>157. ASR(语音识别)是将声音转换为文字   (考单选题+判断题)</strong></p>
<p><strong>158. 语音标注数据的典型应用场景包括: 智能医疗, 智能驾驶, 智能家居, 智能教育, 智能客服, 机器人等      (考判断题+多选题)</strong></p>
<p><strong>159. 音色/音质: 指能够区分两种不同声音的基本特征, 比如人说话的声音和小提琴的声音在语音信号处理技术中, 人声识别研究常将音色作为重要研究对象;    (考单选题+判断题)</strong></p>
<p><strong>160. 音调: 指声音的高低, 由声波的频率决定比如在一般情况下, 男声听起来比较低沉, 而女声听起来会比较尖锐;    (考单选题+判断题)</strong></p>
<p><strong>161. 音强: 指声音的强弱, 由声波的振动幅度决定, 可简单理解为语音信号波形图中的信号幅度;    (考单选题+判断题)</strong></p>
<p><strong>162. 音长: 指声音的长短, 由发音时间的长短决定</strong></p>
<p><strong>163. 语音编码格式: 指按一定格式压缩采样和量化后的数值, 从而降低音频的数据量, 便于音频数据的存储和传输常用的编码格式有PCM(WAV), MP3等   (考单选题+判断题)</strong></p>
<p><strong>164. 按照智能应用场景, 语音数据标注任务可划分为智能家居, 智能会议, 智能客服, 智能车载等;       (考判断题+多选题)</strong></p>
<p><strong>165. 按照语音信号处理研究方向, 语音数据标注任务可划分为语音识别, 语音合成, 说话人识别, 情感识别, 语音分离等;       (考判断题+多选题)</strong></p>
<p><strong>166. 按照音源与拾音器之间的距离, 语音数据标注任务可划分为近场语音, 远场语音;       (考判断题+多选题)</strong></p>
<p><strong>167. 按照语音时长, 语音数据标注任务可划分为短语音, 长语音;    (考单选题+判断题)</strong></p>
<p><strong>169. 按照口音, 语音数据标注任务可划分为普通话, 方言, 带地方口音的普通话等      (考判断题+多选题)</strong></p>
<p><strong>170. 丢帧: 在语音录制过程中, 由于音频设备的问题而表现出的发音卡顿, 比如语音段中某0.1秒内突然没有声音, 0.1秒过后语音又恢复正常, 此现象称为”丢帧”丢帧是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>171. 切音: 在语音录制过程中, 由于过早结束或过晚开始录制导致个别字被截断而表现出的发音不完整, 此现象称为”切音”, 切音是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>172. 吞音: 在说话人发音时, 由于个别字的声母或韵母未完全发音而表现出的发音不完整, 此现象称为”吞音”; 是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>173. 喷麦: 在说话人发音时, 由于距离麦克风太近而表现出的录入语音不清晰, 听起来有明显噗噗的声音, 此现象称为”喷麦”喷麦是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>174. 重音: 在说话人发音时, 语音中出现两个或多个说话人, 他们的音量大小相近且有大段重叠, 无法分清主次, 此现象称为”重音”重音是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>175. 空旷音: 在录制过程中, 由于周围环境较为空旷而表现出来的发音中带有回音, 此现象称为”空旷音”; 空旷音是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>176. 混响: 混响是另一种常见的声学场景与回声不同, 混响是语音经多次反射, 折射后叠加而成的声音混响语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>177. 通常情况下, 丢帧, 切音, 吞音, 喷麦, 重音, 空旷音, 混响等异常语音数据会被认定为无效语音      (考判断题+多选题)</strong></p>
<p><strong>178. 数据和特征决定了机器学习的上限, 模型和算法只是逼近这个上限而已      (考判断题+多选题)</strong></p>
<p><strong>179. 语音学软件Praat, 是一款跨平台的多功能语音学专业软件, 主要用于对数字化的语音信号进行分析, 标注, 处理及合成等实验目前, Praat语音标注常用的标注工具      (考判断题+多选题)</strong></p>
<p><strong>180. 在操作标注软件Praat打开音频文件后, 点击Tab键可以进行播放和暂停      (考判断题+多选题)</strong></p>
<p><strong>181. 在操作标注软件Praat标注完成后, 直接按Ctrl+s保存, 保存后为一个TextGrid文件   (考单选题+判断题)</strong></p>
<p><strong>182. 音频切分是语音标注基础, 需要按照音频波形进行切割, 将有声频段切分出来   (考单选题+判断题)</strong></p>
<p><strong>183. 音频切分时, 切分前后贴合音频波形, 前后留白不能超过0.05S, 贴合音频波形切分   (考单选题+判断题)</strong></p>
<p><strong>184. 音频切分时, 句子静音间隔超过0.1s则需要切分开成两句   (考单选题+判断题)</strong></p>
<p><strong>185. 音频切分时, 非正常人声大段噪音的情况, 中间静音部分超过 0.2S 需要切分开   (考单选题+判断题)</strong></p>
<p><strong>186. 音频切分时, 不同角色层需要切分开   (考单选题+判断题)</strong></p>
<p><strong>187. 标注中的噪音标签是指音频有波形, 但音频内容为非正常对话内容如波形中是电话按键音, 纯唱歌彩铃, 电流杂音等嘈杂音频标记为噪音标签N或一人说话连续的笑声, 哈欠, 呼吸声等作为噪音标签N, 极其轻的声音波形不明显可以不标   (考单选题+判断题)</strong></p>
<p><strong>188. 进行语音角色标注时, 说话角色为客户的标记为客户 C   (考单选题+判断题)</strong></p>
<p><strong>189. 进行语音角色标注时, 说话角色为客服的标记为客服 O   (考单选题+判断题)</strong></p>
<p><strong>190. 进行语音角色标注时, 说话角色为非顾客或者客服音频, 电话录音系统, 电话彩铃出现正常人声, 机器人音频标记其他角色 S   (考单选题+判断题)</strong></p>
<p><strong>191. 进行语音性别标注时, 说话角色男性标记C1,O1, 女性角色C2, O2   (考判断题)</strong></p>
<p><strong>192. 进行背景人声标注时, 背景人声标签主要为远场人说话的音频, 能听清识别的正常转写文本, 无法听清的只标注标签即可, 例如两个人说话, 另一个人在远处说话, 归为背景人声   (考单选题+判断题)</strong></p>
<p><strong>193. 在进行叠音标注时, 重叠标签主要通过音频波形图判断, 所有角色说话清晰, 但波形图上大块重叠, 标注重叠标签P, 标注重叠标签P后, 不能出现文本   (考单选题+判断题)</strong></p>
<p><strong>194. 噪音标注, 噪音标签 N, 波形中是电话按键音, 纯唱歌彩铃, 电流杂音等嘈杂音频标记为噪音标签N   (考单选题+判断题)</strong></p>
<p><strong>195. 常见的语音文件格式类型有: .WAV, .WMA, .MP3, .CDA, .MIDI, .RA等      (考判断题+多选题)</strong></p>
<p><strong>196. 目前(2021年)语音标注主要是用于监督学习   (考单选题+判断题)</strong></p>
<p><strong>197.  TTS(Text-to-Speech, 语音合成), 即”从文本到语音”, 是人机对话的一部分, 让机器能够说话目前在很多电话机器人上的使用很广泛, 而且几乎已经判断不出来是机器人在和你讲话   (考单选题+判断题)</strong></p>
<p><strong>198. ASR(Automatic Speech Recognition, 语音识别), 是将声音转换为文字   (考单选题+判断题)</strong></p>
<p><strong>199. ASR在中文领域有很大的难度, 中文由于其语言博大精深, 而且方言众多, 对于声音转换为文字具有很多不确定性   (考单选题+判断题)</strong></p>
<p><strong>200. 语音处理工具主要包括能实现录音, 混音, 剪辑等功能的软件      (考判断题+多选题)</strong></p>
<p><strong>201. audio-annotator是基于Javascript的 音频 标注工具, 它可以实现无形, 声谱图, 声波进行可视化标注, 通用性强, 应用广泛      (考判断题+多选题)</strong></p>
<p><strong>202. EchoML是一种基于B/S架构的音频标注工具, 便于实现多人协同标注但需要搭建服务器   (考单选题+判断题)</strong></p>
<p><strong>203. 语音识别, 语音合成等智能语音处理技术在单一说话人, 发音规范, 背景噪音良好的情况下已经具有较为突出的表现      (考判断题+多选题)</strong></p>
<p><strong>204. 当前阻碍智能语音处理技术实用化的一大困难即是复杂条件下性能降低的问题在实际生活场景中, 自然发音, 口音, 复杂噪声, 声音混叠等现象随处可见, 导致语音识别性能下降      (考判断题+多选题)</strong></p>
<p><strong>205. 随着深度学习技术的发展, 数据对于训练模型的影响越来越重要, 因此, 生产复杂场景下的智能语音数据无论对于学术研究还是对于企业开发, 均具有重大意义   (考判断题)</strong></p>
<p><strong>206. 语音数据产品生产过程具体包括语音采集, 数据预处理, 语音数据标注, 数据质检与数据交付模块      (考判断题+多选题)</strong></p>
<p><strong>207. 数据清洗, 信息脱敏是常见的数据预处理方法      (考判断题+多选题)</strong></p>
<p><strong>208. 多类型, 大体量的样本空间及高质量数据是人工智能技术精度的重要保障, 语音数据标注是语音数据产品生产流程中的关键环节      (考判断题+多选题)</strong></p>
<p><strong>209. 常见的标注文档存储格式包括XML, TXT, JSON等      (考判断题+多选题)</strong></p>
<p><strong>210. CSV格式的文件是以逗号为分隔符的   (考判断题)</strong></p>
<p><strong>211. LabelHub 是为大型数据标注项目提供更好的管理方式及数据安全保障的数据标注系统, 它的结果文件同时支持CSV, XML, JSON三种格式      (考判断题+多选题)</strong></p>
<p><strong>212. 文本数据异常包括语法类异常, 语义类异常, 覆盖类异常等      (考判断题+多选题)</strong></p>
<p><strong>213. 语法类异常主要包括词法错误, 值域格式错误, 不规则的取值等213. 语法类异常主要包括词法错误, 值域格式错误, 不规则的取值等      (考判断题+多选题)</strong></p>
<p><strong>214. 语义类异常主要包括数据中出现矛盾, 数据中存在重复值和无效的元组等      (考判断题+多选题)</strong></p>
<p><strong>215. 覆盖类异常主要包括数据中出现矛盾, 不规则的取值等   (考判断题)</strong></p>
<p><strong>216. 目前(2021年)文本标注主要是用于监督学习   (考判断题)</strong></p>
<p><strong>217. 文本标注的对象是自然语言文本   (考判断题)</strong></p>
<p><strong>218. 自然语言到人标准是通过图灵测试   (考单选题+判断题)</strong></p>
<p><strong>219. 目前(2021年)最先进的自然语言处理技术是基于深度学习模型的   (考单选题+判断题)</strong></p>
<p><strong>220. 中文文本需要进行分词标注   (考判断题)</strong></p>
<p><strong>221. 标注出一句话中的动词属于词性标注   (考判断题)</strong></p>
<p><strong>222. 词性标注属于序列标注   (考判断题)</strong></p>
<p><strong>223. 分词标注属于序列标注   (考判断题)</strong></p>
<p><strong>224. 标注一句话的情感状态属于属性标注   (考判断题)</strong></p>
<p><strong>225. 文本标注的实体类别常见的有人名PER, 地名LOC和机构名ORG   (考单选题+判断题)</strong></p>
<p><strong>226. 常见的文本标注工具: doccano, YEDDA, Chinese-Annotator, IEPY, DeepDive, BRAT等      (考判断题+多选题)</strong></p>
<p><strong>227. “小明给妈妈洗脚”一句话的直接宾语为脚   (考判断题)</strong></p>
<p><strong>228. WORD文档文件的扩展名是DOC, EXCEL文档文件的扩展名是XLS   (考单选题+判断题)</strong></p>
<p><strong>229. 机器翻译是自然语言处理领域的一个重要课题   (考单选题+判断题)</strong></p>
<p><strong>230. Brat只能在Linux下运行   (考单选题+判断题)</strong></p>
<p><strong>231. IEPY是一个Python开发的开源的语料标准工具   (考单选题+判断题)</strong></p>
<p><strong>232. 文本数据标注的大致流程包括预处理, 标注, 质检和验收      (考判断题+多选题)</strong></p>
<p><strong>233. 文本标注工具的特点扩展性强, 操作便捷, 容错性强, 数据导出格式多样, 支持多语种      (考判断题+多选题)</strong></p>
<p><strong>234. 文本数据标注主要应用的场景包括新零售行业, 广告行业, 客服行业, 公共安全和金融行业等      (考判断题+多选题)</strong></p>
<p><strong>235. 文本标注工具BRAT的主要功能是实体标注和关系标注      (考判断题+多选题)</strong></p>
<p><strong>236. 阅读理解标注的一般过程是标注者快速阅读段落内容, 根据内容提问以及标记问题答案   (考单选题+判断题)</strong></p>
<p><strong>237. 文本标注的结果一般会作为自然语言处理算法的输入   (考判断题)</strong></p>
<p><strong>238. 文本标注包括序列标注, 关系标注和属性标注   (考单选题+判断题)</strong></p>
<p><strong>239. 序列标注包括分词, 实体, 关键字, 韵律和意图理解标注等   (考单选题+判断题)</strong></p>
<p><strong>240. 关系标注所标注关系包括指向关系, 修饰关系, 平行语料等   (考单选题+判断题)</strong></p>
<p><strong>241. Chinese-Annotator是支持中文的文本标注软件   (考单选题+判断题)</strong></p>
<p><strong>242. 韵律标注主要是为了标注出句中字词间的停顿   (考单选题+判断题)</strong></p>
<p><strong>243. 情感标注属于属性标注   (考单选题+判断题)</strong></p>
<p><strong>244. 自然语言对话被誉为人工智能皇冠上的宝石   (考单选题+判断题)</strong></p>
<p><strong>245. 标注需求不能脱离人工智能应用场景   (考单选题+判断题)</strong></p>
<p><strong>246. 总体原则是文本标注过程中必须遵守的基本原则   (考单选题+判断题)</strong></p>
<p><strong>247. 在分词当中遇到一些专有名词时, 无需进行拆分   (考单选题+判断题)</strong></p>
<p><strong>248. 在日常生活中的书籍, 文档等等资料都可以整合处理后变成语料库来进行使用   (考单选题+判断题)</strong></p>
<p><strong>249. 网上抓取到的语料处理难点在于网上的文本数据的用法和教科书所讲有较大差异   (考单选题+判断题)</strong></p>
<p><strong>250. 语料处理过程的工作量大致会占据完整的中文自然语言处理工作量的50%-70%   (考单选题+判断题)</strong></p>
<p><strong>251. 语料处理四个方面: 数据清洗, 分词, 词性标注和去停用词      (考判断题+多选题)</strong></p>
<p><strong>252. 可以结合分词算法来加快文本数据标注的进度   (考单选题+判断题)</strong></p>
<p><strong>253. 分词算法常见的有: 正向最大匹配算法, 逆向最大匹配算法, 最大Ngram分值算法, 全切分算法, 双向最大最小匹配算法等   (考单选题+判断题)</strong></p>
<p><strong>254. 词性标注, 就是给每个词语打标签, 如形容词, 动词, 名词等      (考判断题+多选题)</strong></p>
<p><strong>255. 停用词一般指对文本特征没有任何贡献作用的字词, 比如标点符号, 语气, 人称等一些词      (考判断题+多选题)</strong></p>
<p><strong>256. 有些场景是需要语气词来进行判断情感, 所以去停用词的操作一定要根据场景进行   (考单选题+判断题)</strong></p>
<p><strong>257. 自然语言处理可以在很多领域上进行应用, 如: 机器翻译, 情感分析, 智能问答, 文摘生成, 文本分类, 舆论分析, 知识图谱和销售分析等      (考判断题+多选题)</strong></p>
<p><strong>258. 对于自然语言处理工程来说, 良好的语料标注是项目成功的基础   (考单选题+判断题)</strong></p>
<p><strong>259. 语言学主要包括以下几个分支: 句法学, 语义学, 形态学(词根, 前缀后缀等), 音系学, 语音学, 词汇, 话语分析, 语用学和篇章结构分析等      (考判断题+多选题)</strong></p>
<p><strong>260. 语料标注涵盖在自然语言处理任务的建模和标注两个步骤中, 语料标注过程常常需要在建模和标注之间反复进行迭代, 因为很难一次性建立完美的标注模型      (考判断题+多选题)</strong></p>
<p><strong>261. 应该建立标注标准, 将标注方式细化, 才能保证标注数据的一致性   (考单选题+判断题)</strong></p>
<p><strong>262. 当有多人对相同数据进行标注时, 可以采取交叉标注的方式   (考单选题+判断题)</strong></p>
<p><strong>263. 在标注过程中, 应尽可能使用自动化方式减少标注人员工作量   (考单选题+判断题)</strong></p>
<p><strong>264. 语料库选取应注意代表性, 不能只用单一新闻源构建语料库   (考单选题+判断题)</strong></p>
<p><strong>265. 语料库选取的平衡性要求语料库中的类别组成应该与真实数据中的比例基本一致   (考单选题+判断题)</strong></p>
<p><strong>266. 审核过程最好由参与制定标注标准的人来执行   (考单选题+判断题)</strong></p>
<p><strong>267. 对专业度要求比较高的标注, 最好请从业人员参与标注   (考单选题+判断题)</strong></p>
<p><strong>268. 语义标注中的自定义标签: 意图级别配置, 功能配置和预识别配置等      (考判断题+多选题)</strong></p>
<p><strong>269. 音调包括阴平, 阳平, 上声, 去声和轻声      (考判断题+多选题)</strong></p>
<p><strong>270. 韵律符号#1表示韵律词边界; 韵律符号#2表示韵律短语边界; 韵律符号#3表示语调短语边界; 韵律符号#4表示句末边界      (考判断题+多选题)</strong></p>
<p><strong>271. Chinese-Annotator是一个较为完整的系统, 包括前端, 后台和数据库   (考单选题+判断题)</strong></p>
<p><strong>272. 质量, 一组固有特性满足要求的程度   (考单选题+判断题)</strong></p>
<p><strong>273. 产品, 过程的结果包括了硬件(如发动机机械零件), 软件(如计算机程序, 字典), 流程性材料(如润滑油), 服务(如运输)及其任意组合   (考单选题+判断题)</strong></p>
<p><strong>274. 硬件产品是指由制作的零件和部件组成或由其组装成的产品, 如发动机机械零件   (考单选题+判断题)</strong></p>
<p><strong>275. 软件是指由承载在媒体上的信息组成的智力产品软件能以概念, 记录或程序的形式存在计算机程序是软件产品的一个实例材料的定义   (考单选题+判断题)</strong></p>
<p><strong>276. 服务是指在供方和顾客接口处完成的至少一项活动的结果   (考单选题+判断题)</strong></p>
<p><strong>277. 过程: 将输入转化为输出的相互关联或相互作用的一组活动任何一个过程都由输入, 过程活动和输出三部分组成   (考单选题+判断题)</strong></p>
<p><strong>278. 顾客: 接受产品的组织或个人(狭义: 产品和服务的最终使用者或接受者广义: 要结合过程模型去理解, 任何一个过程输出的接受者都是顾客)      (考判断题+多选题)</strong></p>
<p><strong>279. 质量管理的定义和方针: 质量管理: 在质量方面指挥, 控制, 组织和协调的活动质量方针: 由组织最高管理者正式发布的关于质量方面的全部意图和方向      (考判断题+多选题)</strong></p>
<p><strong>280. 质量管理发展阶段: １检验阶段; 2, 统计质量控制阶段; 3, 全面质量管理阶段; 4, 经营质量管理阶段      (考判断题+多选题)</strong></p>
<p><strong>281. 质量管理的八项管理原则: (1)以顾客为关注焦点(2)领导作用(3)全员参与(4)过程方法(5)管理的系统方法(6)持续改进(7)基于事实的决策方法(8)与供方互利的关系      (考判断题+多选题)</strong></p>
<p><strong>282. PDCA循环(计划—执行—检查—处理)循环又称戴明循环      (考判断题+多选题)</strong></p>
<p><strong>283. 6σ质量管理标准是一种以顾客为导向, 重视策划过程, 重视科学的数据分析, 明确量化的目标的一种持续改进管理模式      (考判断题+多选题)</strong></p>
<p><strong>284. 质量屋定义及其方法, 一个完整的质量屋包括6个部分: (1)顾客需求及其权重,(2)技术需求(3)关系矩阵(4)竞争分析(5)技术需求相关关系矩阵(6)技术评估      (考判断题+多选题)</strong></p>
<p><strong>285.  质量成本管理: 质量成本是为了确保和保证满意的质量而发生的费用以及没有达到满意稍微质量所造成的损失   (考单选题+判断题)</strong></p>
<p><strong>286. 职能组织结构在职能组织结构中, 每一个职能部门可根据它的管理职能对其直接和非直接的下属工作部门下达工作指令   (考单选题+判断题)</strong></p>
<p><strong>287. 线性组织结构中, 每一个工作部门只能对其直接的下属部门下达工作指令, 每一个工作部门也只有一个直接的上级部门, 因此, 每一个工作部门只有唯一一个指令源, 避免了由于矛盾的指令而影响组织系统的运行   (考单选题+判断题)</strong></p>
<p><strong>288. 矩阵组织结构适用于大的组织系统在矩阵组织结构中, 每一项纵向和横向交汇的工作, 指令来自于纵向和横向两个工作部门, 此其指令源为两个   (考单选题+判断题)</strong></p>
<p><strong>289. 进度管理计划为编制, 监督和控制项目进度建立准则和明确活动. 包括: 项目进度模型制定, 进度计划的发布和迭代长度, 准确度, 计量单位, 组织程序链接, 项目进度模型维护, 控制临界值, 绩效测量规则, 确定完成百分比的规则, EVM 技术, 如基准法, 固定公式法, 完成百分比法等   (考单选题+判断题)</strong></p>
<p><strong>290. 紧前关系: FS, FF, SS, SF      (考判断题+多选题)</strong></p>
<p><strong>291. 活动间依赖关系   (考判断题)</strong></p>
<p><strong>292. 强制性依赖关系, 法律或合同要求的或工作的内在性质决定的依赖关系, 往往与客观限制有关      (考判断题+多选题)</strong></p>
<p><strong>293. 选择性依赖关系, 基于具体应用领域的最佳实践或项目的某些特殊性质对活动顺序的要求来创建   (考单选题+判断题)</strong></p>
<p><strong>294. 外部依赖关系, 项目活动与非项目活动之间的依赖关系, 不在项目团队的控制范围内   (考单选题+判断题)</strong></p>
<p><strong>295. 内部依赖关系, 项目活动之间的紧前关系, 在项目团队的控制之中   (考单选题+判断题)</strong></p>
<p><strong>296. 提前量&amp;滞后量(判断题+多选题)</strong></p>
<p><strong>297. 项目进度网络图(紧前关系绘图法PDM, 前导图)+多选题)</strong></p>
<p><strong>298. 估算活动持续时间依据的信息包括: 工作范围, 所需资源类型与技能水平, 估算的资源数量和资源日历      (考判断题+多选题)</strong></p>
<p><strong>299. 边际收益递减规律      (考判断题+多选题)</strong></p>
<p><strong>300. 估算活动持续时间的方法      (考判断题+多选题)</strong></p>
<p><strong>301. 三点估算      (考判断题+多选题)</strong></p>
<p><strong>302. 贝塔分布, Te=(O+4M+P)/6, σ=(P-O)/6      (考判断题+多选题)</strong></p>
<p><strong>303. 三角分布, Te=(O+M+P)/3, σ=(P-O)/6      (考判断题+多选题)</strong></p>
<p><strong>304. 正态分布(68.26%, 95.46%, 99.73%)      (考判断题+多选题)</strong></p>
<p><strong>305. 自下而上估算(成本&amp;准确度最高)      (考判断题+多选题)</strong></p>
<p><strong>306. 储备分析, 储备分析用于确定项目所需的应急储备量和管理储备      (考判断题)</strong></p>
<p><strong>307. 制定进度计划      (考判断题)</strong></p>
<p><strong>308. 进度网络分析CPM      (考判断题)</strong></p>
<p><strong>309. CCM(资源约束型CPM)      (考判断题)</strong></p>
<p><strong>310. 资源平滑, 利用非关键路径上活动的浮动时间, 调整非关键路径上的活动使项目资源数量减少波动      (考判断题)</strong></p>
<p><strong>311. 会绘制分析横道图(甘特图)      (考判断题)</strong></p>
<p><strong>312. 会绘制分析里程碑图      (考判断题)</strong></p>
<p><strong>313. 会绘制分析项目进度网络图      (考判断题)</strong></p>
<br>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
  </entry>
  <entry>
    <title>Android同步源码和编译ROM傻瓜式 (有手就行)</title>
    <url>/Android-compile.html</url>
    <content><![CDATA[<p><strong>本人是用Arch, 顺便来传一下教</strong></p>
<img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c7189d153.jpg" style="width: 200px; height: 200px;">

<a id="more"></a>

<h1 id="第一是-安装Linux-我以Ubuntu和deepin为例子-建议新手用deepin"><a href="#第一是-安装Linux-我以Ubuntu和deepin为例子-建议新手用deepin" class="headerlink" title="第一是 安装Linux 我以Ubuntu和deepin为例子, 建议新手用deepin"></a>第一是 安装Linux 我以Ubuntu和deepin为例子, 建议新手用deepin</h1><p><a href="https://www.bilibili.com/video/BV1aW411C7NR">Ubantu的安装视频</a></p>
<p><a href="https://www.bilibili.com/video/BV1HW411Y73e">Deepin的安装视频</a></p>
<h1 id="第二是-环境搭载"><a href="#第二是-环境搭载" class="headerlink" title="第二是 环境搭载"></a>第二是 环境搭载</h1><p><strong>1.明确自己要开发的android版本 参考 <a href="https://wiki.lineageos.org/">lineageos官方的wiki</a>选择合适的linux发行版(推荐ubuntu 16)推荐而已, 你可以是别的shell,都没问题</strong></p>
<p><strong>2.更新自身ubuntu的软件源  替换到etc/apt/sources.list替换完毕后执行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get update //如果自身网速不好建议换国内源(清华 中科大 阿里)<br></code></pre></td></tr></table></figure>
<p><strong><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">个人建议清华</a></strong><br><strong>deepin就更简单, 直接设置里面换</strong></p>
<p><strong>3.安装jdk, 需要根据开发的android版本选择</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure>

<p><strong>4.安装 软件依赖</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev<br></code></pre></td></tr></table></figure>
<p><strong>4.安装jdk, 需要根据开发的android版本选择</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install openjdk-x-jdk    //x 为jdk版本数字<br></code></pre></td></tr></table></figure>
<p><strong>LineageOS 14.1-15.1: OpenJDK 1.8</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">install openjdk-8-jdk<br></code></pre></td></tr></table></figure>
<p><strong>LineageOS 11.0-13.0: OpenJDK 1.7</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">install openjdk-7-jdk<br></code></pre></td></tr></table></figure>
<h1 id="第三是-安装repo"><a href="#第三是-安装repo" class="headerlink" title="第三是 安装repo"></a>第三是 安装repo</h1><p><strong>(1) 推荐使用mokee开源的 <a href="https://bbs.mokeedev.com/t/topic/21">mokee repo1</a> 或者 <a href="https://tacke.wodemo.com/entry/466371">mokee repo2</a></strong></p>
<p><strong>(2)在终端中输入以下内容, 新建bin文件夹</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir ~/bin<br></code></pre></td></tr></table></figure>
<p><strong>(3)输入以下内容, 将bin文件夹添加到环境变量中</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">PATH=~/bin:$PATH<br></code></pre></td></tr></table></figure>
<p><strong>(4)接着输入以下内容, 下载repo文件到bin文件夹 输入这个请省略下面那一步</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo<br></code></pre></td></tr></table></figure>

<p><strong>如果你是欧洲人, 有钱买梯子 就省略上步直接输入以下命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo<br></code></pre></td></tr></table></figure>
<p><strong>(5)最后输入以下内容, 为repo文件添加运行权限</strong></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">chmod a+x ~<span class="hljs-regexp">/bin/</span>repo<br></code></pre></td></tr></table></figure>
<h1 id="第四是-同步源码"><a href="#第四是-同步源码" class="headerlink" title="第四是 同步源码"></a>第四是 同步源码</h1><p><strong>(1) win+alt+t打开终端, 输入如下, 创建一个文件夹</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir ~/los      //例如: los  名字你可以顺便起<br></code></pre></td></tr></table></figure>
<p><strong>(2) 进入(自己起好名字的文件夹)的文件夹, 输入如下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ~/los         //例如: los 你随便起名字的文件夹<br></code></pre></td></tr></table></figure>
<p><strong>(3) 由于使用repo拉取源码时, 会尝试访问官方的git源更新自己, 但由于是谷歌, 就无法正常访问, 所以在正式拉取前, 我们需要先做点修改打开主目录, 按组合键ctrl+H, 在显示的隐藏文件中, 打开.bashrc文件, 将如下内容复制到你的~/.bashrc最后一行, 保存退出</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;<br></code></pre></td></tr></table></figure>
<p><strong>(4) 获取源码拉取地址</strong><br>访问<a href="https://github.com/LineageOS">lineage的开源地址库</a>点击android, 进入如下界面, 这里就看到了拉取lineage-x.x的命令</p>
<p><strong>(5) 获取源码default</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">repo init -u git://github.com/los/android.git -b lineage-x.x       //例如: los 你随便起名字的文件夹和lineage版本<br></code></pre></td></tr></table></figure>
<p><strong>(6) 输入邮箱和昵称</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git config --global user.email xxxxxx@xxxx   //你的邮箱<br>git config --global user.name xxxxxxxxx     //随便起一个英文昵称<br></code></pre></td></tr></table></figure>
<p><strong>打开lineageOS文件夹 (如果是空的按组合键ctrl+H, 显示隐藏内容)</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c309862a0.jpg"></p>
<p>然后更改<a href="https://mirrors.tuna.tsinghua.edu.cn/help/lineageOS/">链接</a></p>
<h1 id="第五是-拉取源码"><a href="#第五是-拉取源码" class="headerlink" title="第五是 拉取源码"></a>第五是 拉取源码</h1><p><strong>输入</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">repo sync<br></code></pre></td></tr></table></figure>
<p><strong>或者</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">repo sync -c -f -j8 --force-sync --no-clone-bundle<br></code></pre></td></tr></table></figure>
<h1 id="第六是-获取机型device"><a href="#第六是-获取机型device" class="headerlink" title="第六是 获取机型device"></a>第六是 获取机型device</h1><p><strong>(1) 我们进入<a href="https://github.com/LineageOS">lineage的开源项目网站</a></strong></p>
<p><strong>(2) 在搜索框中输入(设备代号), 会看到android_device_(品牌)_(设备代号)这一项</strong></p>
<p><strong>(3) 点击android_device_(品牌)_(设备代号), 就可以看到device的所有内容</strong></p>
<p><strong>(4) 点击右边的Clone or download, 然后复制如图中的蓝色内容, 这就是此device的下载地址</strong></p>
<p><strong>(5) 组合键ctrl+alt+t, 打开终端</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ~/los             //例如: los  你随便起名字的文件夹<br></code></pre></td></tr></table></figure>
<p><strong>(6) 输入如下命令, 回车开始同步</strong></p>
<p>解释一下:git clone就是拷贝到本地的命令, 那段网址就是我们上面复制的地址, -b后面的lineage-x.x,表示lineage-x.x的分支；device/(品牌)/(设备代号)就是要下载到地方的路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git clone https://github.com/LineageOS/android_device_(品牌)_(设备代号).git -b lineage-x.x device/(品牌)/(设备代号) depth=1(可加可不加, 加入同步源码会小点)<br></code></pre></td></tr></table></figure>
<p><strong>(7) 我们需要拉取的项目如下</strong></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4c3097c407.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">android_device_(品牌)_(设备代号)<br><br>android_device_(品牌)_(处理器代号)-common<br><br>android_device_(品牌)_(厂家)_common<br><br>android_kernel_(品牌)_(处理器代号)<br><br>proprietary_vendor_(品牌) <br></code></pre></td></tr></table></figure>
<p><strong>(8) <a href="https://github.com/TheMuppets">vendor需要访问地址</a>然后搜索(你的品牌)就可以找到</strong></p>
<p><strong>(9) 同样和同步其他项目一样</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git clone https://github.com/TheMuppets/proprietary_vendor_(品牌).git -b lineage-x.x vendor/(品牌)<br></code></pre></td></tr></table></figure>
<h1 id="第七是-执行编译"><a href="#第七是-执行编译" class="headerlink" title="第七是 执行编译"></a>第七是 执行编译</h1><p><strong>(1)如果你退出了, 你就按组合键ctrl+alt+t, 打开终端, 输入以下命令, 回车, 进入los             //你随便起名字的文件夹, 没有的话跳过这个环节</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ~/los    //例如: los 你随便起名字的文件夹<br></code></pre></td></tr></table></figure>
<p><strong>(2) 初始化</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">. build/envsetup.sh<br></code></pre></td></tr></table></figure>
<p><strong>(3) 输入如下命令, 回车</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">breakfast xxx  //自己的机型<br></code></pre></td></tr></table></figure>
<p>如果有错误, 就根据错误提示到lineageOS目录检查device, kernel和vendor等是否正确</p>
<p><strong>(4) 输入, 回车, 进行编译</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">brunch xxx    //自己的机型<br></code></pre></td></tr></table></figure>
<p>编译耗费的时间取决于你的电脑配置情况, 所以我不建议用虚拟机, 如果你电脑配置相当牛逼, 当我没说</p>
<p><strong>(5)在我编译时出现了 fatal error: openssl/opensslv.h: No such file or directory 原因是libssl-dev没有安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install libssl-dev<br></code></pre></td></tr></table></figure>
<p><strong>(6) 回到正在编译的终端中, 重新输入如下命令, 等待编译的完成</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">brunch //自己的机型<br></code></pre></td></tr></table></figure>
<p><strong>(7) 编译完成后</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">进入主目录\(你随便起名字的文件夹)\out\target\product\(设备代号)中就可以看到我们编译好的ROM了, 可以复制到手机刷入了<br></code></pre></td></tr></table></figure>
<h1 id="另外设置ccache提高编译速度"><a href="#另外设置ccache提高编译速度" class="headerlink" title="另外设置ccache提高编译速度"></a>另外设置ccache提高编译速度</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export USE_CCACHE=1 <br>export CCACHE_COMPRESS=1<br>ccache -M 50G 或者100G<br></code></pre></td></tr></table></figure>
<p><strong>防止低内存编译出错 设置大小为</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export ANDROID_JACK_VM_ARGS=&quot;-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G&quot;<br></code></pre></td></tr></table></figure>
<h1 id="祝福大家能自己动手做出属于自己的ROM"><a href="#祝福大家能自己动手做出属于自己的ROM" class="headerlink" title="祝福大家能自己动手做出属于自己的ROM"></a>祝福大家能自己动手做出属于自己的ROM</h1><br>



]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>人工智比赛</title>
    <url>/AI-trainer-match.html</url>
    <content><![CDATA[<p><strong>人工智能训练师个人整理</strong></p>
<a id="more"></a>

<h1 id="人工智能训练师-初赛复习资料"><a href="#人工智能训练师-初赛复习资料" class="headerlink" title="人工智能训练师 初赛复习资料"></a>人工智能训练师 初赛复习资料</h1><p><strong>2021.8.12</strong></p>
<p><strong>1. JavaScript Object Notation(JavaScript 对象表示法, JSON是一种基于文本的数据交换格式)      (考判断题+多选题)</strong></p>
<p><strong>2. JSON有两种表示结构, 对象和数组      (考判断题+多选题)</strong></p>
<p><strong>3. JSON对象结构以”{“开始, 以”}”结束中间部分由0或多个以”,”分隔的”key(关键字)/value(值)”对构成, 关键字和值之间以”:”分隔      (考判断题)</strong></p>
<p><strong>4. JSON数组结构以”[“开始, “]”结束中间由0或多个以”,”分隔的值列表组成   (考判断题)</strong></p>
<p><strong>5. Extensible Markup Language(可扩展标记语言, XML), 是一种允许用户对自己的标记进行定义的源语言, 可以用来标记数据, 定义数据类型   (考单选题+判断题+多选题)</strong></p>
<p><strong>6. XML格式的文件由标签对组成   (考判断题)</strong></p>
<p><strong>7. XML格式的文件必须有根元素   (考判断题)</strong></p>
<p><strong>8. XML格式的文件必须有关闭标签   (考判断题)</strong></p>
<p><strong>9. XML格式的文件标签中区分大小写字母   (考判断题)</strong></p>
<p><strong>10. XML属性必须加引号   (考判断题)</strong></p>
<p><strong>11. TXT是微软在操作系统上附带的一种文本格式, 主要存储文本信息(文字信息)   (考判断题)</strong></p>
<p><strong>12. Executable File(可执行文件, EXE File)可以加载到内存中, 并由操作系统加载程序执行, 是可以在操作系统存储空间中浮动定位的可执行程序   (考判断题)</strong></p>
<p><strong>13. DOC是电脑文件常见文件扩展名的一种, 该格式原是纯文字文件使用的, 多见于不同的操作系统中软硬件的使用说明至20世纪90年代, 微软在Office Word中使用了.doc作为扩展名, 并成为了流行的格式   (考单选题+判断题)</strong></p>
<p><strong>14. MOV即QuickTime封装格式(也叫影片格式), 它是Apple公司开发的一种音频, 视频文件封装, 用于存储常用数字媒体类型   (考单选题+判断题)</strong></p>
<p><strong>15. Audio Video Interleaved(音频视频交错格式, AVI)由微软公司于1992年11月推出, 并作为其Windows视频软件一部分的一种多媒体容器格式   (考单选题+判断题)</strong></p>
<p><strong>16. Joint Photographic Experts Group(JPEG)是JPEG标准的产物该标准国际标准化组织制订, 是面向连续色调静止图像的一种压缩标准JPEG格式是最常用的图像文件格式, 后缀名为.jpg或.jpeg   (考单选题+判断题)</strong></p>
<p><strong>17. 逗号分隔值(Comma-Separated Values, CSV)有时也称为字符分隔值, 其文件以纯文本形式存储表格数据(数字和文本)   (考单选题+判断题)</strong></p>
<p><strong>18. CSV文件开头不留空, 以行为单位   (考判断题)</strong></p>
<p><strong>19. CSV文件可含或不含列名, 含列名则居文件第一行   (考单选题+判断题)</strong></p>
<p><strong>20. CSV文件一行数据不跨行, 无空行   (考判断题)</strong></p>
<p><strong>21. CSV文件列内容如存在半角引号(即”), 应替换成半角双引号(“”)转义, 即用半角双引号(即””)将该字段值包含起来   (考单选题+判断题)</strong></p>
<p><strong>22. CSV文件内码格式不限, 可为 ASCII, Unicode 或者其他   (考单选题+判断题)</strong></p>
<p><strong>24. FLASH VIDEO(FLV)流媒体格式是随着Flash MX的推出发展而来的视频格式   (考单选题+判断题)</strong></p>
<p><strong>25. WPS指WPS OFFICEWPS Office是由北京金山办公软件股份有限公司自主研发的一款办公软件套件, 可以实现办公软件最常用的文字, 表格, 演示, PDF阅读等多种功能   (考单选题+判断题+多选题)</strong></p>
<p><strong>26. BLP是一种图片压缩格式, 体积小, 不能直接编辑, 是游戏中模型贴图的应用格式   (考判断题)</strong></p>
<p><strong>27. XLS指Microsoft Excel工作表, 是一种常用的电子表格的格式   (考判断题)</strong></p>
<p><strong>28. 在同一台计算机中, 内存比外存存取速度快   (考判断题)</strong></p>
<p><strong>29. 32位微处理器中的32表示的技术指标是字长   (考判断题)</strong></p>
<p><strong>30. 目前制造计算机所采用的电子器件是超大规模集成电路   (考判断题)</strong></p>
<p><strong>31. Microsoft Office PowerPoint是微软公司的演示文稿软件用户可以在投影仪或者计算机上进行演示, 也可以将演示文稿打印出来, 制作成胶片, 以便应用到更广泛的领域中   (考判断题)</strong></p>
<p><strong>32. 计算机中常用的文本编码类型有ASCII, GB2312, Unicode, UTF-8      (考判断题+多选题)</strong></p>
<p><strong>33. 二进制文件按二进制编码方式来存储文件   (考判断题)</strong></p>
<p><strong>34. 数据以二进制编码方式存储在计算机文件中   (考判断题)</strong></p>
<p><strong>35. 机器学习是一门多领域交叉学科, 涉及概率论, 统计学, 逼近论, 凸分析, 算法复杂度理论等多个领域机器学习专门研究计算机怎样模拟或实现人类的学习行为, 以获取新的知识或技能, 重新组织已有的知识结构使之不断改善自身的性能      (考判断题+多选题)</strong></p>
<p><strong>36. 深度学习是通过建立人工神经网络, 用层次化机制来表示客观世界, 并解释所获取的知识, 例如图像, 声音和文本      (考判断题+多选题)</strong></p>
<p><strong>37. 深度学习的主要方式是监督学习, 无监督学习, 半监督学习和强化学习</strong></p>
<p><strong>38. 监督学习是利用一组已知类别的样本来调整分类器的参数, 使其达到所要求性能的过程, 也称为监督训练或有教师学习   (考判断题)</strong></p>
<p><strong>39. 无监督学习根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题   (考判断题)</strong></p>
<p><strong>40. 半监督学习是监督学习与无监督学习相结合的一种学习方法半监督学习同时使用未标记数据和已标记数据来进行模式识别工作   (考判断题)</strong></p>
<p><strong>41. 强化学习又称再励学习, 评价学习或增强学习, 用于描述和解决智能体在与环境的交互过程中通过学习策略以达成回报最大化或实现特定目标的问题   (考判断题)</strong></p>
<p><strong>42. 智能语音处理技术包括身份识别, 语种识别, 情感识别, 语音分离, 语音合成等   (考多选题)</strong></p>
<p><strong>43. 生物特征识别技术包括步态识别, 声纹识别, 虹膜识别等   (考多选题)</strong></p>
<p><strong>44. 立体视觉是计算机视觉领域的一个重要课题, 它的目的在于重构场景的三维几何信息   (考判断题)</strong></p>
<p><strong>45. 目前的自然语言处理技术未完全达到人类智能   (考判断题)</strong></p>
<p><strong>46. 自然语言处理不一定以经过标注过的数据作为输入   (考判断题)</strong></p>
<p><strong>47. 自然语言处理不一定以有监督学习的方式实现   (考判断题)</strong></p>
<p><strong>48. 自然语言处理可以通过无监督学习的方式实现   (考判断题)</strong></p>
<p><strong>49. 数据预处理是一种数据挖掘技术, 包括数据清洗, 数据集成, 数据归约, 数据变换等多种方法   (考多选题)</strong></p>
<p><strong>50. 在数据挖掘之前使用数据预处理技术先对数据进行一定的处理, 将极大提高数据挖掘的质量, 降低实际数据挖掘所需的时间   (考判断题)</strong></p>
<p><strong>51. 数据变换方法包括数据平滑, 数据聚集, 数据泛化, 数据规范化等   (考多选题)</strong></p>
<p><strong>52. 训练有监督学习模型时会将数据集划分为训练集, 验证集和测试集   (考多选题)</strong></p>
<p><strong>53. 数据分析方法包括聚类分析, 因子分析, 相关分析, 方差分析, 回归分析等   (考多选题)</strong></p>
<p><strong>54. 缺失数据处理方法包括删除含有缺失值的记录, 均值插补, 同类均值插补等   (考多选题)</strong></p>
<p><strong>55. 数据治理是指对于数据采集, 数据清洗, 数据标注到数据交付整个项目生命周期每个阶段进行识别, 度量, 监控, 预警等一系列管理措施   (考多选题)</strong></p>
<p><strong>56. 数据分割是指把逻辑上是统一整体的数据分割成较小的, 可以独立管理的物理单元进行存储, 以便于重构, 重组和恢复, 以提高创建索引和顺序扫描的效率   (考多选题)</strong></p>
<p><strong>57. 数据清洗是指发现并纠正数据文件中可识别错误的最后一道程序, 包括检查数据一致性, 处理无效值和缺失值等   (考单选题+判断题)</strong></p>
<p><strong>58. 为了避免在数据传输过程中数据被窃取, 被复制等, 应对数据传输过程进行压缩, 加密等操作   (考单选题+判断题)</strong></p>
<p><strong>59. 数据一致性检查是根据每个变量的合理取值范围和相互关系, 检查数据是否合乎要求, 以及发现超出正常范围, 逻辑不合理或者相互矛盾的数据, 便于进一步核对和纠正   (考单选题+判断题)</strong></p>
<p><strong>60. 采用区块链的数据标注平台采用强加密算法和分布式技术来保证数据安全   (考单选题+判断题)</strong></p>
<p><strong>61. True Positive(TP) 是指某(些)个正样本被预测判定为正, 此种情况可以称作判断为真的正确情况   (考判断题)</strong></p>
<p><strong>62. True Negative(TN)是指某(些)个负样本被预测判定为负, 此种情况可以称作判断为假的正确情况   (考判断题)</strong></p>
<p><strong>63. False Positive(FP) 是指某(些)个负样本被模型预测为正, 此种情况可以称作判断为真的错误情况, 或称为误报   (考判断题)</strong></p>
<p><strong>64. False Negative(FN)是指某(些)个正样本被模型预测为负; 此种情况可以称作判断为假的错误情况, 或称为漏报   (考判断题)</strong></p>
<p><strong>65. 数据标注员需要具备的基本素质为: 学习力, 专注力, 责任感持续的学习力是标注工作的基础, 有耐心才能坚持在标注行业, 较强专注力可提高个人工作效率      (考判断题+多选题)</strong></p>
<p><strong>66. 数据标注员需要参照数据标注规则   (考判断题)</strong></p>
<p><strong>67. 数据标注员遇到数据标注规则模糊的地方需要进行询问   (考判断题)</strong></p>
<p><strong>68. 数据标注员需要总结经验并及时汇报遇到的问题   (考判断题)</strong></p>
<p><strong>69. 初级数据标注员应具备的职业技能包括具备一定的职业道德规范; 掌握行业基础知识; 具备基础业务能力      (考判断题+多选题)</strong></p>
<p><strong>70. 中级数据标注员应该具备的职业技能包括具备较高的职业道德和一定的从业经验; 具备较高的业务能力和责任心; 具备简单的质检能力      (考判断题+多选题)</strong></p>
<p><strong>71. 高级数据标注员应该具备的职业技能包括具备一定的从业经验; 具备较高的业务能力和责任心; 能独立完成各类业务的示范模板和操作培训; 具备质检能力; 具备团队管理能力      (考判断题+多选题)</strong></p>
<p><strong>72. 数据标注规则的特点包括数据标注规则需要一致; 数据标注规则需要不断完善; 需求方优先规则; 质检优先规则      (考判断题+多选题)</strong></p>
<p><strong>73. 数据标注的应用场景包括自动驾驶, 智能安防, 智慧医疗, 工业4.0, 新零售等   (考多选题)</strong></p>
<p><strong>74. 根据数据标注对象不同, 数据标注可分为文本标注, 语音标注, 图像标注和视频标注   (考多选题)</strong></p>
<p><strong>75. Labelme是一个图像标注软件, 使用 Python 语言编写, 图形界面使用Qt   (考判断题)</strong></p>
<p><strong>76. Labelme能对图像进行多边形, 矩形, 圆形, 多段线, 线段, 点形式, flag 形式的标注      (考判断题+多选题)</strong></p>
<p><strong>77. Labelme可以在Ubuntu, macOS, Windows操作系统上使用   (考判断题)</strong></p>
<p><strong>78. Labelme以JSON文件存储标注信息   (考判断题)</strong></p>
<p><strong>79. LabelImg是一个图像标注软件, 使用 Python 语言编写, 图形界面使用Qt   (考判断题)</strong></p>
<p><strong>80. LabelImg以PASCAL VOC格式(ImageNet使用的格式)的XML文件存储标注信息此外, 它还支持YOLO格式   (考单选题+判断题)</strong></p>
<p><strong>81. Labelbox是一个图像标注软件</strong></p>
<p><strong>82. 常见的图像数据标注类型包括关键点标注, 矩形框标注, 图像分割, 3D框标注, 属性标注等   (考多选题)</strong></p>
<p><strong>83. 矩形框标注是一种对目标对象进行目标检测框标注的简单处理方式, 常用于标注自动驾驶下的人, 车, 物等   (考判断题)</strong></p>
<p><strong>84. 区域标注指是指将图像分成各具特性的区域并提取出感兴趣部分的过程   (考单选题+判断题)</strong></p>
<p><strong>85. 属性标注是用一个或多个标签标注目标物的属性   (考判断题)</strong></p>
<p><strong>86. 关键点标注一般用于人体脸部轮廓, 五官定位, 身体部位和动物头像等   (考多选题)</strong></p>
<p><strong>87. 视频数据标注任务包含视频标签的时间位置, 空间位置和标签信息标注等内容      (考判断题+多选题)</strong></p>
<p><strong>88. 视频源数据管理包含视频信息管理和视频目录管理两大块      (考判断题+多选题)</strong></p>
<p><strong>89. 视频信息管理包含视频上传, 视频修改, 视频查询, 视频删除, 下载视频等功能   (考多选题)</strong></p>
<p><strong>90. 视频目录管理包含添加目录, 删除目录和目录排序功能   (考多选题)</strong></p>
<p><strong>91. 视频数据标注通过语义, 内容等方式标注, 有利于视频数据搜索, 管理和收藏      (考判断题+多选题)</strong></p>
<p><strong>92. 相较于图像数据而言, 图像数据是在一个时间点上的数据, 而视频数据是在一段时间上连续的一系列图像数据的集合, 表达的信息更加丰富, 因此具有更广的应用场景   (考判断题)</strong></p>
<p><strong>93. 视频数据标注目的是对场景中活动目标进行位置, 形状, 动作, 色彩等有关特征进行标注      (考判断题+多选题)</strong></p>
<p><strong>94. 常用的图像数据标注工具包括LabelMe, LabelImg和LabelBox   (考多选题)</strong></p>
<p><strong>95. 目前常见的标注文档存储格式包括JSON, XML, TXT   (考多选题)</strong></p>
<p><strong>96. 图像标注是实现图像分类, 目标检测, 图像分割的基础   (考多选题)</strong></p>
<p><strong>97. ImageNet项目标注了一千四百多万张图像, 举办了八次图像任务挑战赛   (考单选题+判断题)</strong></p>
<p><strong>98. ImageNet项目吸引了全球的参赛队伍通过编写相关算法来完成分类, 检测和定位等子任务   (考单选题+判断题)</strong></p>
<p><strong>99. COCO数据集是一个大型的, 丰富的物体检测, 分割和字幕数据集   (考多选题)</strong></p>
<p><strong>100. MNIST数据集是由0-9手写数字图片和数字标签所组成的   (考单选题+判断题)</strong></p>
<p><strong>101. MNIST数据集由60000个训练样本和10000个测试样本组成   (考单选题+判断题)</strong></p>
<p>*<em>102. MNIST数据集每个样本都是一张28 * 28像素的灰度手写数字图像   (考单选题+判断题)*</em></p>
<p><strong>104. CIFAR-10是一个包含60000张图片的数据集   (考单选题+判断题)</strong></p>
<p>*<em>105. CIFAR-10中, 每个图像为32</em>32的彩色图像   (考单选题+判断题)**</p>
<p><strong>106. CIFAR-100有100个类, 每个类包含600个图像   (考单选题+判断题)</strong></p>
<p><strong>107. CIFAR-100中, 每类各有500个训练图像和100个测试图像      (考判断题+多选题)</strong></p>
<p><strong>108. 在图像数据标注中, 用户的角色可以分为3类, 分别是标注员, 审核员和管理员   (考判断题)</strong></p>
<p><strong>109. 标注员负责对图像数据进行标注   (考判断题)</strong></p>
<p><strong>110. 审核员负责对标注好的数据进行审核   (考判断题)</strong></p>
<p><strong>111. 管理员负责对相关人员进行管理, 并对标注任务进行发放及回收   (考判断题)</strong></p>
<p><strong>112. 图像数据标注流程: 图像获取-&gt;图像前处理-&gt;图像预识别-&gt;图像标注-&gt;结果输出      (考判断题+多选题)</strong></p>
<p><strong>113. 项目不同图像的获取方式也不同, 一般可通过下采集, 网络采集等方式获取所需的图像   (考单选题+判断题)</strong></p>
<p><strong>114. 图像前处理对图像进行查重处理, 将重复的图像删除   (考判断题)</strong></p>
<p><strong>115. 可通过特定的程序, 先对数据做一个预标注, 标注员只需校验标注结果即可, 进而大幅提高标注效率   (考判断题)</strong></p>
<p><strong>116. 在进行标注任务时, 首先要根据标注对象, 标注要求和不同的数据集格式选择合适的标注工具   (考判断题)</strong></p>
<p><strong>117. 图像数据标注产业的蓬勃发展为人工智能行业计算机视觉方向的兴起奠定了扎实的基础   (考判断题)</strong></p>
<p><strong>118. 不同行业对于数据的标注要求有所差异   (考判断题)</strong></p>
<p><strong>119. 自动驾驶行业利用带有标签的数据集来对自动驾驶模型进行训练, 使其对路面情况具备判断能力, 并能做出相应的应对策略   (考判断题)</strong></p>
<p><strong>120. 自动驾驶行业标注内容包括路面中行人识别, 车辆识别和道路识别等      (考判断题+多选题)</strong></p>
<p><strong>121. 智慧医疗行业主要包括对解剖部位或病变部位对应的点线面以及轮廓进行标记, 如CT断层成像数据, 需要根据病理特点标注肺部边界轮廓   (考判断题)</strong></p>
<p><strong>122. 智能安防行业通过对复杂条件下的人脸, 道路, 车辆, 动作的数据采集与标注实现城市道路监控, 车辆人流监测, 公共安全防范等应用      (考判断题+多选题)</strong></p>
<p><strong>123. 区域标注需同时满足均匀性和连通性的条件, 其中均匀性指的是该区域中的所有像素点都满足灰度, 纹理, 彩色等特征的某种相似性准则; 连通性是指在该区域内存在的连接任意两点的路径      (考判断题+多选题)</strong></p>
<p><strong>124. 与矩形框标注相比, 区域标注更加精确, 标注边缘可以是多边形甚至是柔性的, 常用于自动驾驶中的道路识别   (考单选题+判断题)</strong></p>
<p><strong>125. 标注框标注用矩形框, 四边形框框选出目标物      (考判断题+多选题)</strong></p>
<p><strong>126. 关键点标注用一个或多个关键点标注目标物特定局部的位置   (考单选题+判断题)</strong></p>
<p><strong>127. 区域标注用开区域或闭区域分割出目标物的轮廓   (考判断题)</strong></p>
<p><strong>128. 目前关键点标注常用于人脸识别, 人体骨骼检测, 手势确认等方面      (考判断题+多选题)</strong></p>
<p><strong>129. 关键点标注虽然看起来比较简单, 只要在需要标注的地方打点标注就行, 但是实现起来难度非常大, 在图片标注任务中属于高难度标注      (考判断题)</strong></p>
<p><strong>130. 关键点的数量一般较多, 在标注过程中需要搞清楚少则几个, 多则上百个点所代表的含义, 做得多就容易错得多      (考判断题)</strong></p>
<p><strong>131. 关键点判断标注合格的标准不是很明确, 导致标注人员不能检查自己犯的错误      (考判断题)</strong></p>
<p><strong>132. 在人脸关键点标注项目中, 标注的人脸图片通常是二维图片的, 但是需要标注员有三维立体感, 将标注后的图片具有立体效果   (考单选题+判断题)</strong></p>
<p><strong>133. 当遇到遮挡点或不可见点, 关键点标注需要标注人员在标注过程时具有丰富的空间想象能力   (考单选题+判断题)</strong></p>
<p><strong>134. 框标注包括矩形标注, 自由矩形标注, 3D框标注      (考判断题+多选题)</strong></p>
<p><strong>135. 框标注应用方位广泛, 通过拉框的方式, 选定框区域内的内容来对图片的特征进行提取</strong></p>
<p><strong>136. 在对图片进行框标注时, 由于框的图像形状受限, 会导致所标注的范围不够精确的问题      (考判断题)</strong></p>
<p><strong>137. 图像区域标注分为开区域标注和闭区域标注      (考判断题+多选题)</strong></p>
<p><strong>138. 开区域标注常见的标注有: 线标注; 闭区域标注常见的标注有: 曲线标注和多边形标注   (考单选题+判断题+多选题)</strong></p>
<p><strong>139. 针对自动分割对多目标或背景复杂的图像难以奏效, 手工标注极为耗时且标注结果不准确和不可重复这两大问题, 提出了交互式图像分割      (考判断题)</strong></p>
<p><strong>140. 交互式智能图像分割标注针对图像分割标注的预识别算法, 实现通过机器对图像进行智能分割, 再进行人工修边和筛选, 从而大幅提高生产效率, 减少人工成本, 减少人工差错      (考判断题+多选题)</strong></p>
<p><strong>141. 线标注通常用于自动驾驶应用中的车道线标注, 主要用于自动驾驶车辆的道路识别      (考判断题+多选题)</strong></p>
<p><strong>142. 多边形标注较为准确, 避免了大量白色空间的视觉模型偏差, 一般用于标注街景图片, 人物, 动物, 人体部位等      (考判断题+多选题)</strong></p>
<p><strong>147. 采样精度: 指存放一个采样值所使用的比特数采样率和采样精度越大, 记录的波形更接近原始信号, 但同时占用的存储空间也越大      (考判断题)</strong></p>
<p><strong>148. 声道: 声道指输入或输出信号的通道通常用多声道来输入或输出不同的信号   (考单选题+判断题)</strong></p>
<p><strong>149. 信噪比: 信噪比指信号与噪声之间的能量比, 录音时信噪比越高越好   (考单选题+判断题)</strong></p>
<p><strong>150. 声波: 声波是由物体震动产生, 使周围的介子(如空气)产生波动   (考单选题+判断题)</strong></p>
<p><strong>151. 声速: 声波每秒在介质中传播的距离   (考单选题+判断题)</strong></p>
<p><strong>152. 波长: 沿着声波传播方向, 声波震动一周所传播的距离或在波形上相同的相邻两点的距离   (考单选题+判断题)</strong></p>
<p><strong>153. 振幅: 震动物体离开平衡位置的最大距离称为振幅, 通常用A表示   (考单选题+判断题)</strong></p>
<p><strong>154. 分贝: 分贝是增益或衰减单位, 用来描述两个相同物理量之间的相对关系   (考单选题+判断题)</strong></p>
<p><strong>155. TTS(语音合成)即从文本到语音, 是人机对话的一部分, 是指让计算机能够说话   (考单选题+判断题)</strong></p>
<p><strong>156. TTS中最主要的一个指标是自然度, 也就是当我们听见计算机跟我们说话时, 能否区分出了是人还是计算机   (考单选题+判断题)</strong></p>
<p><strong>157. ASR(语音识别)是将声音转换为文字   (考单选题+判断题)</strong></p>
<p><strong>158. 语音标注数据的典型应用场景包括: 智能医疗, 智能驾驶, 智能家居, 智能教育, 智能客服, 机器人等      (考判断题+多选题)</strong></p>
<p><strong>159. 音色/音质: 指能够区分两种不同声音的基本特征, 比如人说话的声音和小提琴的声音在语音信号处理技术中, 人声识别研究常将音色作为重要研究对象;    (考单选题+判断题)</strong></p>
<p><strong>160. 音调: 指声音的高低, 由声波的频率决定比如在一般情况下, 男声听起来比较低沉, 而女声听起来会比较尖锐;    (考单选题+判断题)</strong></p>
<p><strong>161. 音强: 指声音的强弱, 由声波的振动幅度决定, 可简单理解为语音信号波形图中的信号幅度;    (考单选题+判断题)</strong></p>
<p><strong>162. 音长: 指声音的长短, 由发音时间的长短决定</strong></p>
<p><strong>163. 语音编码格式: 指按一定格式压缩采样和量化后的数值, 从而降低音频的数据量, 便于音频数据的存储和传输常用的编码格式有PCM(WAV), MP3等   (考单选题+判断题)</strong></p>
<p><strong>164. 按照智能应用场景, 语音数据标注任务可划分为智能家居, 智能会议, 智能客服, 智能车载等;       (考判断题+多选题)</strong></p>
<p><strong>165. 按照语音信号处理研究方向, 语音数据标注任务可划分为语音识别, 语音合成, 说话人识别, 情感识别, 语音分离等;       (考判断题+多选题)</strong></p>
<p><strong>166. 按照音源与拾音器之间的距离, 语音数据标注任务可划分为近场语音, 远场语音;       (考判断题+多选题)</strong></p>
<p><strong>167. 按照语音时长, 语音数据标注任务可划分为短语音, 长语音;    (考单选题+判断题)</strong></p>
<p><strong>169. 按照口音, 语音数据标注任务可划分为普通话, 方言, 带地方口音的普通话等      (考判断题+多选题)</strong></p>
<p><strong>170. 丢帧: 在语音录制过程中, 由于音频设备的问题而表现出的发音卡顿, 比如语音段中某0.1秒内突然没有声音, 0.1秒过后语音又恢复正常, 此现象称为”丢帧”丢帧是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>171. 切音: 在语音录制过程中, 由于过早结束或过晚开始录制导致个别字被截断而表现出的发音不完整, 此现象称为”切音”, 切音是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>172. 吞音: 在说话人发音时, 由于个别字的声母或韵母未完全发音而表现出的发音不完整, 此现象称为”吞音”; 是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>173. 喷麦: 在说话人发音时, 由于距离麦克风太近而表现出的录入语音不清晰, 听起来有明显噗噗的声音, 此现象称为”喷麦”喷麦是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>174. 重音: 在说话人发音时, 语音中出现两个或多个说话人, 他们的音量大小相近且有大段重叠, 无法分清主次, 此现象称为”重音”重音是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>175. 空旷音: 在录制过程中, 由于周围环境较为空旷而表现出来的发音中带有回音, 此现象称为”空旷音”; 空旷音是语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>176. 混响: 混响是另一种常见的声学场景与回声不同, 混响是语音经多次反射, 折射后叠加而成的声音混响语音标注过程中, 常见的语音异常之一   (考单选题+判断题)</strong></p>
<p><strong>177. 通常情况下, 丢帧, 切音, 吞音, 喷麦, 重音, 空旷音, 混响等异常语音数据会被认定为无效语音      (考判断题+多选题)</strong></p>
<p><strong>178. 数据和特征决定了机器学习的上限, 模型和算法只是逼近这个上限而已      (考判断题+多选题)</strong></p>
<p><strong>179. 语音学软件Praat, 是一款跨平台的多功能语音学专业软件, 主要用于对数字化的语音信号进行分析, 标注, 处理及合成等实验目前, Praat语音标注常用的标注工具      (考判断题+多选题)</strong></p>
<p><strong>180. 在操作标注软件Praat打开音频文件后, 点击Tab键可以进行播放和暂停      (考判断题+多选题)</strong></p>
<p><strong>181. 在操作标注软件Praat标注完成后, 直接按Ctrl+s保存, 保存后为一个TextGrid文件   (考单选题+判断题)</strong></p>
<p><strong>182. 音频切分是语音标注基础, 需要按照音频波形进行切割, 将有声频段切分出来   (考单选题+判断题)</strong></p>
<p><strong>183. 音频切分时, 切分前后贴合音频波形, 前后留白不能超过0.05S, 贴合音频波形切分   (考单选题+判断题)</strong></p>
<p><strong>184. 音频切分时, 句子静音间隔超过0.1s则需要切分开成两句   (考单选题+判断题)</strong></p>
<p><strong>185. 音频切分时, 非正常人声大段噪音的情况, 中间静音部分超过 0.2S 需要切分开   (考单选题+判断题)</strong></p>
<p><strong>186. 音频切分时, 不同角色层需要切分开   (考单选题+判断题)</strong></p>
<p><strong>187. 标注中的噪音标签是指音频有波形, 但音频内容为非正常对话内容如波形中是电话按键音, 纯唱歌彩铃, 电流杂音等嘈杂音频标记为噪音标签N或一人说话连续的笑声, 哈欠, 呼吸声等作为噪音标签N, 极其轻的声音波形不明显可以不标   (考单选题+判断题)</strong></p>
<p><strong>188. 进行语音角色标注时, 说话角色为客户的标记为客户 C   (考单选题+判断题)</strong></p>
<p><strong>189. 进行语音角色标注时, 说话角色为客服的标记为客服 O   (考单选题+判断题)</strong></p>
<p><strong>190. 进行语音角色标注时, 说话角色为非顾客或者客服音频, 电话录音系统, 电话彩铃出现正常人声, 机器人音频标记其他角色 S   (考单选题+判断题)</strong></p>
<p><strong>191. 进行语音性别标注时, 说话角色男性标记C1,O1, 女性角色C2, O2   (考判断题)</strong></p>
<p><strong>192. 进行背景人声标注时, 背景人声标签主要为远场人说话的音频, 能听清识别的正常转写文本, 无法听清的只标注标签即可, 例如两个人说话, 另一个人在远处说话, 归为背景人声   (考单选题+判断题)</strong></p>
<p><strong>193. 在进行叠音标注时, 重叠标签主要通过音频波形图判断, 所有角色说话清晰, 但波形图上大块重叠, 标注重叠标签P, 标注重叠标签P后, 不能出现文本   (考单选题+判断题)</strong></p>
<p><strong>194. 噪音标注, 噪音标签 N, 波形中是电话按键音, 纯唱歌彩铃, 电流杂音等嘈杂音频标记为噪音标签N   (考单选题+判断题)</strong></p>
<p><strong>195. 常见的语音文件格式类型有: .WAV, .WMA, .MP3, .CDA, .MIDI, .RA等      (考判断题+多选题)</strong></p>
<p><strong>196. 目前(2021年)语音标注主要是用于监督学习   (考单选题+判断题)</strong></p>
<p><strong>197.  TTS(Text-to-Speech, 语音合成), 即”从文本到语音”, 是人机对话的一部分, 让机器能够说话目前在很多电话机器人上的使用很广泛, 而且几乎已经判断不出来是机器人在和你讲话   (考单选题+判断题)</strong></p>
<p><strong>198. ASR(Automatic Speech Recognition, 语音识别), 是将声音转换为文字   (考单选题+判断题)</strong></p>
<p><strong>199. ASR在中文领域有很大的难度, 中文由于其语言博大精深, 而且方言众多, 对于声音转换为文字具有很多不确定性   (考单选题+判断题)</strong></p>
<p><strong>200. 语音处理工具主要包括能实现录音, 混音, 剪辑等功能的软件      (考判断题+多选题)</strong></p>
<p><strong>201. audio-annotator是基于Javascript的 音频 标注工具, 它可以实现无形, 声谱图, 声波进行可视化标注, 通用性强, 应用广泛      (考判断题+多选题)</strong></p>
<p><strong>202. EchoML是一种基于B/S架构的音频标注工具, 便于实现多人协同标注但需要搭建服务器   (考单选题+判断题)</strong></p>
<p><strong>203. 语音识别, 语音合成等智能语音处理技术在单一说话人, 发音规范, 背景噪音良好的情况下已经具有较为突出的表现      (考判断题+多选题)</strong></p>
<p><strong>204. 当前阻碍智能语音处理技术实用化的一大困难即是复杂条件下性能降低的问题在实际生活场景中, 自然发音, 口音, 复杂噪声, 声音混叠等现象随处可见, 导致语音识别性能下降      (考判断题+多选题)</strong></p>
<p><strong>205. 随着深度学习技术的发展, 数据对于训练模型的影响越来越重要, 因此, 生产复杂场景下的智能语音数据无论对于学术研究还是对于企业开发, 均具有重大意义   (考判断题)</strong></p>
<p><strong>206. 语音数据标注是语音数据产品生产流程中的一个环节, 总的来说, 语音数据产品生产包含了从语音采集到数据交付的各个环节, 各个环节之间相辅相成, 紧紧相扣语音数据产品生产过程具体包括语音采集, 数据预处理, 语音数据标注, 数据质检与数据交付模块      (考判断题+多选题)</strong></p>
<p><strong>207. 数据清洗, 信息脱敏是常见的数据预处理方法      (考判断题+多选题)</strong></p>
<p><strong>208. 多类型, 大体量的样本空间及高质量数据是人工智能技术精度的重要保障, 语音数据标注是语音数据产品生产流程中的关键环节      (考判断题+多选题)</strong></p>
<p><strong>209. 常见的标注文档存储格式包括XML, TXT, JSON等      (考判断题+多选题)</strong></p>
<p><strong>210. CSV格式的文件是以逗号为分隔符的   (考判断题)</strong></p>
<p><strong>211. LabelHub 是为大型数据标注项目提供更好的管理方式及数据安全保障的数据标注系统, 它的结果文件同时支持CSV, XML, JSON三种格式      (考判断题+多选题)</strong></p>
<p><strong>212. 文本数据异常包括语法类异常, 语义类异常, 覆盖类异常等      (考判断题+多选题)</strong></p>
<p><strong>213. 语法类异常主要包括词法错误, 值域格式错误, 不规则的取值等      (考判断题+多选题)</strong></p>
<p><strong>214. 语义类异常主要包括数据中出现矛盾, 数据中存在重复值和无效的元组等      (考判断题+多选题)</strong></p>
<p><strong>215. 覆盖类异常主要包括数据中出现矛盾, 不规则的取值等   (考判断题)</strong></p>
<p><strong>216. 目前(2021年)文本标注主要是用于监督学习   (考判断题)</strong></p>
<p><strong>217. 文本标注的对象是自然语言文本   (考判断题)</strong></p>
<p><strong>218. 自然语言处理技术达到人类智能的标准是通过图灵测试   (考单选题+判断题)</strong></p>
<p><strong>219. 目前(2021年)最先进的自然语言处理技术是基于深度学习模型的   (考单选题+判断题)</strong></p>
<p><strong>220. 中文文本需要进行分词标注   (考判断题)</strong></p>
<p><strong>221. 标注出一句话中的动词属于词性标注   (考判断题)</strong></p>
<p><strong>222. 词性标注属于序列标注   (考判断题)</strong></p>
<p><strong>223. 分词标注属于序列标注   (考判断题)</strong></p>
<p><strong>224. 标注一句话的情感状态属于属性标注   (考判断题)</strong></p>
<p><strong>225. 文本标注的实体类别常见的有人名PER, 地名LOC和机构名ORG   (考单选题+判断题)</strong></p>
<p><strong>226. 常见的文本标注工具包括doccano, YEDDA, Chinese-Annotator, IEPY, DeepDive, BRAT等      (考判断题+多选题)</strong></p>
<p><strong>227. “小明给妈妈洗脚”一句话的直接宾语为脚   (考判断题)</strong></p>
<p><strong>228. WORD文档文件的扩展名是DOC, EXCEL文档文件的扩展名是XLS   (考单选题+判断题)</strong></p>
<p><strong>229. 机器翻译是自然语言处理领域的一个重要课题   (考单选题+判断题)</strong></p>
<p><strong>230. Brat只能在Linux下运行   (考单选题+判断题)</strong></p>
<p><strong>231. IEPY是一个Python开发的开源的语料标准工具   (考单选题+判断题)</strong></p>
<p><strong>232. 文本数据标注的大致流程包括预处理, 标注, 质检和验收      (考判断题+多选题)</strong></p>
<p><strong>233. 优秀的文本标注工具应具备的特点包括扩展性强, 操作便捷, 容错性强, 数据导出格式多样, 支持多语种      (考判断题+多选题)</strong></p>
<p><strong>234. 文本数据标注主要应用的场景包括新零售行业, 广告行业, 客服行业, 公共安全和金融行业等      (考判断题+多选题)</strong></p>
<p><strong>235. 文本标注工具BRAT的主要功能是实体标注和关系标注      (考判断题+多选题)</strong></p>
<p><strong>236. 阅读理解标注的一般过程是标注者快速阅读段落内容, 根据内容提问以及标记问题答案   (考单选题+判断题)</strong></p>
<p><strong>237. 文本标注的结果一般会作为自然语言处理算法的输入   (考判断题)</strong></p>
<p><strong>238. 文本标注包括序列标注, 关系标注和属性标注   (考单选题+判断题)</strong></p>
<p><strong>239. 序列标注包括分词, 实体, 关键字, 韵律和意图理解标注等   (考单选题+判断题)</strong></p>
<p><strong>240. 关系标注所标注关系包括指向关系, 修饰关系, 平行语料等   (考单选题+判断题)</strong></p>
<p><strong>241. Chinese-Annotator是支持中文的文本标注软件   (考单选题+判断题)</strong></p>
<p><strong>242. 韵律标注主要是为了标注出句中字词间的停顿   (考单选题+判断题)</strong></p>
<p><strong>243. 情感标注属于属性标注   (考单选题+判断题)</strong></p>
<p><strong>244. 自然语言对话被誉为人工智能皇冠上的宝石   (考单选题+判断题)</strong></p>
<p><strong>245. 标注需求不能脱离人工智能应用场景   (考单选题+判断题)</strong></p>
<p><strong>246. 总体原则是文本标注过程中必须遵守的基本原则   (考单选题+判断题)</strong></p>
<p><strong>247. 在分词当中遇到一些专有名词时, 无需进行拆分   (考单选题+判断题)</strong></p>
<p><strong>248. 在日常生活中的书籍, 文档等等资料都可以整合处理后变成语料库来进行使用   (考单选题+判断题)</strong></p>
<p><strong>249. 网上抓取到的语料处理难点在于网上的文本数据的用法和教科书所讲有较大差异   (考单选题+判断题)</strong></p>
<p><strong>250. 语料处理过程的工作量大致会占据完整的中文自然语言处理工作量的50%-70%   (考单选题+判断题)</strong></p>
<p><strong>251. 语料处理主要包括四个方面: 数据清洗, 分词, 词性标注和去停用词      (考判断题+多选题)</strong></p>
<p><strong>252. 可以结合分词算法来加快文本数据标注的进度   (考单选题+判断题)</strong></p>
<p><strong>253. 分词算法常见的有: 正向最大匹配算法, 逆向最大匹配算法, 最大Ngram分值算法, 全切分算法, 双向最大最小匹配算法等   (考单选题+判断题)</strong></p>
<p><strong>254. 词性标注, 就是给每个词语打标签, 如形容词, 动词, 名词等      (考判断题+多选题)</strong></p>
<p><strong>255. 停用词一般指对文本特征没有任何贡献作用的字词, 比如标点符号, 语气, 人称等一些词      (考判断题+多选题)</strong></p>
<p><strong>256. 有些场景是需要语气词来进行判断情感, 所以去停用词的操作一定要根据场景进行   (考单选题+判断题)</strong></p>
<p><strong>257. 自然语言处理可以在很多领域上进行应用, 如: 机器翻译, 情感分析, 智能问答, 文摘生成, 文本分类, 舆论分析, 知识图谱和销售分析等      (考判断题+多选题)</strong></p>
<p><strong>258. 对于自然语言处理工程来说, 良好的语料标注是项目成功的基础   (考单选题+判断题)</strong></p>
<p><strong>259. 语言学主要包括以下几个分支: 句法学, 语义学, 形态学(词根, 前缀后缀等), 音系学, 语音学, 词汇, 话语分析, 语用学和篇章结构分析等      (考判断题+多选题)</strong></p>
<p><strong>260. 语料标注涵盖在自然语言处理任务的建模和标注两个步骤中, 语料标注过程常常需要在建模和标注之间反复进行迭代, 因为很难一次性建立完美的标注模型      (考判断题+多选题)</strong></p>
<p><strong>261. 应该建立标注标准, 将标注方式细化, 才能保证标注数据的一致性   (考单选题+判断题)</strong></p>
<p><strong>262. 当有多人对相同数据进行标注时, 可以采取交叉标注的方式   (考单选题+判断题)</strong></p>
<p><strong>263. 在标注过程中, 应尽可能使用自动化方式减少标注人员工作量   (考单选题+判断题)</strong></p>
<p><strong>264. 语料库选取应注意代表性, 不能只用单一新闻源构建语料库   (考单选题+判断题)</strong></p>
<p><strong>265. 语料库选取的平衡性要求语料库中的类别组成应该与真实数据中的比例基本一致   (考单选题+判断题)</strong></p>
<p><strong>266. 审核过程最好由参与制定标注标准的人来执行   (考单选题+判断题)</strong></p>
<p><strong>267. 对专业度要求比较高的标注, 最好请从业人员参与标注   (考单选题+判断题)</strong></p>
<p><strong>268. 语义标注中的自定义标签包括意图级别配置, 功能配置和预识别配置等      (考判断题+多选题)</strong></p>
<p><strong>269. 音调包括阴平, 阳平, 上声, 去声和轻声      (考判断题+多选题)</strong></p>
<p><strong>270. 韵律符号#1表示韵律词边界; 韵律符号#2表示韵律短语边界; 韵律符号#3表示语调短语边界; 韵律符号#4表示句末边界      (考判断题+多选题)</strong></p>
<p><strong>271. Chinese-Annotator是一个较为完整的系统, 包括前端, 后台和数据库   (考单选题+判断题)</strong></p>
<p><strong>272. 质量, 一组固有特性满足要求的程度   (考单选题+判断题)</strong></p>
<p><strong>273. 产品, 过程的结果包括了硬件(如发动机机械零件), 软件(如计算机程序, 字典), 流程性材料(如润滑油), 服务(如运输)及其任意组合   (考单选题+判断题)</strong></p>
<p><strong>274. 硬件产品是指由制作的零件和部件组成或由其组装成的产品, 如发动机机械零件   (考单选题+判断题)</strong></p>
<p><strong>275. 软件是指由承载在媒体上的信息组成的智力产品软件能以概念, 记录或程序的形式存在计算机程序是软件产品的一个实例材料的定义   (考单选题+判断题)</strong></p>
<p><strong>276. 服务是指在供方和顾客接口处完成的至少一项活动的结果   (考单选题+判断题)</strong></p>
<p><strong>277. 过程: 将输入转化为输出的相互关联或相互作用的一组活动任何一个过程都由输入, 过程活动和输出三部分组成   (考单选题+判断题)</strong></p>
<p><strong>278. 顾客: 接受产品的组织或个人(狭义: 产品和服务的最终使用者或接受者     广义: 要结合过程模型去理解, 任何一个过程输出的接受者都是顾客)      (考判断题+多选题)</strong></p>
<p><strong>279. 质量管理的定义和方针: 质量管理: 在质量方面指挥, 控制, 组织和协调的活动质量方针: 由组织最高管理者正式发布的关于质量方面的全部意图和方向      (考判断题+多选题)</strong></p>
<p><strong>280. 质量管理发展阶段: １检验阶段; 2, 统计质量控制阶段; 3, 全面质量管理阶段; 4, 经营质量管理阶段      (考判断题+多选题)</strong></p>
<p><strong>281. 质量管理的八项管理原则: (1)以顾客为关注焦点(2)领导作用(3)全员参与(4)过程方法(5)管理的系统方法(6)持续改进(7)基于事实的决策方法(8)与供方互利的关系      (考判断题+多选题)</strong></p>
<p><strong>282. PDCA循环(计划—执行—检查—处理)循环又称戴明循环      (考判断题+多选题)</strong></p>
<p><strong>283. 6σ质量管理标准是一种以顾客为导向, 重视策划过程, 重视科学的数据分析, 明确量化的目标的一种持续改进管理模式      (考判断题+多选题)</strong></p>
<p><strong>284. 质量屋定义及其方法, 一个完整的质量屋包括6个部分: (1)顾客需求及其权重, 即质量屋的”什么(What)”(2)技术需求(最终产品特性), 即质量屋的”如何(How)”(3)关系矩阵, 即顾客需求和技术需求之间的相关程度关系矩阵(4)竞争分析, 站在顾客的角度, 对本企业的产品和市场上其它竞争者的产品在满足顾客需求方面进行评估(5)技术需求相关关系矩阵, 质量屋的屋项(6)技术评估, 对技术需求进行竞争性评估, 确定技术需求的重要度和目标值等      (考判断题+多选题)</strong></p>
<p><strong>285.  质量成本管理: 质量成本是为了确保和保证满意的质量而发生的费用以及没有达到满意稍微质量所造成的损失   (考单选题+判断题)</strong></p>
<p><strong>286. 职能组织结构在职能组织结构中, 每一个职能部门可根据它的管理职能对其直接和非直接的下属工作部门下达工作指令   (考单选题+判断题)</strong></p>
<p><strong>287. 线性组织结构中, 每一个工作部门只能对其直接的下属部门下达工作指令, 每一个工作部门也只有一个直接的上级部门, 因此, 每一个工作部门只有唯一一个指令源, 避免了由于矛盾的指令而影响组织系统的运行   (考单选题+判断题)</strong></p>
<p><strong>288. 矩阵组织结构适用于大的组织系统在矩阵组织结构中, 每一项纵向和横向交汇的工作, 指令来自于纵向和横向两个工作部门, 此其指令源为两个   (考单选题+判断题)</strong></p>
<p><strong>289. 进度管理计划为编制, 监督和控制项目进度建立准则和明确活动. 包括: 项目进度模型制定, 进度计划的发布和迭代长度, 准确度, 计量单位, 组织程序链接, 项目进度模型维护, 控制临界值, 绩效测量规则, 确定完成百分比的规则, EVM 技术, 如基准法, 固定公式法, 完成百分比法等   (考单选题+判断题)</strong></p>
<p><strong>290. 紧前关系: FS, FF, SS, SF      (考判断题+多选题)</strong></p>
<p><strong>291. 活动间依赖关系   (考判断题)</strong></p>
<p><strong>292. 强制性依赖关系, 法律或合同要求的或工作的内在性质决定的依赖关系, 往往与客观限制有关      (考判断题+多选题)</strong></p>
<p><strong>293. 选择性依赖关系, 基于具体应用领域的最佳实践或项目的某些特殊性质对活动顺序的要求来创建   (考单选题+判断题)</strong></p>
<p><strong>294. 外部依赖关系, 项目活动与非项目活动之间的依赖关系, 不在项目团队的控制范围内   (考单选题+判断题)</strong></p>
<p><strong>295. 内部依赖关系, 项目活动之间的紧前关系, 在项目团队的控制之中   (考单选题+判断题)</strong></p>
<p><strong>296. 提前量&amp;滞后量(判断题+多选题)</strong></p>
<p><strong>297. 项目进度网络图(紧前关系绘图法PDM, 前导图)   (考判断题+多选题)</strong></p>
<p><strong>298. 估算活动持续时间依据的信息包括: 工作范围, 所需资源类型与技能水平, 估算的资源数量和资源日历      (考判断题+多选题)</strong></p>
<p><strong>299. 边际收益递减规律      (考判断题+多选题)</strong></p>
<p><strong>300. 估算活动持续时间的方法      (考判断题+多选题)</strong></p>
<p><strong>301. 三点估算      (考判断题+多选题)</strong></p>
<p><strong>302. 贝塔分布, Te=(O+4M+P)/6, σ=(P-O)/6      (考判断题+多选题)</strong></p>
<p><strong>303. 三角分布, Te=(O+M+P)/3, σ=(P-O)/6      (考判断题+多选题)</strong></p>
<p><strong>304. 正态分布(68.26%, 95.46%, 99.73%)      (考判断题+多选题)</strong></p>
<p><strong>305. 自下而上估算(成本&amp;准确度最高)      (考判断题+多选题)</strong></p>
<p><strong>306. 储备分析, 储备分析用于确定项目所需的应急储备量和管理储备      (考判断题)</strong></p>
<p><strong>307. 制定进度计划      (考判断题)</strong></p>
<p><strong>308. 进度网络分析CPM      (考判断题)</strong></p>
<p><strong>309. CCM(资源约束型CPM)      (考判断题)</strong></p>
<p><strong>310. 资源平滑, 利用非关键路径上活动的浮动时间, 调整非关键路径上的活动使项目资源数量减少波动      (考判断题)</strong></p>
<p><strong>311. 会绘制分析横道图(甘特图)      (考判断题)</strong></p>
<p><strong>312. 会绘制分析里程碑图      (考判断题)</strong></p>
<p><strong>313. 会绘制分析项目进度网络图      (考判断题)</strong></p>
<br>]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
  </entry>
  <entry>
    <title>大数据 MaoReduce</title>
    <url>/MaoReduce.html</url>
    <content><![CDATA[<p><strong>MaoReduce个人整理</strong></p>
<a id="more"></a>

<h1 id="MaoReduce-定义"><a href="#MaoReduce-定义" class="headerlink" title="MaoReduce 定义"></a>MaoReduce 定义</h1><ul>
<li><p>分布式运算程序的编程框,用于开发基于 Hadoop的数据分析的核心框架</p>
</li>
<li><p>使用: 用户编写的业务逻辑代码和自带默认组件一个完整的分布式运算程序, 并发运行在一个 Hadoop集群上</p>
</li>
</ul>
<ul>
<li><p>优点: </p>
<ul>
<li><p>易于编写: 用户只关心, 业务逻辑 实现框架的接口</p>
</li>
<li><p>良好的扩展性: 可以动态增加服务器, 解决动态资源不够的问题</p>
</li>
<li><p>高容错性: 任何一台机器挂掉, 可以将任意转移到其它节点上</p>
</li>
<li><p>适合海量数据计算 (TB/PB) 几千台服务器共同计算</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>缺点: </p>
<ul>
<li><p>不擅长实时计算 Mysql</p>
</li>
<li><p>不擅长流式计算 Sparkstreaming flink</p>
</li>
<li><p>不擅长DAG有向无环图计算 spark</p>
</li>
</ul>
</li>
</ul>
<h2 id="MaoReduce运算程序一般分Map阶段和Reduce阶段-两个阶段"><a href="#MaoReduce运算程序一般分Map阶段和Reduce阶段-两个阶段" class="headerlink" title="MaoReduce运算程序一般分Map阶段和Reduce阶段 两个阶段"></a>MaoReduce运算程序一般分Map阶段和Reduce阶段 两个阶段</h2><ul>
<li><p>Map阶段的并发MapTask, 完全并发运行, 互不相干</p>
</li>
<li><p>Reduce阶段的并发ReduceTask, 完全互不相干, 但是它们的数据依赖于上一个阶段的所有MapTask并发实例的输出</p>
</li>
<li><p>MaoReduce编程模型只能包含一个Map阶段和Reduce阶段, 如果用户的业务逻辑非常复杂, 那就只能多个MaoReduce程序, 串行运行</p>
</li>
</ul>
<h2 id="MapReduce进程"><a href="#MapReduce进程" class="headerlink" title="MapReduce进程"></a>MapReduce进程</h2><ul>
<li><p>MrAppMaster: 负责整个程序的过程调度及状态协调</p>
</li>
<li><p>MapTask: 负责Map阶段的整个数据处理流程</p>
</li>
<li><p>ReduceTask: 负责Reduce阶段的整个数据处理流程</p>
</li>
</ul>
<h2 id="常用数据序列化类型"><a href="#常用数据序列化类型" class="headerlink" title="常用数据序列化类型"></a>常用数据序列化类型</h2><table>
<thead>
<tr>
<th>Java类型</th>
<th>Hadoop Writable</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean</td>
<td>BooleanWritable</td>
</tr>
<tr>
<td>Byte</td>
<td>ByteWritable</td>
</tr>
<tr>
<td>Int</td>
<td>IntWritable</td>
</tr>
<tr>
<td>Float</td>
<td>FloatWritable</td>
</tr>
<tr>
<td>Long</td>
<td>LongWritable</td>
</tr>
<tr>
<td>Double</td>
<td>DoubleWritable</td>
</tr>
<tr>
<td>String</td>
<td>Text</td>
</tr>
<tr>
<td>Map</td>
<td>MapWritable</td>
</tr>
<tr>
<td>Array</td>
<td>ArrayWritable</td>
</tr>
<tr>
<td>Null</td>
<td>NullWritable</td>
</tr>
</tbody></table>
<h2 id="统计-次数信息"><a href="#统计-次数信息" class="headerlink" title="统计 次数信息"></a>统计 次数信息</h2><p><strong>用到的txt数据</strong></p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">Stitch</span> <span class="hljs-comment">Stitch</span> <span class="hljs-comment">Stitch</span> <br><span class="hljs-comment">626</span><br><span class="hljs-comment">Angel Angel Angel Angel Angel</span> <span class="hljs-comment">Angel</span><br><span class="hljs-comment">624</span><br><span class="hljs-comment">Reuben</span> <span class="hljs-comment">Reuben</span> <br><span class="hljs-comment">625</span><br></code></pre></td></tr></table></figure>
<h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><p><strong>(1). 将MapTask传给我们的文本内容先转换成String</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Stitch Stitch Stitch</span> <br></code></pre></td></tr></table></figure>
<p><strong>(2). 根据空格将一行切分成单词</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Stitch</span> <br><span class="hljs-attribute">Stitch</span> <br><span class="hljs-attribute">Stitch</span> <br></code></pre></td></tr></table></figure>
<p><strong>(3). 将单词输入为&lt;单词, 1&gt;</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Stitch</span>, <span class="hljs-number">1</span><br><span class="hljs-attribute">Stitch</span>, <span class="hljs-number">1</span><br><span class="hljs-attribute">Stitch</span>, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<h2 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h2><p><strong>(1). 汇总各个key的个数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># value  key</span><br><br>Stitch, <span class="hljs-number">1</span><br>Stitch, <span class="hljs-number">1</span><br>Stitch, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p><strong>(2). 输出该key的总次数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># value  key</span><br><br>Stitch, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>

<p><strong>Driver</strong></p>
<p><strong>(1). 获取配置信息, 获取job对象实例</strong></p>
<p><strong>(2). 指定本程序的jar保所在的本地路径</strong></p>
<p><strong>(3). 关联Mapper/Reducer业务类</strong></p>
<p><strong>(4). 指定Mapper输出数据的kv类型</strong></p>
<p><strong>(5). 指定最终输出的数据的kv类型</strong></p>
<p><strong>(6). 指定job的输入原始文件所在目录</strong></p>
<p><strong>(7). 指定job的输出结果所在目录</strong></p>
<p><strong>(8). 提交作业</strong></p>
<br>




]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>大数据分析师 (比赛)</title>
    <url>/Big-data-analyst.html</url>
    <content><![CDATA[<p><strong>大数据比赛文档</strong></p>
<a id="more"></a>

<h1 id="1-安装数据库-0-4分"><a href="#1-安装数据库-0-4分" class="headerlink" title="1. 安装数据库(0/4分)"></a>1. 安装数据库(0/4分)</h1><p><strong><a href="https://download.csdn.net/download/qq_44948696/28206428">安装mysql的链接</a></strong>,把它放在home或者你知道的地方, 指行以下代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># tar -tzvf解压文件到当前文件夹 -f解压 v日志</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># tar -zxvf mysql-8.0.26-el7-x86_64.tar.gz </span><br><br> <span class="hljs-comment"># 进入root目录下  </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /root/</span><br><br> <span class="hljs-comment"># 查看隐藏</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># ls -a</span><br><br> <span class="hljs-comment"># 用vim或者vi编辑这个目录</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim .bash_profile</span><br><br> <span class="hljs-comment"># 编辑成这样 MYSQL_HOME是自定义名字</span><br> export MYSQL_HOME=/home/sdq/Music/mysql<span class="hljs-literal">-8</span>.<span class="hljs-number">0.26</span><span class="hljs-literal">-el7-x86_64</span>/<br> <span class="hljs-comment"># 在PATH=$PATH:$HOME后面加 /bin:$MYSQL_HOME/bin/</span><br> PATH=<span class="hljs-variable">$PATH:</span><span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$MYSQL_BIN</span>/bin/<br><br> <span class="hljs-comment"># 初始化</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mysqld --initialize </span><br><br> <span class="hljs-comment"># 安装</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mysqld install Mysql </span><br><br> <span class="hljs-comment"># 启动</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># service Mysql start </span><br><br> <span class="hljs-comment"># 登陆mysql</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mysql -u root -p </span><br></code></pre></td></tr></table></figure>
<p>考核条件如下：<br><strong>(1) 环境中已经安装mysql-community-server, 关闭mysql开机自启服务(0/1)分</strong></p>
<ul>
<li>解释: 这里是已经安装 mysql-community-server 只需要关闭mysql开机自启就行了</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 关闭MySql启动服务</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># systemctl disable mysqld </span><br><br> <span class="hljs-comment"># 一定要重启才生效</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># reboot</span><br><br> <span class="hljs-comment"># 这是验证mysql的 显示ERROR 2002 (HY000)说明已关闭</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mysql</span><br></code></pre></td></tr></table></figure>
<p><strong>(2) 开启MySQL服务(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 关闭MySql启动服务</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># service mysqld start </span><br></code></pre></td></tr></table></figure>
<p><strong>(3) 判断mysqld.log日志下是否生成初临时密码(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 判断mysqld.log日志下是否生成初临时密码</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># grep &#x27;temporary password&#x27; /var/log/mysqld.log </span><br></code></pre></td></tr></table></figure>
<p><strong>(4) 设置mysql数据库本地root用户密码为123456(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 为root用户设置密码</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mysqladmin -u root password 123456 </span><br></code></pre></td></tr></table></figure>
<h1 id="2-Hive基础环境配置-0-6分"><a href="#2-Hive基础环境配置-0-6分" class="headerlink" title="2. Hive基础环境配置(0/6分)"></a>2. Hive基础环境配置(0/6分)</h1><p>考核条件如下：<br><strong>(1) 将Hive安装包解压到指定路径/usr/hive (安装包存放于/usr/package277/) (0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 打开 /usr/package277/ 没有路径就新建文件夹</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /usr/package277/</span><br><br> <span class="hljs-comment"># 安装包存放于/usr/package277/只需要到这里找到 然后解压到指定路径/usr/hive 联系的话</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /usr/hive</span><br></code></pre></td></tr></table></figure>
<p><strong>(2) 配置环境变量$HIVE_HOME,将bin目录加入PATH系统变量, 注意生效变量(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 为root用户设置密码</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mysqladmin -u root password 123456</span><br><br> <span class="hljs-comment"># 配置环境变量HIVE_HOME</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim /root/.bash_profile</span><br><br> <span class="hljs-comment"># 编辑成这样 HIVE_HOME是自定义名字</span><br> export HIVE_HOME=/usr/hive/apache<span class="hljs-literal">-hive-3</span>.<span class="hljs-number">1.2</span><span class="hljs-literal">-bin</span>/<br> <span class="hljs-comment"># 在PATH=$PATH:$HOME后面加 :$HIVE_HOME/bin/</span><br> PATH=<span class="hljs-variable">$PATH:</span><span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$MYSQL_BIN</span>/bin/:<span class="hljs-variable">$HIVE_HOME</span>/bin/<br><br> <span class="hljs-comment"># 生效变量</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># source /root/.bash_profiles</span><br></code></pre></td></tr></table></figure>
<p><strong>(3) 修改HIVE运行环境, 配置Hadoop安装路径HADOOP_HOME(0/1)分</strong></p>
<p>要安装Hadoop首先配个<a href>jdk8</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 配置hadoop 首先配jdk8</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># tar -zxvf jdk-8u301-linux-aarch64.tar.gz</span><br><br> <span class="hljs-comment"># 配置环境变量JAVA_HOME</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim /root/.bash_profile</span><br><br> <span class="hljs-comment"># 编辑成这样 JAVA_HOME是自定义名字</span><br> export JAVA_HOME=/home/sdq/Music/jdk1.<span class="hljs-number">8.0</span>_301/<span class="hljs-number">26</span><span class="hljs-literal">-el7-x86_64</span>/<br> <span class="hljs-comment"># 在PATH=$PATH:$HOME后面加 /bin:$JAVA_HOME/bin/</span><br> PATH=<span class="hljs-variable">$PATH:</span><span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$MYSQL_BIN</span>/bin/:<span class="hljs-variable">$HIVE_HOME</span>/bin/:<span class="hljs-variable">$JAVA_HOME</span>/bin/<br><br> <span class="hljs-comment"># 生效变量</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># source /root/.bash_profiles</span><br><br> <span class="hljs-comment"># 验证</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># java</span><br></code></pre></td></tr></table></figure>

<p>然后再安装Hadoop</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 安装hadoop</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># tar -zxvf hadoop-3.3.1.tar.gz</span><br><br> <span class="hljs-comment"># 配置环境变量HADOOP_HOME</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim /root/.bash_profile</span><br><br> <span class="hljs-comment"># 编辑成这样 JAVA_HOME是自定义名字</span><br> export HADOOP_HOME=/home/sdq/Music/hadoop<span class="hljs-literal">-3</span>.<span class="hljs-number">3.1</span>/<br> <span class="hljs-comment"># 在PATH=$PATH:$HOME后面加 /bin:$JAVA_HOME/bin/</span><br> PATH=<span class="hljs-variable">$PATH:</span><span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$MYSQL_BIN</span>/bin/:<span class="hljs-variable">$HIVE_HOME</span>/bin/:<span class="hljs-variable">$JAVA_HOME</span>/bin/:<span class="hljs-variable">$HADOOP_HOME</span>/bin/:<span class="hljs-variable">$HADOOP_HOME</span>/sbin/<br><br> <span class="hljs-comment"># 生效变量</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># source /root/.bash_profiles</span><br><br> <span class="hljs-comment"># 验证</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># hadoop</span><br></code></pre></td></tr></table></figure>
<p><strong>(4) 修改HIVE运行环境, 配置Hive配置文件存放路径HIVE_CONF_DIR(0/1)分</strong></p>
<p>重新解压apache-hive-3.1.2-bin.tar.gz最好改个名字再解压</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 改名为再解压 或者解压后改名</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># tar -zxvf apache-hive-3.1.2-bin.tar.gz</span><br> <span class="hljs-comment"># 改名为hive</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mv apache-hive-3.1.2-bin/ hive</span><br><br> <span class="hljs-comment"># [二选一] 然后查看一下有没有 没有再自己用vim建 用cp复制一个hive-env.sh.template 取名字为hive-env.sh</span><br> [<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cp hive-env.sh.template hive-env.sh</span><br><br> <span class="hljs-comment"># [二选一] 然后cd到conf 改hive-env.sh.template为hive-env.sh</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mv hive-env.sh.template hive-env.sh</span><br><br> <span class="hljs-comment"># 配置环境变量HIVE_CONF_DIR</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim hive-env.sh</span><br><br> <span class="hljs-comment"># 配置hive-env.sh文件 编辑 HIVE_CONF_DIR</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># export HIVE_CONF_DIR=/home/sdq/Music/hive/conf/</span><br></code></pre></td></tr></table></figure>
<p><strong>(5) 修改HIVE运行环境, 配置Hive运行资源库路径HIVE_AUX_JARS_PATH(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># cd进入conf文件夹</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /usr/hive/apache-hive-3.1.2-bin/conf/</span><br><br> <span class="hljs-comment"># 找到hive-site.xml进行修改 </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim hive-site.xml</span><br> <span class="hljs-comment"># 里面有 # export HIVE_AUX_JARS_PATH= 把注释解了 然后加上$HIVE_HOME/lib/</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># export HIVE_AUX_JARS_PATH=$HIVE_HOME/lib/</span><br></code></pre></td></tr></table></figure>
<p><strong>(6) 解决jline的版本冲突, 将$HIVE_HOME/lib/jline-1.12.jar同步至$HOADOOP_HOME/lib下(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 复制到$HOADOOP_HOME/lib</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># scp -r $HIVE_HOME/lib/jline-2.12.jar $HOADOOP_HOME/lib/   </span><br></code></pre></td></tr></table></figure>
<h1 id="3-配置HIVE元数据至MySQL-0-6分"><a href="#3-配置HIVE元数据至MySQL-0-6分" class="headerlink" title="3. 配置HIVE元数据至MySQL(0/6分)"></a>3. 配置HIVE元数据至MySQL(0/6分)</h1><p>考核条件如下：<br><strong>(1) 驱动JDBC拷贝至hive安装目录对应lib下 (依赖包存放于/usr/package277/) (0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 因为依赖包不是存放于/usr/package277/ 只需要拷贝到hive安装目录的lib下</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># scp -r /home/sdq/Music/hive/lib/jline-2.12.jar ./lib/    </span><br></code></pre></td></tr></table></figure>
<p><strong>(2) 配置元数据数据存储位置为/user/hive_remote/warehouse(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 没有该目录就自己mkdir创建一个 -p是递归建立目录</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mkdir -p /user/hive_remote/warehouse/</span><br><br> <span class="hljs-comment"># 检查目录</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /user/hive_remote/warehouse/</span><br></code></pre></td></tr></table></figure>
<p><strong>(3) 配置数据库连接为MySQL(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># cd进入conf文件夹</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /home/sdq/Music/hive/conf</span><br><br> <span class="hljs-comment"># 找到hive-env.sh进行修改 </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim hive-env.sh </span><br><br></code></pre></td></tr></table></figure>
<p><strong>(4) 配置连接JDBC的URL地址主机名及默认端口号3306, 数据库为hive, 如不存在自行创建, ssl连接方式为false(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># cd进入conf文件夹</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /usr/hive/apache-hive-3.1.2-bin/conf/</span><br><br> <span class="hljs-comment"># 找到hive-site.xml进行修改 </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim hive-site.xml</span><br>   &lt;property&gt;<br>        &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;<br>        &lt;<span class="hljs-literal">--</span> 配置连接JDBC的URL地址主机名及默认端口号<span class="hljs-number">3306</span> ssl连接方式为false <span class="hljs-literal">--</span>&gt;<br>        &lt;value&gt;jdbc:mysql://[<span class="hljs-type">IP</span>地址]:<span class="hljs-number">3306</span>/hive?useSSL=false&lt;/value&gt;<br>    &lt;/property&gt;<br></code></pre></td></tr></table></figure>
<p><strong>(5) 配置数据库连接用户(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># cd进入conf文件夹</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /usr/hive/apache-hive-3.1.2-bin/conf/</span><br><br> <span class="hljs-comment"># 找到hive-site.xml进行修改 </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim hive-site.xml</span><br>    &lt;property&gt;<br>        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;<br>        &lt;value&gt;用户名&lt;/value&gt;<br>    &lt;/property&gt;<br></code></pre></td></tr></table></figure>
<p><strong>(6) 配置数据库连接密码(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># cd进入conf文件夹</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /usr/hive/apache-hive-3.1.2-bin/conf/</span><br><br> <span class="hljs-comment"># 找到hive-site.xml进行修改 </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim hive-site.xml</span><br>    &lt;property&gt;<br>        &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;<br>        &lt;value&gt;密码&lt;/value&gt;<br>    &lt;/property&gt;<br></code></pre></td></tr></table></figure>
<h1 id="4-配置HIVE客户端-0-3分"><a href="#4-配置HIVE客户端-0-3分" class="headerlink" title="4. 配置HIVE客户端(0/3分)"></a>4. 配置HIVE客户端(0/3分)</h1><p>考核条件如下：<br><strong>(1) 配置元数据存储位置为/user/hive_remote/warehouse(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 没有该目录就自己mkdir创建一个 -p是递归建立目录</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mkdir -p /user/hive_remote/warehouse/</span><br><br> <span class="hljs-comment"># 检查目录</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /user/hive_remote/warehouse/</span><br></code></pre></td></tr></table></figure>
<p><strong>(2) 关闭本地metastore模式(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure>
<p><strong>(3) 配置指向metastore服务的主机为slave1, 端口为9083(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># cd进入conf文件夹</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># cd /usr/hive/apache-hive-3.1.2-bin/conf/</span><br><br> <span class="hljs-comment"># 找到hive-site.xml进行修改 </span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># vim hive-site.xml</span><br>            &lt;property&gt;<br>                &lt;name&gt;hive.metastore.uris&lt;/name&gt;<br>                &lt;value&gt;thrift://[<span class="hljs-type">IP</span>地址]:<span class="hljs-number">9083</span>&lt;/value&gt;<br>            &lt;/property&gt;<br></code></pre></td></tr></table></figure>
<h1 id="5-启动Hive-0-2分"><a href="#5-启动Hive-0-2分" class="headerlink" title="5. 启动Hive(0/2分)"></a>5. 启动Hive(0/2分)</h1><p>考核条件如下：<br><strong>(1) 服务器端初始化数据库, 启动metastore服务(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 启动metastore服务并且指定端口</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># hive --service metastore -p 9083 &amp;</span><br></code></pre></td></tr></table></figure>
<p><strong>(2) 客户端开启进入hive, 创建hive数据库(0/1)分</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"> <span class="hljs-comment"># 为root用户设置密码</span><br>[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># mysqladmin -u root password 123456 </span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>小程序 全局配置文件</title>
    <url>/Applet-Global-profile.html</url>
    <content><![CDATA[<p><strong>小程序学习笔记</strong></p>
<a id="more"></a>

<h1 id="全局配置-app-json"><a href="#全局配置-app-json" class="headerlink" title="全局配置 app.json"></a>全局配置 app.json</h1><h2 id="pages字段"><a href="#pages字段" class="headerlink" title="pages字段"></a>pages字段</h2><p><strong>用处: 描述小程序所以页面的路径</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 该字段用来表明子页面的</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// 子页面 首页</span><br>        <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 增加页面 减少页面也同理</span><br>        <span class="hljs-string">&quot;pages/sdq/sdq&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 子页面 日志</span><br>        <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h2 id="window字段"><a href="#window字段" class="headerlink" title="window字段"></a>window字段</h2><p><strong>用处: 定义小程序所有页面的顶部背景颜色, 文字颜色等等</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 该字段用来表明子页面的</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 下拉 loading 的样式</span><br>        <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏背景颜色</span><br>        <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题文字内容</span><br>        <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;史迪奇的博客&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题颜色</span><br>        <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 下拉刷新</span><br>        <span class="hljs-attr">&quot;enablePullDownRefresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sitemaplocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">navigationBarBackgroundColor</td>
<td align="left">HexColor</td>
<td align="left">#000000</td>
<td align="left">导航栏背景颜色</td>
</tr>
<tr>
<td align="left">navigationBarTextStyle</td>
<td align="left">string</td>
<td align="left">white</td>
<td align="left">导航栏标题颜色, 仅支持 black / white</td>
</tr>
<tr>
<td align="left">navigationBarTitleText</td>
<td align="left">string</td>
<td align="left">导航栏标题文字内容</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">navigationStyle</td>
<td align="left">string</td>
<td align="left">default</td>
<td align="left">导航栏样式, 仅支持以下值: default 默认样式custom 自定义导航栏, 只保留右上角胶囊按钮</td>
</tr>
<tr>
<td align="left">backgroundColor</td>
<td align="left">HexColor</td>
<td align="left">#ffffff</td>
<td align="left">窗口的背景色</td>
</tr>
<tr>
<td align="left">backgroundTextStyle</td>
<td align="left">string</td>
<td align="left">dark</td>
<td align="left">下拉 loading 的样式, 仅支持 dark / light</td>
</tr>
<tr>
<td align="left">backgroundColorTop</td>
<td align="left">string</td>
<td align="left">#ffffff</td>
<td align="left">顶部窗口的背景色</td>
</tr>
<tr>
<td align="left">backgroundColorBottom</td>
<td align="left">string</td>
<td align="left">#ffffff</td>
<td align="left">底部窗口的背景色</td>
</tr>
<tr>
<td align="left">enablePullDownRefresh</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="left">是否开启全局的下拉刷新详见 Page.onPullDownRefresh</td>
</tr>
<tr>
<td align="left">onReachBottomDistance</td>
<td align="left">number</td>
<td align="left">50</td>
<td align="left">页面上拉触底事件触发时距页面底部距离, 单位为 px 详见 Page.onReachBottom</td>
</tr>
<tr>
<td align="left">pageOrientation</td>
<td align="left">string</td>
<td align="left">portrait</td>
<td align="left">屏幕旋转设置, 支持 auto / portrait / landscape 详见 响应显示区域变化</td>
</tr>
</tbody></table>
<h2 id="tabbar字段"><a href="#tabbar字段" class="headerlink" title="tabbar字段"></a>tabbar字段</h2><p><strong>用处: 定义小程序所有页面的顶部背景颜色, 文字颜色等等</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// list要两包括两个以上才生效</span><br>  <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-comment">// 首页</span><br>    <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-comment">// 给文章名字</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-comment">// 在同级创一个sdz的文件夹然后放图片在里面 </span><br>     <span class="hljs-comment">// 点击前的图标</span><br>    <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdq/_sdq.png&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-comment">// 点击后的图标</span><br>    <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdq/sdq.png&quot;</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/sdz/sdz&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdz/_sdq.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdz/sdq.png&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="right">必填</th>
<th align="left">默认值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">color</td>
<td align="left">HexColor</td>
<td align="right">是</td>
<td align="left">tab 上的文字默认颜色, 仅支持十六进制颜色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">selectedColor</td>
<td align="left">HexColor</td>
<td align="right">是</td>
<td align="left">tab 上的文字选中时的颜色, 仅支持十六进制颜色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">backgroundColor</td>
<td align="left">HexColor</td>
<td align="right">是</td>
<td align="left">tab 的背景色, 仅支持十六进制颜色</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">borderStyle</td>
<td align="left">string</td>
<td align="right">否</td>
<td align="left">black    tabbar 上边框的颜色,  仅支持 black / white</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">list</td>
<td align="left">Array</td>
<td align="right">是</td>
<td align="left">tab 的列表, 详见 list 属性说明, 最少 2 个、最多 5 个 tab</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">position</td>
<td align="left">string</td>
<td align="right">否</td>
<td align="left">bottom    tabBar 的位置, 仅支持 bottom / top</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">custom</td>
<td align="left">boolean</td>
<td align="right">否</td>
<td align="left">false    自定义 tabBar, 见详情</td>
<td align="left"></td>
</tr>
</tbody></table>
<br>



]]></content>
      <categories>
        <category>小程序开发</category>
      </categories>
  </entry>
  <entry>
    <title>小程序 组键(快速入门)</title>
    <url>/Applet-assembly.html</url>
    <content><![CDATA[<p><strong>小程序学习笔记</strong></p>
<a id="more"></a>

<h1 id="基础组键"><a href="#基础组键" class="headerlink" title="基础组键"></a><a href="https://weui.io/">基础组键</a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs wxml">&lt;view class&#x3D;&quot;container&quot;&gt;<br>&lt;!-- type 用于定义图标类型 只能规定范围的类型 除了这些其他用图片 --&gt;<br>&lt;icon type&#x3D;&quot;success_no_circle&quot;&gt;&lt;&#x2F;inco&gt;<br>&lt;&#x2F;view&gt;<br></code></pre></td></tr></table></figure>
<h2 id="基础内容组键"><a href="#基础内容组键" class="headerlink" title="基础内容组键"></a>基础内容组键</h2><ul>
<li><p><a href="https://weui.io/#article">Article</a></p>
</li>
<li><p><a href="https://weui.io/#badge">Badge</a></p>
</li>
<li><p><a href="https://weui.io/#flex">Flex</a></p>
</li>
<li><p><a href="https://weui.io/#footer">Footer</a></p>
</li>
<li><p><a href="https://weui.io/#gallery">Gallery</a></p>
</li>
<li><p><a href="https://weui.io/#grid">Grid</a></p>
</li>
<li><p><a href="https://weui.io/#lcons">lcons</a></p>
</li>
<li><p><a href="https://weui.io/#loading">Loading</a></p>
</li>
<li><p><a href="https://weui.io/#panel">Panel</a></p>
</li>
<li><p><a href="https://weui.io/#preview">Preview</a></p>
</li>
<li><p><a href="https://weui.io/#progress">Progress</a></p>
</li>
</ul>
<h2 id="表单组键"><a href="#表单组键" class="headerlink" title="表单组键"></a>表单组键</h2><ul>
<li><p><a href="https://weui.io/#button">Button</a></p>
</li>
<li><p><a href="https://weui.io/#form">Form</a></p>
</li>
<li><p><a href="https://weui.io/#list">List</a></p>
</li>
<li><p><a href="https://weui.io/#slider">Slider</a></p>
</li>
<li><p><a href="https://weui.io/#uploader">Uploader</a></p>
</li>
</ul>
<h2 id="操作反馈组件"><a href="#操作反馈组件" class="headerlink" title="操作反馈组件"></a>操作反馈组件</h2><ul>
<li><p><a href="https://weui.io/#actionsheet">Actionsheet</a></p>
</li>
<li><p><a href="https://weui.io/#dialog">Dialog</a></p>
</li>
<li><p><a href="https://weui.io/#half-screen-dialog">Halt-screen Dialog</a></p>
</li>
<li><p><a href="https://weui.io/#msg">Msg</a></p>
</li>
<li><p><a href="https://weui.io/#picker">Picker</a></p>
</li>
<li><p><a href="https://weui.io/#toast">Toast</a></p>
</li>
<li><p><a href="https://weui.io/#top-tips">TopTips</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>小程序开发</category>
      </categories>
  </entry>
  <entry>
    <title>小程序 布局类组件(快速入门)</title>
    <url>/Applet-flex.html</url>
    <content><![CDATA[<p><strong>小程序学习笔记</strong></p>
<a id="more"></a>

<h1 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h1><br>]]></content>
      <categories>
        <category>小程序开发</category>
      </categories>
  </entry>
  <entry>
    <title>小程序 模板语法</title>
    <url>/Applet-WXML.html</url>
    <content><![CDATA[<p><strong>小程序学习笔记</strong></p>
<a id="more"></a>

<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h2 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h2><p><strong>wxml代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- text 相当于 span标签 行内元素 不会换行 --&gt;</span><br><span class="hljs-comment">&lt;!-- view 相当于 div标签 块级元素 会换行 --&gt;</span><br><span class="hljs-comment">&lt;!-- checkbox 相当于 复选框标签 --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 字符串类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;string&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 数字number类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;number&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 布尔Boolean类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;Boolean&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 对象objeact类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;customise.Sname&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;customise.Snumber&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;customise.Sdeterrence&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 在标签的属性中使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">data-num</span>=<span class="hljs-string">&quot;&#123;&#123;number&#125;&#125;&quot;</span>&gt;</span> 自定义属性 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用布尔类型充当属性 checked --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&#123;&#123;Schecked&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">checkbox</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>js代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">string</span>: <span class="hljs-string">&quot;我叫史迪奇&quot;</span>,<br>        <span class="hljs-attr">number</span>: <span class="hljs-number">333</span>,<br>        <span class="hljs-title class_">Boolean</span>: <span class="hljs-literal">false</span>,<br><br>    <span class="hljs-attr">customise</span>: &#123;<br>        <span class="hljs-title class_">Sname</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>        <span class="hljs-title class_">Snumber</span>: <span class="hljs-number">626</span>,<br>        <span class="hljs-title class_">Sdeterrence</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-title class_">Schecked</span>: <span class="hljs-literal">false</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p><strong>表达式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 数字运算 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;3-2&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 字符串拼接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;&quot;s&quot;+&quot;d&quot;+&quot;q&quot;&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 逻辑运算 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> &#123;&#123;11%2===0 ? &#x27;偶数&#x27; : &quot;奇数&quot;&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h2 id="列表循环"><a href="#列表循环" class="headerlink" title="列表循环"></a>列表循环</h2><p><strong>wxml代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- wx.for=&quot;&#123;&#123;数组或者对象&#125;&#125;&quot; --&gt;</span><br><span class="hljs-comment">&lt;!-- wx.for-item=&quot;循环项的名称&quot; --&gt;</span><br><span class="hljs-comment">&lt;!-- wx.for-index=&quot;循环项的索引&quot; --&gt;</span><br><span class="hljs-comment">&lt;!-- wx.key=&quot;唯一的值&quot; 用来提高列表渲染性能 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- wx.kry 绑定普通字符串时 该字符串名称是循环数组中的的对象唯一属性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- wx:key = &quot;*this&quot; 表示该数组为普通数组 *this表示循环项 --&gt;</span><br><br><span class="hljs-comment">&lt;!-- wx.for-item=&quot;item&quot; wx:for-index=&quot;index&quot; 数组嵌套循环 注意: 绑定名称不能崇名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> </span><br>wx.for-item=&quot;item&quot; <br>wx:for-index=&quot;index&quot;<br>wx:key=&quot;id&quot; &gt; <br>    索引:&#123;&#123;index&#125;&#125;<br>    值:&#123;&#123;item.name&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>js代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">string</span>: <span class="hljs-string">&quot;我叫史迪奇&quot;</span>,<br>        <span class="hljs-attr">number</span>: <span class="hljs-number">333</span>,<br>        <span class="hljs-title class_">Boolean</span>: <span class="hljs-literal">false</span>,<br><br>    <span class="hljs-attr">customise</span>: &#123;<br>        <span class="hljs-title class_">Sname</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>        <span class="hljs-title class_">Snumber</span>: <span class="hljs-number">626</span>,<br>        <span class="hljs-title class_">Sdeterrence</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-title class_">Schecked</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">list</span>:[<br>        &#123;<br>            <span class="hljs-attr">id</span>:<span class="hljs-number">6</span>,<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;鲁本&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;625实验品&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">id</span>:<span class="hljs-number">5</span>,<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Reuben&quot;</span><br>        &#125;<br>    ]<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h2 id="对象循环"><a href="#对象循环" class="headerlink" title="对象循环"></a>对象循环</h2><p><strong>wxml代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- wx.for=&quot;&#123;&#123;对象&#125;&#125;&quot; wx.for-item=&quot;对象的值(key)&quot;  wx:for-index=&quot;对象的属性(value)&quot; --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;customise&#125;&#125;&quot;</span> </span><br>wx.for-item=&quot;value&quot; <br>wx:for-index=&quot;kry&quot;<br>wx:key=&quot;Snumber&quot; &gt; <br>    索引:&#123;&#123;key&#125;&#125;<br>    值:&#123;&#123;value&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>js代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">string</span>: <span class="hljs-string">&quot;我叫史迪奇&quot;</span>,<br>        <span class="hljs-attr">number</span>: <span class="hljs-number">333</span>,<br>        <span class="hljs-title class_">Boolean</span>: <span class="hljs-literal">false</span>,<br><br>    <span class="hljs-attr">customise</span>: &#123;<br>        <span class="hljs-title class_">Sname</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>        <span class="hljs-title class_">Snumber</span>: <span class="hljs-number">626</span>,<br>        <span class="hljs-title class_">Sdeterrence</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-title class_">Schecked</span>: <span class="hljs-literal">false</span>,<br>    ]<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<p><strong>语句</strong></p>
<h2 id="组件属性"><a href="#组件属性" class="headerlink" title="组件属性"></a>组件属性</h2><p><strong>用处: 定义小程序所有页面的顶部背景颜色, 文字颜色等等</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 该字段用来表明子页面的</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 下拉 loading 的样式</span><br>        <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏背景颜色</span><br>        <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题文字内容</span><br>        <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;史迪奇的博客&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题颜色</span><br>        <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 下拉刷新</span><br>        <span class="hljs-attr">&quot;enablePullDownRefresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sitemaplocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h2 id="组件属性-1"><a href="#组件属性-1" class="headerlink" title="组件属性"></a>组件属性</h2><p><strong>用处: 定义小程序所有页面的顶部背景颜色, 文字颜色等等</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 该字段用来表明子页面的</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 下拉 loading 的样式</span><br>        <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏背景颜色</span><br>        <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题文字内容</span><br>        <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;史迪奇的博客&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题颜色</span><br>        <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 下拉刷新</span><br>        <span class="hljs-attr">&quot;enablePullDownRefresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sitemaplocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<br>




]]></content>
      <categories>
        <category>小程序开发</category>
      </categories>
  </entry>
  <entry>
    <title>小程序 逻辑与界面(快速入门)</title>
    <url>/Applet-logic-interface.html</url>
    <content><![CDATA[<p><strong>小程序学习笔记</strong></p>
<a id="more"></a>

<!-- # 界面
+ 分逻辑层和视图层 -->

<h1 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h1><ul>
<li>小程序不是运行在浏览器中, 没有BOM和DOM对象</li>
</ul>
<ul>
<li>小程序的JS有一些额外的成员<ul>
<li>App 方法 用于定义应用程序实例对象</li>
<li>Page 方法 用于定义页面应用程序实例对象</li>
<li>getApp 方法 用来获取全局应用程序对象</li>
<li>getCurrentPages 方法 用来获取当前页面的调用栈 (数组最后一个就是当前页面)</li>
<li>wx对象 用来提供核心API</li>
</ul>
</li>
</ul>
<ul>
<li>小程序的JS支持CommomJS规范的</li>
</ul>
<h1 id="界面层"><a href="#界面层" class="headerlink" title="界面层"></a>界面层</h1><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p><strong>wxss</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs wxml">&lt;!-- 框架最大的特点就是让开发者按照特定的方式编写代码 --&gt;<br><br>&lt;!-- <br>数据在哪  (当前页面对象的data属性中) <br>绑定到哪  (想绑定到哪里哪里就用&#123;&#123; &#125;&#125;输出) <br>--&gt;<br><br>&lt;view class&#x3D;&quot;container&quot;&gt;<br>&lt;!-- 这种&#123;&#123;&#125;&#125;的语法叫mustache --&gt;<br>&lt;text&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;text&gt;<br>&lt;text&gt;&#123;&#123; person.Snumber &#125;&#125;&lt;&#x2F;text&gt;<br>&lt;text&gt;&#123;&#123; person.Sname &#125;&#125;&lt;&#x2F;text&gt;<br><br>&lt;!-- <br>  &#123;&#123; &#125;&#125;语法可以用在:<br>  类似innerHTML<br>  元素的属性上<br>  不能用在标签名和属性名上 <br>  --&gt;<br>&lt;view class&#x3D;&quot;ha &#123;&#123; viewClassName &#125;&#125;&quot;&gt;&lt;&#x2F;view&gt;<br><br>&lt;!-- 可以直接使用字面量和简单的逻辑运算符 --&gt;<br>&lt;text&gt;&#123;&#123; &quot;my name is Stitch&quot; &#125;&#125;&lt;&#x2F;text&gt;<br>&lt;text&gt;&#123;&#123; 333 &#125;&#125;&lt;&#x2F;text&gt;<br>&lt;text&gt;&#123;&#123; 2+1 &#125;&#125;&lt;&#x2F;text&gt;<br>&lt;!-- &lt;text&gt;&#123;&#123; 333 &gt; 33 ? &#39;你死了&#39; : &#39;你活了&#39; &#125;&#125;&lt;&#x2F;text&gt; --&gt;<br><br>&lt;!-- 使用&#123;&#123; &#125;&#125;语法解析就不会误解true&#x2F;false --&gt;<br>&lt;checkbox checked&#x3D;&quot;&#123;&#123; false &#125;&#125;&quot;&gt;&lt;&#x2F;checkbox&gt;<br><br>&lt;&#x2F;view&gt;<br></code></pre></td></tr></table></figure>
<p><strong>wxss</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.sdq</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-comment">// 为页面提供数据</span><br>  <span class="hljs-comment">// date就是界面与逻辑之间的桥梁</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;我叫史迪奇&quot;</span>,<br>    <span class="hljs-attr">person</span>:&#123;<br>      <span class="hljs-title class_">Sname</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>      <span class="hljs-title class_">Snumber</span>: <span class="hljs-number">626</span>,<br>    &#125;,<br>    <span class="hljs-attr">viewClassName</span>: <span class="hljs-string">&quot;ha&quot;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p><strong>wxss</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs wxml">&lt;view wx:for&#x3D;&quot;&#123;&#123; list &#125;&#125;&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;&#x2F;view&gt;<br></code></pre></td></tr></table></figure>
<p><strong>js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-comment">// 为页面提供数据</span><br>  <span class="hljs-comment">// date就是界面与逻辑之间的桥梁</span><br>  <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">list</span>:[<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;sdq&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;sdz&quot;</span>,<br>      &#125;<br>    ]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ul>
<li>点击事件被点击了返回log这就是事件处理</li>
</ul>
<p><strong>wxss</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;onclick&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;onclick&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">onclick</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了&#x27;</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><ul>
<li>冒泡事件: 当一个组件上的事件被触发后,  该事件会向父节点传递</li>
<li>非冒泡事件: 当一个组件上的事件被触发后,  该事件不会向父节点传递</li>
</ul>
<h2 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h2><ul>
<li>就是把事件的参数传递过去</li>
</ul>
<p><strong>wxss</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;Stitch&quot;</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">&quot;史迪奇&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;Stitch&quot;</span> <span class="hljs-attr">data-name-sdz</span>=<span class="hljs-string">&quot;史迪仔&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-title class_">Stitch</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>)<br>    <span class="hljs-comment">// 事件处理函数的this指向还是页面对象</span><br>    <span class="hljs-comment">// console.log(this)</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h2 id="单个数据流"><a href="#单个数据流" class="headerlink" title="单个数据流"></a>单个数据流</h2><p><strong>wxss</strong></p>
<!-- ~~~ XML
<button bindtap="Stitch" data-name="史迪奇">点我</button>
<button bindtap="Stitch" data-name-sdz="史迪仔">点我</button>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><br><span class="language-xml">**js**</span><br><br><span class="language-xml">~~~ JavaScript</span><br><span class="language-xml">Page(&#123;</span><br><span class="language-xml">  data:&#123;</span><br><span class="language-xml">    message: &#x27;initial&#x27;</span><br><span class="language-xml">  &#125;,</span><br><span class="language-xml">  Stitch:function()&#123;</span><br><span class="language-xml">    this.datamessage = e.detail.value</span><br><span class="language-xml">    console.log(this.data.message)</span><br><span class="language-xml">    // 事件处理函数的this指向还是页面对象</span><br><span class="language-xml">    // console.log(this)</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;)</span><br><span class="language-xml">~~~ --&gt;</span><br><br><span class="language-xml">~~~ XML</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">foo</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">foo</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<p><strong>js</strong></p>
<ul>
<li>setData的作用:<ul>
<li>改变数据源</li>
<li>通知框架 数据源变了 需要重新渲染页面</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Page</span>(&#123;<br> <br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">foo</span>:<span class="hljs-string">&#x27;hello wechat app&#x27;</span><br>  &#125;,<br>  <span class="hljs-title function_">sdq</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-comment">// e.target -&gt; 当前文本框</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span>)<br> <br>    <span class="hljs-comment">// 将界面上的数据再次同步回 数据源上</span><br>    <span class="hljs-comment">// this.data.foo = e.detail.value   就只是改变数据源</span><br> <br>    <span class="hljs-comment">// setData 作用:1.改变数据源</span><br>    <span class="hljs-comment">// 2.通知框架 数据源变了, 需要重新渲染页面</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123; <span class="hljs-attr">foo</span>:e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span> &#125;)<br>  &#125;<br><br></code></pre></td></tr></table></figure>
<p><strong>图形解说</strong></p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">        数据暴露出, 在界面绑定</span><br><span class="language-xml">          this.setData</span><br><span class="language-xml">            数据绑定</span><br><span class="language-xml">          /￣￣￣￣￣↘</span><br><span class="language-xml">逻辑(js)                界面(WXML)</span><br><span class="language-xml">&#123;                      &lt;input</span><br><span class="language-xml">  msg:&#x27;sdq&#x27;            value=&quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><br><span class="language-xml">&#125;                      bindinput=&quot;change&quot;/&gt;</span><br><span class="language-xml">          ↖_________/</span><br><span class="language-xml">               事件</span><br><span class="language-xml">            e.detail.value</span><br><span class="language-xml">        界面操作的事情, 对逻辑层反馈</span><br></code></pre></td></tr></table></figure>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><strong>一个时</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;1 &gt; 5&#125;&#125;&quot;</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">&quot;&#123;&#123;1 &gt; 2&#125;&#125;&quot;</span>&gt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span> 3 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>多个时</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- block 控制属性&#123;wx:&#125;的载体, 页面渲染无意义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- wx:if为假时不渲染 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h2 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h2><p><strong>wxml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>wxss</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.sdq</span> &#123;<br>  <span class="hljs-comment">/* 相当于100% 375相当于一半*/</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>-->]]></content>
      <categories>
        <category>小程序开发</category>
      </categories>
  </entry>
  <entry>
    <title>小程序 页面结构(快速入门)</title>
    <url>/Applet-WXML-WXSS-JS-JSON.html</url>
    <content><![CDATA[<p><strong>小程序学习笔记</strong></p>
<a id="more"></a>

<h1 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h1><ul>
<li>根目录文件中app.js, app.json, app.wxss定义是全局共享</li>
<li>每个页面中定义的app.js, app.json, app.wxss是为了让该页面首先执行自己页面定义的</li>
</ul>
<h2 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h2><ul>
<li>基于XML语言</li>
<li>用来定义页面结构</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;.sdq&quot;</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h2 id="WXSS-可选"><a href="#WXSS-可选" class="headerlink" title="WXSS (可选)"></a>WXSS (可选)</h2><ul>
<li>遵守CSS 单位比CSS高级 支持less语法</li>
<li>用来定义页面样式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.sdq</span>&#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ul>
<li>用来定义逻辑</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 获取应用实例</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>()<br><br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">motto</span>: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>    <span class="hljs-attr">userInfo</span>: &#123;&#125;,<br>    <span class="hljs-attr">hasUserInfo</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">canIUse</span>: wx.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&#x27;button.open-type.getUserInfo&#x27;</span>),<br>    <span class="hljs-attr">canIUseGetUserProfile</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">canIUseOpenData</span>: wx.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&#x27;open-data.type.userAvatarUrl&#x27;</span>) &amp;&amp; wx.<span class="hljs-title function_">canIUse</span>(<span class="hljs-string">&#x27;open-data.type.userNickName&#x27;</span>) <span class="hljs-comment">// 如需尝试获取用户信息可改为false</span><br>  &#125;,<br>  <span class="hljs-comment">// 事件处理函数</span><br>  <span class="hljs-title function_">bindViewTap</span>(<span class="hljs-params"></span>) &#123;<br>    wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;../logs/logs&#x27;</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (wx.<span class="hljs-property">getUserProfile</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">canIUseGetUserProfile</span>: <span class="hljs-literal">true</span><br>      &#125;)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">getUserProfile</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">// 推荐使用wx.getUserProfile获取用户信息, 开发者每次通过该接口获取用户个人信息均需用户确认, 开发者妥善保管用户快速填写的头像昵称, 避免重复弹窗</span><br>    wx.<span class="hljs-title function_">getUserProfile</span>(&#123;<br>      <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;展示用户信息&#x27;</span>, <span class="hljs-comment">// 声明获取用户个人信息后的用途, 后续会展示在弹窗中, 请谨慎填写</span><br>      <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>          <span class="hljs-attr">userInfo</span>: res.<span class="hljs-property">userInfo</span>,<br>          <span class="hljs-attr">hasUserInfo</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">getUserInfo</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">// 不推荐使用getUserInfo获取用户信息, 预计自2021年4月13日起, getUserInfo将不再弹出弹窗, 并直接返回匿名的用户个人信息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">userInfo</span>: e.<span class="hljs-property">detail</span>.<span class="hljs-property">userInfo</span>,<br>      <span class="hljs-attr">hasUserInfo</span>: <span class="hljs-literal">true</span><br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h2 id="JSON-可选"><a href="#JSON-可选" class="headerlink" title="JSON (可选)"></a>JSON (可选)</h2><ul>
<li>设置当前页面工作时的window的配置</li>
<li>常常用于 配置状态(设置页面 字体 字体颜色 背景颜色)</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 该字段用来表明子页面的</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// 子页面 首页</span><br>        <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 增加页面 减少页面也同理</span><br>        <span class="hljs-string">&quot;pages/sdq/sdq&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 子页面 日志</span><br>        <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>    <span class="hljs-punctuation">]</span><br>        <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 下拉 loading 的样式</span><br>        <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏背景颜色</span><br>        <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题文字内容</span><br>        <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;史迪奇的博客&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题颜色</span><br>        <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 下拉刷新</span><br>        <span class="hljs-attr">&quot;enablePullDownRefresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-comment">/* 可以增加 */</span><br><br>    <span class="hljs-attr">&quot;sitemaplocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><br>    <span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// list要两包括两个以上才生效</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-comment">// 首页</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-comment">// 给文章名字</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-comment">// 在同级创一个sdz的文件夹然后放图片在里面 </span><br>       <span class="hljs-comment">// 点击前的图标</span><br>      <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdq/_sdq.png&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-comment">// 点击后的图标</span><br>      <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdq/sdq.png&quot;</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/sdz/sdz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdz/_sdq.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdz/sdq.png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h1 id="页面文件组成"><a href="#页面文件组成" class="headerlink" title="页面文件组成"></a>页面文件组成</h1><p><strong>[page-name].js</strong></p>
<ul>
<li>页面逻辑文件, 用于创建页面对象, 以及处理页面生命周期控制和数据处理</li>
</ul>
<p><strong>[page-name].wxml</strong></p>
<ul>
<li>WXML指 Wei Xin Markup Language</li>
</ul>
<ul>
<li>用于定义页面中元素结构 语法遵循XML语法 注意是XML 不是HTML语法</li>
</ul>
<p><strong>[page-name].json (可选)</strong></p>
<ul>
<li>设置当前页面工作时的window的配置 此处会覆盖app.json中的window设置 只可以设置window的属性</li>
</ul>
<p><strong>[page-name].wxss (可选)</strong></p>
<ul>
<li>wxml是Wei xin Style Sheet</li>
</ul>
<ul>
<li>用于定义页面样式 语法遵循CSS语法 扩展CSS基本用法和长度单位 (rpx响应式像素) 支持less语法</li>
</ul>
<h1 id="标签栏"><a href="#标签栏" class="headerlink" title="标签栏"></a>标签栏</h1><ul>
<li>最多5个标签 最少2个表情</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><span class="hljs-comment">// 该字段用来表明子页面的</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-comment">// 子页面 首页</span><br>        <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 增加页面 减少页面也同理</span><br>        <span class="hljs-string">&quot;pages/sdq/sdq&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 子页面 日志</span><br>        <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>    <span class="hljs-punctuation">]</span><br>        <span class="hljs-comment">// 页面</span><br>    <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 下拉 loading 的样式</span><br>        <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏背景颜色</span><br>        <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题文字内容</span><br>        <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;史迪奇的博客&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 导航栏标题颜色</span><br>        <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 下拉刷新</span><br>        <span class="hljs-attr">&quot;enablePullDownRefresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 字体颜色</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#444&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 点击颜色</span><br>        <span class="hljs-attr">&quot;selectedColor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#219bf3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 背景颜色</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#e0e0e0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 页面边框</span><br>        <span class="hljs-attr">&quot;borderStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;white&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// 标签栏位置</span><br>        <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;top&quot;</span><br><br>    <span class="hljs-comment">// list要两包括两个以上最多五个才生效</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-comment">// 首页</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-comment">// 给文章名字</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-comment">// 在同级创一个sdz的文件夹然后放图片在里面 </span><br>       <span class="hljs-comment">// 设置选中前的图标</span><br>      <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdq/_sdq.png&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-comment">// 设置选中后的图标</span><br>      <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdq/sdq.png&quot;</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/sdz/sdz&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;尾页&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdz/_sdq.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sdz/sdq.png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>小程序开发</category>
      </categories>
  </entry>
  <entry>
    <title>Python 字符串(我失忆了)</title>
    <url>/python-zfc.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="以下全是字符串"><a href="#以下全是字符串" class="headerlink" title="以下全是字符串"></a>以下全是字符串</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">s = <span class="hljs-string">&#x27;s&#x27;</span><br>d = <span class="hljs-string">&quot;d&quot;</span><br>q = <span class="hljs-string">&#x27;&#x27;&#x27;q&#x27;&#x27;&#x27;</span><br>sdq = <span class="hljs-string">&quot;d &#x27;s&#x27; &quot;</span><br>sdz = <span class="hljs-string">&#x27;&#x27;&#x27; &quot;s&#x27;d&#x27;&quot; q&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s, d, sdq, q, sdz, sep=<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 字符串拼接</span><br><span class="hljs-comment"># print(&#x27;s&#x27; + &#x27;d&#x27; + &#x27;q&#x27;)</span><br><span class="hljs-comment"># 字符串和数字是不能拼接的</span><br><span class="hljs-comment"># print(&#x27;sdq&#x27; + 3)</span><br><span class="hljs-comment"># 连续打印5次史迪奇</span><br><span class="hljs-comment"># print(5 * &#x27;sdq&#x27;)</span><br></code></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 索引 变量名[] 表索引 编程语言都是从0开始计数的</span><br>sdq= <span class="hljs-string">&#x27;我叫史迪奇&#x27;</span><br><span class="hljs-built_in">print</span>(str1[<span class="hljs-number">0</span>], str1[<span class="hljs-number">3</span>], str1[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(str1[<span class="hljs-number">10</span>])  <span class="hljs-comment">#超出会报错</span><br></code></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 切片 变量名[a:b] 同数学区间的[a,b)</span><br>sdq = <span class="hljs-string">&#x27;0123456789&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[0:3]&#x27;</span>, sdq[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])         <span class="hljs-comment">#012</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[1:]&#x27;</span>, sdq[<span class="hljs-number">1</span>:])           <span class="hljs-comment">#123456789</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[:2]&#x27;</span>, sdq[:<span class="hljs-number">2</span>])           <span class="hljs-comment">#01</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[:]&#x27;</span>, sdq[:])             <span class="hljs-comment">#返回全部</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[-4:-1]&#x27;</span>, sdq[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])     <span class="hljs-comment">#678</span><br><span class="hljs-built_in">print</span>(sdq[<span class="hljs-number">1</span>:<span class="hljs-number">100</span>])                   <span class="hljs-comment"># 切片超出范围是不会报错的会返回全部</span><br></code></pre></td></tr></table></figure>
<h1 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># name = &#x27;史迪奇&#x27;</span><br><span class="hljs-comment"># number = 626</span><br><span class="hljs-comment"># print(name+&#x27;是个&#x27;+str(number)+&#x27;号实验品&#x27;)</span><br><span class="hljs-comment"># print(&#x27;&#123;&#125;是个&#123;&#125;号实验品&#x27;.format(name, number))</span><br><span class="hljs-comment"># print(&#x27;&#123;name&#125;是个&#123;number&#125;号实验品&#x27;.format(name=&#x27;史迪奇&#x27;, number=626))</span><br><span class="hljs-comment"># print(f&#x27;&#123;name&#125;是个&#123;number&#125;号实验品&#x27;)</span><br><span class="hljs-comment"># 在一些老的教程里会用%的形式格式化代码, 在Python3里就不建议使用了</span><br></code></pre></td></tr></table></figure>
<h1 id="字符串的一些使用方法"><a href="#字符串的一些使用方法" class="headerlink" title="字符串的一些使用方法"></a>字符串的一些使用方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">sdq = <span class="hljs-string">&#x27;Stitch&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;find第一次出现b的索引&#x27;</span>, sdq.find(<span class="hljs-string">&#x27;h&#x27;</span>))  <span class="hljs-comment">#看h的下标</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;replace&#x27;</span>, sdq.replace(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>))  <span class="hljs-comment">#拿I替换i</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;upper&#x27;</span>, sdq.upper()) <span class="hljs-comment">#全大写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;lower&#x27;</span>, sdq.lower()) <span class="hljs-comment">#全小写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;swapcase 对换&#x27;</span>, <span class="hljs-string">&#x27;sdq&#x27;</span>.swapcase())  <span class="hljs-comment">#反转字母大小写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;去前后空格&#x27;</span>, <span class="hljs-string">&#x27; sdq &#x27;</span>.strip(), sep=<span class="hljs-string">&#x27;&#x27;</span>)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;S t i t c h &#x27;</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))   <span class="hljs-comment">#空格替换空字符串</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;S t i t c h&#x27;</span>)) <span class="hljs-comment"># 获取字符串长度 里面的空格也是计算长度的</span><br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 数据类型(我失忆了)</title>
    <url>/python-type.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="python基本数据类型"><a href="#python基本数据类型" class="headerlink" title="python基本数据类型"></a>python基本数据类型</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;整数&#x27;</span>, <span class="hljs-number">1</span>)                          <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;浮点数&#x27;</span>, <span class="hljs-number">0.1</span>)             <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;布尔值&#x27;</span>, <span class="hljs-literal">True</span>) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;空&#x27;</span>, <span class="hljs-literal">None</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;元组&#x27;</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment">#可以存放不同类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;列表&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;字典&#x27;</span>, &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;d&#x27;</span>&#125;)   <br></code></pre></td></tr></table></figure>
<h1 id="查询类型"><a href="#查询类型" class="headerlink" title="查询类型"></a>查询类型</h1><p><strong>例子</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>))<br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 字符串(我失忆了)</title>
    <url>/python-zfc.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="以下全是字符串"><a href="#以下全是字符串" class="headerlink" title="以下全是字符串"></a>以下全是字符串</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">s = <span class="hljs-string">&#x27;s&#x27;</span><br>d = <span class="hljs-string">&quot;d&quot;</span><br>q = <span class="hljs-string">&#x27;&#x27;&#x27;q&#x27;&#x27;&#x27;</span><br>sdq = <span class="hljs-string">&quot;d &#x27;s&#x27; &quot;</span><br>sdz = <span class="hljs-string">&#x27;&#x27;&#x27; &quot;s&#x27;d&#x27;&quot; q&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s, d, sdq, q, sdz, sep=<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 字符串拼接</span><br><span class="hljs-comment"># print(&#x27;s&#x27; + &#x27;d&#x27; + &#x27;q&#x27;)</span><br><span class="hljs-comment"># 字符串和数字是不能拼接的</span><br><span class="hljs-comment"># print(&#x27;sdq&#x27; + 3)</span><br><span class="hljs-comment"># 连续打印5次史迪奇</span><br><span class="hljs-comment"># print(5 * &#x27;sdq&#x27;)</span><br></code></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 索引 变量名[] 表索引 编程语言都是从0开始计数的</span><br>sdq= <span class="hljs-string">&#x27;我叫史迪奇&#x27;</span><br><span class="hljs-built_in">print</span>(str1[<span class="hljs-number">0</span>], str1[<span class="hljs-number">3</span>], str1[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(str1[<span class="hljs-number">10</span>])  <span class="hljs-comment">#超出会报错</span><br></code></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 切片 变量名[a:b] 同数学区间的[a,b)</span><br>sdq = <span class="hljs-string">&#x27;0123456789&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[0:3]&#x27;</span>, sdq[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])         <span class="hljs-comment">#012</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[1:]&#x27;</span>, sdq[<span class="hljs-number">1</span>:])           <span class="hljs-comment">#123456789</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[:2]&#x27;</span>, sdq[:<span class="hljs-number">2</span>])           <span class="hljs-comment">#01</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[:]&#x27;</span>, sdq[:])             <span class="hljs-comment">#返回全部</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sdq[-4:-1]&#x27;</span>, sdq[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])     <span class="hljs-comment">#678</span><br><span class="hljs-built_in">print</span>(sdq[<span class="hljs-number">1</span>:<span class="hljs-number">100</span>])                   <span class="hljs-comment"># 切片超出范围是不会报错的会返回全部</span><br></code></pre></td></tr></table></figure>
<h1 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># name = &#x27;史迪奇&#x27;</span><br><span class="hljs-comment"># number = 626</span><br><span class="hljs-comment"># print(name+&#x27;是个&#x27;+str(number)+&#x27;号实验品&#x27;)</span><br><span class="hljs-comment"># print(&#x27;&#123;&#125;是个&#123;&#125;号实验品&#x27;.format(name, number))</span><br><span class="hljs-comment"># print(&#x27;&#123;name&#125;是个&#123;number&#125;号实验品&#x27;.format(name=&#x27;史迪奇&#x27;, number=626))</span><br><span class="hljs-comment"># print(f&#x27;&#123;name&#125;是个&#123;number&#125;号实验品&#x27;)</span><br><span class="hljs-comment"># 在一些老的教程里会用%的形式格式化代码, 在Python3里就不建议使用了</span><br></code></pre></td></tr></table></figure>
<h1 id="字符串的一些使用方法"><a href="#字符串的一些使用方法" class="headerlink" title="字符串的一些使用方法"></a>字符串的一些使用方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">sdq = <span class="hljs-string">&#x27;Stitch&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;find第一次出现b的索引&#x27;</span>, sdq.find(<span class="hljs-string">&#x27;h&#x27;</span>))  <span class="hljs-comment">#看h的下标</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;replace&#x27;</span>, sdq.replace(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>))  <span class="hljs-comment">#拿I替换i</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;upper&#x27;</span>, sdq.upper()) <span class="hljs-comment">#全大写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;lower&#x27;</span>, sdq.lower()) <span class="hljs-comment">#全小写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;swapcase 对换&#x27;</span>, <span class="hljs-string">&#x27;sdq&#x27;</span>.swapcase())  <span class="hljs-comment">#反转字母大小写</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;去前后空格&#x27;</span>, <span class="hljs-string">&#x27; sdq &#x27;</span>.strip(), sep=<span class="hljs-string">&#x27;&#x27;</span>)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;S t i t c h &#x27;</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))   <span class="hljs-comment">#空格替换空字符串</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;S t i t c h&#x27;</span>)) <span class="hljs-comment"># 获取字符串长度 里面的空格也是计算长度的</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 基本运算符(我失忆了)</title>
    <url>/python-jjcc.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="pdtho基本运算符"><a href="#pdtho基本运算符" class="headerlink" title="pdtho基本运算符"></a>pdtho基本运算符</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加&#x27;</span>, <span class="hljs-number">2</span> + <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;减&#x27;</span>, <span class="hljs-number">1</span> - <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;两个减号&#x27;</span>, <span class="hljs-number">1</span> - -<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;乘&#x27;</span>, <span class="hljs-number">2</span> * <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;除&#x27;</span>, <span class="hljs-number">9</span> / <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;取整&#x27;</span>, <span class="hljs-number">10</span> <span class="hljs-number">3</span>, <span class="hljs-number">10</span> <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;取整1&#x27;</span>, <span class="hljs-number">10</span> / <span class="hljs-number">3</span>, <span class="hljs-number">10</span> / <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;模运算, 取余数&#x27;</span>, <span class="hljs-number">10</span> % <span class="hljs-number">3</span>)  <br></code></pre></td></tr></table></figure>
<h1 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h1><p><strong>4舍6入5看齐,奇进偶不进,相比四舍五入更精确</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">1.2</span>), <span class="hljs-built_in">round</span>(<span class="hljs-number">1.5</span>), <span class="hljs-built_in">round</span>(<span class="hljs-number">2.5</span>))<br></code></pre></td></tr></table></figure>
<h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">s, d, q, z = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s == d&#x27;</span>, s == d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s != d&#x27;</span>, s != d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s &gt; d&#x27;</span>, s &gt; d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d &lt; z&#x27;</span>, d &lt; z)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s == z&#x27;</span>, s == z)   <span class="hljs-comment">#比较值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s is z&#x27;</span>, s <span class="hljs-keyword">is</span> z)   <span class="hljs-comment">#比较地址</span><br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>手机照片视频恢复工具</title>
    <url>/photo-video.html</url>
    <content><![CDATA[<p><strong>实用软件</strong></p>
<a id="more"></a>

<h1 id="生活中会出现误删或者误格式化的问题"><a href="#生活中会出现误删或者误格式化的问题" class="headerlink" title="生活中会出现误删或者误格式化的问题"></a>生活中会出现误删或者误格式化的问题</h1><h3 id="能找回大概80-的图片-就是筛选中有些费时间"><a href="#能找回大概80-的图片-就是筛选中有些费时间" class="headerlink" title="能找回大概80%的图片, 就是筛选中有些费时间"></a>能找回大概80%的图片, 就是筛选中有些费时间</h3><h1 id="以下是推荐几款强大而又是免费的数据找回工具"><a href="#以下是推荐几款强大而又是免费的数据找回工具" class="headerlink" title="以下是推荐几款强大而又是免费的数据找回工具"></a>以下是推荐几款强大而又是免费的数据找回工具</h1><h2 id="第-1-款-DiskDigger-Pro"><a href="#第-1-款-DiskDigger-Pro" class="headerlink" title="第 1 款 DiskDigger Pro"></a>第 1 款 <a href="https://wwc.lanzouo.com/iFZA0xjl8ja">DiskDigger Pro</a></h2><ul>
<li><h3 id="能搜索手机的-所有缩略图-和-软件内的图片-ROOT-后-会效果更佳-但无-ROOT-也可以使用-免费-部分原图-免ROOT"><a href="#能搜索手机的-所有缩略图-和-软件内的图片-ROOT-后-会效果更佳-但无-ROOT-也可以使用-免费-部分原图-免ROOT" class="headerlink" title="能搜索手机的 所有缩略图 和 软件内的图片 ROOT 后 会效果更佳 但无 ROOT 也可以使用 ( 免费 + 部分原图 + 免ROOT )"></a>能搜索手机的 所有缩略图 和 软件内的图片 ROOT 后 会效果更佳 但无 ROOT 也可以使用 ( 免费 + 部分原图 + 免ROOT )</h3></li>
</ul>
<ul>
<li><h3 id="缺点-保存格式-jpg-的格式-但是可以像-GIF-的要手动自行更改后缀"><a href="#缺点-保存格式-jpg-的格式-但是可以像-GIF-的要手动自行更改后缀" class="headerlink" title="缺点: 保存格式 .jpg 的格式 但是可以像 .GIF 的要手动自行更改后缀"></a>缺点: 保存格式 .jpg 的格式 但是可以像 .GIF 的要手动自行更改后缀</h3></li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e4c32c26a.gif"></p>
<br>

<h2 id="第-2-款-强力照片恢复工具"><a href="#第-2-款-强力照片恢复工具" class="headerlink" title="第 2 款 强力照片恢复工具"></a>第 2 款 <a href="https://wwc.lanzouo.com/iiI5wxjl8cd">强力照片恢复工具</a></h2><ul>
<li><h3 id="能搜索手机的-部分缩略图-和-软件内的图片-部分安卓可用-记住付费的时候取消-破键版免费-免ROOT"><a href="#能搜索手机的-部分缩略图-和-软件内的图片-部分安卓可用-记住付费的时候取消-破键版免费-免ROOT" class="headerlink" title="能搜索手机的 部分缩略图 和 软件内的图片 部分安卓可用 记住付费的时候取消 ( 破键版免费 + 免ROOT )"></a>能搜索手机的 部分缩略图 和 软件内的图片 部分安卓可用 记住付费的时候取消 ( 破键版免费 + 免ROOT )</h3></li>
</ul>
<ul>
<li><h3 id="缺点-只能保存为-jpg-的格式"><a href="#缺点-只能保存为-jpg-的格式" class="headerlink" title="缺点: 只能保存为 .jpg 的格式"></a>缺点: 只能保存为 .jpg 的格式</h3></li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e4c324a13.gif"></p>
<br>

<h2 id="第-3-款-手机照片恢复精灵"><a href="#第-3-款-手机照片恢复精灵" class="headerlink" title="第 3 款 手机照片恢复精灵"></a>第 3 款 <a href="https://wwc.lanzouo.com/iLl2yxjl8ij">手机照片恢复精灵</a></h2><ul>
<li><h3 id="能搜索手机的-部分缩略图-和-软件内的图片-还支持下载壁纸-有些多余-记住付费的时候取消-破键版免费-免ROOT"><a href="#能搜索手机的-部分缩略图-和-软件内的图片-还支持下载壁纸-有些多余-记住付费的时候取消-破键版免费-免ROOT" class="headerlink" title="能搜索手机的 部分缩略图 和 软件内的图片 还支持下载壁纸 (有些多余) 记住付费的时候取消 ( 破键版免费 + 免ROOT )"></a>能搜索手机的 部分缩略图 和 软件内的图片 还支持下载壁纸 (有些多余) 记住付费的时候取消 ( 破键版免费 + 免ROOT )</h3></li>
</ul>
<ul>
<li><h3 id="缺点-只能保存为-jpg-和-png-的格式"><a href="#缺点-只能保存为-jpg-和-png-的格式" class="headerlink" title="缺点: 只能保存为 .jpg 和 .png 的格式"></a>缺点: 只能保存为 .jpg 和 .png 的格式</h3></li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e4c33fa38.gif"></p>
<br>


<!-- ## 第 4 款 [视频恢复维修站]()

* ### 能搜索手机的视频 部分安卓可用 ( 免费 + 免ROOT ) 

- ### 缺点: 只能恢复较小视频 支持格式 MP4 AVI 3GP

<br>

<img src="https://sdq3.coding.net/p/images/d/images/git/raw/master/photos/sphf.gif" >

<br> -->

<h2 id="第-4-款-Dumpster"><a href="#第-4-款-Dumpster" class="headerlink" title="第 4 款 Dumpster"></a>第 4 款 <a href="https://wwc.lanzouo.com/iwlHyxjl8vc">Dumpster</a></h2><ul>
<li><h3 id="能搜索本机和软件缓存的-视频-照片-音频-免费-免ROOT"><a href="#能搜索本机和软件缓存的-视频-照片-音频-免费-免ROOT" class="headerlink" title="能搜索本机和软件缓存的 视频 照片 音频  ( 免费 + 免ROOT )"></a>能搜索本机和软件缓存的 视频 照片 音频  ( 免费 + 免ROOT )</h3></li>
</ul>
<ul>
<li><h3 id="缺点-没有缺点-界面简洁-功能明确"><a href="#缺点-没有缺点-界面简洁-功能明确" class="headerlink" title="缺点: 没有缺点 界面简洁 功能明确"></a>缺点: 没有缺点 界面简洁 功能明确</h3></li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e4c34d5de.gif"></p>
<br>

<h2 id="第-5-款-手机数据恢复精灵"><a href="#第-5-款-手机数据恢复精灵" class="headerlink" title="第 5 款 手机数据恢复精灵"></a>第 5 款 <a href="https://wwc.lanzouo.com/iLl2yxjl8ij">手机数据恢复精灵</a></h2><ul>
<li><h3 id="能搜索本机-和-软件缓存的-视频-照片-语言-微信数据-文件-免费-免ROOT"><a href="#能搜索本机-和-软件缓存的-视频-照片-语言-微信数据-文件-免费-免ROOT" class="headerlink" title="能搜索本机 和 软件缓存的 视频 照片 语言 微信数据 文件  ( 免费 + 免ROOT )"></a>能搜索本机 和 软件缓存的 视频 照片 语言 微信数据 文件  ( 免费 + 免ROOT )</h3></li>
</ul>
<ul>
<li><h3 id="缺点-微信恢复-和-微星好友恢复-手机系统限制"><a href="#缺点-微信恢复-和-微星好友恢复-手机系统限制" class="headerlink" title="缺点: 微信恢复 和 微星好友恢复 手机系统限制"></a>缺点: 微信恢复 和 微星好友恢复 手机系统限制</h3></li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e4c387a25.gif"></p>
<br>

<h1 id="数据无价-不要到失去的时候才懂得珍惜"><a href="#数据无价-不要到失去的时候才懂得珍惜" class="headerlink" title="数据无价 不要到失去的时候才懂得珍惜"></a>数据无价 不要到失去的时候才懂得珍惜</h1><ul>
<li><strong>通用密码: sdq3</strong></li>
</ul>
<br>]]></content>
      <categories>
        <category>实用软件</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构 必背内容</title>
    <url>/DataStructure-Mustback.html</url>
    <content><![CDATA[<p><strong>数据结构学习笔记</strong></p>
<a id="more"></a>

<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>数据是描述客观事物的符号, 是能够被计算机输入, 识别, 处理的各种符号, 是计算机化的信息</p>
<h1 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h1><p>数据不可分割的最小单位, 一个元素由若干个数据项构成</p>
<h1 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h1><p>它是组成数据的基本单位, 是数据集合中的个体, 在计算机程序中, 通常作为一个整体进行考虑和处理</p>
<h1 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h1><p>是性质相同的数据元素的集合, 是数据的一个子集</p>
<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>是指对数据进行查找, 插入, 删除, 合并, 排序, 统计以及简单计算等的操作过程</p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>是研究数据元素之间抽象化的相互关系和这种关系在计算机中的存储表示(即数据的逻辑结构和物理结构), 并对这种结构定义相适应的运算, 设计出相应的算法, 且确保经过这些运算后所得到的新结构仍然是原来的结构类型</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>数据类型是一个值的集合和定义在这个值集上的一组操作的总称</p>
<h1 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h1><p>是指一个数学模型以及定义在该模型上的一组操作抽象数据类型的定义取决于它的一组逻辑特性, 而与其在计算机内部如何表示和实现无关</p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>解决一个问题的方法和步骤</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>T(N)＝O(F(N)), 它表示随问题规模Ｎ增大, 算法执行时间增长率与F(N)的增长率相同, F(N)算法的时间复杂性</p>
<h1 id="原地工作"><a href="#原地工作" class="headerlink" title="原地工作"></a>原地工作</h1><p>算法执行时, 若额外空间相对于输入数据量来说是常数, 则称此算法为原地工作</p>
<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>一种数据结构, 是N(N&gt;=# )个同质元素的有限序列, 除首尾元素外, 每个元素有唯一的前驱和唯一的后继</p>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>是一种受限线性表, 是先进先出的线性表</p>
<h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><p>在队列的顺序存储结构中, 把存储空间的首尾逻辑上相连, 构成一个环, 使得存储空间上只要有空余的地址, 就可以继续进行入队列操作, 极大利用了物理空间用头部和尾部两个指示器表示队列头和队列尾, 插入在尾部进行, 删除在头部进行</p>
<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><p>每一个数据元素, 都需用两部分来存储：一部分用于存放数据元素值, 称为数据域；另一部分用于存放直接后继结点的地址(指针), 称为指针域, 元素的存储空间可以连续, 也可以是不连续的而数据元素之间的逻辑关系由指针域来确定</p>
<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p>线性表采用链式存储时, 每个结点除一个数据域外, 包含两个指针域, 一个指向该结点的直接后继, 一个指向该结点的直接前驱, 这种方式构成的链表, 即为双向链表</p>
<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>是插入排序的一种, 又叫缩小增量排序, 先按增量进行分组, 组内插入排序, 然后每次缩短增量, 再进行分组和组内插入排序,  直到增量为1时, 进行最后一次排序止</p>
<h1 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h1><p>任何一个有N个结点的无向图, 若其边数为N(N-# )/# , 则这个无向图就是完全图</p>
<h1 id="有向完全图"><a href="#有向完全图" class="headerlink" title="有向完全图"></a>有向完全图</h1><p>任何一个有N个结点的有向图, 若其弧个数为N(N-# )个, 则这个有向图就是有向完全图</p>
<h1 id="广度遍历"><a href="#广度遍历" class="headerlink" title="广度遍历"></a>广度遍历</h1><p>按层次编历方式, 从某一点V0开始遍历它的所有邻接点V1, V2……, 再依次访问V1, V2的所有未被访问过的邻接点, 直到所有的点均遍历完成</p>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>数据元素的某个数据项的值, 用它可以标识列表的一个或一组元素</p>
<h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><p>串是字符线性的有限集合</p>
<h1 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h1><p>串中任意个连续的字符组成的子序列称作该串的子串</p>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>是一种受限线性表, 是插入和删除操作在同一端进行的, 是后进先出的线性表</p>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树是n(n&gt;=# )个结点的有限集在任意一棵非空树中：</p>
<p>(# )有且仅有一个特殊的称为根的结点;              </p>
<p>(# )当n&gt;1时, 其余结点可分成m(m&gt;# )个互不相交的有限集T1, T2, , Tm, 其中每一个集合本身又是一棵树, 并且称为根的子树</p>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是每个结点至多有两个孩子结点的一种树其中两个孩子结点分别被称为左孩子结点和右孩子结点</p>
<h1 id="子孙"><a href="#子孙" class="headerlink" title="子孙"></a>子孙</h1><p>子孙结点以某结点为根的子树中的任一结点都称为该结点的子孙</p>
<h1 id="孩子结点与双亲结点"><a href="#孩子结点与双亲结点" class="headerlink" title="孩子结点与双亲结点"></a>孩子结点与双亲结点</h1><p>树中某个结点的子树的根结点称为该结点的孩子结点相反, 称该结点为孩子结点的双亲结点</p>
<h1 id="结点的度"><a href="#结点的度" class="headerlink" title="结点的度"></a>结点的度</h1><p>树的某个结点的分支(子树)个数叫做该结点的度</p>
<h1 id="树的度"><a href="#树的度" class="headerlink" title="树的度"></a>树的度</h1><p>树的度是树中所有结点的最大度数</p>
<h1 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h1><p>结点的左子树深度与右子树深度之差</p>
<h1 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h1><p>一个连通图的生成树是指一个极小连通子图, 它含有图中的全部顶点, N-1条边</p>
<h1 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h1><p>深度为K, 且有2K -1个结点的二叉树</p>
<h1 id="物理结构-存储结构"><a href="#物理结构-存储结构" class="headerlink" title="物理结构(存储结构)"></a>物理结构(存储结构)</h1><p>物理结构又称为数据的存储结构, 是指数据的逻辑结构在计算机中的映像(表示), 即数据结构在计算机中的存储方法</p>
<h1 id="线索"><a href="#线索" class="headerlink" title="线索"></a>线索</h1><p>在二叉树中, 利用空余的指针指向二叉树某种遍历方式的结点的前驱和后继, 这种指向前驱和后继的指针, 叫线索</p>
<h1 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h1><p>对二叉树以某种次序进行遍历并加上线索的过程叫做线索化线索化了的二叉树称为线索二叉树</p>
<h1 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h1><p>广义表简称表, 是零个或多个原子表所组成的有限序列</p>
<h1 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h1><p>有向图的极大强连通子图, 称为有向图的强连通分量</p>
<h1 id="结点的带权路径长度"><a href="#结点的带权路径长度" class="headerlink" title="结点的带权路径长度"></a>结点的带权路径长度</h1><p>该结点到树根之间的路径长度与结点上权的乘积</p>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>在一个已排好序的记录子集的基础上, 每一步将下一个待排序的记录有序地插入到已排好序记录的子集上, 直到将所有待排记录全部插入为止</p>
<h1 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a>祖先</h1><p>一个结点的祖先是指从根结点到该结点的路径上的所有结点</p>
<h1 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h1><p>数据结构是数据元素的集合以及定义在该集合上的关系</p>
<h1 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h1><p>子串的定位操作称作串的模式匹配</p>
<h1 id="单循环链表"><a href="#单循环链表" class="headerlink" title="单循环链表"></a>单循环链表</h1><p>是单链表的另一种形式, 它是一个首尾相接的链表, 表中最后一个结点的指针域由null改为指向头结点或线性表的第一个结点, 整个链表形成了一个环．</p>
<h1 id="线索-1"><a href="#线索-1" class="headerlink" title="线索"></a>线索</h1><p>在二叉树的存储结构中, 必有Ｎ＋１个空域, 利用这些空域存放某种遍历的前驱和后继, 其中指向前驱和后继的指针叫线索．</p>
<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p>图是顶点与边的集合一般表示为一个二元组, 即, 图G=(V, E), 各个顶点之间是多对多的关系</p>
<h1 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h1><p>对于顺序存储的有序表, 先取中间位置的记录关键字与所给的关键字进行比较, 若相等, 则查找成功, 否则, 若给定的关键字比中间的关键字大, 在原表的后半部分比较, 反之, 在原表的前半部分比较, 如此反复, 逐步缩小范围, 直到找到为止, 或找不到, 最后查找范围为空．</p>
<h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p>在图G的所有生成树中, 树权值最小的那棵生成树, 称作最小生成树．</p>
<h1 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h1><p>首先访问出发点v, 接着依次访问v的所有邻接点w1, w2, …, wt, 然后再依次访问与wl, w2, …, wt邻接的所有未曾访问过的顶点依此类推, 直至图中所有和源点v有路径相通的顶点都已访问到为止此时从v开始的搜索过程结束</p>
<p>(若G是连通图, 则遍历完成;否则, 在图C中另选一个尚未访问的顶点作为新源点继续上述的搜索过程, 直至G中所有顶点均已被访问为止)</p>
<h1 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h1><p>对满二叉树的结点从上到下, 从左到右进行依次进行编号, 若有一棵二叉树的每一个结点都与深度为K的满二叉树中编号都一一对应时, 只是最后一层不满, 称做完全二叉树</p>
<h1 id="前缀编码"><a href="#前缀编码" class="headerlink" title="前缀编码"></a>前缀编码</h1><p>任何一个字符的编码都不是另一个字符编码的前缀, 这种编码叫做前缀编码</p>
<h1 id="广义表-1"><a href="#广义表-1" class="headerlink" title="广义表"></a>广义表</h1><p>是零个或多个原子表所构成的有序序列</p>
<h1 id="线索二叉树-1"><a href="#线索二叉树-1" class="headerlink" title="线索二叉树"></a>线索二叉树</h1><p>利用二叉树的一些空闲指针指向该结点的前驱或后继, 这种指针叫线索, 线索后了的二叉树, 称为线索二叉树</p>
<h1 id="树的高度"><a href="#树的高度" class="headerlink" title="树的高度"></a>树的高度</h1><p>树中所有结点的层次的最大值</p>
<h1 id="堂兄弟"><a href="#堂兄弟" class="headerlink" title="堂兄弟"></a>堂兄弟</h1><p>同一层上不同双亲的结点, 互称堂兄弟</p>
<h1 id="叶子结点"><a href="#叶子结点" class="headerlink" title="叶子结点"></a>叶子结点</h1><p>度为 #  的结点, 即没有后继的结点</p>
<h1 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h1><p>M棵互相不相交的树构成的集合, 将一棵非空树的根结点删除, 树就变成了森林</p>
<h1 id="树的路径长度"><a href="#树的路径长度" class="headerlink" title="树的路径长度"></a>树的路径长度</h1><p>树中每个结点到根结点的路径长度之和</p>
<h1 id="树的带权路径长度-WPL"><a href="#树的带权路径长度-WPL" class="headerlink" title="树的带权路径长度(WPL)"></a>树的带权路径长度(WPL)</h1><p>树中所有叶子结点的带权路径长度之和</p>
<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><p>设有N个权值的结点构造一棵有N个叶子结点的二叉树, 其中WPL最小的那棵树, 为哈夫曼树</p>
<h1 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h1><p>一般以N种字符出现的频率做权值, 构造哈付曼树, 左孩子边做0, 右孩子边做1, 那么从根到叶子结点经过的0和1序列, 构成了哈夫曼编码</p>
<h1 id="图中顶点的度"><a href="#图中顶点的度" class="headerlink" title="图中顶点的度"></a>图中顶点的度</h1><p>顶点V的度是图中和顶点V相关联的边的数目包括入度和出度两种</p>
<h1 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h1><p>图G=(V, E)与图G1=(V1, E1), 若V1包含于V, 且E1包含于E, 则G1是G的子图</p>
<h1 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h1><p>对于无向图, 若V1到V2有路径, 称V1V2是连通的, 若图中任意两点都是连通的, 则称该无向图是连通图</p>
<h1 id="网"><a href="#网" class="headerlink" title="网"></a>网</h1><p>图的弧或边有与它相关的有意义的数, 称作权, 带有权值的图称作网</p>
<h1 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h1><p>类似树的先序遍历, 在图中任选一个顶点作为出发顶点V0, 访问V0后, 依次从V0的没被访问过的邻接点出发进行深度优先搜索直到与V0所连通的所有顶点均被访问如果, 此时图中还有顶点尚未访问, 则从剩余的顶点中再任选一个顶点作为出发顶点V0, 重复上述过程, 直到图中全部顶点均被访问为止</p>
<h1 id="简单回路"><a href="#简单回路" class="headerlink" title="简单回路"></a>简单回路</h1><p>除了第一个顶点和最后一个顶点之外, 其余顶点均不相同的回路称为简单回路</p>
<h1 id="简单路径"><a href="#简单路径" class="headerlink" title="简单路径"></a>简单路径</h1><p>在用一个顶点序列表示一条路径时, 若序列中没有相同的顶点重复出现, 则称其为简单路径</p>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>根据给定的关键字值, 在特定的表中, 确定一个其关键字与给定值相同的数据元素, 并返回该数据元素在列表中的位置这个过程叫查找</p>
<h1 id="平均查找长度-ASL"><a href="#平均查找长度-ASL" class="headerlink" title="平均查找长度(ASL)"></a>平均查找长度(ASL)</h1><p>为确定数据元素在表中的位置, 需和给定值进行比较的关键字个数的数学期望值, 成为查找算法在查找成功的平均查找长度</p>
<h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><p>它或是一棵空树, 或是有下面性质的树：若左或右子树不空, 左子树所有结点值小于根结点, 而右子树所有结点值大于根结点的值, 其左右子树也是二叉排序树</p>
<h1 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h1><p>对于给定的关键字K, 从线性表的第一个(或最后一个)元素开始, 依次向后(或前)与元素的关键字比较, 若某个记录的关键字与K 相等, 查找成功, 否则失败</p>
<h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><p>或是一棵空树, 或左右子树高度差的绝对值小于等于1而且, 左右子树也是平衡二叉树</p>
<h1 id="插入排序-1"><a href="#插入排序-1" class="headerlink" title="插入排序"></a>插入排序</h1><p>在一个已排好序的基础上, 每一步将下一个待排序记录插到已排好记录的子集上, 使之重新有序, 直到所有待排记录插完为止</p>
<h1 id="分块查找-索引查找"><a href="#分块查找-索引查找" class="headerlink" title="分块查找(索引查找)"></a>分块查找(索引查找)</h1><p>分块查找以前两个为基础, 将待查记录分成若干块, 每块的关键字无序, 但每块的关键字的最大值有序, 查找时, 先查找到待查记录所在的块, 再在块内进行顺序查找找块时, 即可以用折半查找, 也可用顺序查找</p>
<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><p>由某个集合上的偏序集得到该集合上的一个全序, 这个操作叫做拓扑排序</p>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>将两个或两个以上的有序表合并成一个新的有序表, 开始将每个元素当成是一个个单独的有序表, 逐渐表个数以原来一半的速度递减, 每个表的长度却是原来长度的2倍增加, 不断重复, 直到最后是一个表, 而表的长度是元素个数为止</p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>根据关键字的递减或递增的次序, 把文件中的各个记录依次排列起来, 可使一个无序的数据元素序列变成一个有序的序列的操作</p>
<h1 id="shell排序"><a href="#shell排序" class="headerlink" title="shell排序"></a>shell排序</h1><p>它是插入排序的一种, 又叫缩小增量排序, 先按增量进行分组, 组内插入排序, 然后每次缩短增量, 再进行分组和组内插入排序,  直到增量为1时, 进行最后一次排序止</p>
<h1 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h1><p>指的是待排序记录存放在计算机存储器中进行的排序过程；</p>
<h1 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h1><p>指的是待排序记录的数量很大, 以致内存一次不能容纳全部记录, 在排序过程中对外存进行访问的排序过程</p>
<h1 id="不稳定排序"><a href="#不稳定排序" class="headerlink" title="不稳定排序"></a>不稳定排序</h1><p>假设Ki=Kj(1≤i≤n, 1≤j≤n, i≠j), 且在排序前的序列中Ri领先于Rj(即i＜j)若在排序后的序列中Rj 领先于Ri , 则称所用的排序方法是不稳定的</p>
<h1 id="稳定排序"><a href="#稳定排序" class="headerlink" title="稳定排序"></a>稳定排序</h1><p>假设Ki=Kj(1≤i≤n, 1≤j≤n, i≠j), 且在排序前的序列中Ri领先于Rj(即i＜j)若在排序后的序列中Ri仍领先于Rj, 则称所用的排序方法是稳定的</p>
<h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><p>第1遍, 将初始文件中的记录R1看作有序子文件, 将R2插入这个子文件中若R2的关键字小于R1的关键字, 则R2插在R1的前面, 否则R2插在R1的后面第2遍, 将R3插入前面的两个记录的有序子文件中, 得到3个记录的有序子文件依此类推, 继续进行下去, 直到将Rn插入到前面的n-1个记录的有序子文件中, 最后得到n个记录的有序文件 </p>
<h1 id="气泡排序法"><a href="#气泡排序法" class="headerlink" title="气泡排序法"></a>气泡排序法</h1><p>气泡排序的过程很简单从第一记录开始, 相邻的两个记录关键字进行比较, 若顺序不对, 立即交换, 直至N-1个与第N个比较为止得到一个最大(或最小)的关键字记录的结果位置</p>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序是每一趟在n-i+# (i= # , # , 3…n-# )个记录中选择关键字最小的记录作为有序序列中第i个记录其中最简单的是简单选择排序</p>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序的基本思想是把当前待排序的记录, 存放到整个表排好序后, 它应当在的最终位置上将原来的待排序表分割成两部分, 其中一部分表中的关键字均比另一部分表中的关键字小然后, 分别对两部分表用同样的方式进行排序, 直到整个表排好序</p>
<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>首先将根结点的记录与当前树中具有最大序号的记录交换, 把交换后具有最大序号的记录输出, 得到一个排序的结果这时的树不再是堆树, 排序暂时停止然后, 必须把树重新调整成堆树, 再重复上述过程, 直到所有记录都排好序</p>
<h1 id="归并排序-1"><a href="#归并排序-1" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序是把两个或两个以上的有序表合并成一个新的有序表把含有N 个记录的无序表当成N 个有序的子表, 每个子表的的长度为1, 然后, 利用两两归并, 得到n/2个长度为2或1的有序子表再两两归并直到得到长度为N 的一个有序表</p>
<h1 id="强连通图"><a href="#强连通图" class="headerlink" title="强连通图"></a>强连通图</h1><p>对于一个有向图, 每两个顶点之间都有路径, 称该图为强连通图</p>
<h1 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a>连通分量</h1><p>对于一个无向图, 其极大连通子图叫做该图一个连通分量</p>
<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序是借助 “分配” 和 “收集” 两种操作对单逻辑关键字进行排序的一种内排序方法</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构 栈和堆</title>
    <url>/DataStructure-Stack-Heap.html</url>
    <content><![CDATA[<p><strong>数据结构学习笔记</strong></p>
<a id="more"></a>

<h1 id="栈的类型定义"><a href="#栈的类型定义" class="headerlink" title="栈的类型定义"></a>栈的类型定义</h1><ul>
<li><p>也称为堆栈, 是一种先进后岀, 删除和插入都在栈顶操作的线性表</p>
<ul>
<li>堆是指重新运行时的动态内存</li>
</ul>
<ul>
<li>栈是指使用堆的方法</li>
</ul>
</li>
</ul>
<br>

<ul>
<li><strong>栈的特性: 先进后出, 后进先出 (最先放入栈的內容最后被拿岀来, 最后放入栈的内容最先被拿出来)</strong></li>
</ul>
<br> 

<p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%87%BA%E6%A0%88%E5%85%A5%E6%A0%88.gif"></p>
<br> 


<h2 id="栈的插入"><a href="#栈的插入" class="headerlink" title="栈的插入"></a>栈的插入</h2><br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">push()  <span class="hljs-comment">// 在栈顶插入元素</span><br></code></pre></td></tr></table></figure>
<br> 

<h2 id="栈的删除"><a href="#栈的删除" class="headerlink" title="栈的删除"></a>栈的删除</h2><br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C">pop()  <span class="hljs-comment">// 在栈顶移除一个元素, 并将栈数 -1</span><br></code></pre></td></tr></table></figure>
<br>

<h1 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h1><h2 id="InitStack-amp-S-构造空栈"><a href="#InitStack-amp-S-构造空栈" class="headerlink" title="InitStack (&amp;S) [构造空栈]"></a>InitStack (&amp;S) [构造空栈]</h2><ul>
<li><h3 id="操作结果-构造一个空栈S"><a href="#操作结果-构造一个空栈S" class="headerlink" title="操作结果: 构造一个空栈S"></a>操作结果: 构造一个空栈S</h3></li>
</ul>
<br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Init</span><span class="hljs-params">(SqStack s)</span><br>&#123;<br>    s.base=( <span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(size*<span class="hljs-keyword">sizeof</span>( <span class="hljs-type">int</span> ));<br>    s.top=s.base;<br>    s.stacksize=size;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h2 id="Push-amp-S-e-插入元素"><a href="#Push-amp-S-e-插入元素" class="headerlink" title="Push (&amp;S, e)  [插入元素]"></a>Push (&amp;S, e)  [插入元素]</h2><ul>
<li><h3 id="初始条件-栈S已存在"><a href="#初始条件-栈S已存在" class="headerlink" title="初始条件: 栈S已存在"></a>初始条件: 栈S已存在</h3></li>
</ul>
<ul>
<li><h3 id="操作结果-插入元素e为新的栈顶元素"><a href="#操作结果-插入元素e为新的栈顶元素" class="headerlink" title="操作结果: 插入元素e为新的栈顶元素"></a>操作结果: 插入元素e为新的栈顶元素</h3></li>
</ul>
<br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack s, <span class="hljs-type">int</span> e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(s.top-s.base&gt;s.stacksize)<br>    &#123;<br>        s.base=( <span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(size*<span class="hljs-keyword">sizeof</span>( <span class="hljs-type">int</span> ));<br>        s.top=s.base;<br>        s.stacksize=size;<br>    &#125;   <br>    *s.top++=e;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h2 id="Pop-amp-S-amp-e-删除元素"><a href="#Pop-amp-S-amp-e-删除元素" class="headerlink" title="Pop (&amp;S, &amp;e) [删除元素]"></a>Pop (&amp;S, &amp;e) [删除元素]</h2><ul>
<li><h3 id="初始条件-栈S已存在且非空"><a href="#初始条件-栈S已存在且非空" class="headerlink" title="初始条件: 栈S已存在且非空"></a>初始条件: 栈S已存在且非空</h3></li>
</ul>
<ul>
<li><h3 id="操作结果-删除S的栈顶元素-并用e返回其值"><a href="#操作结果-删除S的栈顶元素-并用e返回其值" class="headerlink" title="操作结果: 删除S的栈顶元素, 并用e返回其值"></a>操作结果: 删除S的栈顶元素, 并用e返回其值</h3></li>
</ul>
<br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack s, <span class="hljs-type">int</span> e)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(s.top-s.base&gt;s.stacksize)<br>    &#123;<br>        s.base=( <span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(size*<span class="hljs-keyword">sizeof</span>( <span class="hljs-type">int</span> ));<br>        s.top=s.base;<br>        s.stacksize=size;<br>    &#125;   <br>    *s.top++=e;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h2 id="Print-S-打印函数"><a href="#Print-S-打印函数" class="headerlink" title="Print (*S) [打印函数]"></a>Print (*S) [打印函数]</h2><ul>
<li><h3 id="初始条件-栈S已存在且非空-1"><a href="#初始条件-栈S已存在且非空-1" class="headerlink" title="初始条件: 栈S已存在且非空"></a>初始条件: 栈S已存在且非空</h3></li>
</ul>
<ul>
<li><h3 id="操作结果-删除S的栈顶元素-并用e返回其值-1"><a href="#操作结果-删除S的栈顶元素-并用e返回其值-1" class="headerlink" title="操作结果: 删除S的栈顶元素, 并用e返回其值"></a>操作结果: 删除S的栈顶元素, 并用e返回其值</h3></li>
</ul>
<br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(SqStack *s)</span><br>&#123;<br>    <span class="hljs-type">int</span> * temp;<br>    temp = s -&gt; top;<br>    <span class="hljs-keyword">while</span> ( temp != s -&gt; base)<br>    &#123;<br>        temp--;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h1 id="栈的递归调用"><a href="#栈的递归调用" class="headerlink" title="栈的递归调用"></a>栈的递归调用</h1><ul>
<li><h3 id="递归函数-一个直接调用直接或通过一系列的调用语句间接地调用自己的函数"><a href="#递归函数-一个直接调用直接或通过一系列的调用语句间接地调用自己的函数" class="headerlink" title="递归函数: 一个直接调用直接或通过一系列的调用语句间接地调用自己的函数"></a>递归函数: 一个直接调用直接或通过一系列的调用语句间接地调用自己的函数</h3></li>
</ul>
<br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span> <span class="hljs-params">( <span class="hljs-type">int</span> m )</span><br>&#123;<br>    <span class="hljs-keyword">if</span> ( m==<span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        printd(<span class="hljs-string">&quot;m=%d\n&quot;</span>,m);<br>        <span class="hljs-keyword">return</span> f ( m - <span class="hljs-number">1</span> );<br>    &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">f</span> <span class="hljs-params">( <span class="hljs-type">int</span> m)</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个大于1的数: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,f(n));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>
<br>


<h1 id="栈类型的实现"><a href="#栈类型的实现" class="headerlink" title="栈类型的实现"></a>栈类型的实现</h1><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><ul>
<li><h3 id="构造一个最大空机为-maxsize-的空顺序栈-S"><a href="#构造一个最大空机为-maxsize-的空顺序栈-S" class="headerlink" title="构造一个最大空机为 maxsize 的空顺序栈 S"></a>构造一个最大空机为 maxsize 的空顺序栈 S</h3></li>
</ul>
<br> 

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs C"><span class="hljs-meta"># <span class="hljs-keyword">define</span> STACK_INIT_SIZE 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    SElemType *base;<br>    SElemType *top;<br>    <span class="hljs-type">int</span> stacksize;<br>&#125; SqStack;<br><br>Status <span class="hljs-title function_">InitStack</span> <span class="hljs-params">( SqStack &amp;S, <span class="hljs-type">int</span> maxsize )</span><br>&#123;<br>        S.base = new ElemType[maxsize];<br>    <span class="hljs-comment">// 储存分配失败</span><br>    <span class="hljs-keyword">if</span> ( !S.base ) <span class="hljs-built_in">exit</span> ( OVERFLOW );<br>    S.top = S.base;<br>    S.stacksize = Maxsize;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">// 栈的插入</span><br>Status <span class="hljs-title function_">Push</span> <span class="hljs-params">( SqStack &amp;S, SElemType e )</span><br>&#123;<br>    <span class="hljs-comment">// 若栈不满, 则将 e 插入栈顶</span><br>    <span class="hljs-comment">// 栈满</span><br>    <span class="hljs-keyword">if</span> ( S.top - S.base &gt;= S.stacksize )<br>        <span class="hljs-keyword">return</span> OVERFLOW;<br>    *S.top++ = e;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">// 栈的删除</span><br>Status <span class="hljs-title function_">Pop</span> <span class="hljs-params">( SqStack &amp;S, SElemType &amp;e )</span><br>&#123;<br>    <span class="hljs-comment">// 若栈不空, 则删除 S 的栈顶元素</span><br>    <span class="hljs-comment">// 用 额返回其值, 并返回OK 否则返回 ERROR</span><br>    <span class="hljs-keyword">if</span> ( S.top == S.base ) <span class="hljs-keyword">return</span> ERROR;<br>    e = *--S.top;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><ul>
<li><h3 id="线性表有顺序存储结构和链式存储结构-栈属于线性表的一种-也具有顺序存储结构和链式存储结构"><a href="#线性表有顺序存储结构和链式存储结构-栈属于线性表的一种-也具有顺序存储结构和链式存储结构" class="headerlink" title="线性表有顺序存储结构和链式存储结构, 栈属于线性表的一种, 也具有顺序存储结构和链式存储结构"></a>线性表有顺序存储结构和链式存储结构, 栈属于线性表的一种, 也具有顺序存储结构和链式存储结构</h3></li>
</ul>
<br>

<p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E6%A0%88.jpg"></p>
<br>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>毛概学习</title>
    <url>/Maogai-Mustback-Study.html</url>
    <content><![CDATA[<p><strong>毛概学习笔记</strong></p>
<a id="more"></a>

<h1 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章    绪论"></a>第1章    绪论</h1><p><img src="https://s2.loli.net/2022/01/02/oh49NZLnj8BJlOF.png" alt="image-20220102073756143"></p>
<h2 id="一、马克思主义的科学内涵"><a href="#一、马克思主义的科学内涵" class="headerlink" title="一、马克思主义的科学内涵"></a>一、马克思主义的科学内涵</h2><p>马克思主义是关于自然界、人类社会、人类思维发展的<font color="red"><strong>一般规律</strong></font>的理论体系，解释了事物的本质、内在联系及发展规律，是“**<font color="red">伟大的认识工具</font>**”，是人们观察世界、分析问题的有力思想问题。</p>
<p><font style="background: yellow">知识扩展1：马克思主义和具体科的学关系</font></p>
<p>二者体现了矛盾的普遍性和特殊性</p>
<p><font style="background: yellow">知识扩展2：马克思主义诞生的标志</font></p>
<p>1848年，《共产党宣言》的发表。</p>
<h2 id="二、-马克思主义中国化的科学内涵"><a href="#二、-马克思主义中国化的科学内涵" class="headerlink" title="二、    马克思主义中国化的科学内涵"></a>二、    马克思主义中国化的科学内涵</h2><p>（一）马克思逐一中国化的<span style="background: yellow; ">必然性</span></p>
<p>1、是解决中国实际问题的客观需要；</p>
<p>2、是马克思逐理论发展的内在要求。</p>
<p>（<font color="red"><strong>马克思主义具有发展性</strong></font>）</p>
<p>（二）马克思主义中国化的科学内涵（<font color="red">识记</font>）</p>
<p><strong>具体化：</strong>就是把马克思主义基本原理同中国具体实际和时代特征结合起来，运用马克思主义的立场、观点、方法研究和解决中国革命、建设、改革中的实际问题。</p>
<p><strong>理论化：</strong>就是总结和提炼中国革命、建设、 改革的时间经验，从而认识和掌握客观规律，为马克思主义理论宝库增添新的内容。</p>
<p><strong>民族化：</strong>就是运用中国人民喜闻乐见的民族语言来阐述马克思主义理论，使之成为具有中国特色、中国风格、中国气派的马克思主义。</p>
<h2 id="三、-马克思主义中国化的历史进程"><a href="#三、-马克思主义中国化的历史进程" class="headerlink" title="三、    马克思主义中国化的历史进程"></a><font style="background: yellow">三、    马克思主义中国化的历史进程</font></h2><p>（一）两次历史进程</p>
<p><strong>第一次</strong>：发生在新民主义革命时期，形成毛泽东思想。</p>
<p><strong>第二次</strong>：发生在社会主义进入改革开放的新时期，形成了中国特色社会主义理论体系。</p>
<p>（二）两大理论体系</p>
<p>第一大理论成果：毛泽东思想    （**<font color="red">什么是中国革命？怎样进行中国革命？</font>**）</p>
<p>第二大理论成果：中国特色社会主义理论体系包括以下四个：</p>
<p><strong>邓小平理论：</strong>什么是社会主义，怎样建设社会主义？</p>
<p><strong>““三个代表”重要思想：</strong>建设什么样的党？怎样建设党？</p>
<p><strong>科学发展观：</strong>实现什么样发展？怎样发展？</p>
<p><strong>习近平新时代中国特色社会主义思想：</strong>坚持发展什么样中国特色社会主义？怎样坚持发展中国特色社会主义？</p>
<p>（三）中国化马克思主义理论的历史地位</p>
<p><font color="red">是马克思主义中国化的理论成果，是中国化马克思主义，中国共产党长期坚持的知道思想和全国各民族团结奋斗的思想基础，是国家指导思想。</font></p>
<p><font color="cornflowerblue"><strong>易错点：</strong>马克思主义中国化的第二大理论成果：邓小平理论。</font></p>
<p>解析：是马克思主义中国化的第二大开篇之作。</p>
<p><strong><font color="orange">补充：</font></strong></p>
<ul>
<li><p>在中国历史上，把马克思主义介绍到中国第一人是李大钊</p>
</li>
<li><p>在中国历史上，第一个明确提出”马克思主义中国化“是毛泽东</p>
<ul>
<li>1938年，六届三中全会《论新阶段》</li>
</ul>
</li>
</ul>
<h1 id="第2章-毛泽东思想形成和发展"><a href="#第2章-毛泽东思想形成和发展" class="headerlink" title="第2章    毛泽东思想形成和发展"></a>第2章    毛泽东思想形成和发展</h1><h2 id="一、-毛泽东思想形成和发展"><a href="#一、-毛泽东思想形成和发展" class="headerlink" title="一、    毛泽东思想形成和发展"></a>一、    毛泽东思想形成和发展</h2><p><strong>1.毛泽东思想形成发展的历史条件</strong></p>
<p><strong>时代背景：</strong>19世纪末29世纪初，世界进入帝国主义和无产阶级革命新时代（提示：回顾世界历史1919年俄国爆发的十月革命对中国的影响）    <font color="red">战争与时代的时代主题</font></p>
<p><strong>实践基础：</strong>中国共产党领导的革命和建设的成功实践</p>
<p><strong>2.毛泽东思想形成发展的过程</strong></p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>时间</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>萌芽</td>
<td>1924-1927</td>
<td>《中国社会各阶级的分析》<br>《湖南农民鱼洞考察报告》</td>
</tr>
<tr>
<td><font color="red"><strong>形成</strong></font></td>
<td>1927-1937</td>
<td>《井冈山的斗争》<br>《关于纠正党内的错误思想》<br>《星星之火，可以燎原》</td>
</tr>
<tr>
<td><font color="red"><strong>成熟</strong></font></td>
<td>1937-1945</td>
<td>《共产党发刊词》<br>《中国革命和中国共产党》<br>《新民主义论》</td>
</tr>
<tr>
<td>继续发展</td>
<td>解放战争和建国以后</td>
<td>《论人民民主专政》<br>《论十大关系》<br>《关于正确处理人民内部矛盾的问题》</td>
</tr>
</tbody></table>
<p><font color="orange"><strong>补充：</strong></font></p>
<img src="https://s2.loli.net/2022/01/05/LrDPszxWaKf8dF3.png" style="zoom:200%;">

<p><font color="red"><strong>重点把握：</strong></font></p>
<ul>
<li><font color="red"><strong>毛泽东思想形成的标志，提出中国革命的新道路</strong></font></li>
<li><font color="red"><strong>毛泽东思想成熟的标志，系统阐述新民主主义革命理论</strong></font></li>
<li><font color="red"><strong>将毛泽东思想写入党章是在1945年的中共七大上</strong></font></li>
</ul>
<h2 id="二、-毛泽东思想的主要内容"><a href="#二、-毛泽东思想的主要内容" class="headerlink" title="二、    毛泽东思想的主要内容"></a>二、    毛泽东思想的主要内容</h2><ul>
<li><p>6个基本方面</p>
<ul>
<li>新民主主义革命理论</li>
<li>社会主义革命和社会主义建设理论</li>
<li>革命军队建设和军事战略的理论</li>
<li>政策和策略的理论</li>
<li>思想政治工作和文化工作的理论</li>
<li>党的建设理论</li>
</ul>
</li>
<li><p>毛泽东思想的活的灵魂，是贯穿于各个理论的立场、观点和方法。它们有三个基本方面，即**<font color="red">实事求是、群众路线、独立自主</font>**</p>
<ul>
<li><p>实事求是（马克思主义的精髓）：**<u>就是一切从实际出发，理论联系实际，坚持在实践中检验真理和发展真理</u>**</p>
</li>
<li><p>群众路线：<strong>就是一切为了群众，一切依靠群众，从群众中来，到群众中去。<font color="red">群众路线是我党的生命线和根本工作原则</font>。</strong></p>
<p>坚持群众路线的要求：</p>
<ol>
<li>要坚持人民是推动历史发展的根本力量；</li>
<li>要坚持全心全意为人民服务的根本宗旨；</li>
<li>要保持党同人民群众的血肉联系。</li>
</ol>
<p><strong><u>注意：全心全意为人民服务是我们党一切行动的根本出发点和落脚点，是我们党区别于其他一切正当的根本标志。</u></strong></p>
</li>
<li><p>独立自主：**<u>就是坚持独立思考，走自己的路，把立足点放在依靠自己力量的基础上。</u>**</p>
<p>坚持独立自治的要求：</p>
<ol>
<li>要坚持中国的诗情必须有中国人民自己处理；</li>
<li>要坚持独立自主的和平外交政策，坚定不移走和平发展道路。</li>
</ol>
</li>
<li><p><strong><font color="orange">补充</font>：</strong></p>
<ul>
<li>在党的历史上，首次提出：“毛泽东的思想获得灵魂”的文献是《中国共产党中央委员会关于建国以来党的若干历史问题的决议》</li>
<li>新中国成立初期，毛泽东提出的外交方针是：另<strong>起炉灶，一边倒，打扫屋子再请客</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三、毛泽东思想的历史地位"><a href="#三、毛泽东思想的历史地位" class="headerlink" title="三、毛泽东思想的历史地位"></a>三、毛泽东思想的历史地位</h2><ol>
<li><p>马克思主义中国化第一次历史性飞跃的理论成果</p>
<ul>
<li><p>在中国共产党的历史上，毛泽东在认证总结历史经验的基础上，<font color="red"><strong>第一次明确提出了马克思主义同中国实际相结合</strong>。</font>毛泽东思想是马克思主义中国化的第一理论形态，实现了马克思主义中国话的第一次历史性飞跃。</p>
<p><font color="orange">注意：李大钊和毛泽东</font></p>
</li>
</ul>
</li>
<li><p>中国革命和建设的科学指南</p>
<ul>
<li>在毛举东忠想的指引下，我们程到了新民主主义革命的正确道路，结束了中国半殖民地半封建社会的历史，建立了中华人民共和国：找到从新民主主义向社会主义过渡的道路，确立了社会主义基本制度。在此基础上毛泽东又对适合中国国情的社会主义道路进行了艰苦探索，并取得了重要的理论成果，提出了许多很有启发性的论断。</li>
</ul>
</li>
<li><p>中国共产党和中国人民宝贵的精神财富</p>
<ul>
<li>毛泽东是伟大的马克思主义者、伟大的无产阶级革命家、战略家和理论家。他为中国共产党和中国人民解放军的创立和发展，为中国各族人民解放事业的胜利，为中华人民共和国的缔造和社会主义事业的发展，建立了不可磨灭的功勋，为世界被压迫民族的解放和人类进步事业作出了重大贡献。</li>
</ul>
</li>
</ol>
<ul>
<li><p>科学评价毛泽东和毛泽东思想</p>
<p><u>毛泽东是伟大的马克思主义者、伟大的无产阶级革命家、战略家和理论家。他为中国共产党和中国人民解放军的创立和发展，为中国各族人民解放事业的胜利，为中华人民共和国的缔造和社会主义事业的发展，建立了不可磨灭的功勋，为世界被压迫民族的解放和人类进步事业作出了重大贡献。</u></p>
<p><strong><font color="red">毛泽东的功绩是第一位的，错误是第二位的</font>。</strong></p>
<p>将毛泽东晚年的错误同毛泽东思想区别开来。</p>
</li>
</ul>
<h1 id="第3章-新民主主义革命理论"><a href="#第3章-新民主主义革命理论" class="headerlink" title="第3章    新民主主义革命理论"></a>第3章    新民主主义革命理论</h1><p>时间：1919~1949</p>
<h2 id="第一节-新民主主义革命理论的形成"><a href="#第一节-新民主主义革命理论的形成" class="headerlink" title="第一节    新民主主义革命理论的形成"></a>第一节    新民主主义革命理论的形成</h2><p>、<strong>近代中国的国情——新民主主义革命理论形成的历史背景</strong></p>
<p><strong>中国革命的时代特征——新民主主义革命理论形成的时代条件</strong></p>
<p><strong>中国革命经验的概括和总结——新民主主义革命理论形成的实践基础</strong></p>
<h4 id="一、-近代中国国情和中国革命的时代特征"><a href="#一、-近代中国国情和中国革命的时代特征" class="headerlink" title="一、    近代中国国情和中国革命的时代特征"></a>一、    近代中国国情和中国革命的时代特征</h4><ol>
<li><p><strong><em><font color="red">近代中国的国情——新民主主义革命理论形成的历史背景</font></em></strong></p>
<ol>
<li>毛泽东指出：“认清中国社会的性质，就是说认清中国的国情，乃是认清一切革命问题的基本的根据。<br>”<br>认清国情，是解决中国革命问题的基本前提。</li>
</ol>
</li>
</ol>
<pre><code>  从1840年起，帝国主义列强先后发动了两次鸦片战净、中法战净、甲午战净、八国联军侵华战净等，迫使中国签订了一系列不平等条约。其中《南条约》《马关条约》《丑条约》等3个条约对中国伤害最深。**&lt;u&gt;使中国逐步沦为半殖民地半封建社会。这是近代中国最基本的国情。&lt;/u&gt;**



  **近代中国半殖民地半封建社会的基本特点**

  **近代中国的国情——新民主主义革命理论形成的历史背景**

  <figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">第一，中国虽然保持独立的形式，但实际上已丧失了独立主权。<br>帝国主义侵略势力日益成为统治中国的决定性力量。帝国主义列强强迫清政府签订不平等条约，从经济、政治、文化等各方面牢牢控制了中国，成为近代中国一切灾难和祸害的总根源，是阻碍中国独立发展的根本原因。<br><br>第二，中国的封建势力已经同帝国主义侵略势力狼狈为奸，相互勾结，成为了帝国主义奴役中国的社会基础。封建势力对外勾结帝国主义，对内残酷剥削人民，是近代中国最反动的统治势力。<br><br>第三，外国列强的入侵，使封建时代的自给自足的自然经济基础被破坏。但封建剥哨削制度的根基（即封建地主土地所有制）不但依旧保持着，而且同买办资本和高利贷资本的剥削相结合，在中国社会经济生活中占着明显的优势。<br><br>第四，民族资本主义有了某些发展，并在政治、文化生活中起了颇大的作用：但中国民族资本主义是在外国资本主义势力、本国官僚买办资本势力和封建势力的夹缝中产生和发展起来的，始终没有成为中国社会经济的主要形式。<br><br>第五，由于帝国主义列强在中国划分势力范围，实行分裂、剥削政策，又由于小农经济的广泛存在，加上中国地域广大，造成中国实际上长期不统一，中国政治、经济、文化的发展表现出极端的不平衡。<br><br>第六，在帝国主义和封建主义的双重压迫下，中国广大人民群众尤其是农民，过着饥寒交迫又毫无政治权利的生活，中国人民经济上的贫困和政治上的不自由程度，是世界所少有的。<br></code></pre></td></tr></table></figure></code></pre>
<p>   ​        <strong><font color="orange">近代中国社会的主要矛盾和根本任务</font></strong></p>
<p>   ​        **<font color="red">帝国主义和中华民族的矛盾，封建主义和人民大众的矛盾</font>**，        这些就是近代中国社会的主要矛盾。当然还有别的盾。”“而        **<u>帝国主义和中华民族的矛盾，乃是各种矛盾中的最主要的矛        盾</u>**。</p>
<p>   ​        **<font color="red">主要矛盾决定了近代中国革命的根本任务是推翻帝国主义、封建主义和官僚资本主义的统治</font>**，从根本上推翻反动腐朽的政治上层建筑，变革阻碍生产力发展的生产关系，为建设富强民主的国家、确立人民当家作主的政治制度、改善人民生活扫清障碍，创造必要的前提。</p>
<ol start="2">
<li><p><strong><font color="red">中国革命的时代特征——新民主主义革命理论形成的时代条件</font></strong></p>
<p>近代中国的社会性质个主要矛盾，决定了整个革命是资产阶级民主革命。</p>
<ul>
<li><p><strong>十月革命对中国资产阶级民主革命的影响</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">十月革命使中国的资产阶级民主主义革命，从原来属于引旧的世界资产阶级民主主义革命的范畴，属王旧的世界资产阶级民主主义革命的一部分，转变为属于新的资产阶级民主主义革命的范畴，属于世界无产阶级社会主义革命的一部分。<br></code></pre></td></tr></table></figure></li>
<li><p><strong>五四运动的历史意义</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">以五四运动的爆发为标志，中国资产阶级民主革命进入新民主主义革命的崭新阶段。<br></code></pre></td></tr></table></figure></li>
<li><p><strong>中国的新民主主义革命与其他民主革命存在不同之处</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">民主主义革命和历史上欧美各国的民主革命大不相同，它不是要建立资产阶级的共和国，造成资产阶级专政，而是要造成各革命阶级在无产阶级领导之下的联合专政，建立各革命阶级联合专政的民主共和国，为进入社会主义社会做准备。<br>它和一般意义上的社会主义革命也不相同，它只推翻帝国主义、封建主义和官僚资本主义的反动统治，而不破坏参加反帝反封建的资本主义成分。这样的民主主义革命，不是旧范畴的民主主义革命，而是新民主主义革命。<br>中国革命要分两步走，第一步是完成反帝反封建的新民主主义革命任务，第二步是完成社会主义革命任务，这是性质不同但又相互联系的两个革命过程。<br></code></pre></td></tr></table></figure>
<ul>
<li><font style="background: yellow"><strong>新民主主义革命与旧民主主义革命的区别：领导阶级不同（根本不同）、指导思想不同、奋斗目标不同、时代条件不同</strong></font></li>
</ul>
</li>
</ul>
</li>
<li><p>中国革命经验的概括和总结——新民主主义革命理论形成的实践基础</p>
<ul>
<li><p>旧民主主义革命的失败呼唤新的革命理论；</p>
<p>1840~1919：农民（太平天国运动）——&gt;地主（洋务运动）——&gt;民资阶级（百日维新）——&gt;民资革命（辛亥革命）</p>
</li>
<li><p>新民主主义革命的艰辛探索奠定了革命理论形成的实践基础</p>
</li>
</ul>
</li>
</ol>
<h2 id="第二节-新民主主义革命的总路线和基本纲领"><a href="#第二节-新民主主义革命的总路线和基本纲领" class="headerlink" title="第二节    新民主主义革命的总路线和基本纲领"></a>第二节    新民主主义革命的总路线和基本纲领</h2><h3 id="一、-新民主主义革命的总路线"><a href="#一、-新民主主义革命的总路线" class="headerlink" title="一、    新民主主义革命的总路线"></a>一、    新民主主义革命的总路线</h3><p><strong>总路线是相对于具体路线而言的根本指导路线。</strong></p>
<p>**<u>1939年，毛泽东在《中国革命和中国共产党》一文中第一次提出了“新民主主义革命”的科学概念。（2019单选）1948年，他在《在晋绥王部会议上的进话》中完整地表述了总路线的内容</u>**，新民主主义革命是“无产阶级领导的，人民大众的，反对帝国主义、封建主义和官僚资本主义的革命”</p>
<ul>
<li><p>新民主主义革命的对象（三座大山）</p>
<p><font color="red">分清敌友，这是革命的首要问题。</font></p>
<p>1948年4月，毛泽东《在晋绥干部会议上的讲话》中指出：“这个革命所要推翻的敌人，只是和必须是<font color="red"><strong>帝国主义、封建主义和官僚资本主义</strong></font>。这些敌人的集中表现，就是蒋介石国民党的反动统治。</p>
<ul>
<li><p>帝国主义</p>
<p><u>帝国主义是中国革命的首要对象。</u></p>
<p>帝国主义是中国社会进步和发展的最大障碍，是近代中国贫困落后和一切灾难祸害的总根源。推翻帝国主义的压迫是中国走向独立和富强的前提。<br>“帝国主义列强侵入中国的目的，决不是要把封建的中国变成资本主义的中国。是要把中国变成它们的半殖民地和殖民地。”</p>
</li>
<li><p>封建主义</p>
<p>首先，封建剥削制度是帝国主义统治中国的主要支柱和中国封建军阀实行专制统治的社会基础。<br>其次，封建主义的统治也是近代中国经济现代化和政治民主化的主要障碍，是中华民族进步的拦路虎。</p>
</li>
<li><p>官僚贫资本王义</p>
<p>官僚资本主义同外国帝国主义、本国地主阶级和旧式富农密切地结合着，具有买办性、封建性、垄断性。它是和国家政权结合在一起的国家垄断资本主义。以蒋介石、宋子文、孔祥熙、陈果夫四大家族为代表的国民党官僚资本成为新民主主义革命的又一对象。</p>
</li>
<li><p>注意：</p>
<p>从总体上说，中国革命的对象是帝国主义、封建主义和官僚资本主义，它们是压在中国人民头上的三座大山。<br><strong><font color="orange">但是，在不同历史阶段，随着社会主要矛盾的变化，革命的主要对象有所不同。</font></strong></p>
<ol>
<li>在国共合作的大革命时期，革命的主要对象是帝国主义支持下的北洋军阀：</li>
<li>在土地革命战争时期，革命的主要对象是国民党新军阀；</li>
<li>在抗日战争时期，革命的主要对象是日本帝国主义；</li>
<li>解放战净时期，革命的主要对象是美帝国主义支持下的国民党反动派。</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>新民主义革命的动力——“人民大众”（2017单选）</strong></p>
<p>新民主主义革命的动力就是革命的<font color="red">依靠力量</font>，包括<strong>无产阶级、农民阶级、城市小资产阶级和民族资产阶级</strong></p>
<ol>
<li><p>**<font color="red">无产阶级是新民主主义革命最基本的动力</font>**，是中国沦为半殖民地半封建社会过程中最早出现的一个新的社会阶级，是新的社会生产力的代表，是近代中国最进步的阶级，也是新民主主义革命的领导阶级。</p>
</li>
<li><p>农民阶级是中国革命的主力军和无产阶级最可靠的同盟军。</p>
<p>其中的贫雇农是无产阶级最可靠的同盟军，中农是无产阶级可靠的同盟军；农民问题是中国革命的基本问题；</p>
<p><u><font color="red">新民主主义革命实质上就是党领导下的农民革命</font></u>，中诚逢赛质二就是完领导下的农民战净，</p>
</li>
<li><p>小资产阶级是中国革命的基本动力和无产阶级可靠的同盟军（注意：<font color="red">城市小资产阶级不等于资产阶级</font><br>）</p>
</li>
<li><p>民族资产阶级是新民主主义革命动力之一。</p>
<p>新民主义革命时期具有革命性、也有软弱性和妥协性；</p>
<p>社会主义革命时期具有剥削工人阶级利益的一面，也有拥护社会主义改造的一面（<font color="red">民资的两面性在不同时期的表现</font>）</p>
</li>
</ol>
</li>
<li><p>新民主主义革命的领导权</p>
<p>新民主主义革命必须由**<font color="red">无产阶级和中国共产党</font>**来领导，这是新民主主义革命区别于旧民主主义革命的根本标志。</p>
<p>无产阶级的领导权是中国革命的中心问题，也是新民主主义革命理论的核心问题。</p>
<ul>
<li><strong><font style="background:yellow">无产阶级领导中国革命的历史必然性（原因）</font></strong><ol>
<li>资产阶级的妥协性、软弱性决定了其不能领导革命取得胜利必要性</li>
<li>中国无产阶级的特点和优点，决定了中国无产阶级能够成为中国革命的领导阶级一可能性<ul>
<li>第一，深受帝国主义、封建主义和官僚资本主义的三重压迫具有坚强的斗争性和彻底的革命性；</li>
<li>第二，中国无产阶级和广大农民有着天然的联系，便于他们结成紧密的联盟</li>
<li>第三，中国无产阶级人分布集中，便于组织和领导，形成一支重要力量开展斗争</li>
</ul>
</li>
</ol>
</li>
<li>无产阶级及其政党对中国革命的领导权的实现<ol>
<li>无产阶级及其政党对中国革命的领导权是在与资产阶级争夺领导权的斗争中实现的。</li>
<li>无产阶级及其政党实现领导权的关键是**<font color="red">必须</font>**建立以工农联盟为基础的广泛的统一战线。</li>
<li>无产阶级在同资产阶级建立统一战线时，**<font color="red">必须</font>**坚持独立自主的原则，保持党在思想上、政治上和组织上的独立性，实行又联合又斗争的方针，这是坚持领导权的基本策略。</li>
<li>无产阶级要保持在民主革命中的领导权，就**<font color="red">必须</font>**建立和发展人民的革命武装力量。是保证领导权的坚强支柱。</li>
<li>加强无产阶级政党的建设，是实现领导权的根本保证。</li>
<li><strong><em><u><font color="red">注意：无产阶级及其政党的领导，是中国革命取得胜利的根本保证</font></u></em></strong></li>
</ol>
</li>
</ul>
</li>
<li><p>新民主主义革命的性质和前途</p>
<p>新民主主义革命的<strong>实质</strong>阶级领导的<font color="red">民主革命</font></p>
<ul>
<li>新旧民主主义革命的内在联系<ol>
<li>革命对象和任务相同</li>
<li>革命的基本动力基本相同</li>
<li>革命的性质相同</li>
</ol>
</li>
</ul>
</li>
<li><p>新旧民主主义革命的区别</p>
<ol>
<li>革命的领导阶级不同（资-无）</li>
<li>革命的时代不同（资-无）</li>
<li>革命的指导思想不同（资-马）</li>
<li>革命的前途不同（资-社）</li>
</ol>
</li>
</ul>
<p>近代中国半殖民地半封建社会的性质和中国革命的历史任务，决定了中国革命的性质**<font color="red">不是无产阶级社会主义革命，而是“新式的特殊的资产阶级民主主义革命”</font>**。但属于世界无产阶级革命的一部分。</p>
<ul>
<li><p>新民主主义革命的前途问题</p>
<p><strong>实际上是怎样处理新民主主义革命与社会主义革命两者之间关系的问题</strong></p>
<ul>
<li><p>二者的区别：</p>
<ol>
<li>新民主主义革命与社会主义革命性质不同<br>。新民主主义革命仍然属于资产阶级民主主义革命的范畴。社会主义革命是无产阶级性质的革命。</li>
<li>革命对象不同。新民主主义革命推翻帝国主义、封建主义和官僚资本主义的反动统治，社会主义革命推翻的是资产阶级。</li>
<li>奋斗目标不同。新民主主义革命要建立的是无产阶级领导的各革命阶级的联合专政，而不是无产阶级专政。社会主义革命实现的目标是消灭资本主义剥削制度和改造小生产的私有制。</li>
</ol>
</li>
<li><p>毛泽东指出中国革命必须分两步走：</p>
<p>第一步是新民主主义革命，</p>
<p>第二步是社会主义革命。</p>
<p>两者的联系如同一篇文章的上、下篇，“只有上篇做好，下篇才能做好”；“这是两个性质不同的革命过程，只有完成了前一个革命过程才有可能去完成后一个革命过程。**<font color="red">民主主义革命是社会主义革命的必要准备，社会主义革命是民主主义革命的必然趋势</font>**。”“只有认清民主主义革命和社会主义革命的区别，同时又认清二者的联系，才能正确地领导中国革命。</p>
<ul>
<li><p><strong>任中国革命的“两步走”的问题上必须反对两种错误倾向</strong></p>
<ol>
<li><p>一种是陈独秀的“二次革命论”：</p>
<p>认为中国资产阶级民主革命只有由资产阶级领导，革命胜利后由资产阶级掌握政权，建立资产阶级共和国和资本主义社会。无产阶级只有坐等资本主义发展后，再来进行社会主义革命**<font color="red">陈独秀的错误在于：只看到新民主主义革命与社会主义革命的区别，忽视两者的联系。</font>**</p>
</li>
<li><p>另一种是土地革命时期的“左”错误所主张的“一次革命论”（王明的“毕其功于一役”）。</p>
<p>他们混淆了民主革命与社会主义革命的界限，企图把两种不同性质的革命阶段并作一步走，一举取得社会主义革命的胜利。主张在反帝、反封建的同时要反对资产阶级，甚至上层小资产阶级，要在民主革命中完成社会主义革命的任务</p>
<p><strong><font color="cornflowerblue">他们的错误在于：只看到两者之间的联系，而忽视了两者之间的区别</font></strong></p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、新民主主义的基本纲领"><a href="#二、新民主主义的基本纲领" class="headerlink" title="二、新民主主义的基本纲领"></a>二、新民主主义的基本纲领</h3><p>纲领是对路线的具体展开</p>
<p>重点把握政治纲领和经济纲领</p>
<ul>
<li><p>新民主主义的政治纲领</p>
<p>新民主主义的政治纲领即新民主主义国家政权的基本主张。</p>
<p>基本<strong>内容是推翻封建主义和帝国主义的统治，建立一个无产阶级领导的以工农联盟为基础的、各革命阶级联合专政的新民主主义国家。</strong></p>
<ul>
<li>新民主主义政治的特点<ol>
<li>新民主主义共和国的国休是无产阶级领导的，以工农联盟为基础的，几个革命阶级的联合专政，是无产阶级领导的人民民主专政的国家。</li>
<li>新民主主义共和国的政体是民主集中制的人民代表大会制度。</li>
<li>新民主主义政权是一种过渡性质的政权组织形式，但其发展趋势是向社会主义方向转变。（1949~1956年）</li>
</ol>
</li>
</ul>
</li>
<li><p>新民主主义的经济纲领（两没收一保护）</p>
<ol>
<li><p>没收封建阶级的土地归农民所有一一这是新民主主义革命的**<font color="red">主要内容</font>**</p>
</li>
<li><p>没收官僚垄断资本归新民主主义国家所有<br>（**<font color="red">题中应有之义，具有双重性</font>**）</p>
<ul>
<li><p><font style="background:yellow"><strong>注意：理解没收官僚归新民主主义国家所有的性质</strong></font>&gt;</p>
<p>没收官僚资本既是新民主主义革命的任务，同时又属于社会主义革命的范畴，具有新民主主义革命和社会主义革命的双重革命性质。</p>
<p>没收官僚资本，就消灭其封建性、买办性来说是民主革命的任务；没收官僚资本，消灭了官僚资产阶级，也就消灭了占统治地位的大资产阶级，</p>
<p>没收官僚资本主义企业归国家所有，直接建立和发展了社会主义的国营经济，因此又具有社会主义革命的性质。</p>
</li>
</ul>
</li>
<li><p>保护民族工商业（极具特色的一项内容，是由中国落后的生产力和新民主主义革命的性质所决定的）</p>
</li>
</ol>
</li>
<li><p>新民主主义的文化纲领</p>
<ul>
<li><p>新民主主义文化就是“无产阶级领导的人民大众的反帝反封建的文化”，即民族的科学的大众的文化。</p>
<p><strong><font color="red">具有民族性、科学性和大众性=民主性</font></strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="第三节-新民主义革命的道路和基本经验"><a href="#第三节-新民主义革命的道路和基本经验" class="headerlink" title="第三节    新民主义革命的道路和基本经验"></a>第三节    新民主义革命的道路和基本经验</h2><h3 id="一、-新民主义革命的道路"><a href="#一、-新民主义革命的道路" class="headerlink" title="一、    新民主义革命的道路"></a>一、    新民主义革命的道路</h3><ul>
<li><p>对中国革命的艰辛探索</p>
<ol>
<li>中国共产党成立初期，工作重心在城市</li>
<li>到1928年底，提出工农武装割据的思想</li>
<li>1930年，形成以乡村为中心的思想</li>
<li>1938年六届六中全会最后确立</li>
</ol>
</li>
<li><p>农村包围城市、武装夺取政权的依据及其内容</p>
<ul>
<li><p><font color="red"><strong>必要性：时代特点和基本国情</strong></font></p>
<ol>
<li>外无民族独立，内无民主制度决定了中国革命必须以长期武装斗争为主要形式。武装斗争是中国革命的特点和优点之一。</li>
<li>农民占人口绝大多数，是无产阶级可靠的同盟军和主力军。<br>决定了中国的武装斗争实质上是无产阶级领导的农民战争</li>
</ol>
</li>
<li><p><strong><font color="red">可能性：（中国红色政权能够存在发展的原因和条件）</font></strong></p>
<ol>
<li>中国的基本国情。近代中国是一个政治、经济、文化发展极不平衡的半殖民地半封建的大国。这是红色政权能够存在和发展的最根本原因</li>
<li>国民革命影响的存在和良好的群众基础，是红色政权存在和发展的必备客观条件</li>
<li>中国革命形势继续向前发展，是红色政权能够存在和发展的重要客观条件</li>
<li>有相当力量的正式红军的存在，是红色政权存在和发展的必要条件</li>
<li>共产党的领导以及正确的政策，是红色政权能够存在和发展的最重要的主观条件。</li>
</ol>
</li>
<li><p>工农武装割据”思想：</p>
<p>中国革命走农村包围城市、武装夺取政权的道路，根本在于处理好土地革命、武装斗争、农村革命根据地建设三者之间的关系。</p>
<p>在中国共产党的领导下，**<u>以土地革命为基本内容，以武装斗争为主要形式，是农村根据地建设和士地革命的强有力保证：农村革命根据地是战略阵地</u>**。</p>
</li>
</ul>
</li>
<li><p>中国革命道路理论的意义</p>
<ol>
<li>农村包围城市道路的开辟揭示了中国革命发展的规律指明了国民革命失败以后革命前进的方向和夺取胜利的途径</li>
<li>农村包围城市道路的理论体现了中国国情，是对中国社会的深入了解和体验</li>
<li>农村包围城市道路的理论是在反对错误倾向的斗争中产生的，体现了敢于冲破理论禁区，勇于探索真理的精神</li>
<li>农村包围城市道路理论的产生，发展和完善，在世界共产主义运动史上开辟了革命模式多样化的进程</li>
<li>这是中国共产党人创造性地把马克思主义的基本原理同中国革命的具体实际相结合的重要成果，对于推进马克思主义中国化具有重要的方法论意义。</li>
</ol>
</li>
</ul>
<h3 id="二、-新民主义革命的三大法宝"><a href="#二、-新民主义革命的三大法宝" class="headerlink" title="二、    新民主义革命的三大法宝"></a>二、    新民主义革命的三大法宝</h3><p><font color="red"><strong>1939年毛泽东在</strong><br><strong>（共产党人》发刊饲》</strong></font>中科学地总结了中国革命的经验，提出中国革命的三大法宝是**<font color="red">统一战线、武装斗争和党的建设</font>**，“正确地理解了这三个问题及其相互关系，就等于正确地领导了全部中国革命。</p>
<ul>
<li><p>统一战线</p>
<ul>
<li><p>必要性：</p>
<ol>
<li><p>近代中国的“两头小中间大的阶级状况，决定了无产阶级及其政党必须建立广泛的统一战线</p>
<p>**<font color="red">无产阶级和地主大资产阶级都只占少数</font>**，最广大的人民是农民城市小资产阶级以及其他的中间阶级。（两头小中间大）</p>
</li>
<li><p>中国革命的长期性、残酷性和发展的不平衡性，也决定了无产阶级及其政党必须采取统一战线的策略</p>
</li>
</ol>
</li>
<li><p>现实可能性</p>
<p><strong><font color="red">半殖民地半封建的中国社会，是近代世界矛盾的焦点，存在着内外部的各种矛盾。这在客观上为中国共产党提供了利用矛盾，建立和发展统一战线的可能性</font></strong></p>
<ul>
<li>第一，工、农、城沛小资产阶级占全国人口的多数，革命要求强烈是统一战线的主力军</li>
<li>第二，民族资产阶级能参加反帝反封建斗争，但又缺乏革命的彻底性是统一战线中的中间派</li>
<li>第三，带买办性的大资产阶级中的某一个集团在某些特殊的历史条件下，也可能成为统一战线中的暂时的同盟者</li>
</ul>
</li>
<li><p>革命统一战线联盟</p>
<p>从总体上讲，党领导的革命统一战线，包含着两个联盟：一个是工人阶级同农民阶级、广大知识分子及其他劳动者的联盟，主要是工农联盟；另一个是工人阶级和非劳动人民的联盟，主要是与民族资产阶级的联盟。</p>
</li>
<li><p>党建立、巩固和发展统一战线的实践经验</p>
<p>主要在于这样几个方面：</p>
<ol>
<li>要建立巩固的工农联盟。</li>
<li>要正确对待资产阶级，尤其是民族资产阶级。在革命斗争中要依据革命的需要，对资产阶级实行既联合又斗争的策略。联合民族资产阶级要针对其两面性特点，在联合的过程中要在思想上、政治上、组织上进行必要的斗争。</li>
<li>要采取区别对待的方针。在革命进程中，要坚持发展进步势力、争取中间势方、孤立顽固势力的策略方针。</li>
<li>要坚持独立自主的原则。要保持党在政治上、组织上和思想上的独立性</li>
</ol>
</li>
</ul>
</li>
<li><p>武装斗争</p>
<ol>
<li><p>中国革命的主要形式是长期的武装斗争</p>
<p>武装斗争是中国革命的特点和优点之一：必要性</p>
<ul>
<li>近代中国半殖民地半封建的社会性质决定的</li>
<li>中国反动统治阶级的残酷性决定的</li>
<li>由于敌人的力量异常强大，复杂的社会矛盾，以及中国政治经济发展的不平衡性，决定了中国革命的武装斗争将不可避免地要经历一个长期而曲折的过程</li>
</ul>
</li>
<li><p>武装斗争必须和非武装斗争相互配合</p>
<p><strong><font color="red">武装斗争并非是中国革命的唯一形式</font></strong></p>
</li>
<li><p>中国的武装斗争实质上是无产阶级领导下的农民战</p>
</li>
</ol>
</li>
</ul>
<p><strong><font color="orange">补充：人民军队建设的基本原则</font></strong></p>
<ol>
<li>“党指挥枪”的原则财坚持党对军以的绝对领导/是建设新型人民军队的根本原则是保持人民军队无产阶级性质和建军宗旨的根本前提，也是毛泽东建军思想的核心。</li>
<li>全心全意为人民服务是人民军队的唯一宗旨。<br>是建设新型人民军队的基本前提，也是人民军队一切行动的根本准则和一切工作的出发点与归宿。它集中体现了人民军队的本质，是人民军队立于不败之地的根本所在。</li>
<li>要坚持正确的战略战术原则。形成了一整套以少胜多、以弱胜强的人民战净的理论和一系列的战略战术原则。</li>
</ol>
<ul>
<li><p>党的建设</p>
<ul>
<li><p>中国共产党产生和建设的特点：</p>
<p>无产阶级思想和非无产阶级思想之间的矛盾，马克思主义与非马克思主义思想之间的矛盾，是党内思想上的主要矛盾。</p>
<p><strong><font color="red">注意：从中国社会“两头小，中间大”的社会阶级构成分析必要性</font></strong></p>
</li>
<li><p>党的建设的主要内容和基本经验：（2017简答）</p>
<ol>
<li><p>把思想建设始终放在党的建设的道位以无产阶级思想改造和克服各种非无产阶级思想。这是新民主主义革命时期党的建设的主要经验，也是毛泽东建党思想的要特点。</p>
</li>
<li><p>党的建设必须同党的政治路线紧密联系起来。</p>
</li>
<li><p>按照民主集中制原则加强党的组织建设</p>
<p><strong><font color="red">加强党的组织建设，根本的是要贯彻民主集中制这一根本组织原则</font></strong></p>
</li>
<li><p>注重党的作风建设</p>
<ol>
<li><font color="orange">补充：<strong>党的三大优良作风</strong></font></li>
<li>理论联系实际</li>
<li>密切联系群众</li>
<li>批评与自我批评（<font color="red"><strong>这三大优良作风是中国共产党区别王其他任何政党的显著标志。</strong></font>）</li>
</ol>
</li>
</ol>
</li>
<li><p>三大法宝的相互关系</p>
<ul>
<li><p>毛泽东在《〈共产党人）发刊词》中指出：</p>
<p>统一战线和武装斗争，是战胜敌人的两个基本武器。统一战线是实行武装斗争的统一战线。而党的组织，则是掌握统一战线和武装斗争这两个武器以实行对敌冲锋陷阵的英勇战士。”</p>
</li>
<li><p>统一战线、武装斗争和党的建设，三者是一个有机的整体。</p>
<p>统一战线只有以武装斗争为支柱，才能存在和发展武装斗争则只有以统一战线（特别是工农联盟）为基础才能壮大和不断胜利；而党则是掌握这两个基本武器以实行对敌斗争的指挥部，统一战线和武装斗争这两个武器只有在共产党的领导下才能发挥其作用。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="三、-新民主主义革命理论的意义"><a href="#三、-新民主主义革命理论的意义" class="headerlink" title="三、    新民主主义革命理论的意义"></a>三、    新民主主义革命理论的意义</h3><ul>
<li><p>理论意议</p>
<p>新民主主义革命理论，解决了在一个以农民为主体的、落后的半殖民地半封建的东方大国里进行革命的一系列理论问题，科学地回答了近代中国革命向何处去的问题，正确地解决了中国革命的发展阶段问题，揭示了近代中国革命的发展规律，极大地丰富了马克思主义的理论宝库。新民主主义革命理论是马克思主义中国化的重要理论成果，开辟了马克思主义中国化的发展道路。</p>
</li>
<li><p>实践意义</p>
<p>在新民主主义革命理论的指导下，中国共产党领导中国人民取得了新民主主义革命的伟大胜利，结束了中国几干年来封建地主阶级双役中国人民的历更，建立一了中华人民共和国。劳动人民成为国家和社会的主人，实现了中国人民社会政治地位的根本变化，开创了中国历史的新纪元。</p>
</li>
<li><p>世界意义</p>
<p>中国新民主主义革命的伟大胜利，是20世纪继俄国十月社会主义革命以后改变世界面貌的伟大历史事件有利地鼓舞和推动了世界上被压迫民族和被压迫人民反抗帝国主义、殖民主义的斗争，极大地增强了他们反抗帝国主义斗争的信心，有力地支持了世界人民反对帝国主义的斗争，增强了世界人民争取世界和平的力量。</p>
</li>
</ul>
<h1 id="第4章-社会主义改造理论"><a href="#第4章-社会主义改造理论" class="headerlink" title="第4章    社会主义改造理论"></a>第4章    社会主义改造理论</h1><h2 id="第一节-从新民主主义到社会主义的转变"><a href="#第一节-从新民主主义到社会主义的转变" class="headerlink" title="第一节    从新民主主义到社会主义的转变"></a>第一节    从新民主主义到社会主义的转变</h2><p><u>从中华人民共和国成立到社会主义改造基本完成，是我国丛新民主主义到社会主义的过渡时期</u>。这一时期，我国社会的性质是**<font color="red">新民主主义社会</font><strong>。新民主主义社会不是一个独立的社会形态，而是由新民主主义向社会主义转变的过渡性社会形态，</strong>但它属于社会主义体系**。</p>
<h3 id="一、-新民主主义社会是一个过渡性的社会（1949-1956）"><a href="#一、-新民主主义社会是一个过渡性的社会（1949-1956）" class="headerlink" title="一、    新民主主义社会是一个过渡性的社会（1949-1956）"></a>一、    新民主主义社会是一个过渡性的社会（1949-1956）</h3><ul>
<li><p>基本特征</p>
<ul>
<li><p>**<font color="red">在经济上</font>**，实行国营经济主导的包括半社会主义性质的合作社经济个体经济、私人资本主义和国家资本主义五种经济成分并存的新民主生义经济制度。<br>主要经济成分有三种：社会主义经济、个体经济和资本主义经济</p>
</li>
<li><p><strong><font color="red">在政治上</font>**，新民主主义的政权是无产阶级领导的各革命阶级联合专政的人民民主专政。</strong>中国社会的阶级构成主要是工人阶级、农民阶级和其他小资产阶级、民族资产阶级等基本的阶级力量，**</p>
<p><strong><font color="orange">补充：理解民族资产阶级的两面性：</font></strong></p>
<ul>
<li>既有剥俏削工人的一面，又有接受工人阶级及其政党领导的一面。（在不同时期有不同的表现）</li>
<li>土地改革完成后，国内的主要矛盾：<strong>工人阶级与资产阶级之间的矛盾</strong>。</li>
<li>在新民主主义社会中，**<font color="red">社会主义的因素</font>**不论在经济上还是在政治上都已经居于领导地位。但非社会主义因素仍占有很大比重。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、-党在过渡时期的总路线"><a href="#二、-党在过渡时期的总路线" class="headerlink" title="二、    党在过渡时期的总路线"></a>二、    党在过渡时期的总路线</h3><ul>
<li><p>过渡时期总路线的提出</p>
<ol>
<li>1949年党的七届二中全会，提出了使中国”稳步地由农业国转变为工业国，由新民主主义国家转变为社会主义国家”即<br>““两个转变”同时并举的思想。</li>
<li>从1949年至1952年，党领导人民集中力量恢复国民经济，继续完成民主革命遗留的任务。与此同时，没收官僚资本，建立社会主义性质的国营经济；在完成土地改革之后的农村，及时开展互助合作运动；在调整工商业过程中，采取对私营工商业加工订货、经销代销等方式，广泛发展初级形式的国家资本主义等，为全面向社会主义过渡莫定了基础。</li>
</ol>
</li>
<li><p>总路线的内容</p>
<p><img src="/Maogai-Mustback-Study.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220125123114466.png" alt="image-20220125123113848"></p>
<ul>
<li>建设与改造同时并举</li>
<li>工业化与改造同时并举紧密结合</li>
<li>解放生产力与发展生产力、变革生产关系与发展生产力有机统一</li>
</ul>
</li>
<li><p>过渡时期总路线的特点</p>
<p>过渡时期总路线从生产力与生产关系的辩证关系出发，提出了反映落后国家社会主义发展规律的新思路，即把建设与改造并举，要求把国家工业化和社会主义三大改造紧密地结合起来，在社会改革中保持生产力的同步发展，</p>
<p>同时进举艺是过渡时棚总路线的显著特征</p>
</li>
<li><p>过渡时期总路线的实质</p>
<p>党在过渡时期的总路线的实质：</p>
<ul>
<li>逐渐改变生产关系，解决所有制的问题。</li>
</ul>
</li>
<li><p>党在过渡时期的总路线的理论依据</p>
<ol>
<li><p><u><strong>马克思列宁主义关于过渡时期的理论马克思、恩格斯在创立科学社会主义理论时，就提出了从资本主义社会向社会主义社会过渡的问题</strong></u>。他们认为，从资本主义社会到社会主义社会，需要经历一个从无产阶级夺取政权到利用国家政权对旧的生产关系进行革命性的改造，逐步消灭私有制、确立公有制并大力发展生产力的过渡时期，这是一切走向共产主义的国家不可逾越的发展阶段。</p>
<p>**<u>列宁认为必须经过一个相当长的从资本主义到社会主义的过渡时期。</u>**过渡时期的根本任务是把剥削阶级的生产资料转化为公有财产，同时，通过合作社的形式使农民走上集体化道路，并把创造高于资本主义的劳动生产率的根本任务提到首位，以建立和发展社会主义的经济基础。</p>
</li>
<li><p>中国共产党关于过渡时期的理论（略）</p>
</li>
</ol>
</li>
</ul>
<h2 id="第二节-社会主义改造道路和历史道路"><a href="#第二节-社会主义改造道路和历史道路" class="headerlink" title="第二节    社会主义改造道路和历史道路"></a>第二节    社会主义改造道路和历史道路</h2><h3 id="一、-适合中国特色的社会主义改造道路"><a href="#一、-适合中国特色的社会主义改造道路" class="headerlink" title="一、    适合中国特色的社会主义改造道路"></a>一、    适合中国特色的社会主义改造道路</h3><ul>
<li><p>对农业的社会主义改造</p>
<ul>
<li><p>第一，积极引导农民组织起来，走互助合作道路</p>
</li>
<li><p>第二，遵循自愿互利、典型示范和国家帮助的原则，以互助合作的优越性吸引农民走互助合作道路</p>
</li>
<li><p>第三，正确分析农村的阶级和阶层情况，制定正确的阶级政策。<u><strong><font color="red">依靠贫下中农，巩固地团结其他中农发展互助合作由逐步限制到最后消灭富农剥削的农村阶级政策</font></strong></u>。</p>
</li>
<li><p>第四，坚持积极领导、稳步前进方针，采取循序渐进的步骤</p>
<p>补充：</p>
<ol>
<li><p><strong><font color="orange">农业社会主义改造大体经历的三个发展阶段</font></strong></p>
<ul>
<li><p>第一步：互助组</p>
</li>
<li><p>第二步：初级社</p>
</li>
<li><p>第三步：高级社</p>
</li>
</ul>
</li>
<li><p>在农业社会主义改造中建立起的初级农业生产合作社属于<font color="red"><strong>半社会主义性质</strong></font></p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>对个体手工业的社会主义改造</p>
<ul>
<li>方针：积极领导、稳步前进</li>
<li>对手工业的社会主义改造经历的由小到大、由低级到高级的具体三个步骤<ol>
<li>第一步是办手工业供销小组。供销小组由国营商业或供销合作社供给原料和包销产品，具有社会主义萌芽性质。</li>
<li>第二步是办手工业供销合作社。它具有半社会主义性质。</li>
<li>第三步是建立手工业生产合作社。手工业者的生产资料全部归集体所有，统一经营，入社人员参加集体劳动，实行按劳分配。它是社会主义性质的集体经济组织。</li>
</ol>
</li>
</ul>
</li>
<li><p>对资本主义工商业的社会主义改造</p>
<p><u><strong><font color="red">注意：有三个经验</font></strong></u></p>
<ul>
<li><p>第一，用<strong>和平赎买</strong>的方法改造资本主义工商业</p>
<ol>
<li>赎买的方式所谓赎买，就是国家有偿地将私营企业改变为国营企业，将资本主义私有制改变为社会主义公有制。赎买的具体方式不是由国家支付一笔巨额补偿资金，而是让资本家在一定年限内从企业经营所得中获取一部分利润。</li>
<li>和平赎买的积极作用（4个有利于）<ul>
<li>有利于发挥私营工商业在国计民生方面的积极作用，促进国民经济发展；</li>
<li>有利于争取和团结民族资产阶级，有利于团结各民主党派和各界爱国民主人士，巩固和发展统一战线；</li>
<li>有利于发挥民族资产阶级中大多数人的知识、才能、技术专长和管理经验；</li>
<li>有利于争取和团结那些原来同资产阶级相联系的知识分子为社会主义建设服务。</li>
</ul>
</li>
</ol>
</li>
<li><p>第二、采取从低级到高级的国家资本主义的过渡形式。</p>
<p>所谓国家资本主义，就是在国家直接控制和支配下的资本主义经济。有初级形式和高级形式之分</p>
<p><img src="/Maogai-Mustback-Study.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220125130813262.png" alt="image-20220125130813262"></p>
<ul>
<li><p><strong>对资本主义工商业的社会主义改造经历了三个步骤</strong>：</p>
<ul>
<li><p>第一步<strong>主要实行初级形式的国家资本主义。</strong>国家在私营工业中实行委托加工、计划订货、统购包销，在私营商业中采取委托经销、代销等形式，既帮助私营企业克服困难，也使其生产和经营开始纳入国家计划的轨道。</p>
</li>
<li><p>第二步<strong>主要实行个别企业的公私合营</strong>。资本家的剥削进一步受到限制。企业的经营管理以发展生产、满足人民需要和完成国家计划为目标，因而已经属于半社会主义性质的企业。</p>
</li>
<li><p>第三步是<strong>实行全行业的公私合营</strong>。全行业公私合营后，企业的生产关系已经发生了根本的变化，基本上成为社会主义国营性质的企业。</p>
<p>补充：**<font color="orange">四马分肥</font>**</p>
<ul>
<li>企业的利润，按国家所得税、企业公积金、工人福利费、资方红利这四个方面进行分配</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>第三、把资本主义工商业者改造成为自食其力的社会主义劳动者</p>
<p>在资本主义工商业的社会主义改造中，国家对资方在职人员和资方代理人采取“包下来”的政策，以企业为基地，根据“量才使用，适当照顾”的原则，对他们在政治上适当安排、工作上发挥作用、生活上妥善照顾，通过改造阶级成分的方式达到从整体上消灭资产阶级的目的企业的改造和对人的改造相结合，改造资本家个人与消灭他们所属的资产阶级相结合，既避免了激烈的阶级对抗，减少了改造的阻力，又推动了生产力的发展和社会的进步。</p>
<ul>
<li>实现和平赎买的原因<ul>
<li><strong>首先，民族资产阶级具有两面性</strong>。在社会主义革命时期，民族资产阶级既有剥削工人取得利润的一面，又有拥护宪法、愿意接受社会主义改造的一面。我国工人阶级和民族资产阶级之间存在着的剥削和被剥削的对抗性矛盾，“如果处理得当，可以转变为非对抗性的矛盾，可以用和平的方法解决这个矛盾”</li>
<li><strong>其次，中国共产党与民族资产阶级长期保持着统一战线的关系</strong>这就为将工人阶级和民族资产阶级之间存在着的对抗性矛盾转化为非对抗性矛盾并按照人民内部矛盾来处理提供了前提。</li>
<li><strong>最后，我国已经有了以工人阶级为领导、工农联盟为基础的人民民主专政的国家政权</strong>，建立了强大的社会主义国营经济并掌握了国家的经济命脉，这就造成了私人资本主义在政治上、经济上对社会主义的依赖。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、-社会主义改造的历史经验"><a href="#二、-社会主义改造的历史经验" class="headerlink" title="二、    社会主义改造的历史经验"></a>二、    社会主义改造的历史经验</h3><ul>
<li><p>坚持社会主义工业化建设与社会主义改造并举</p>
<p>社会主义改造：就是变革不适应工业化发展要求的生产关系，围绕着社会主义工业化建设这个中心任务进行的：<br>**<font color="red"><u>社会主义革命的目的是为了解放生产力</u></font>**。</p>
<p>引导个体农民、个体手工业者走集体化的道路，改造私人资本主义工商业目的都是为了适应社会主义工业化建设的要求，更好地发展生产力。</p>
</li>
<li><p>采取积极引导、逐步过度的方式（农业、手工业、资本主义工商业）</p>
</li>
<li><p>用和平万法进行改造农业的社会主义改造</p>
<ul>
<li>党和政府坚特和平的方法和自愿的原则，并用事实向农民表明手</li>
<li>工业者的情况和农民基本相同。</li>
<li>对资本主工商业的改造，我党以和平赎买的方法完成了改造。同时对资本家实行团结、教育和改造的方针</li>
</ul>
</li>
</ul>
<p>补充：</p>
<ul>
<li><p><strong><font color="orange">社会主义改造中出现的失误和偏差</font></strong></p>
<ul>
<li><p>在一九五五年夏季以后，农业合作化以及对手工业和个体商业的改造要求过急，工作过粗，改变过快，形式也过于简单划一，以致在长期间遗留了一些问题。（1981年6月中共中央通过的《关于建国以来若干历史问题的决议》）</p>
</li>
<li><p>一九五六年资本主义工商业改造基本完成以后对于一部分原工商业者的使用和处理也不很适当。</p>
</li>
</ul>
</li>
<li><p><strong><font color="orange">出现失误和偏差的原因</font></strong></p>
<ul>
<li>在社会主义经济模式的选择和理解上过于单一追求纯粹的单一的社会主义经济成分；</li>
<li>在公有制实现形式的选择和理解上过于简单化只注意到集体所有制和全民所有制这两种基本形式，而对社会主义改造基本完成以后公有制经济可以和非公有制经济共同发展缺乏认识。</li>
</ul>
</li>
<li><p><strong><font color="orange">正确评价历史变革</font></strong></p>
<p>必须放在所处的时代和历史条件下去分析。<br>不能离开具体的社会历史条件。</p>
</li>
<li><p><strong><font color="orange">正确认识社会主义改造与改革的关系</font></strong></p>
<p>二者虽然在思想指导、方针政策、实际工作上有很大差别，但并不是彼此割裂的，更不是根本对立的。不能用社会主义改革否定社会主义改造更不能用社会主义改造否定社会主义改革。对历史变革的评价，必须放在所处的时代和历史条件下去分析。不能离开具体的社会历史条件。不能因为出现这些失误和偏差而否定社会主义改造的伟大意义。</p>
</li>
<li><p><font color="orange"><strong>正确认识改革开放前与改革开放后的关系</strong><br><strong>（2016简答）</strong></font></p>
<ol>
<li>改革开放前的历史，是党领导全国各族人民进行社会主义革命和建设并取得巨大历史成就的历史；</li>
<li>改革开放后的历史，是党领导全国各族人民成功开创和发展中国特色社会主义的历史；</li>
<li>二者在本质上都是党领导人民进行社会主义建设的实践探索，不能相互否定；改革开放前社会主义实践探索为改革开放后社会主义的实践探索提供了重要条件，改革开放后社会主义的实践探索是改革开放前社会主义实践探索的坚持、改革和发展。</li>
<li>这是两个既有区别又有联系的时期。联系并不只是时间上的顺延和承续，而是在坚持社会主义发展方向、基本制度、根本任务、奋斗目标基础上的联系；重大区别主要是指在进行社会主义建设的思想指导方针政策、实际工作上有很大差别，也包括进行社会主义实践探索的内外条件、实践基础等方面存在很大差别。</li>
</ol>
</li>
</ul>
<h2 id="第三节-社会主义制度在中国的确立"><a href="#第三节-社会主义制度在中国的确立" class="headerlink" title="第三节    社会主义制度在中国的确立"></a>第三节    社会主义制度在中国的确立</h2><h3 id="一、社会主义基本制度的确立"><a href="#一、社会主义基本制度的确立" class="headerlink" title="一、社会主义基本制度的确立"></a>一、社会主义基本制度的确立</h3><ul>
<li><p>以公有制为基础的社会主义基本经济制度已经确立</p>
<p>1956年底我国对农业、手工业和资本主义工商业的社会主义改造的基本完成，标志着中国历史上长达数干年的阶级剥削制度的结束，实现了由新民主主义向社会主义的转变，社会主义基本制度在我国初步确立</p>
</li>
<li><p>人民民主政治建设有步骤地向前推进</p>
<p><font color="red"><strong>1954年9月，第一届全国人民代表大会的召开和《中华人民共和国宪法》的制定及颁布施行</strong></font>，为各族人民参与国家政治生活提供了必要条件和保证，为逐步健全和完善我国社会主义政治制度奠定了坚实的基础，成为我国社会主义民主政治建设的里程碑。</p>
</li>
<li><p>社会阶级关系发生根本变化</p>
<ul>
<li>帝国主义侵略势力已经被清除出中国大陆：</li>
<li>官僚资产阶级已经在中国内地被消灭；</li>
<li>原来的地主和富农正在被改造成为自食其力的劳动者：</li>
<li>民族资产阶级分子被改造成自食其力的社会主义劳动者；</li>
<li>工人阶级已经成为国家的领导阶级，工人阶级队伍进一步壮大；</li>
<li>亿万农民和其他个体劳动者已经变成社会主义的集体劳动者；</li>
<li>广大劳动人民从此摆脱了被剥削被奴役的地位，成为掌握生产资料的国家和社会的庄人以及掌握自己命运的主人。</li>
</ul>
</li>
</ul>
<h3 id="二、-确立社会主义基本制度的重大意义"><a href="#二、-确立社会主义基本制度的重大意义" class="headerlink" title="二、    确立社会主义基本制度的重大意义"></a>二、    确立社会主义基本制度的重大意义</h3><ul>
<li>社会主义基本制度的确立是中国历史上最深刻最伟大的社会变革，为当代中国一切发展进步奠定了制度基础，也为中国特色社会主义制度的创新和发展提供了重要前提。</li>
<li>社会主义基本制度的确立，极大地提高了工人阶级和广大劳动人民的积极性、创造性，极大地促进了我国社会生产力的发展。</li>
<li>促进了我国社会生产力突飞猛进的发展，初步显示了社会主义的优越性。我国工业化、现代化建设取得的辉煌成就，离不开选择了社会主义道路这个根本的前提条件。</li>
<li>社会主义基本制度的确立，使广大劳动人民真正成为国家的主人。这是中国几干年来阶级关系的最根本变革，极天地师固和扩大了工人阶级领导的、以工农联盟为基础的人民民主专政国家政权的阶级基础和经济基础。</li>
<li>中国社会主义基本制度的确立，它进一步改变了世界政治经济格局，增强了社会主义的力量，对维护世界和平产生了积极影响。</li>
<li>社会主义基本制度的确立，是以毛泽东为主要代表的中国共产党人对一个脱胎于半殖民地半封建的东方大国如何进行社会主义革命问题的系统回答和正确解决，是马克思列宁主义关于社会主义革命理论在中国的正确运用和创造性发展的结果。它不仅再次证明了马克思列宁主义的真理性，而且以其独创性的理论原则和经验总结丰富和发展了科学社会主义理论。</li>
</ul>
<h1 id="第5章-社会主义建设道路初步探索的理论成果"><a href="#第5章-社会主义建设道路初步探索的理论成果" class="headerlink" title="第5章    社会主义建设道路初步探索的理论成果"></a>第5章    社会主义建设道路初步探索的理论成果</h1><h2 id="第一节-社会主义建设道路初步探索的重要思想成果"><a href="#第一节-社会主义建设道路初步探索的重要思想成果" class="headerlink" title="第一节    社会主义建设道路初步探索的重要思想成果"></a>第一节    社会主义建设道路初步探索的重要思想成果</h2><h3 id="一、调动一切积极因素为社会主义事业服务的思想"><a href="#一、调动一切积极因素为社会主义事业服务的思想" class="headerlink" title="一、调动一切积极因素为社会主义事业服务的思想"></a>一、调动一切积极因素为社会主义事业服务的思想</h3><p>**<font color="red">《论十大关系》</font>**是探索中国建设社会主义建设道路的（良好）开端。</p>
<p>1956年4月，毛泽东发表了《论十大关系》的讲话，提出“把国内外一切积极因素调动起来，为社会主义事业服务”的社会主义建设的<strong>基本方针</strong>。这是中国共产党人对中国社会主义建设道路总结、探索的初步成果。</p>
<p>在《论十大关系中》的报告中，毛主席初步总结了我国社会主义建设的经验，**<font color="red">明确提出以苏为鉴，独立自主地探索适合中国情况的社会主义道路</font>**。</p>
<ul>
<li><p><strong>正确处理十大关系（了解）</strong></p>
<p>重工业与农业、轻工业的关系（开辟与苏联有所不同的中国工业化道路）</p>
<p>沿海工业同内地工业的关系（开辟与苏联有所不同的中国工业化道路）</p>
<p>经济建设同国防建设的关系（开辟与苏联有所不同的中国工业化道路）</p>
<p>国家、生产单位和生产者个人的关系（经济体制改革）</p>
<p>中央和地方的关系（经济体制改革，提出中国经济建设若干方针）</p>
<p>汉族和少数民族的关系（政治生活和思想问题生活调动各种积极因素的问题）</p>
<p>党和非党的关系（政治生活和思想问题生活调动各种积极因素的问题）</p>
<p>革命和反革命的关系（政治生活和思想问题生活调动各种积极因素的问题）</p>
<p>是非关系（政治生活和思想问题生活调动各种积极因素的问题中国和外国的关系（政治生活和思想问题生活调动各种积极因素的问题）</p>
<p><strong>目的量为了把堂内宝处到内回外的一径厨方社会主义事业服务，把我国建设成为一个的会主义国家</strong></p>
</li>
<li><p>积极因素与消极因素</p>
<p>积极因素与消极因素既包括党内因素，也包括党外因素；</p>
<p>既包括国内因素，也包括国外因素；既包括直接因素，也包括间接因素。</p>
<p>积极因素与消极因素是一对矛盾，既统一又斗争。</p>
<p>在社会主义事业发展中，积极因素一般处于主导、统治地位，是可靠保障。</p>
<p>同时两者在一定条件下可以互相转化，因此我们要创造条件，大力促使消极因素向积极因素转化，尽力防止逆转。</p>
</li>
<li><p><strong><font style="background:yellow;">怎样调动一切积极因素为社会主义事业服务？</font></strong></p>
<ol>
<li><p>必须坚持中国共产党的领导</p>
</li>
<li><p>必须发展社会主义民主政治</p>
<p>（**<font color="red">六又政治局面：又有集中又有民主，又有纪律又有自由，又有统一意志，又有个人心情舒畅、生动活泼）</font>**</p>
</li>
<li><p>必须正确认识社会主义发展阶段毛泽东指出，社会主义分为两个阶段：**<font color="red">不发达的社会主义：比较发达的社会主义</font>**。（2018多选）</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>关于社会主义社会矛盾的思想集中体现在毛泽东的《关于正确处理人民内部矛盾的问题》中，毛泽东在1957年2月所作的<br><font color="red"><strong>《关王正确处理人民内部矛盾的问题》</strong></font>的报告，系统论述了社会主义社会矛盾的理论</p>
<p>主要观点：</p>
<ol>
<li>矛盾普遍存在</li>
<li>关于社会主义社会的基本矛盾</li>
<li>关于我国社会的主要矛盾和根本任务</li>
<li>关于社会主义社会存在两类不同性质矛盾的理论</li>
<li>正确处理两类不同性质社会矛盾的基本方法</li>
<li>关于正确处理人民内部矛盾的方针</li>
<li>关于区分两类不同性质矛盾和正确处甲人民内邮矛盾的日的知音</li>
</ol>
</li>
</ul>
<h3 id="二、-正确认识和处理社会主义社会矛盾的思想（论述题重点）"><a href="#二、-正确认识和处理社会主义社会矛盾的思想（论述题重点）" class="headerlink" title="二、    正确认识和处理社会主义社会矛盾的思想（论述题重点）"></a>二、    正确认识和处理社会主义社会矛盾的思想（论述题重点）</h3><ul>
<li>毛泽东指出，矛盾是普遍存在的，社会主义社会同样宽满汤盾正是这些矛盾推动者社会主义社会不断向前发展。要运用对立统一规律深刻分析社会主义社会的矛盾。</li>
<li>社会主义的基本矛盾：仍然是生产关系和生产力之间的矛盾上层建筑和经济基础之间的矛盾。<strong>社会主义社会的矛盾还是对抗性矛高，而层非抗性的矛盾。具有那相适应又相汤盾的特点。可以福过社会主义制度本身还断得到解速</strong>。</li>
<li>我国社会的主要矛盾和根本任务。主要矛盾：人民对建立先进的工业国的要求同落后的农业国的现实之间的矛盾，人民对经济文化迅速发展的需要同当前经济文化不能满足人民需要的状况之间的矛盾。</li>
</ul>
<p>**<font color="red">工作重点</font>**：转到技术革命和社会主义建设上，全党学科学、技术、新本领。</p>
<ul>
<li><p>社会主义社会的两类不同性质矛盾学说</p>
<p>毛泽东强调，社会主义社会的矛盾反应在政治上可以划分为敌我矛盾和人民内部矛盾，是两种性质完全不同的矛盾。</p>
<p>毛泽东关于严格区分和正确处理两类不同性质矛盾的学说，特别是关于正确处理人民内部矛盾是国家政治生活的主题的思想，具有重大的实践意义和理论意义。它为正确处理社会主义社会各种矛盾，协调人与人之间的社会关系，创造了有利于生产力发展的良好的社会环境和政治局面，提供了基本的理论依据。它以完整的理论形态、独创性的内容，丰富了马克思主义的理论宝库。</p>
<ul>
<li>**<font color="orange">补充</font>**：<ul>
<li>人民内部矛盾：人民利益根本一致的基础上的矛盾是非对抗性的。</li>
<li>我国民族资本家有两面性，工人阶级同民族资本家的矛盾属于人民内部矛盾。</li>
<li>在一定条件下，两类不同性质的矛盾可以互相转化。<br>处理方法：采用专政和民主这样两种不同的方法。</li>
<li>专政：运用人民民主专政的国家机器。</li>
<li>民主：讨论、批评、说服教育。</li>
</ul>
</li>
</ul>
</li>
<li><p>关于正确处理人民内部矛盾的方针（2015多选）</p>
<p><strong>解决人民内部矛盾的总方针：坚特用民主的方法</strong></p>
<ol>
<li>对于政治思想领域的人民内部矛盾，实行“团结批评-团结”的方针，坚持说服教育、讨论的方法；</li>
<li>对于物质利益、分配方面的人民内部矛盾，实行统筹兼顾、适当安排的方针，兼顾国家、集体和个人三方面的利益；</li>
<li>对于人民群众和政府机关的矛盾，坚持民主集中制原则：</li>
<li>对科学文化领域的矛盾，实行“百花齐放、百家争鸣”的方针；</li>
<li>对共产党与民主党派的矛盾，实行在坚持社会主义道路和共产党领导的前提下，“长期共存、互相监督”的方针；</li>
<li>对于民族间的矛盾，实行民族平等、团结互助的方针</li>
</ol>
</li>
<li><p>正确处理人民内部矛盾的问题是社会主义国家政治生活的生题</p>
<p>毛泽东关于社会主义矛盾的学说，科学揭示了社会主义社会发展的动力，为正确处理社会主义社会各种矛盾，创造良好的社会环境和政治环境，提供了基本的理论依据，为后来的社会主义改革奠定了理论基础，并以独创的内容丰富了马克思主义的理论宝库。</p>
</li>
</ul>
<p>补充：</p>
<ul>
<li><strong><font color="orange">正确处理人民内部矛盾的方针是</font></strong><ol>
<li>“团结一批评一团结”</li>
<li>“统筹兼顾、适当安排”</li>
<li>“百花齐放、百家争鸣”</li>
<li>“长期共存、互相监督”</li>
</ol>
</li>
</ul>
<h3 id="三、-走工业化道路的思想"><a href="#三、-走工业化道路的思想" class="headerlink" title="三、    走工业化道路的思想"></a>三、    走工业化道路的思想</h3><ul>
<li><p>实现国家工业化是新中国整个经济建设的主要任务</p>
<p>党的七届二中全会提出实现国家工业化的目标。</p>
<p><strong><font color="red">毛泽东在《论士大关系》中论述的第一大关系，便是重工业轻工业和农业的送系。（2019单选）</font></strong></p>
<p>《关于正确敏处理人民内部矛盾的问题》中提出要走一条有别王苏联的中国工业化道路。</p>
<p>毛泽东提出，以<strong>工业为主导，把重工业作为我国经济建设的重点</strong>，逐步建立独立的比较完整的基础工业体系和国防工业体系，同时充分注意发展农业和轻工业。</p>
</li>
<li><p>“两条腿走路”的工业化发展思路的实现</p>
<p>毛泽东提出了以农业为基础，以工业为主导，以农轻重为序发展国民经济的总方针，以及一整套“两条腿走路”的工业化发展思路，即重工业和轻工业同时并举，中央工业和地方工业同时并举，沿海工业和内地工业同时并举，大型企业和中小型企业同时并举，等等。</p>
<ol>
<li><p>走中国工业化道路，必须明确战略目标和步骤</p>
<p>要把中国建设成为一个具有现代农业、现代工业、现代国防和现代科学技术的国家。三届全国人大一次会议提出“<strong>两步走</strong>”<br>战略，</p>
<ul>
<li>第一步，建成一个独立的比较完整的工业体系和国民经济体系，</li>
<li>第二步，全面实现工业、农业、国防和科学技术现代化。</li>
</ul>
</li>
<li><p>走中国工业化道路，必须采取正确的经济建设方针。</p>
<p>党的八大提出，既反保守又反冒进，在综合平衡总稳步前进的方针</p>
</li>
<li><p>走中国工业化道路，必须调整和完善关于所有制结构。</p>
<p>毛、刘、周：把资本主义经济作为社会主义经济的补充</p>
<p>朱德：发展工业和农业多种经营；</p>
<p>陈云：“三个主体，三个补充”的设想</p>
</li>
<li><p>走中国工业化道路，必须积极探索适合我国情况的经济体制和运行机制改革。</p>
<p>毛：发展商品生产，利用价值规律。</p>
<p>刘：使社会主义经济既有计划性又有多样性和灵活性按经济办法管理经济。</p>
<p>陈云：建立“适合于我国适合和人民需要的社会主义的市场”。</p>
<p>毛：企业“两参一改三结合”（干部参加劳动，工人参加管理，改革不合理的规章制度，工人群众、领导王部和技术工人三结合。）</p>
<p>邓小平：改善和加强企业管理，实行职工代表大会制。</p>
</li>
<li><p>走中国工业化道路，必须发展科学技术和文化教育。</p>
<p>提出向科学进军，强调实现四个现代化关键在于科学技术现代化。</p>
</li>
<li><p>走中国工业化道路，必须重视知识分子工作。</p>
<p>毛泽东提出，知识分子在革命和建设中具有重要作用。<br>周恩来提出，知识分子是工人阶级一部分的观点。</p>
</li>
</ol>
</li>
</ul>
<h2 id="第二节-社会主义建设道路初步探索的意义和教训"><a href="#第二节-社会主义建设道路初步探索的意义和教训" class="headerlink" title="第二节    社会主义建设道路初步探索的意义和教训"></a>第二节    社会主义建设道路初步探索的意义和教训</h2><h3 id="一、-意义"><a href="#一、-意义" class="headerlink" title="一、    意义"></a>一、    意义</h3><ul>
<li>第一，巩固和发展了我国社会主义制度。</li>
<li>第二，为开创中国特色社会主义提供了宝贵经验、理论准备和物质基础。</li>
<li>第三，丰富了科学社会主义的理论和实践。</li>
</ul>
<h3 id="二、经验教训（2017论述）"><a href="#二、经验教训（2017论述）" class="headerlink" title="二、经验教训（2017论述）"></a>二、经验教训（2017论述）</h3><ul>
<li>第一、必须把马克思主义与中国实际相结合，探索符合中国特点的社会道路</li>
<li>第二、主必须正确认识社会主义社会的主要矛盾和根本任务，集中力量发展</li>
<li>第三、必须丛实际出发进行社会主义建设，建设规模和速度要和国力相适应，不能急于求成。</li>
<li>第四、必须发展社会主义民主，健全社会主义法制。</li>
<li>第五、坚持党的民主集中制和集体领导制度，加强执政党建设。</li>
<li>第六、必须坚持对外开放，不能关起门来搞建设，要借鉴和吸收人类文明的共同成巢建设社会主义<ul>
<li>正确认识1：我国的根本任务是左的生产关系下保护和发展生产力。</li>
<li>正确认识2：社会主义民主体质以民当家作主。</li>
<li>正确认识3：健全民主集中制和集体领导制度，加强执政党建设，是社会主文事业顺利发展的政治保证。<br>民主集中制是无产阶级政党的根本组织原是指寻党内生活的基本准则。</li>
<li>正确认识4：改革开放前后两个时期</li>
</ul>
</li>
</ul>
<h1 id="第6章-邓小平理论"><a href="#第6章-邓小平理论" class="headerlink" title="第6章    邓小平理论"></a>第6章    邓小平理论</h1><h2 id="第一节-邓小平理论的形成"><a href="#第一节-邓小平理论的形成" class="headerlink" title="第一节    邓小平理论的形成"></a>第一节    邓小平理论的形成</h2><h3 id="一、-邓小平理论的形成的条件"><a href="#一、-邓小平理论的形成的条件" class="headerlink" title="一、    邓小平理论的形成的条件"></a>一、    邓小平理论的形成的条件</h3><ul>
<li><p>和平和发展成为时代主题是邓小平理论形成的**<font color="red">时代背景</font>**</p>
<p>和平是东西问题；发展是南北问题。</p>
</li>
<li><p>社会主义建设的经验教训是邓小平理论形成的**<font color="red">历史依据</font>**</p>
</li>
<li><p>改革开放和现代化建设的实践是邓小平理论形成的**<font color="red">现实依据</font>**</p>
</li>
</ul>
<h3 id="二、-邓小平理论的形成过程"><a href="#二、-邓小平理论的形成过程" class="headerlink" title="二、    邓小平理论的形成过程"></a>二、    邓小平理论的形成过程</h3><h2 id="第二节-邓小平理论的基本问题和主要内容"><a href="#第二节-邓小平理论的基本问题和主要内容" class="headerlink" title="第二节    邓小平理论的基本问题和主要内容"></a>第二节    邓小平理论的基本问题和主要内容</h2><h3 id="一、-邓小平理论回答的基本问题"><a href="#一、-邓小平理论回答的基本问题" class="headerlink" title="一、    邓小平理论回答的基本问题"></a>一、    邓小平理论回答的基本问题</h3><ul>
<li><p><strong>什么是社会主义、怎样建设社会主义</strong>，是邓小平在领导改革开放和现代化建设这一新的革命过程中，不断提出和反复和思考的首要的基本的理论问题。</p>
</li>
<li><p>搞清楚什么是社会主义、怎样建设社会主义，关键是要在坚持社会主义基本制度的基础上进一步认清社会主义的本质。</p>
<ul>
<li><p>改革开放以来，他<strong>反复强调坚持四项基本原则，其实质就是要求我们坚持社会主义基本制度，即坚持以公有制为基础</strong>、实行按劳分配原则的社会主义基本经济制度，坚持共产党领导、实行人民民主专政的社会主义基本政治制度坚持以马克思列宁主义、毛泽东思想为指导的社会主义意识形态，这是我们的立国之本，是我国一切进步和发展的基础。</p>
</li>
<li><p>1992年初，邓小平在南方谈话中对社会主义本质作了总结性理论概括：“<strong>社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕</strong>。”</p>
</li>
</ul>
</li>
<li><p>补充：**<font color="orange">社会主义坚持根本原则</font>**：</p>
<ul>
<li><p>一是以社会主义公有制经济为主体</p>
</li>
<li><p>一是共同富裕</p>
</li>
<li><p>2018辨析：共同富裕是中国特色社会主义的根本原则</p>
<ol>
<li>正确。（2分）</li>
<li>共同富裕是中国特色社会主义根本原则。它体现了社公主义的本质要求，指明了社会主义发展的方向和目标。（2分）</li>
<li>共同富裕是科学社会主义的重要价值诉求。（1分）</li>
<li>共同富裕是社会主义优越性的重要体现。（1分）</li>
<li>共同富裕是中国特色社会主义的基本目标。（1分）</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="二、-邓小平理论的主要内容"><a href="#二、-邓小平理论的主要内容" class="headerlink" title="二、    邓小平理论的主要内容"></a>二、    邓小平理论的主要内容</h3><ol>
<li><p><strong>社会主义初级阶段理论的提出及其发展</strong></p>
<p>首次提出：十一届六中全会</p>
<p>系统阐述：十三大</p>
<p>不断强调：十五大——&gt;十八大、十九大</p>
</li>
<li><p><strong>社会主义初级阶段的科学含义</strong></p>
<p>一、我国已经是社会主义社会（社会性质）</p>
<p>二、我国的社会主义社会还处在初级阶段（发展阶段）</p>
</li>
<li><p><strong>邓小平理论的主要内容</strong></p>
<ul>
<li><p>解放思想、实事求是的思想路线（**<font color="red">是邓小平理论活的灵魂，是邓小平理论的精髓</font>**）</p>
<p>1978年党的十一届三中全会召开前夕，在中央工作会议上邓小平发表《解放思想，实事求是团结一致前看》的讲话，明确指出：”一个党，一个国家，一个民族，如果一切从本本出发，思想僵化，迷信盛行，那它就不能前进，它的生机就停止了，就要亡党亡国。</p>
<p><strong>十一届三中全</strong>会果断作出了把党和国家工作重点转移到社会主义现代化建设上来的战略决策，提出了一系列有利于增强党的团结和调动一切积极因素的方针政策，<strong>标志着党重新确立了马克思主义的思想路线。</strong></p>
</li>
<li><p>社会主义初级阶段理论</p>
<p>我国处在社会主义初级阶段，是邓小平和我们党对当代中国基本国情的科学判断。我们讲解放思想，实事求是，从实际出发建设社会主义，<strong>最大的“实际”就是中国的基本国情</strong>。</p>
</li>
<li><p>党的基本的路线（一个中心，两个基本点）</p>
<p>党的十三大报告提出了党在社会主义初级阶段的基本路线：领导和团结全国各族人民以<font color="red">经济建设为中心，坚持四项基本原则</font>，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗。</p>
<ul>
<li><strong><font color="orange">补充</font>：</strong><ul>
<li>==<strong>坚持党的基本路线的要求</strong>：==<ol>
<li>必须紧紧围绕经济建设这一中心；以经济建设为中心是兴国之要，是党和国家兴旺发达、长治久安的根本要求。</li>
<li>必须坚持四项基本原则同改革开放结合起来，正确敵处理改革开放与四项基本原则之间的关系。既要以四项基本原则保证改革开放的正确方向，又要通过改革开放赋予四项基本原则新的时代内涵，坚持把以经济建设为中心同四项基本原则、改革开放这两个基本点统一于发展中国特色社会主义的伟大实践。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>社会主义的根本任务是发展生产力</p>
<ul>
<li>发展就是硬道理，中国解决所有问题的关键是要靠自己的发展</li>
<li>邓小平深刻地概括出“科学技术是第一生产力”这个新论断</li>
</ul>
</li>
<li><p>三步走战略</p>
<p>1987年4月，邓小平第一次提出了分“三步走”基本实现现代化的战略。同年10月，<font color="red">党的十三大大把邓小平“三步走”的发展战略构想确定下来</font>，明确提出：</p>
<ul>
<li>第一步，从1981年到1990年实现国民生产总值比1980年翻一番，解决人民的温饱问题：</li>
<li>第二步，从1991年到20世纪末，使国民生产总值再翻一番，达到小康水平；</li>
<li>第三步，到21世纪中叶，国民生产总值再翻两番，达到中等发达国家水平，基本实现现代化。，然后在这个基础上继续前进。</li>
</ul>
</li>
<li><p>改革开放理论</p>
<p>新时期最鲜明的特点是改革开放。邓小平明确指出：“<strong>改革是中国的第二次革命</strong>。”中国共产党领导的第一次革命，把一个半殖民地半封建的旧中国变成了一个社会主义新中国中国共产党领导的第二次革命，将把一个经济文化比较落后的社会主义中国变成一个现代化的社会主义国家。</p>
<p><strong>改革的性质是社会主义制度的自我完善和自我发展</strong>。改革不是一个阶级推翻另一个阶级那种原来意义上的革命，也不是原有经济体制的细枝末节的修补，而是对体制的根本性变革改革的实质和目标，是要从根本上改变束缚我国生产力发展的经济体制，建立充满生机和活力的社会主义新经济体制，同时相应地改革政治体制和其他方面的体制，以实现中国的计会主义现代化</p>
<p><strong><font color="orange">补充：</font></strong></p>
<ul>
<li>改革是社会主义发展的直接动力</li>
<li>判断改革得失成败的标准是：“三个有利于”<ol>
<li>改革和各方面工作的是非得失，归根到底，要以是否有利于发展社会主义社会的生产力）</li>
<li>是否有利任增强社会主义国家的综合国力</li>
<li>是否有利于提高人民的生活水平为标准</li>
<li>开放也是改革，对外开放是建设中国特色社会主义的十顶基本国策</li>
</ol>
</li>
</ul>
</li>
<li><p>社会主义市场经济理论</p>
<p>建立社会主义市场经济体制是我们党的一个伟大创举，是我国经济体制改革在实践和理论上的重大突破。<u>我国经济体制改革的核心问题是如何正确认识和处理计划与市场的送系。</u></p>
<ul>
<li>一是计划经济和市场经济不是划分社会制度的标志，计划经济不等于社会主义，市场经济也不等于资本主义：</li>
<li>二是计划和市场都是经济手段，对经济活动的调节各有优势和长处，社会主义实行市场经济要把两者结合起来：</li>
<li>三是市场经济作为资源配置的一种方式本身不具有制度属性，可以和不同的社会制度结合，从而表现出不同的性质。</li>
</ul>
</li>
<li><p>“两手住，两手都要硬”</p>
<p>一手抓物质文明，一手抓精神文明，也指一手抓建设，一手抓法制</p>
</li>
<li><p>“一国两制”</p>
<p>“和平统一、一国两制”构想的基本内容主要有：</p>
<ol>
<li><strong>坚持一个中国</strong>，这是“和平统一、一国两制”<br>的核心，是发展两岸关系和实现和平统一的基础；</li>
<li><strong>两制并存</strong>，在祖国统一的前提下，国家的主体部分实行社会主义制度，同时在台湾、香港、澳门保持原有的社会制度和生活方式长期不变；</li>
<li><strong>高度自治</strong>，祖国完全统一后，台湾、香港、澳门作为特别行政区，享有不同于中国其他省、市自治区的高度自治权，台湾、香港、澳门同胞各种合法权益将得到切实尊重和维护；</li>
<li>尽最大努力净取和平统一，但不承诺放弃使用武力；</li>
<li>解决台湾问题，实现祖国完全统一，寄希望于台湾人民。</li>
</ol>
<p><font color="orange"><strong>补充：</strong></font></p>
<ol>
<li>一国两制的伟大构想的提出是从台湾问题开始的</li>
<li>在处理香港问题、澳门问题得到成功实践</li>
</ol>
</li>
<li><p>中国问题的关键在于党</p>
<p><font color="red">建设中国特色社会主义，关键在于坚持、加强和改善党的领导。</font></p>
<p>加强党的建设，是我们党领导人民取得革命和建设胜利的一个法宝</p>
</li>
</ul>
</li>
</ol>
<h2 id="第三节-邓小平理论的历史地位"><a href="#第三节-邓小平理论的历史地位" class="headerlink" title="第三节    邓小平理论的历史地位"></a>第三节    邓小平理论的历史地位</h2><h2 id="一、-马克思列宁主义、毛泽东思想的继承和发展"><a href="#一、-马克思列宁主义、毛泽东思想的继承和发展" class="headerlink" title="一、 马克思列宁主义、毛泽东思想的继承和发展"></a>一、 马克思列宁主义、毛泽东思想的继承和发展</h2><h2 id="二、中国特色社会主义理论体系的开篇之作"><a href="#二、中国特色社会主义理论体系的开篇之作" class="headerlink" title="二、中国特色社会主义理论体系的开篇之作"></a>二、中国特色社会主义理论体系的开篇之作</h2><p>邓小平理论第一次比较系统地初步回答了中国社会主义的发展道路、发展阶段、根本任务、发展动力外部条件政治保证、战略步骤、党的领导和依靠力量以及祖国统一等一系列基本问题指导我们党制定了在社会主义初级阶段的基本路线。</p>
<h2 id="三、改革开放和社会主义现代化建设的科学指南"><a href="#三、改革开放和社会主义现代化建设的科学指南" class="headerlink" title="三、改革开放和社会主义现代化建设的科学指南"></a>三、改革开放和社会主义现代化建设的科学指南</h2><ol>
<li>邓小平理论指导了改革开放的伟大实践。党的十一届三中全会以后，我们党作出的这一系列重大决策，把改革开放和社会主义现代化建设一步一步推向前进。</li>
<li>邓小平理论使改革开放后的中国发生天翻地覆的变化，迎来了思想的解放、经济的发展、政治的昌明、教育的勃兴、文艺的繁荣、科学的春天。</li>
<li>邓小平理论是邓小平留给我们的最重要的思想遗产。邓小平理论经过改革开放和现代化建设实践的检验，已经被证明是指导中国人民建设中国特色社会主义、保证中国在改革开放实现国家繁荣富强和人民共同富裕的系统的科学理论。</li>
</ol>
<h1 id="第7章-“三个代表”重要思想"><a href="#第7章-“三个代表”重要思想" class="headerlink" title="第7章    “三个代表”重要思想"></a>第7章    “三个代表”重要思想</h1><h2 id="第一节-“三个代表”重要思想的形成"><a href="#第一节-“三个代表”重要思想的形成" class="headerlink" title="第一节    “三个代表”重要思想的形成"></a>第一节    “三个代表”重要思想的形成</h2><p>解决党建问题。</p>
<ul>
<li><strong>世情变化：</strong>当代世界的发展变化<br>对党和国家的新要求（苏联解体、东欧剧变；美国成为超级大国；经济全球化；新科技革命的影响）</li>
</ul>
<p><strong>国情变化</strong>：当代中国发展变化<br>对党和国家的新要<br>求。</p>
<p><strong>党情新变化</strong>： 党的发展变化对自身<br>建设提出的新要求</p>
<h3 id="一、-“三个代表”重要形成的过程"><a href="#一、-“三个代表”重要形成的过程" class="headerlink" title="一、    “三个代表”重要形成的过程"></a>一、    “三个代表”重要形成的过程</h3><p>2000年2月第一次提出</p>
<p>2001年7月1日，中国共产党成立80周年大会上全面阐述</p>
<p>2002年，江泽民第一次阐述内在联系：<font color="red"><strong>提出“贯彻‘三个代表’要求<em>关键在坚持与时俱进，核心在保持党的先进性本质在</em>坚持执政为民</strong></font></p>
<p>2002年11月，党的十六大写入党章</p>
<p>2004年又写进宪法</p>
<h2 id="第二节-“三个代表”重要思想的核心观点和主要内容"><a href="#第二节-“三个代表”重要思想的核心观点和主要内容" class="headerlink" title="第二节    “三个代表”重要思想的核心观点和主要内容"></a>第二节    “三个代表”重要思想的核心观点和主要内容</h2><h3 id="一、-“三个代表”重要思想的核心观点"><a href="#一、-“三个代表”重要思想的核心观点" class="headerlink" title="一、    “三个代表”重要思想的核心观点"></a>一、    “三个代表”重要思想的核心观点</h3><ol>
<li><p>中国共产党必须始终代<br>表中国先进生产力的发展要求。</p>
<ul>
<li>社会主义的根本任务是发展社会生产力。<strong>始终代表中国先</strong><br><strong>进生产力的发展要求，大力促进先进生产力的发展，是我们党站</strong><br><strong>在时代前列，保持先进性的根本体现和根本要求。</strong></li>
<li><font color="red"><strong>工人、农民、知识分子是推动我国先进生产力发展和社会</strong><br><strong>全面进步的根本力量</strong></font>知识分子是先进生产力的开拓者。<strong>人是生</strong><br><strong>产力中最活跃的因素</strong>。树立人才资源是第一资源的思想。</li>
<li><font color="red">科学技术是第一生产力，是先讲生产力的集中体现和主要标志</font>。科学的本质是创新。科技进步和创新是发展生产力的决定<br>因素。</li>
<li>促进生产关系和上层建筑的各个方面不断体现先进生产力<br>的发展要求</li>
</ul>
</li>
<li><p>中国共产党必须始终代<br>表中国先进文化的前进方向。</p>
<p>大力发展社会主义先进文化，必须牢牢把握先进文化的前进方向，建设社会<br>主义精神文明，不断满足人民群众日益增长的精神文化需求，不断丰富人民<br>的精神世界，增强人民的精神力量。</p>
<ul>
<li>发展社会主义先进文化，就是建设社会主义精神文明。</li>
<li>发展社会主义先进文化，就是发展面向现代化、面向世界、面向未来<br>的，民族的科学的大众的社会主义文化。</li>
<li>发展社会主义先进文化，必须弘扬民族精神。<font color="red"><strong>中华民族形成了以爱国主义为核心的团结统一、爱好和平、勤劳勇敢、自强不息的伟大民族精神</strong></font>。</li>
<li>发展社会主义先进文化，必须加强社会主义思想道德建设，这是发展<br>先进文化的重要内容和中心环节。</li>
<li>发展社会主义先进文化，必须作好思想政治工作。思想政治工作是经<br>济工作和其他一切工作的生命线</li>
</ul>
</li>
<li><p>中国共产党必须始终代<br>表中国最广大人民的根本利<br>益。</p>
<ul>
<li><font color="red"><strong>人民是我们国家的主人，是决定我国前途和命</strong><br><strong>运的根本力量</strong></font>，是历史的真正创造者。</li>
<li>我们党来自于人民，植根于人民，服务于人民。</li>
<li>我们党始终坚持人民的利益高于一切。没有自<br>己的特殊利益。</li>
<li>要努力使工人、农民、知识分子和其他群众共<br>同享受到经济社会发展的成果。</li>
<li><strong><font color="red">党和国家一切方针政策，都要以是否符合最广<br>大人民群众的根本利益为最高衡量标准</font>。</strong></li>
</ul>
</li>
</ol>
<h3 id="二、-“三个代表”重要思想的主要内容"><a href="#二、-“三个代表”重要思想的主要内容" class="headerlink" title="二、    “三个代表”重要思想的主要内容"></a>二、    “三个代表”重要思想的主要内容</h3><ol>
<li><p>发展是党执政兴国的第一要务</p>
<p>社会主义要强大，要体现优越性，关键在发展。</p>
</li>
<li><p>建设社会主义市场经济体制</p>
<ul>
<li>**<font color="red">须坚持和完善公有制为主体、多种所有制经济共同发展<br>的社会主义基本经济制度</font>**。</li>
<li>按照“产权清晰、权责明确、政企分开、管理科学”的<br>要求，实行规范的公司制改革，完善法人治理结构，建立符合市<br>场经济规律和我国国情的企业领导体制和管理制度。</li>
<li>发挥市场在资源配置中的基础性作用，同时加强国家的<br>宏观调控。</li>
<li>理顺分配关系，调整和规范国家、企业和个人的分配关<br>系。坚持效率优先，兼顾公平，初次分配注重效率，再次分配注重公平。</li>
<li>建立和完善社会保障体系。</li>
</ul>
</li>
<li><p>全面建设小康社会</p>
<p>十五大报告中初步勾画了实现第三步战略目标<br>的蓝图：</p>
<ul>
<li>21世纪第一个十年实现国民生产总值比<br>2000年翻一番，使人民的小康生活更加宽裕，形<br>成比较完善的社会主义市场经济体制；</li>
<li>再经过十年的努力，到建党一百年时，使国<br>民经济更加发展，各项制度更加完善；</li>
<li>到21世纪中叶新中国成立一百年时，基本<br>实现现代化，建成富强民主文明的社会主义国家。</li>
</ul>
</li>
<li><p>建设社会主义民主政治</p>
<ul>
<li><font color="red">建设社会主义政治文明，最根本的就是要坚持党的领<br>导、人民当家作主和依法治国的有机统一。（这是政治文明建<br>设必须遵循的基本方针，也是我国政治文明区别于资本主义政<br>治文明的本质特征，</font>党的领导是人民当家作主和依法治国的根<br>本保证，人民当家作主是社会主义民主政治的本质要求，依法<br>治国是党领导人民治理国家的基本方略。）</li>
<li>建设社会主义政治文明，必须坚持依法治国，建设社<br>会主义法治国家。</li>
<li>建设社会主义政治文明，必须进行政治体制改革。<br>（政治体制改革是社会主义政治制度的自我完善和发展。）</li>
<li>发展社会主义民主政治，必须在四项基本原则的前提<br>下稳妥推进。</li>
</ul>
</li>
<li><p>推进党的建设新的伟大工程</p>
<ul>
<li>坚持党的领导,<font color="red">核心是坚持党的先讲性</font>。使党成为<br>思想上政治上组织上完全巩固、始终站在时代前列带领<br>人民团结奋进的坚强领导核心。</li>
<li>江泽民强调推进党的建设新的伟大工程，<font color="red">重点是加强党的执政能力建设</font>，不断提高科学判断形势的能力、<br>驾驭市场经济的能力、应对复杂局面的能力、依法执政<br>的能力、总揽全局的能力。</li>
<li>坚持党要管党从严治党的方针。从严治党，最根<br>本的就是党的各级组织和全体党员、干部，都要做到严<br>格按照党章办事，按照党内政治生活准则和党的各项规<br>定办事。从严治党必须全面贯穿到党的思想、政治、组<br>织、作风和制度建设之中.<br>党的作风，关系党的形象，关系人心向背，关系党的生<br>命。<font color="red">加强和改进党的作风建设，核心问题是保持党同人<br>民群众的血肉联系</font>。我们党的最大政治优势是密切联系<br>群众，党执政后的最大危险是脱离群众。</li>
<li>领导干部一定要“三讲”。</li>
</ul>
</li>
</ol>
<h2 id="第三节-“三个代表”重要思想的历史地位"><a href="#第三节-“三个代表”重要思想的历史地位" class="headerlink" title="第三节    “三个代表”重要思想的历史地位"></a>第三节    “三个代表”重要思想的历史地位</h2><h3 id="一、-中国特色社会主义理论体系的接续发展"><a href="#一、-中国特色社会主义理论体系的接续发展" class="headerlink" title="一、    中国特色社会主义理论体系的接续发展"></a>一、    中国特色社会主义理论体系的接续发展</h3><ol>
<li><p>“三个代表”重要思想坚持把人民的根本利益作<br>为出发点和归宿。</p>
</li>
<li><p>“三个代表”重要思想强调要努力促进人的全面<br>发展。</p>
</li>
<li><p>“三个代表”重要思想，把党的建设同当今世界<br>的发展趋势，同我国社会主义的自我完善和发展，同实<br>现中国特色社会主义的宏伟目标和各项任务联系起来。</p>
<p><strong><font color="red">始终做到“三个代表”，是我们党的立党之本、执政<br>之基、力量之源。</font></strong></p>
</li>
</ol>
<h3 id="二、-加强和改进党的建设，推进中国特色社会主义事业的强大理论武器"><a href="#二、-加强和改进党的建设，推进中国特色社会主义事业的强大理论武器" class="headerlink" title="二、    加强和改进党的建设，推进中国特色社会主义事业的强大理论武器"></a>二、    加强和改进党的建设，推进中国特色社会主义事业的强大理论武器</h3><p>“三个代表”重要思想提出了党的建设的新要求：</p>
<ol>
<li>必须使全党始终保持与时俱进的精神状态，不<br>断开拓马克思主义理论发展的新境界；</li>
<li>必须把发<br>展作为党执政兴国的第一要务，不断开创现代化建设<br>的新局面；</li>
<li>必须最广泛最充分地调动一切积极因<br>素，不断为中华民族伟大复兴增添新力量；</li>
<li>必须<br>以改革的精神推进党的建设，不断为党的肌体注入新<br>活力，充分体现了共产党人的先进性和时代精神，为<br>加强党的建设指明了方向。</li>
</ol>
<h1 id="第8章-科学发展观"><a href="#第8章-科学发展观" class="headerlink" title="第8章    科学发展观"></a>第8章    科学发展观</h1><h2 id="第一节-科学发展观的形成"><a href="#第一节-科学发展观的形成" class="headerlink" title="第一节    科学发展观的形成"></a>第一节    科学发展观的形成</h2><h3 id="一、-科学发展观的形成条件"><a href="#一、-科学发展观的形成条件" class="headerlink" title="一、    科学发展观的形成条件"></a>一、    科学发展观的形成条件</h3><ol>
<li>科学发展观是在深刻把握我国<font color="red">基本国情</font>和<font color="red">新的阶段性特征</font>的基础上形成和发展<ul>
<li><font color="red">但我国仍处于并将长期处于社会主义初级阶段的基本国情没<br>有变。</font></li>
</ul>
</li>
<li>科学发展观是在深入总结改革开放以来特别是党的十六大以来实践<br>经验的基础上形成和发展的</li>
<li>科学发展观是在深刻分析国际形势、顺应世界发展趋势、借鉴国外发展经验<br>的基础上形成和发展的</li>
</ol>
<h3 id="二、-科学发展观的形成过程"><a href="#二、-科学发展观的形成过程" class="headerlink" title="二、    科学发展观的形成过程"></a>二、    科学发展观的形成过程</h3><ol>
<li><p>科学发展观在抗击非典疫情和探索完善社<br>会主义市场经济体制的过程中逐步形成</p>
<p><font color="red">2003年10月，第一次提出</font></p>
</li>
<li><p>科学发展观在加强和改善宏观<br>调控的实践中不断充实丰富</p>
</li>
<li><p>以党的十七大为标志，科学发展观进<br>一步走向成熟</p>
<p>十七大报告提出了“中国特色社会主义理论体系<br>“的科学概念，把科学发展观与邓小平理论、“三个代<br>表”重要思想一道作为中国特色社会主义理论体系的重<br>要组成部分，并把科学发展观写入党章。</p>
</li>
</ol>
<h2 id="第二节-科学发展观的科学内涵和主要内容"><a href="#第二节-科学发展观的科学内涵和主要内容" class="headerlink" title="第二节    科学发展观的科学内涵和主要内容"></a>第二节    科学发展观的科学内涵和主要内容</h2><h3 id="一、科学发展观的科学内涵"><a href="#一、科学发展观的科学内涵" class="headerlink" title="一、科学发展观的科学内涵"></a>一、科学发展观的科学内涵</h3><p>科学发展观，**<font color="red">第一要义是发展，核心<br>立场是以人为本，基本要求是全面协调可<br>持续，根本方法是统筹兼顾</font>**。</p>
<ol>
<li>推动经济社会发展是科学发<br>展观的第一要义</li>
</ol>
<h3 id="二、科学发展观的主要内容"><a href="#二、科学发展观的主要内容" class="headerlink" title="二、科学发展观的主要内容"></a>二、科学发展观的主要内容</h3>]]></content>
      <categories>
        <category>考研必背</category>
      </categories>
  </entry>
  <entry>
    <title>游戏篇 狂扁小朋友修仙版(攻略)</title>
    <url>/Dad-n-Me.html</url>
    <content><![CDATA[<p><strong>游戏体验</strong></p>
<a id="more"></a>

<h1 id="这游戏非常好玩-在死了几十回之后我准备删除游戏时我终于发现的奥秘-突然想起老爹的话-“必须要用魔法来打败魔法”"><a href="#这游戏非常好玩-在死了几十回之后我准备删除游戏时我终于发现的奥秘-突然想起老爹的话-“必须要用魔法来打败魔法”" class="headerlink" title="这游戏非常好玩 在死了几十回之后我准备删除游戏时我终于发现的奥秘 突然想起老爹的话 “必须要用魔法来打败魔法”"></a>这<a href="https://wwc.lanzoui.com/ijWYdwqid3c">游戏</a>非常好玩 在死了几十回之后我准备删除游戏时我终于发现的奥秘 突然想起老爹的话 “必须要用魔法来打败魔法”</h1><ul>
<li>密码: sdq3</li>
</ul>
<h4>移动: </h4>

<ul>
<li><p>上走: W</p>
</li>
<li><p>下走: S</p>
</li>
<li><p>左走: A</p>
</li>
<li><p>右走: D</p>
</li>
</ul>
<h4>普攻: </h4>

<ul>
<li><p>轻攻击: J</p>
</li>
<li><p>重攻击: K</p>
</li>
<li><p>举起双手: L</p>
</li>
</ul>
<!-- <h4>普通连招: </h4>

* 拥抱: shift + 移动 + J 

* 风车拳: shift  + 移动 + k

* 马步冲拳:  -->

<h1 id="神技-小型火焰-魔法远程"><a href="#神技-小型火焰-魔法远程" class="headerlink" title="神技 小型火焰 (魔法远程)"></a>神技 小型火焰 (魔法远程)</h1><ul>
<li><p>远程技能: 蓄力释放时一个威力如原子弹般无比强的小型火焰, 适合远程消耗对手, <font color="#B22222">脸贴脸可使伤害最大化 (伤害高的离谱)</font></p>
</li>
<li><p>耗蓝量: 0</p>
</li>
<li><p>技能冷却时间: 击中目标后会有1s的冷却时间</p>
</li>
<li><p>学习方法: 击败火拳小子后获得此最强技能</p>
</li>
<li><p>出招表: shift + 移动 + L</p>
</li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e51f30dff95.gif"></p>
<br>

<h1 id="乾坤八卦定-魔法控制"><a href="#乾坤八卦定-魔法控制" class="headerlink" title="乾坤八卦定 (魔法控制)"></a>乾坤八卦定 (魔法控制)</h1><ul>
<li><p>控制技能: 释放 一个五行八卦 定住两米以内敌人和自己</p>
</li>
<li><p>耗蓝量: 0</p>
</li>
<li><p>技能冷却时间: 技能使用后会有1s的冷却时间</p>
</li>
<li><p>学习方法: 击败四位摆阵足球运动员后获得此技能</p>
</li>
<li><p>出招表: L</p>
</li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e51f2c761bf.gif"></p>
<br>

<h1 id="必学-金盾护体-霸体免伤"><a href="#必学-金盾护体-霸体免伤" class="headerlink" title="必学 金盾护体  (霸体免伤)"></a>必学 <font color="#CD7F32">金盾护体</font>  (霸体免伤)</h1><ul>
<li><p>霸体技能: 给前方敌人一个爱的拥抱 使用技能期间 有一小段位移 期间获得短时间 霸体 和 100%免伤 </p>
</li>
<li><p>全部技能霸体: <font color="#CD7F32">金盾护体 </font>使用完 然后 疯狂普攻 有几率触发 所有技能都有 霸体 和 100%免伤  受到攻击 “胸前有个 <font color="#CD7F32">金盾</font> “ 进入霸体抵消伤害, 前提是出现该效果后, 不再用<font color="#CD7F32">金盾护体 </font>   </p>
</li>
<li><p>耗蓝量: 0</p>
</li>
<li><p>技能冷却时间: 0</p>
</li>
<li><p>学习方法: 击败所有修仙篮球队成员后获得此技能</p>
</li>
<li><p>出招表: shift + 移动 + J</p>
</li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e51f2c5e5c7.gif"></p>
<br>

<h1 id="幻直叠影-增加移速"><a href="#幻直叠影-增加移速" class="headerlink" title="幻直叠影 (增加移速)"></a>幻直叠影 (增加移速)</h1><ul>
<li><p>强化技能: 放弃上走和下走, 获得幻影特效有几率获得一把剑, 变成四手霸王</p>
</li>
<li><p>耗蓝量: 0</p>
</li>
<li><p>技能冷却时间: 0</p>
</li>
<li><p>学习方法: 击败两名飞车党后获得此技能 后按 L 得到宝剑</p>
</li>
<li><p>出招表: shift + 移动  </p>
</li>
</ul>
<br>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e51f31030cd.gif"></p>
<br>

<!-- 幻直叠影 -->

<h1 id="通关攻略"><a href="#通关攻略" class="headerlink" title="通关攻略"></a>通关攻略</h1><!-- <video src="/video/要用魔法对付魔法.mp4" controls="controls">
必须要用魔法来打败魔法
</video> -->

<p><a href="https://tieba.baidu.com/p/7649710620">博主通过教程</a> </p>
<p><font color="#DC143C">游戏感想: 开始”想和作者要游戏的源码, 然后自己把生命改成无限”, 不然太难玩了 我都死69次了真是又菜又爱玩, 然后发现要以魔法打败魔法</font></p>
<p><a href="https://www.bilibili.com/video/BV1AU4y1u7Uo">老番茄通过教程</a></p>
<br>

<!-- <video src="/video/要用魔法对付魔法.mp4" controls="controls">
要用魔法对付魔法
</video> -->


<!-- 

<h4>当你学会五行八卦后, 用封印住会御剑飞行的飞车党 之后变成四手霸王</h4>

# 只打篮球仙人 连招 先用五行八卦定 将其封印 或者 风车拳 (shift  + D + k) 加 五行八卦定 复制控制 记作拉扯着打 与敌人保持一个身位 和 <font color="#ef5b9c">非</font>"<font color="#ef5b9c">金盾护体</font>技能"-->



]]></content>
      <categories>
        <category>游戏</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 Beautiful Soup(牢饭吃到饱)</title>
    <url>/reptile-bs4-lxml.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1>Beautiful Soup4<h1>

<h1 id="安装bs4"><a href="#安装bs4" class="headerlink" title="安装bs4"></a>安装bs4</h1><p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">pip install lxml<br></code></pre></td></tr></table></figure>
<h1 id="find用法"><a href="#find用法" class="headerlink" title="find用法"></a>find用法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">find(<span class="hljs-string">&quot;标签&quot;</span>, 属性:<span class="hljs-built_in">id</span> <span class="hljs-keyword">class</span>) <br>find(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;sdq&quot;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="find-all用法"><a href="#find-all用法" class="headerlink" title="find_all用法"></a>find_all用法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">find(<span class="hljs-string">&quot;标签&quot;</span>, 属性:<span class="hljs-built_in">id</span> <span class="hljs-keyword">class</span>).find_all(<span class="hljs-string">&quot;标签&quot;</span>)<br>find(<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;sdq&quot;</span>).find_all(<span class="hljs-string">&quot;a&quot;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><p><strong>打开这个<a href="https://www.umei.cc/bizhitupian/weimeibizhi/">网址</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 导入requests和bs4库</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;https://www.umei.cc/bizhitupian/weimeibizhi/&quot;</span><br>resp = requests.get(url)<br>resp.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>  <span class="hljs-comment"># 处理乱码</span><br><br><span class="hljs-comment"># print(resp.text)</span><br><span class="hljs-comment"># 把源代码交给bs</span><br>main_page = BeautifulSoup(resp.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>alist = main_page.find(<span class="hljs-string">&quot;div&quot;</span>, class_=<span class="hljs-string">&quot;TypeList&quot;</span>).find_all(<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-comment"># print(alist)</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> alist:<br>    href = a.get(<span class="hljs-string">&#x27;href&#x27;</span>)  <span class="hljs-comment"># 直接通过get就可以拿到属性的值</span><br>    <span class="hljs-comment"># 子页面的源代码</span><br>    child_resp = requests.get(href)<br>    child_resp.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>    child_text = child_resp.text<br>    <span class="hljs-comment"># 从子页面中拿到图片的下载路径</span><br>    child = BeautifulSoup(child_text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>    p = child.find(<span class="hljs-string">&quot;p&quot;</span>, align=<span class="hljs-string">&quot;center&quot;</span>)<br>    img = p.find(<span class="hljs-string">&quot;img&quot;</span>)<br>    src = img.get(<span class="hljs-string">&quot;src&quot;</span>)<br>    <span class="hljs-comment"># 下载图片</span><br>    img_resp = requests.get(src)<br>    <span class="hljs-comment"># img_resp.content  # 这里拿到的是字节</span><br>    img_name = src.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 拿到url中的最后一个 / 以后的内容-1代表最后一个</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;img/&quot;</span>+img_name, mode=<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(img_resp.content)  <span class="hljs-comment"># 图片内容写入文件</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在下载&quot;</span>, img_name)<br>    time.sleep(<span class="hljs-number">1</span>) <span class="hljs-comment">#停1秒</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载完了&quot;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="lxml模块的使用"><a href="#lxml模块的使用" class="headerlink" title="lxml模块的使用"></a>lxml模块的使用</h1><h3 id="导入lxml的etree库"><a href="#导入lxml的etree库" class="headerlink" title="导入lxml的etree库"></a>导入lxml的etree库</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br></code></pre></td></tr></table></figure>
<p>利用etree.HTML 将HTML字符串(bytes类型活str类型) 转化为Element对象 Element对象具有xpath的方法 返回结果列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">html = etree.HTML(text)     <span class="hljs-comment"># text为文本内容</span><br>ret_list = html.xpath(<span class="hljs-string">&quot;xpath语法规则字符串&quot;</span>)     <span class="hljs-comment"># 用xpath来解析</span><br></code></pre></td></tr></table></figure>
<h3 id="导入lxml的etree-tostring函数的使用"><a href="#导入lxml的etree-tostring函数的使用" class="headerlink" title="导入lxml的etree.tostring函数的使用"></a>导入lxml的etree.tostring函数的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>html_str = <span class="hljs-string">&#x27;&#x27;&#x27; &lt;div&gt;&lt;ul&gt;</span><br>                &lt;li class=&quot;itrm-1&quot;&gt;&lt;a href=&quot;;link1.html&quot;&gt;first item&lt;/a&gt;&lt;/li&gt;<br>                &lt;li class=&quot;itrm-1&quot;&gt;&lt;a href=&quot;;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;<br>                &lt;li class=&quot;itrm-inactive&quot;&gt;&lt;a href=&quot;;link3.html&quot;&gt;third item&lt;/a&gt;&lt;/li&gt;<br>                &lt;li class=&quot;itrm-1&quot;&gt;&lt;a href=&quot;;link1.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;<br>                &lt;li class=&quot;itrm-0&quot;&gt;&lt;a href=&quot;;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;<br>                &lt;ul&gt;&lt;div&gt; <span class="hljs-string">&#x27;&#x27;&#x27;         </span><br><span class="hljs-comment"># 将html源码转换成element对象   etree.HTML()能够自动补全html缺失的标签</span><br>html = etree.HTML(html_str)<br><span class="hljs-comment"># 转换成String类型的数据        </span><br>handeled_html_str = etree.toString(html).decode()<br><span class="hljs-built_in">print</span>(handeled_html_str)<br></code></pre></td></tr></table></figure>
<br></h1></h1>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 cookie(吃牢饭集合)</title>
    <url>/reptile-cookie.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="headers中携带cookie"><a href="#headers中携带cookie" class="headerlink" title="headers中携带cookie"></a>headers中携带cookie</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://github.com/sdqOS&#x27;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;_octo=GH1.1.1829904439.1611247247; _device_id=326c46400086ed13ec278dc836662948; _locale=ko; _locale_experiment=ko; tz=Asia%2FShanghai; has_recent_activity=1; user_session=zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; __Host-user_session_same_site=zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; tz=Asia%2FShanghai; color_mode=%7B%22color_mode%22%3A%22auto%22%2C%22light_theme%22%3A%7B%22name%22%3A%22light%22%2C%22color_mode%22%3A%22light%22%7D%2C%22dark_theme%22%3A%7B%22name%22%3A%22dark%22%2C%22color_mode%22%3A%22dark%22%7D%7D; logged_in=yes; dotcom_user=sdqOS; _gh_sess=l41S%2BZNr%2F%2Bmx5Y2taob81ssga5CdD5drTY7IWcDY5vIxraTrsep8btIIkpvggyDxCYtFq1Q5q6hzDGNpRs8nTJjCbZqYCGpOEUM4W20s1%2Bxo0d6WnhQZ5W8eO96d60q4p%2BF8eeSGxrdBQBL5zLIZ8uyAD%2BuRaUZL7ZoARDh7qYNssds5cOLTSlkzqJMoHUR2Yp2wy%2FNKMTEIs40hwMdjF2bbbTE4Cah3Srm29no9Lw3fvC7Z4uFLWQtzwMLwE7KEImrKAODH2dTZeYVyxBRfX5iyyA8qpO0wg%2FyAivegnpLQyQXZGQ3%2BTr4zNxEcy2Utqkhd%2FwdRQ%2Bk%2BGR2ibrXxoE3L28fyD0zqywpmxLbKmqWqkum%2B9BK99UHuFkdmUtOzdifjbYekleDfDETDUPAF3Ubvkc3pwvnlZZC66jZzX9mvbElHZlOpE8eLncyGc5jmTYBgVseIwxGs13ZkvEfZ76debhVyRHABDyfAgNsiZWHcz4I34WbPele1GjNF2qF4Fhn03cy%2FktvUW4F7pcXhx2ABKqcVNDqXtd%2BKWkdRDivx5fxtu8i1%2BE5FDuvSF%2FM8eUGjX%2FPs%2B%2BoiJ06SmbybI%2FMBoi6YLCwD4Z0iVrx1EENzH54Oknn3NTQoIHOpzgYFx4l6HzJbiTAIIZeApYhEwD82zuvditr5EaPUApQQuVdm6vXNyvFq%2B%2BLHglipgI6WXCwV1vp7GU%2FtZw6EsMX5RR2zdKnsQODuy92uTEMAnnS7ECkqUh0OUuiSNXsa6lWNqCiJId7MgEE4gkSTQawWO775i98vP2Rx6%2B%2BVkdQsYFOgYxiYZgbI%2BQCyak8YbIZXWbXtBziGYILPZM8zdm1vVJWXdgcBZfF90jZSGkr7EgNqVBQuVCHZNg9ZxmmRZ54J1K28e6r2UL7HLb5%2F3MycVrhQUelq8wPY--TcRWY%2B%2FTS0Zgmyhj--k8C1M7YSHlzTdGPKtUMwoQ%3D%3D&quot;</span><br>&#125;<br><br>respinse = requests.get(url, headers=headers,)<br><br><span class="hljs-comment"># 看看是给谁发请求</span><br><span class="hljs-built_in">print</span>(respinse.url)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;github.html&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>    f.write(respinse.content)<br></code></pre></td></tr></table></figure>
<h1 id="构建cookie字典"><a href="#构建cookie字典" class="headerlink" title="构建cookie字典"></a>构建cookie字典</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://github.com/sdqOS&#x27;</span><br><br><span class="hljs-comment"># 构造请求头字典</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36&quot;</span>,<br>    &#125;<br><br>temp = <span class="hljs-string">&quot;_octo=GH1.1.1829904439.1611247247; _device_id=326c46400086ed13ec278dc836662948; _locale=ko; _locale_experiment=ko; tz=Asia%2FShanghai; has_recent_activity=1; user_session=zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; __Host-user_session_same_site=zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; tz=Asia%2FShanghai; color_mode=%7B%22color_mode%22%3A%22auto%22%2C%22light_theme%22%3A%7B%22name%22%3A%22light%22%2C%22color_mode%22%3A%22light%22%7D%2C%22dark_theme%22%3A%7B%22name%22%3A%22dark%22%2C%22color_mode%22%3A%22dark%22%7D%7D; logged_in=yes; dotcom_user=sdqOS; _gh_sess=l41S%2BZNr%2F%2Bmx5Y2taob81ssga5CdD5drTY7IWcDY5vIxraTrsep8btIIkpvggyDxCYtFq1Q5q6hzDGNpRs8nTJjCbZqYCGpOEUM4W20s1%2Bxo0d6WnhQZ5W8eO96d60q4p%2BF8eeSGxrdBQBL5zLIZ8uyAD%2BuRaUZL7ZoARDh7qYNssds5cOLTSlkzqJMoHUR2Yp2wy%2FNKMTEIs40hwMdjF2bbbTE4Cah3Srm29no9Lw3fvC7Z4uFLWQtzwMLwE7KEImrKAODH2dTZeYVyxBRfX5iyyA8qpO0wg%2FyAivegnpLQyQXZGQ3%2BTr4zNxEcy2Utqkhd%2FwdRQ%2Bk%2BGR2ibrXxoE3L28fyD0zqywpmxLbKmqWqkum%2B9BK99UHuFkdmUtOzdifjbYekleDfDETDUPAF3Ubvkc3pwvnlZZC66jZzX9mvbElHZlOpE8eLncyGc5jmTYBgVseIwxGs13ZkvEfZ76debhVyRHABDyfAgNsiZWHcz4I34WbPele1GjNF2qF4Fhn03cy%2FktvUW4F7pcXhx2ABKqcVNDqXtd%2BKWkdRDivx5fxtu8i1%2BE5FDuvSF%2FM8eUGjX%2FPs%2B%2BoiJ06SmbybI%2FMBoi6YLCwD4Z0iVrx1EENzH54Oknn3NTQoIHOpzgYFx4l6HzJbiTAIIZeApYhEwD82zuvditr5EaPUApQQuVdm6vXNyvFq%2B%2BLHglipgI6WXCwV1vp7GU%2FtZw6EsMX5RR2zdKnsQODuy92uTEMAnnS7ECkqUh0OUuiSNXsa6lWNqCiJId7MgEE4gkSTQawWO775i98vP2Rx6%2B%2BVkdQsYFOgYxiYZgbI%2BQCyak8YbIZXWbXtBziGYILPZM8zdm1vVJWXdgcBZfF90jZSGkr7EgNqVBQuVCHZNg9ZxmmRZ54J1K28e6r2UL7HLb5%2F3MycVrhQUelq8wPY--TcRWY%2B%2FTS0Zgmyhj--k8C1M7YSHlzTdGPKtUMwoQ%3D%3D&quot;</span><br><br><br>cookie_list = temp.split(<span class="hljs-string">&#x27;; &#x27;</span>)<br><br><span class="hljs-comment"># 熟练方案</span><br><br>cookies = &#123; cookie.split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>]:cookie.split(<span class="hljs-string">&#x27;=&#x27;</span>)[-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> cookie <span class="hljs-keyword">in</span> cookie_list&#125;<br><br><span class="hljs-comment"># 稳妥方案</span><br><span class="hljs-comment"># cookies = &#123;&#125;</span><br><br><span class="hljs-comment"># for cookie in cookie_list:</span><br><span class="hljs-comment">#     cookies[cookie.split(&#x27;=&#x27;)[0]] = cookie.split(&#x27;=&#x27;)[-1]</span><br><br><span class="hljs-comment"># print(cookies)</span><br><br><span class="hljs-comment"># # 构造cookie字典</span><br><br>response = requests.get(url, headers=headers,cookies=cookies)<br><br><span class="hljs-comment"># 看看是给谁发请求</span><br><span class="hljs-built_in">print</span>(response.url)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;github3.html&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>    f.write(response.content)<br></code></pre></td></tr></table></figure>
<h1 id="cookieJar对象转换成cookie字典方法"><a href="#cookieJar对象转换成cookie字典方法" class="headerlink" title="cookieJar对象转换成cookie字典方法"></a>cookieJar对象转换成cookie字典方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br><br><span class="hljs-comment"># 设置(timeout)访问时长为3秒, 然后就断开</span><br>response = response.get(url, timeout=<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(response.cookies)<br><br><span class="hljs-comment"># 将对象转字典</span><br>dict_cookie = requests.utils.dict_from_cookiejar(response.cookies)<br><span class="hljs-built_in">print</span>(dict_cookie)<br><br><span class="hljs-comment"># 将字典转换为对象</span><br>jar_cookies = requests.utils.cookiejar_from_dict(dict_cookies)<br><span class="hljs-built_in">print</span>(jar_cookies)<br></code></pre></td></tr></table></figure>
<br>

<!--副作用丢失域名 这个不要紧我们自己知道这个cookie对应哪个域名的-->
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>毛概</title>
    <url>/Maogai-Mustback.html</url>
    <content><![CDATA[<p><strong>毛概学习笔记</strong></p>
<a id="more"></a>

<h1 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章    绪论"></a>第1章    绪论</h1><p><img src="https://s2.loli.net/2022/01/02/oh49NZLnj8BJlOF.png" alt="image-20220102073756143"></p>
<h2 id="一、马克思主义的科学内涵"><a href="#一、马克思主义的科学内涵" class="headerlink" title="一、马克思主义的科学内涵"></a>一、马克思主义的科学内涵</h2><p>马克思主义是关于自然界、人类社会、人类思维发展的<font color="red"><strong>一般规律</strong></font>的理论体系, 解释了事物的本质、内在联系及发展规律, 是”<font color="red"><strong>伟大的认识工具</strong></font>“, 是人们观察世界、分析问题的有力思想问题”</p>
<p><font style="background: yellow">知识扩展1: 马克思主义和具体科的学关系</font></p>
<p>二者体现了矛盾的普遍性和特殊性</p>
<p><font style="background: yellow">知识扩展2: 马克思主义诞生的标志</font></p>
<p>1848年, 《共产党宣言》的发表”</p>
<h2 id="二、-马克思主义中国化的科学内涵"><a href="#二、-马克思主义中国化的科学内涵" class="headerlink" title="二、    马克思主义中国化的科学内涵"></a>二、    马克思主义中国化的科学内涵</h2><p>( 一 )马克思逐一中国化的<span style="background: yellow; ">必然性</span></p>
<p>1、是解决中国实际问题的客观需要；</p>
<p>2、是马克思逐理论发展的内在要求”</p>
<p>( <font color="red"><strong>马克思主义具有发展性</strong></font> )</p>
<p>( 二 )马克思主义中国化的科学内涵( <font color="red">识记</font> )</p>
<p>**具体化: **就是把马克思主义基本原理同中国具体实际和时代特征结合起来, 运用马克思主义的立场、观点、方法研究和解决中国革命、建设、改革中的实际问题”</p>
<p>**理论化: **就是总结和提炼中国革命、建设、 改革的时间经验, 从而认识和掌握客观规律, 为马克思主义理论宝库增添新的内容”</p>
<p>**民族化: **就是运用中国人民喜闻乐见的民族语言来阐述马克思主义理论, 使之成为具有中国特色、中国风格、中国气派的马克思主义”</p>
<h2 id="三、-马克思主义中国化的历史进程"><a href="#三、-马克思主义中国化的历史进程" class="headerlink" title="三、    马克思主义中国化的历史进程"></a><font style="background: yellow">三、    马克思主义中国化的历史进程</font></h2><p>( 一 )两次历史进程</p>
<p><strong>第一次</strong>: 发生在新民主义革命时期, 形成毛泽东思想”</p>
<p><strong>第二次</strong>: 发生在社会主义进入改革开放的新时期, 形成了中国特色社会主义理论体系”</p>
<p>( 二 )两大理论体系</p>
<p>第一大理论成果: 毛泽东思想    ( <font color="red"><strong>什么是中国革命？怎样进行中国革命？</strong></font> )</p>
<p>第二大理论成果: 中国特色社会主义理论体系包括以下四个: </p>
<p>**邓小平理论: **什么是社会主义, 怎样建设社会主义？</p>
<p>**””三个代表”重要思想: **建设什么样的党？怎样建设党？</p>
<p>**科学发展观: **实现什么样发展？怎样发展？</p>
<p>**习近平新时代中国特色社会主义思想: **坚持发展什么样中国特色社会主义？怎样坚持发展中国特色社会主义？</p>
<p>( 三 )中国化马克思主义理论的历史地位</p>
<p><font color="red">是马克思主义中国化的理论成果, 是中国化马克思主义, 中国共产党长期坚持的知道思想和全国各民族团结奋斗的思想基础, 是国家指导思想”</font></p>
<p><font color="cornflowerblue">**易错点: **马克思主义中国化的第二大理论成果: 邓小平理论”</font></p>
<p>解析: 是马克思主义中国化的第二大开篇之作”</p>
<p><font color="orange"><strong>补充:</strong></font></p>
<ul>
<li><p>在中国历史上, 把马克思主义介绍到中国第一人是李大钊</p>
</li>
<li><p>在中国历史上, 第一个明确提出”马克思主义中国化”是毛泽东</p>
<ul>
<li>1938年, 六届三中全会《论新阶段》</li>
</ul>
</li>
</ul>
<h1 id="第2章-毛泽东思想形成和发展"><a href="#第2章-毛泽东思想形成和发展" class="headerlink" title="第2章    毛泽东思想形成和发展"></a>第2章    毛泽东思想形成和发展</h1><h2 id="一、-毛泽东思想形成和发展"><a href="#一、-毛泽东思想形成和发展" class="headerlink" title="一、    毛泽东思想形成和发展"></a>一、    毛泽东思想形成和发展</h2><p><strong>1.毛泽东思想形成发展的历史条件</strong></p>
<p>**时代背景: **19世纪末29世纪初, 世界进入帝国主义和无产阶级革命新时代( 提示: 回顾世界历史1919年俄国爆发的十月革命对中国的影响 )    <font color="red">战争与时代的时代主题</font></p>
<p>**实践基础: **中国共产党领导的革命和建设的成功实践</p>
<p><strong>2.毛泽东思想形成发展的过程</strong></p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>时间</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>萌芽</td>
<td>1924-1927</td>
<td>《中国社会各阶级的分析》<br>《湖南农民鱼洞考察报告》</td>
</tr>
<tr>
<td><font color="red"><strong>形成</strong></font></td>
<td>1927-1937</td>
<td>《井冈山的斗争》<br>《关于纠正党内的错误思想》<br>《星星之火, 可以燎原》</td>
</tr>
<tr>
<td><font color="red"><strong>成熟</strong></font></td>
<td>1937-1945</td>
<td>《共产党发刊词》<br>《中国革命和中国共产党》<br>《新民主义论》</td>
</tr>
<tr>
<td>继续发展</td>
<td>解放战争和建国以后</td>
<td>《论人民民主专政》<br>《论十大关系》<br>《关于正确处理人民内部矛盾的问题》</td>
</tr>
</tbody></table>
<p><font color="orange"><strong>补充:</strong></font></p>
<img src="https://s2.loli.net/2022/01/05/LrDPszxWaKf8dF3.png" style="zoom:200%;">

<p><font color="red">**重点把握: **</font></p>
<ul>
<li><font color="red"><strong>毛泽东思想形成的标志, 提出中国革命的新道路</strong></font></li>
<li><font color="red"><strong>毛泽东思想成熟的标志, 系统阐述新民主主义革命理论</strong></font></li>
<li><font color="red"><strong>将毛泽东思想写入党章是在1945年的中共七大上</strong></font></li>
</ul>
<h2 id="二、-毛泽东思想的主要内容"><a href="#二、-毛泽东思想的主要内容" class="headerlink" title="二、    毛泽东思想的主要内容"></a>二、    毛泽东思想的主要内容</h2><ul>
<li><p>6个基本方面</p>
<ul>
<li>新民主主义革命理论</li>
<li>社会主义革命和社会主义建设理论</li>
<li>革命军队建设和军事战略的理论</li>
<li>政策和策略的理论</li>
<li>思想政治工作和文化工作的理论</li>
<li>党的建设理论</li>
</ul>
</li>
<li><p>毛泽东思想的活的灵魂, 是贯穿于各个理论的立场、观点和方法”它们有三个基本方面, 即<font color="red"><strong>实事求是、群众路线、独立自主</strong></font></p>
<ul>
<li><p>实事求是( 马克思主义的精髓 ): <strong><u>就是一切从实际出发, 理论联系实际, 坚持在实践中检验真理和发展真理</u></strong></p>
</li>
<li><p>群众路线: <strong>就是一切为了群众, 一切依靠群众, 从群众中来, 到群众中去”<font color="red">群众路线是我党的生命线和根本工作原则</font>“</strong></p>
<p>坚持群众路线的要求: </p>
<ol>
<li>要坚持人民是推动历史发展的根本力量；</li>
<li>要坚持全心全意为人民服务的根本宗旨；</li>
<li>要保持党同人民群众的血肉联系”</li>
</ol>
</li>
</ul>
<p> <strong><u>注意: 全心全意为人民服务是我们党一切行动的根本出发点和落脚点, 是我们党区别于其他一切正当的根本标志”</u></strong></p>
<ul>
<li><p>独立自主: <strong><u>就是坚持独立思考, 走自己的路, 把立足点放在依靠自己力量的基础上”</u></strong></p>
<p>坚持独立自治的要求: </p>
<ol>
<li>要坚持中国的诗情必须有中国人民自己处理；</li>
<li>要坚持独立自主的和平外交政策, 坚定不移走和平发展道路”</li>
</ol>
</li>
<li><p><font color="orange"><strong>补充</strong></font>:</p>
<ul>
<li>在党的历史上, 首次提出: “毛泽东的思想获得灵魂”的文献是《中国共产党中央委员会关于建国以来党的若干历史问题的决议》</li>
<li>新中国成立初期, 毛泽东提出的外交方针是: 另<strong>起炉灶, 一边倒, 打扫屋子再请客</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三、毛泽东思想的历史地位"><a href="#三、毛泽东思想的历史地位" class="headerlink" title="三、毛泽东思想的历史地位"></a>三、毛泽东思想的历史地位</h2><ol>
<li><p>马克思主义中国化第一次历史性飞跃的理论成果</p>
<ul>
<li><p>在中国共产党的历史上, 毛泽东在认证总结历史经验的基础上, <font color="red"><strong>第一次明确提出了马克思主义同中国实际相结合</strong>“</font>毛泽东思想是马克思主义中国化的第一理论形态, 实现了马克思主义中国话的第一次历史性飞跃”</p>
<p><font color="orange">注意: 李大钊和毛泽东</font></p>
</li>
</ul>
</li>
<li><p>中国革命和建设的科学指南</p>
<ul>
<li>在毛举东忠想的指引下, 我们程到了新民主主义革命的正确道路, 结束了中国半殖民地半封建社会的历史, 建立了中华人民共和国: 找到从新民主主义向社会主义过渡的道路, 确立了社会主义基本制度”在此基础上毛泽东又对适合中国国情的社会主义道路进行了艰苦探索, 并取得了重要的理论成果, 提出了许多很有启发性的论断”</li>
</ul>
</li>
<li><p>中国共产党和中国人民宝贵的精神财富</p>
<ul>
<li>毛泽东是伟大的马克思主义者、伟大的无产阶级革命家、战略家和理论家”他为中国共产党和中国人民解放军的创立和发展, 为中国各族人民解放事业的胜利, 为中华人民共和国的缔造和社会主义事业的发展, 建立了不可磨灭的功勋, 为世界被压迫民族的解放和人类进步事业作出了重大贡献”</li>
</ul>
</li>
</ol>
<ul>
<li><p>科学评价毛泽东和毛泽东思想</p>
<p><u>毛泽东是伟大的马克思主义者、伟大的无产阶级革命家、战略家和理论家”他为中国共产党和中国人民解放军的创立和发展, 为中国各族人民解放事业的胜利, 为中华人民共和国的缔造和社会主义事业的发展, 建立了不可磨灭的功勋, 为世界被压迫民族的解放和人类进步事业作出了重大贡献”</u></p>
<p><font color="red"><strong>毛泽东的功绩是第一位的, 错误是第二位的</strong></font>“</p>
<p>将毛泽东晚年的错误同毛泽东思想区别开来”</p>
</li>
</ul>
<h1 id="第3章-新民主主义革命理论"><a href="#第3章-新民主主义革命理论" class="headerlink" title="第3章    新民主主义革命理论"></a>第3章    新民主主义革命理论</h1><p>时间: 1919~1949</p>
<h2 id="第一节-新民主主义革命理论的形成"><a href="#第一节-新民主主义革命理论的形成" class="headerlink" title="第一节    新民主主义革命理论的形成"></a>第一节    新民主主义革命理论的形成</h2><p>、<strong>近代中国的国情——新民主主义革命理论形成的历史背景</strong></p>
<p><strong>中国革命的时代特征——新民主主义革命理论形成的时代条件</strong></p>
<p><strong>中国革命经验的概括和总结——新民主主义革命理论形成的实践基础</strong></p>
<h4 id="一、-近代中国国情和中国革命的时代特征"><a href="#一、-近代中国国情和中国革命的时代特征" class="headerlink" title="一、    近代中国国情和中国革命的时代特征"></a>一、    近代中国国情和中国革命的时代特征</h4><p>1.<em><font color="red"><strong>近代中国的国情——新民主主义革命理论形成的历史背景</strong></font></em></p>
<ol>
<li><p>毛泽东指出: “认清中国社会的性质, 就是说认清中国的国情, 乃是认清一切革命问题的基本的根据”<br>“<br>认清国情, 是解决中国革命问题的基本前提”</p>
<ul>
<li>从1840年起, 帝国主义列强先后发动了两次鸦片战净、中法战净、甲午战净、八国联军侵华战净等, 迫使中国签订了一系列不平等条约”其中《南条约》《马关条约》《丑条约》等3个条约对中国伤害最深”</li>
</ul>
</li>
</ol>
<p><strong><u>使中国逐步沦为半殖民地半封建社会”这是近代中国最基本的国情”</u></strong></p>
<p><strong>近代中国半殖民地半封建社会的基本特点</strong></p>
<p><strong>近代中国的国情——新民主主义革命理论形成的历史背景</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">第一, 中国虽然保持独立的形式, 但实际上已丧失了独立主权&quot;<br>帝国主义侵略势力日益成为统治中国的决定性力量&quot;帝国主义列强强迫清政府签订不平等条约, 从经济、政治、文化等各方面牢牢控制了中国, 成为近代中国一切灾难和祸害的总根源, 是阻碍中独立发展的根本原因&quot;<br><br>第二, 中国的封建势力已经同帝国主义侵略势力狼狈为奸, 相互勾结, 成为了帝国主义奴役中国的社会基础&quot;封建势力对外勾结帝国主义, 对内残酷剥削人民, 是近代中国最反动的统治势力&quot;<br><br>第三, 外国列强的入侵, 使封建时代的自给自足的自然经济基础被破坏&quot;但封建剥哨削制度的根基( 即封建地主土地所有制 )不但依旧保持着, 而且同买办资本和高利贷资本的剥削相结合, 在中社会经济生活中占着明显的优势&quot;<br><br>第四, 民族资本主义有了某些发展, 并在政治、文化生活中起了颇大的作用: 但中国民族资本主义是在外国资本主义势力、本国官僚买办资本势力和封建势力的夹缝中产生和发展起来的, 始终没成为中国社会经济的主要形式&quot;<br><br>第五, 由于帝国主义列强在中国划分势力范围, 实行分裂、剥削政策, 又由于小农经济的广泛存在, 加上中国地域广大, 造成中国实际上长期不统一, 中国政治、经济、文化的发展表现出极端的平衡&quot;<br><br>第六, 在帝国主义和封建主义的双重压迫下, 中国广大人民群众尤其是农民, 过着饥寒交迫又毫无政治权利的生活, 中国人民经济上的贫困和政治上的不自由程度, 是世界所少有的&quot;<br></code></pre></td></tr></table></figure>

<p><font color="orange"><strong>近代中国社会的主要矛盾和根本任务</strong></font></p>
<p><font color="red"><strong>帝国主义和中华民族的矛盾, 封建主义和人民大众的矛盾</strong></font>, 这些就是近代中国社会的主要矛盾”当然还有别的盾, 而 <strong><u>帝国主义和中华民族的矛盾, 乃是各种矛盾中的最主要的矛盾</u></strong>“<font color="red"><strong>主要矛盾决定了近代中国革命的根本任务是推翻帝国主义、封建主义和官僚资本主义的统治</strong></font>, 从根本上推翻反动腐朽的政治上层建筑, 变革阻碍生产力发展的生产关系, 为建设富强民主的国家、确立人民当家作主的政治制度、改善人民生活扫清障碍, 创造必要的前提”</p>
<p>2.<font color="red"><strong>中国革命的时代特征——新民主主义革命理论形成的时代条件</strong></font></p>
<p>近代中国的社会性质个主要矛盾, 决定了整个革命是资产阶级民主革命”</p>
<ul>
<li><p><strong>十月革命对中国资产阶级民主革命的影响</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">十月革命使中国的资产阶级民主主义革命, 从原来属于引旧的世界资产阶级民主主义革命的范畴, 属王旧的世界资产阶级民主主义革命的一部分, 转变为属于新的资产阶级民主主义革命的范畴, 属于世界无产阶级社会主义革命的一部分<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure></li>
<li><p><strong>五四运动的历史意义</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">以五四运动的爆发为标志, 中国资产阶级民主革命进入新民主主义革命的崭新阶段<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>中国的新民主主义革命与其他民主革命存在不同之处</strong></p>
</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">民主主义革命和历史上欧美各国的民主革命大不相同, 它不是要建立资产阶级的共和国, 造成资产阶级专政, 而是要造成各革命阶级在无产阶级领导之下的联合专政, 建立各革命阶级联合专政的民共和国, 为进入社会主义社会做准备<span class="hljs-string">&quot;</span><br>它和一般意义上的社会主义革命也不相同, 它只推翻帝国主义、封建主义和官僚资本主义的反动统治, 而不破坏参加反帝反封建的资本主义成分<span class="hljs-string">&quot;这样的民主主义革命, 不是旧范畴的民主主义革命而是新民主主义革命&quot;</span><br>中国革命要分两步走, 第一步是完成反帝反封建的新民主主义革命任务, 第二步是完成社会主义革命任务, 这是性质不同但又相互联系的两个革命过程<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure>
<ul>
<li><font style="background: yellow"><strong>新民主主义革命与旧民主主义革命的区别: 领导阶级不同( 根本不同 )、指导思想不同、奋斗目标不同、时代条件不同</strong></font></li>
</ul>
<ol start="3">
<li><p>中国革命经验的概括和总结——新民主主义革命理论形成的实践基础</p>
<ul>
<li><p>旧民主主义革命的失败呼唤新的革命理论；</p>
<p>1840~1919: 农民( 太平天国运动 )——&gt;地主( 洋务运动 )——&gt;民资阶级( 百日维新 )——&gt;民资革命( 辛亥革命 )</p>
</li>
<li><p>新民主主义革命的艰辛探索奠定了革命理论形成的实践基础</p>
</li>
</ul>
</li>
</ol>
<h2 id="第二节-新民主主义革命的总路线和基本纲领"><a href="#第二节-新民主主义革命的总路线和基本纲领" class="headerlink" title="第二节    新民主主义革命的总路线和基本纲领"></a>第二节    新民主主义革命的总路线和基本纲领</h2><h3 id="一、-新民主主义革命的总路线"><a href="#一、-新民主主义革命的总路线" class="headerlink" title="一、    新民主主义革命的总路线"></a>一、    新民主主义革命的总路线</h3><p><strong>总路线是相对于具体路线而言的根本指导路线”</strong></p>
<p><strong><u>1939年, 毛泽东在《中国革命和中国共产党》一文中第一次提出了”新民主主义革命”的科学概念”( 2019单选 )1948年, 他在《在晋绥王部会议上的进话》中完整地表述了总路线的内容</u></strong>, 新民主主义革命是”无产阶级领导的, 人民大众的, 反对帝国主义、封建主义和官僚资本主义的革命”</p>
<ul>
<li><p>新民主主义革命的对象( 三座大山 )</p>
<p><font color="red">分清敌友, 这是革命的首要问题”</font></p>
<p>1948年4月, 毛泽东《在晋绥干部会议上的讲话》中指出: “这个革命所要推翻的敌人, 只是和必须是<font color="red"><strong>帝国主义、封建主义和官僚资本主义</strong></font>“这些敌人的集中表现, 就是蒋介石国民党的反动统治”</p>
<ul>
<li><p>帝国主义</p>
<p><u>帝国主义是中国革命的首要对象”</u></p>
<p>帝国主义是中国社会进步和发展的最大障碍, 是近代中国贫困落后和一切灾难祸害的总根源”推翻帝国主义的压迫是中国走向独立和富强的前提”<br>“帝国主义列强侵入中国的目的, 决不是要把封建的中国变成资本主义的中国”是要把中国变成它们的半殖民地和殖民地””</p>
</li>
<li><p>封建主义</p>
<p>首先, 封建剥削制度是帝国主义统治中国的主要支柱和中国封建军阀实行专制统治的社会基础”<br>其次, 封建主义的统治也是近代中国经济现代化和政治民主化的主要障碍, 是中华民族进步的拦路虎”</p>
</li>
<li><p>官僚贫资本王义</p>
<p>官僚资本主义同外国帝国主义、本国地主阶级和旧式富农密切地结合着, 具有买办性、封建性、垄断性”它是和国家政权结合在一起的国家垄断资本主义”以蒋介石、宋子文、孔祥熙、陈果夫四大家族为代表的国民党官僚资本成为新民主主义革命的又一对象”</p>
</li>
<li><p>注意: </p>
<p>从总体上说, 中国革命的对象是帝国主义、封建主义和官僚资本主义, 它们是压在中国人民头上的三座大山”<br><font color="orange"><strong>但是, 在不同历史阶段, 随着社会主要矛盾的变化, 革命的主要对象有所不同”</strong></font></p>
<ol>
<li>在国共合作的大革命时期, 革命的主要对象是帝国主义支持下的北洋军阀: </li>
<li>在土地革命战争时期, 革命的主要对象是国民党新军阀；</li>
<li>在抗日战争时期, 革命的主要对象是日本帝国主义；</li>
<li>解放战净时期, 革命的主要对象是美帝国主义支持下的国民党反动派”</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>新民主义革命的动力——“人民大众”( 2017单选 )</strong></p>
<p>新民主主义革命的动力就是革命的<font color="red">依靠力量</font>, 包括<strong>无产阶级、农民阶级、城市小资产阶级和民族资产阶级</strong></p>
<p>1.<font color="red"><strong>无产阶级是新民主主义革命最基本的动力</strong></font>, 是中国沦为半殖民地半封建社会过程中最早出现的一个新的社会阶级, 是新的社会生产力的代表, 是近代中国最进步的阶级, 也是新民主主义革命的领导阶级”</p>
<ol start="2">
<li><p>农民阶级是中国革命的主力军和无产阶级最可靠的同盟军”</p>
<p>其中的贫雇农是无产阶级最可靠的同盟军, 中农是无产阶级可靠的同盟军；农民问题是中国革命的基本问题；</p>
<p><u><font color="red">新民主主义革命实质上就是党领导下的农民革命</font></u>, 中诚逢赛质二就是完领导下的农民战净, </p>
</li>
<li><p>小资产阶级是中国革命的基本动力和无产阶级可靠的同盟军( 注意: <font color="red">城市小资产阶级不等于资产阶级</font><br> )</p>
</li>
<li><p>民族资产阶级是新民主主义革命动力之一”</p>
<p>新民主义革命时期具有革命性、也有软弱性和妥协性；</p>
<p>社会主义革命时期具有剥削工人阶级利益的一面, 也有拥护社会主义改造的一面( <font color="red">民资的两面性在不同时期的表现</font> )</p>
</li>
</ol>
</li>
<li><p>新民主主义革命的领导权</p>
<p>新民主主义革命必须由<font color="red"><strong>无产阶级和中国共产党</strong></font>来领导, 这是新民主主义革命区别于旧民主主义革命的根本标志”</p>
<p>无产阶级的领导权是中国革命的中心问题, 也是新民主主义革命理论的核心问题”</p>
<ul>
<li><strong><font style="background:yellow">无产阶级领导中国革命的历史必然性( 原因 )</font></strong><ol>
<li>资产阶级的妥协性、软弱性决定了其不能领导革命取得胜利必要性</li>
<li>中国无产阶级的特点和优点, 决定了中国无产阶级能够成为中国革命的领导阶级一可能性<ul>
<li>第一, 深受帝国主义、封建主义和官僚资本主义的三重压迫具有坚强的斗争性和彻底的革命性；</li>
<li>第二, 中国无产阶级和广大农民有着天然的联系, 便于他们结成紧密的联盟</li>
<li>第三, 中国无产阶级人分布集中, 便于组织和领导, 形成一支重要力量开展斗争</li>
</ul>
</li>
</ol>
</li>
<li>无产阶级及其政党对中国革命的领导权的实现<ol>
<li>无产阶级及其政党对中国革命的领导权是在与资产阶级争夺领导权的斗争中实现的”</li>
<li>无产阶级及其政党实现领导权的关键是<font color="red"><strong>必须</strong></font>建立以工农联盟为基础的广泛的统一战线”</li>
<li>无产阶级在同资产阶级建立统一战线时, <font color="red"><strong>必须</strong></font>坚持独立自主的原则, 保持党在思想上、政治上和组织上的独立性, 实行又联合又斗争的方针, 这是坚持领导权的基本策略”</li>
<li>无产阶级要保持在民主革命中的领导权, 就<font color="red"><strong>必须</strong></font>建立和发展人民的革命武装力量”是保证领导权的坚强支柱”</li>
<li>加强无产阶级政党的建设, 是实现领导权的根本保证”</li>
<li><strong><em><u><font color="red">注意: 无产阶级及其政党的领导, 是中国革命取得胜利的根本保证</font></u></em></strong></li>
</ol>
</li>
</ul>
</li>
<li><p>新民主主义革命的性质和前途</p>
<p>新民主主义革命的<strong>实质</strong>阶级领导的<font color="red">民主革命</font></p>
<ul>
<li>新旧民主主义革命的内在联系<ol>
<li>革命对象和任务相同</li>
<li>革命的基本动力基本相同</li>
<li>革命的性质相同</li>
</ol>
</li>
</ul>
</li>
<li><p>新旧民主主义革命的区别</p>
<ol>
<li>革命的领导阶级不同( 资-无 )</li>
<li>革命的时代不同( 资-无 )</li>
<li>革命的指导思想不同( 资-马 )</li>
<li>革命的前途不同( 资-社 )</li>
</ol>
</li>
</ul>
<p>近代中国半殖民地半封建社会的性质和中国革命的历史任务, 决定了中国革命的性质<font color="red"><strong>不是无产阶级社会主义革命, 而是”新式的特殊的资产阶级民主主义革命”</strong></font>“但属于世界无产阶级革命的一部分”</p>
<ul>
<li>新民主主义革命的前途问题</li>
</ul>
<p> <strong>实际上是怎样处理新民主主义革命与社会主义革命两者之间关系的问题</strong></p>
<ul>
<li><p>二者的区别: </p>
<ol>
<li>新民主主义革命与社会主义革命性质不同<br>“新民主主义革命仍然属于资产阶级民主主义革命的范畴”社会主义革命是无产阶级性质的革命”</li>
<li>革命对象不同”新民主主义革命推翻帝国主义、封建主义和官僚资本主义的反动统治, 社会主义革命推翻的是资产阶级”</li>
<li>奋斗目标不同”新民主主义革命要建立的是无产阶级领导的各革命阶级的联合专政, 而不是无产阶级专政”社会主义革命实现的目标是消灭资本主义剥削制度和改造小生产的私有制”</li>
</ol>
</li>
<li><p>毛泽东指出中国革命必须分两步走: </p>
<p>第一步是新民主主义革命, </p>
<p>第二步是社会主义革命”</p>
<p>两者的联系如同一篇文章的上、下篇, “只有上篇做好, 下篇才能做好”；”这是两个性质不同的革命过程, 只有完成了前一个革命过程才有可能去完成后一个革命过程”<font color="red"><strong>民主主义革命是社会主义革命的必要准备, 社会主义革命是民主主义革命的必然趋势</strong></font>“””只有认清民主主义革命和社会主义革命的区别, 同时又认清二者的联系, 才能正确地领导中国革命”</p>
<ul>
<li><p><strong>任中国革命的”两步走”的问题上必须反对两种错误倾向</strong></p>
<ol>
<li><p>一种是陈独秀的”二次革命论”: </p>
<p>认为中国资产阶级民主革命只有由资产阶级领导, 革命胜利后由资产阶级掌握政权, 建立资产阶级共和国和资本主义社会”无产阶级只有坐等资本主义发展后, 再来进行社会主义革命<font color="red"><strong>陈独秀的错误在于: 只看到新民主主义革命与社会主义革命的区别, 忽视两者的联系”</strong></font></p>
</li>
<li><p>另一种是土地革命时期的”左”错误所主张的”一次革命论”( 王明的”毕其功于一役” )”</p>
<p>他们混淆了民主革命与社会主义革命的界限, 企图把两种不同性质的革命阶段并作一步走, 一举取得社会主义革命的胜利”主张在反帝、反封建的同时要反对资产阶级, 甚至上层小资产阶级, 要在民主革命中完成社会主义革命的任务</p>
</li>
</ol>
<p>  <strong><font color="cornflowerblue">他们的错误在于: 只看到两者之间的联系, 而忽视了两者之间的区别</font></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="二、新民主主义的基本纲领"><a href="#二、新民主主义的基本纲领" class="headerlink" title="二、新民主主义的基本纲领"></a>二、新民主主义的基本纲领</h3><p>纲领是对路线的具体展开</p>
<p>重点把握政治纲领和经济纲领</p>
<ul>
<li><p>新民主主义的政治纲领</p>
<p>新民主主义的政治纲领即新民主主义国家政权的基本主张”</p>
<p>基本<strong>内容是推翻封建主义和帝国主义的统治, 建立一个无产阶级领导的以工农联盟为基础的、各革命阶级联合专政的新民主主义国家”</strong></p>
<ul>
<li>新民主主义政治的特点<ol>
<li>新民主主义共和国的国休是无产阶级领导的, 以工农联盟为基础的, 几个革命阶级的联合专政, 是无产阶级领导的人民民主专政的国家”</li>
<li>新民主主义共和国的政体是民主集中制的人民代表大会制度”</li>
<li>新民主主义政权是一种过渡性质的政权组织形式, 但其发展趋势是向社会主义方向转变”( 1949~1956年 )</li>
</ol>
</li>
</ul>
</li>
<li><p>新民主主义的经济纲领( 两没收一保护 )</p>
<ol>
<li><p>没收封建阶级的土地归农民所有一一这是新民主主义革命的 <font color="red"><strong>主要内容</strong></font></p>
</li>
<li><p>没收官僚垄断资本归新民主主义国家所有<br>( <font color="red"><strong>题中应有之义, 具有双重性</strong></font> )</p>
<ul>
<li><p><font style="background:yellow"><strong>注意: 理解没收官僚归新民主主义国家所有的性质</strong></font>&gt;</p>
<p>没收官僚资本既是新民主主义革命的任务, 同时又属于社会主义革命的范畴, 具有新民主主义革命和社会主义革命的双重革命性质”</p>
<p>没收官僚资本, 就消灭其封建性、买办性来说是民主革命的任务；没收官僚资本, 消灭了官僚资产阶级, 也就消灭了占统治地位的大资产阶级, </p>
<p>没收官僚资本主义企业归国家所有, 直接建立和发展了社会主义的国营经济, 因此又具有社会主义革命的性质”</p>
</li>
</ul>
</li>
<li><p>保护民族工商业( 极具特色的一项内容, 是由中国落后的生产力和新民主主义革命的性质所决定的 )</p>
</li>
</ol>
</li>
<li><p>新民主主义的文化纲领</p>
<ul>
<li><p>新民主主义文化就是”无产阶级领导的人民大众的反帝反封建的文化”, 即民族的科学的大众的文化”</p>
<p><font color="red"><strong>具有民族性、科学性和大众性=民主性</strong></font></p>
</li>
</ul>
</li>
</ul>
<h2 id="第三节-新民主义革命的道路和基本经验"><a href="#第三节-新民主义革命的道路和基本经验" class="headerlink" title="第三节    新民主义革命的道路和基本经验"></a>第三节    新民主义革命的道路和基本经验</h2><h3 id="一、-新民主义革命的道路"><a href="#一、-新民主义革命的道路" class="headerlink" title="一、    新民主义革命的道路"></a>一、    新民主义革命的道路</h3><ul>
<li><p>对中国革命的艰辛探索</p>
<ol>
<li>中国共产党成立初期, 工作重心在城市</li>
<li>到1928年底, 提出工农武装割据的思想</li>
<li>1930年, 形成以乡村为中心的思想</li>
<li>1938年六届六中全会最后确立</li>
</ol>
</li>
<li><p>农村包围城市、武装夺取政权的依据及其内容</p>
<ul>
<li><p><font color="red"><strong>必要性: 时代特点和基本国情</strong></font></p>
<ol>
<li>外无民族独立, 内无民主制度决定了中国革命必须以长期武装斗争为主要形式”武装斗争是中国革命的特点和优点之一”</li>
<li>农民占人口绝大多数, 是无产阶级可靠的同盟军和主力军”<br>决定了中国的武装斗争实质上是无产阶级领导的农民战争</li>
</ol>
</li>
<li><p><font color="red"><strong>可能性: ( 中国红色政权能够存在发展的原因和条件 )</strong></font></p>
<ol>
<li>中国的基本国情”近代中国是一个政治、经济、文化发展极不平衡的半殖民地半封建的大国”这是红色政权能够存在和发展的最根本原因</li>
<li>国民革命影响的存在和良好的群众基础, 是红色政权存在和发展的必备客观条件</li>
<li>中国革命形势继续向前发展, 是红色政权能够存在和发展的重要客观条件</li>
<li>有相当力量的正式红军的存在, 是红色政权存在和发展的必要条件</li>
<li>共产党的领导以及正确的政策, 是红色政权能够存在和发展的最重要的主观条件”</li>
</ol>
</li>
<li><p>工农武装割据”思想: </p>
<p>中国革命走农村包围城市、武装夺取政权的道路, 根本在于处理好土地革命、武装斗争、农村革命根据地建设三者之间的关系”</p>
<p>在中国共产党的领导下, <strong><u>以土地革命为基本内容, 以武装斗争为主要形式, 是农村根据地建设和士地革命的强有力保证: 农村革命根据地是战略阵地</u></strong>“</p>
</li>
</ul>
</li>
<li><p>中国革命道路理论的意义</p>
<ol>
<li>农村包围城市道路的开辟揭示了中国革命发展的规律指明了国民革命失败以后革命前进的方向和夺取胜利的途径</li>
<li>农村包围城市道路的理论体现了中国国情, 是对中国社会的深入了解和体验</li>
<li>农村包围城市道路的理论是在反对错误倾向的斗争中产生的, 体现了敢于冲破理论禁区, 勇于探索真理的精神</li>
<li>农村包围城市道路理论的产生, 发展和完善, 在世界共产主义运动史上开辟了革命模式多样化的进程</li>
<li>这是中国共产党人创造性地把马克思主义的基本原理同中国革命的具体实际相结合的重要成果, 对于推进马克思主义中国化具有重要的方法论意义”</li>
</ol>
</li>
</ul>
<h3 id="二、-新民主义革命的三大法宝"><a href="#二、-新民主义革命的三大法宝" class="headerlink" title="二、    新民主义革命的三大法宝"></a>二、    新民主义革命的三大法宝</h3><p><font color="red"><strong>1939年毛泽东在</strong><br><strong>( 共产党人》发刊饲》</strong></font>中科学地总结了中国革命的经验, 提出中国革命的三大法宝是<font color="red"><strong>统一战线、武装斗争和党的建设</strong></font>, “正确地理解了这三个问题及其相互关系, 就等于正确地领导了全部中国革命”</p>
<ul>
<li><p>统一战线</p>
<ul>
<li><p>必要性: </p>
<ol>
<li><p>近代中国的”两头小中间大的阶级状况, 决定了无产阶级及其政党必须建立广泛的统一战线</p>
<p><font color="red"><strong>无产阶级和地主大资产阶级都只占少数</strong></font>, 最广大的人民是农民城市小资产阶级以及其他的中间阶级”( 两头小中间大 )</p>
</li>
<li><p>中国革命的长期性、残酷性和发展的不平衡性, 也决定了无产阶级及其政党必须采取统一战线的策略</p>
</li>
</ol>
</li>
<li><p>现实可能性</p>
<p><font color="red"><strong>半殖民地半封建的中国社会, 是近代世界矛盾的焦点, 存在着内外部的各种矛盾”这在客观上为中国共产党提供了利用矛盾, 建立和发展统一战线的可能性</strong></font></p>
<ul>
<li>第一, 工、农、城沛小资产阶级占全国人口的多数, 革命要求强烈是统一战线的主力军</li>
<li>第二, 民族资产阶级能参加反帝反封建斗争, 但又缺乏革命的彻底性是统一战线中的中间派</li>
<li>第三, 带买办性的大资产阶级中的某一个集团在某些特殊的历史条件下, 也可能成为统一战线中的暂时的同盟者</li>
</ul>
</li>
<li><p>革命统一战线联盟</p>
<p>从总体上讲, 党领导的革命统一战线, 包含着两个联盟: 一个是工人阶级同农民阶级、广大知识分子及其他劳动者的联盟, 主要是工农联盟；另一个是工人阶级和非劳动人民的联盟, 主要是与民族资产阶级的联盟”</p>
</li>
<li><p>党建立、巩固和发展统一战线的实践经验</p>
<p>主要在于这样几个方面: </p>
<ol>
<li>要建立巩固的工农联盟”</li>
<li>要正确对待资产阶级, 尤其是民族资产阶级”在革命斗争中要依据革命的需要, 对资产阶级实行既联合又斗争的策略”联合民族资产阶级要针对其两面性特点, 在联合的过程中要在思想上、政治上、组织上进行必要的斗争”</li>
<li>要采取区别对待的方针”在革命进程中, 要坚持发展进步势力、争取中间势方、孤立顽固势力的策略方针”</li>
<li>要坚持独立自主的原则”要保持党在政治上、组织上和思想上的独立性</li>
</ol>
</li>
</ul>
</li>
<li><p>武装斗争</p>
<ol>
<li><p>中国革命的主要形式是长期的武装斗争</p>
<p>武装斗争是中国革命的特点和优点之一: 必要性</p>
<ul>
<li>近代中国半殖民地半封建的社会性质决定的</li>
<li>中国反动统治阶级的残酷性决定的</li>
<li>由于敌人的力量异常强大, 复杂的社会矛盾, 以及中国政治经济发展的不平衡性, 决定了中国革命的武装斗争将不可避免地要经历一个长期而曲折的过程</li>
</ul>
</li>
<li><p>武装斗争必须和非武装斗争相互配合</p>
<p><font color="red"><strong>武装斗争并非是中国革命的唯一形式</strong></font></p>
</li>
<li><p>中国的武装斗争实质上是无产阶级领导下的农民战</p>
</li>
</ol>
</li>
</ul>
<p><font color="orange"><strong>补充: 人民军队建设的基本原则</strong></font></p>
<ol>
<li>“党指挥枪”的原则财坚持党对军以的绝对领导/是建设新型人民军队的根本原则是保持人民军队无产阶级性质和建军宗旨的根本前提, 也是毛泽东建军思想的核心”</li>
<li>全心全意为人民服务是人民军队的唯一宗旨”<br>是建设新型人民军队的基本前提, 也是人民军队一切行动的根本准则和一切工作的出发点与归宿”它集中体现了人民军队的本质, 是人民军队立于不败之地的根本所在”</li>
<li>要坚持正确的战略战术原则”形成了一整套以少胜多、以弱胜强的人民战净的理论和一系列的战略战术原则”</li>
</ol>
<ul>
<li><p>党的建设</p>
<ul>
<li><p>中国共产党产生和建设的特点: </p>
<p>无产阶级思想和非无产阶级思想之间的矛盾, 马克思主义与非马克思主义思想之间的矛盾, 是党内思想上的主要矛盾”</p>
<p><font color="red"><strong>注意: 从中国社会”两头小, 中间大”的社会阶级构成分析必要性</strong></font></p>
</li>
<li><p>党的建设的主要内容和基本经验: ( 2017简答 )</p>
<ol>
<li><p>把思想建设始终放在党的建设的道位以无产阶级思想改造和克服各种非无产阶级思想”这是新民主主义革命时期党的建设的主要经验, 也是毛泽东建党思想的要特点”</p>
</li>
<li><p>党的建设必须同党的政治路线紧密联系起来”</p>
</li>
<li><p>按照民主集中制原则加强党的组织建设</p>
<p><font color="red"><strong>加强党的组织建设, 根本的是要贯彻民主集中制这一根本组织原则</strong></font></p>
</li>
<li><p>注重党的作风建设</p>
<ol>
<li><font color="orange">补充: <strong>党的三大优良作风</strong></font></li>
<li>理论联系实际</li>
<li>密切联系群众</li>
<li>批评与自我批评( <font color="red"><strong>这三大优良作风是中国共产党区别王其他任何政党的显著标志”</strong></font> )</li>
</ol>
</li>
</ol>
</li>
<li><p>三大法宝的相互关系</p>
<ul>
<li><p>毛泽东在《〈共产党人 )发刊词》中指出: </p>
<p>统一战线和武装斗争, 是战胜敌人的两个基本武器”统一战线是实行武装斗争的统一战线”而党的组织, 则是掌握统一战线和武装斗争这两个武器以实行对敌冲锋陷阵的英勇战士””</p>
</li>
<li><p>统一战线、武装斗争和党的建设, 三者是一个有机的整体”</p>
<p>统一战线只有以武装斗争为支柱, 才能存在和发展武装斗争则只有以统一战线( 特别是工农联盟 )为基础才能壮大和不断胜利；而党则是掌握这两个基本武器以实行对敌斗争的指挥部, 统一战线和武装斗争这两个武器只有在共产党的领导下才能发挥其作用”</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="三、-新民主主义革命理论的意义"><a href="#三、-新民主主义革命理论的意义" class="headerlink" title="三、    新民主主义革命理论的意义"></a>三、    新民主主义革命理论的意义</h3><ul>
<li><p>理论意议</p>
<p>新民主主义革命理论, 解决了在一个以农民为主体的、落后的半殖民地半封建的东方大国里进行革命的一系列理论问题, 科学地回答了近代中国革命向何处去的问题, 正确地解决了中国革命的发展阶段问题, 揭示了近代中国革命的发展规律, 极大地丰富了马克思主义的理论宝库”新民主主义革命理论是马克思主义中国化的重要理论成果, 开辟了马克思主义中国化的发展道路”</p>
</li>
<li><p>实践意义</p>
<p>在新民主主义革命理论的指导下, 中国共产党领导中国人民取得了新民主主义革命的伟大胜利, 结束了中国几干年来封建地主阶级双役中国人民的历更, 建立一了中华人民共和国”劳动人民成为国家和社会的主人, 实现了中国人民社会政治地位的根本变化, 开创了中国历史的新纪元”</p>
</li>
<li><p>世界意义</p>
<p>中国新民主主义革命的伟大胜利, 是20世纪继俄国十月社会主义革命以后改变世界面貌的伟大历史事件有利地鼓舞和推动了世界上被压迫民族和被压迫人民反抗帝国主义、殖民主义的斗争, 极大地增强了他们反抗帝国主义斗争的信心, 有力地支持了世界人民反对帝国主义的斗争, 增强了世界人民争取世界和平的力量”</p>
</li>
</ul>
<h1 id="第4章-社会主义改造理论"><a href="#第4章-社会主义改造理论" class="headerlink" title="第4章    社会主义改造理论"></a>第4章    社会主义改造理论</h1><h2 id="第一节-从新民主主义到社会主义的转变"><a href="#第一节-从新民主主义到社会主义的转变" class="headerlink" title="第一节    从新民主主义到社会主义的转变"></a>第一节    从新民主主义到社会主义的转变</h2><p><u>从中华人民共和国成立到社会主义改造基本完成, 是我国丛新民主主义到社会主义的过渡时期</u>“这一时期, 我国社会的性质是<font color="red"><strong>新民主主义社会</strong></font>“新民主主义社会不是一个独立的社会形态, 而是由新民主主义向社会主义转变的过渡性社会形态, <strong>但它属于社会主义体系</strong>“</p>
<h3 id="一、-新民主主义社会是一个过渡性的社会-1949-1956"><a href="#一、-新民主主义社会是一个过渡性的社会-1949-1956" class="headerlink" title="一、    新民主主义社会是一个过渡性的社会( 1949-1956 )"></a>一、    新民主主义社会是一个过渡性的社会( 1949-1956 )</h3><ul>
<li><p>基本特征</p>
<ul>
<li><p><font color="red"><strong>在经济上</strong></font>, 实行国营经济主导的包括半社会主义性质的合作社经济个体经济、私人资本主义和国家资本主义五种经济成分并存的新民主生义经济制度”<br>主要经济成分有三种: 社会主义经济、个体经济和资本主义经济</p>
</li>
<li><p><font color="red"><strong>在政治上</strong></font>, 新民主主义的政权是无产阶级领导的各革命阶级联合专政的人民民主专政”**中国社会的阶级构成主要是工人阶级、农民阶级和其他小资产阶级、民族资产阶级等基本的阶级力量, **</p>
<p><font color="orange">**补充: 理解民族资产阶级的两面性: **</font></p>
<ul>
<li>既有剥俏削工人的一面, 又有接受工人阶级及其政党领导的一面”( 在不同时期有不同的表现 )</li>
<li>土地改革完成后, 国内的主要矛盾: <strong>工人阶级与资产阶级之间的矛盾</strong>“</li>
<li>在新民主主义社会中, <font color="red"><strong>社会主义的因素</strong></font>不论在经济上还是在政治上都已经居于领导地位”但非社会主义因素仍占有很大比重”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、-党在过渡时期的总路线"><a href="#二、-党在过渡时期的总路线" class="headerlink" title="二、    党在过渡时期的总路线"></a>二、    党在过渡时期的总路线</h3><ul>
<li><p>过渡时期总路线的提出</p>
<ol>
<li>1949年党的七届二中全会, 提出了使中国”稳步地由农业国转变为工业国, 由新民主主义国家转变为社会主义国家”即<br>“”两个转变”同时并举的思想”</li>
<li>从1949年至1952年, 党领导人民集中力量恢复国民经济, 继续完成民主革命遗留的任务”与此同时, 没收官僚资本, 建立社会主义性质的国营经济；在完成土地改革之后的农村, 及时开展互助合作运动；在调整工商业过程中, 采取对私营工商业加工订货、经销代销等方式, 广泛发展初级形式的国家资本主义等, 为全面向社会主义过渡莫定了基础”</li>
</ol>
</li>
<li><p>总路线的内容</p>
<p><img src="/Maogai-Mustback.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220125123114466.png" alt="image-20220125123113848"></p>
<ul>
<li>建设与改造同时并举</li>
<li>工业化与改造同时并举紧密结合</li>
<li>解放生产力与发展生产力、变革生产关系与发展生产力有机统一</li>
</ul>
</li>
<li><p>过渡时期总路线的特点</p>
<p>过渡时期总路线从生产力与生产关系的辩证关系出发, 提出了反映落后国家社会主义发展规律的新思路, 即把建设与改造并举, 要求把国家工业化和社会主义三大改造紧密地结合起来, 在社会改革中保持生产力的同步发展, </p>
<p>同时进举艺是过渡时棚总路线的显著特征</p>
</li>
<li><p>过渡时期总路线的实质</p>
<p>党在过渡时期的总路线的实质: </p>
<ul>
<li>逐渐改变生产关系, 解决所有制的问题”</li>
</ul>
</li>
<li><p>党在过渡时期的总路线的理论依据</p>
<ol>
<li><u><strong>马克思列宁主义关于过渡时期的理论马克思、恩格斯在创立科学社会主义理论时, 就提出了从资本主义社会向社会主义社会过渡的问题</strong></u>“他们认为, 从资本主义社会到社会主义社会, 需要经历一个从无产阶级夺取政权到利用国家政权对旧的生产关系进行革命性的改造, 逐步消灭私有制、确立公有制并大力发展生产力的过渡时期, 这是一切走向共产主义的国家不可逾越的发展阶段”</li>
</ol>
<p>  **<u>列宁认为必须经过一个相当长的从资本主义到社会主义的过渡时期”</u>**过渡时期的根本任务是把剥削阶级的生产资料转化为公有财产, 同时, 通过合作社的形式使农民走上集体化道路, 并把创造高于资本主义的劳动生产率的根本任务提到首位, 以建立和发展社会主义的经济基础”</p>
<ol start="2">
<li>中国共产党关于过渡时期的理论( 略 )</li>
</ol>
</li>
</ul>
<h2 id="第二节-社会主义改造道路和历史道路"><a href="#第二节-社会主义改造道路和历史道路" class="headerlink" title="第二节    社会主义改造道路和历史道路"></a>第二节    社会主义改造道路和历史道路</h2><h3 id="一、-适合中国特色的社会主义改造道路"><a href="#一、-适合中国特色的社会主义改造道路" class="headerlink" title="一、    适合中国特色的社会主义改造道路"></a>一、    适合中国特色的社会主义改造道路</h3><ul>
<li><p>对农业的社会主义改造</p>
<ul>
<li><p>第一, 积极引导农民组织起来, 走互助合作道路</p>
</li>
<li><p>第二, 遵循自愿互利、典型示范和国家帮助的原则, 以互助合作的优越性吸引农民走互助合作道路</p>
</li>
<li><p>第三, 正确分析农村的阶级和阶层情况, 制定正确的阶级政策”<u><font color="red"><strong>依靠贫下中农, 巩固地团结其他中农发展互助合作由逐步限制到最后消灭富农剥削的农村阶级政策</strong></font></u>“</p>
</li>
<li><p>第四, 坚持积极领导、稳步前进方针, 采取循序渐进的步骤</p>
<p>补充: </p>
<p>1.<font color="orange"><strong>农业社会主义改造大体经历的三个发展阶段</strong></font></p>
<ul>
<li><p>第一步: 互助组</p>
</li>
<li><p>第二步: 初级社</p>
</li>
<li><p>第三步: 高级社</p>
</li>
</ul>
<ol start="2">
<li>在农业社会主义改造中建立起的初级农业生产合作社属于<font color="red"><strong>半社会主义性质</strong></font></li>
</ol>
</li>
</ul>
</li>
<li><p>对个体手工业的社会主义改造</p>
<ul>
<li>方针: 积极领导、稳步前进</li>
<li>对手工业的社会主义改造经历的由小到大、由低级到高级的具体三个步骤<ol>
<li>第一步是办手工业供销小组”供销小组由国营商业或供销合作社供给原料和包销产品, 具有社会主义萌芽性质”</li>
<li>第二步是办手工业供销合作社”它具有半社会主义性质”</li>
<li>第三步是建立手工业生产合作社”手工业者的生产资料全部归集体所有, 统一经营, 入社人员参加集体劳动, 实行按劳分配”它是社会主义性质的集体经济组织”</li>
</ol>
</li>
</ul>
</li>
<li><p>对资本主义工商业的社会主义改造</p>
<p><u><font color="red"><strong>注意: 有三个经验</strong></font></u></p>
<ul>
<li><p>第一, 用<strong>和平赎买</strong>的方法改造资本主义工商业</p>
<ol>
<li>赎买的方式所谓赎买, 就是国家有偿地将私营企业改变为国营企业, 将资本主义私有制改变为社会主义公有制”赎买的具体方式不是由国家支付一笔巨额补偿资金, 而是让资本家在一定年限内从企业经营所得中获取一部分利润”</li>
<li>和平赎买的积极作用( 4个有利于 )<ul>
<li>有利于发挥私营工商业在国计民生方面的积极作用, 促进国民经济发展；</li>
<li>有利于争取和团结民族资产阶级, 有利于团结各民主党派和各界爱国民主人士, 巩固和发展统一战线；</li>
<li>有利于发挥民族资产阶级中大多数人的知识、才能、技术专长和管理经验；</li>
<li>有利于争取和团结那些原来同资产阶级相联系的知识分子为社会主义建设服务”</li>
</ul>
</li>
</ol>
</li>
<li><p>第二、采取从低级到高级的国家资本主义的过渡形式”</p>
<p>所谓国家资本主义, 就是在国家直接控制和支配下的资本主义经济”有初级形式和高级形式之分</p>
<p><img src="/Maogai-Mustback.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220125130813262.png" alt="image-20220125130813262"></p>
<ul>
<li><p><strong>对资本主义工商业的社会主义改造经历了三个步骤</strong>: </p>
<ul>
<li><p>第一步**主要实行初级形式的国家资本主义”**国家在私营工业中实行委托加工、计划订货、统购包销, 在私营商业中采取委托经销、代销等形式, 既帮助私营企业克服困难, 也使其生产和经营开始纳入国家计划的轨道”</p>
</li>
<li><p>第二步<strong>主要实行个别企业的公私合营</strong>“资本家的剥削进一步受到限制”企业的经营管理以发展生产、满足人民需要和完成国家计划为目标, 因而已经属于半社会主义性质的企业”</p>
</li>
<li><p>第三步是<strong>实行全行业的公私合营</strong>“全行业公私合营后, 企业的生产关系已经发生了根本的变化, 基本上成为社会主义国营性质的企业”</p>
<p>补充: <font color="orange"> <strong>四马分肥</strong> </font></p>
<ul>
<li>企业的利润, 按国家所得税、企业公积金、工人福利费、资方红利这四个方面进行分配</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>第三、把资本主义工商业者改造成为自食其力的社会主义劳动者</p>
<p>在资本主义工商业的社会主义改造中, 国家对资方在职人员和资方代理人采取”包下来”的政策, 以企业为基地, 根据”量才使用, 适当照顾”的原则, 对他们在政治上适当安排、工作上发挥作用、生活上妥善照顾, 通过改造阶级成分的方式达到从整体上消灭资产阶级的目的企业的改造和对人的改造相结合, 改造资本家个人与消灭他们所属的资产阶级相结合, 既避免了激烈的阶级对抗, 减少了改造的阻力, 又推动了生产力的发展和社会的进步”</p>
<ul>
<li>实现和平赎买的原因<ul>
<li><strong>首先, 民族资产阶级具有两面性</strong>“在社会主义革命时期, 民族资产阶级既有剥削工人取得利润的一面, 又有拥护宪法、愿意接受社会主义改造的一面”我国工人阶级和民族资产阶级之间存在着的剥削和被剥削的对抗性矛盾, “如果处理得当, 可以转变为非对抗性的矛盾, 可以用和平的方法解决这个矛盾”</li>
<li><strong>其次, 中国共产党与民族资产阶级长期保持着统一战线的关系</strong>这就为将工人阶级和民族资产阶级之间存在着的对抗性矛盾转化为非对抗性矛盾并按照人民内部矛盾来处理提供了前提”</li>
<li><strong>最后, 我国已经有了以工人阶级为领导、工农联盟为基础的人民民主专政的国家政权</strong>, 建立了强大的社会主义国营经济并掌握了国家的经济命脉, 这就造成了私人资本主义在政治上、经济上对社会主义的依赖”</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="二、-社会主义改造的历史经验"><a href="#二、-社会主义改造的历史经验" class="headerlink" title="二、    社会主义改造的历史经验"></a>二、    社会主义改造的历史经验</h3><ul>
<li><p>坚持社会主义工业化建设与社会主义改造并举</p>
<p>社会主义改造: 就是变革不适应工业化发展要求的生产关系, 围绕着社会主义工业化建设这个中心任务进行的:<br><font color="red"><strong><u>社会主义革命的目的是为了解放生产力</u></strong></font>“</p>
<p>引导个体农民、个体手工业者走集体化的道路, 改造私人资本主义工商业目的都是为了适应社会主义工业化建设的要求, 更好地发展生产力”</p>
</li>
<li><p>采取积极引导、逐步过度的方式( 农业、手工业、资本主义工商业 )</p>
</li>
<li><p>用和平万法进行改造农业的社会主义改造</p>
<ul>
<li>党和政府坚特和平的方法和自愿的原则, 并用事实向农民表明手</li>
<li>工业者的情况和农民基本相同”</li>
<li>对资本主工商业的改造, 我党以和平赎买的方法完成了改造”同时对资本家实行团结、教育和改造的方针</li>
</ul>
</li>
</ul>
<p>补充: </p>
<ul>
<li><p><font color="orange"><strong>社会主义改造中出现的失误和偏差</strong></font></p>
<ul>
<li><p>在一九五五年夏季以后, 农业合作化以及对手工业和个体商业的改造要求过急, 工作过粗, 改变过快, 形式也过于简单划一, 以致在长期间遗留了一些问题”( 1981年6月中共中央通过的《关于建国以来若干历史问题的决议》 )</p>
</li>
<li><p>一九五六年资本主义工商业改造基本完成以后对于一部分原工商业者的使用和处理也不很适当”</p>
</li>
</ul>
</li>
<li><p><font color="orange"><strong>出现失误和偏差的原因</strong></font></p>
<ul>
<li>在社会主义经济模式的选择和理解上过于单一追求纯粹的单一的社会主义经济成分；</li>
<li>在公有制实现形式的选择和理解上过于简单化只注意到集体所有制和全民所有制这两种基本形式, 而对社会主义改造基本完成以后公有制经济可以和非公有制经济共同发展缺乏认识”</li>
</ul>
</li>
<li><p><font color="orange"><strong>正确评价历史变革</strong></font></p>
<p>必须放在所处的时代和历史条件下去分析”<br>不能离开具体的社会历史条件”</p>
</li>
<li><p><font color="orange"><strong>正确认识社会主义改造与改革的关系</strong></font></p>
<p>二者虽然在思想指导、方针政策、实际工作上有很大差别, 但并不是彼此割裂的, 更不是根本对立的”不能用社会主义改革否定社会主义改造更不能用社会主义改造否定社会主义改革”对历史变革的评价, 必须放在所处的时代和历史条件下去分析”不能离开具体的社会历史条件”不能因为出现这些失误和偏差而否定社会主义改造的伟大意义”</p>
</li>
<li><p><font color="orange"><strong>正确认识改革开放前与改革开放后的关系</strong></font></p>
</li>
</ul>
<p> <strong>( 2016简答 )</strong></p>
<ol>
<li>改革开放前的历史, 是党领导全国各族人民进行社会主义革命和建设并取得巨大历史成就的历史；</li>
<li>改革开放后的历史, 是党领导全国各族人民成功开创和发展中国特色社会主义的历史；</li>
<li>二者在本质上都是党领导人民进行社会主义建设的实践探索, 不能相互否定；改革开放前社会主义实践探索为改革开放后社会主义的实践探索提供了重要条件, 改革开放后社会主义的实践探索是改革开放前社会主义实践探索的坚持、改革和发展”</li>
<li>这是两个既有区别又有联系的时期”联系并不只是时间上的顺延和承续, 而是在坚持社会主义发展方向、基本制度、根本任务、奋斗目标基础上的联系；重大区别主要是指在进行社会主义建设的思想指导方针政策、实际工作上有很大差别, 也包括进行社会主义实践探索的内外条件、实践基础等方面存在很大差别”</li>
</ol>
<h2 id="第三节-社会主义制度在中国的确立"><a href="#第三节-社会主义制度在中国的确立" class="headerlink" title="第三节    社会主义制度在中国的确立"></a>第三节    社会主义制度在中国的确立</h2><h3 id="一、社会主义基本制度的确立"><a href="#一、社会主义基本制度的确立" class="headerlink" title="一、社会主义基本制度的确立"></a>一、社会主义基本制度的确立</h3><ul>
<li><p>以公有制为基础的社会主义基本经济制度已经确立</p>
<p>1956年底我国对农业、手工业和资本主义工商业的社会主义改造的基本完成, 标志着中国历史上长达数干年的阶级剥削制度的结束, 实现了由新民主主义向社会主义的转变, 社会主义基本制度在我国初步确立</p>
</li>
<li><p>人民民主政治建设有步骤地向前推进</p>
<p><font color="red"><strong>1954年9月, 第一届全国人民代表大会的召开和《中华人民共和国宪法》的制定及颁布施行</strong></font>, 为各族人民参与国家政治生活提供了必要条件和保证, 为逐步健全和完善我国社会主义政治制度奠定了坚实的基础, 成为我国社会主义民主政治建设的里程碑”</p>
</li>
<li><p>社会阶级关系发生根本变化</p>
<ul>
<li>帝国主义侵略势力已经被清除出中国大陆: </li>
<li>官僚资产阶级已经在中国内地被消灭；</li>
<li>原来的地主和富农正在被改造成为自食其力的劳动者: </li>
<li>民族资产阶级分子被改造成自食其力的社会主义劳动者；</li>
<li>工人阶级已经成为国家的领导阶级, 工人阶级队伍进一步壮大；</li>
<li>亿万农民和其他个体劳动者已经变成社会主义的集体劳动者；</li>
<li>广大劳动人民从此摆脱了被剥削被奴役的地位, 成为掌握生产资料的国家和社会的庄人以及掌握自己命运的主人”</li>
</ul>
</li>
</ul>
<h3 id="二、-确立社会主义基本制度的重大意义"><a href="#二、-确立社会主义基本制度的重大意义" class="headerlink" title="二、    确立社会主义基本制度的重大意义"></a>二、    确立社会主义基本制度的重大意义</h3><ul>
<li>社会主义基本制度的确立是中国历史上最深刻最伟大的社会变革, 为当代中国一切发展进步奠定了制度基础, 也为中国特色社会主义制度的创新和发展提供了重要前提”</li>
<li>社会主义基本制度的确立, 极大地提高了工人阶级和广大劳动人民的积极性、创造性, 极大地促进了我国社会生产力的发展”</li>
<li>促进了我国社会生产力突飞猛进的发展, 初步显示了社会主义的优越性”我国工业化、现代化建设取得的辉煌成就, 离不开选择了社会主义道路这个根本的前提条件”</li>
<li>社会主义基本制度的确立, 使广大劳动人民真正成为国家的主人”这是中国几干年来阶级关系的最根本变革, 极天地师固和扩大了工人阶级领导的、以工农联盟为基础的人民民主专政国家政权的阶级基础和经济基础”</li>
<li>中国社会主义基本制度的确立, 它进一步改变了世界政治经济格局, 增强了社会主义的力量, 对维护世界和平产生了积极影响”</li>
<li>社会主义基本制度的确立, 是以毛泽东为主要代表的中国共产党人对一个脱胎于半殖民地半封建的东方大国如何进行社会主义革命问题的系统回答和正确解决, 是马克思列宁主义关于社会主义革命理论在中国的正确运用和创造性发展的结果”它不仅再次证明了马克思列宁主义的真理性, 而且以其独创性的理论原则和经验总结丰富和发展了科学社会主义理论”</li>
</ul>
<h1 id="第5章-社会主义建设道路初步探索的理论成果"><a href="#第5章-社会主义建设道路初步探索的理论成果" class="headerlink" title="第5章    社会主义建设道路初步探索的理论成果"></a>第5章    社会主义建设道路初步探索的理论成果</h1><h2 id="第一节-社会主义建设道路初步探索的重要思想成果"><a href="#第一节-社会主义建设道路初步探索的重要思想成果" class="headerlink" title="第一节    社会主义建设道路初步探索的重要思想成果"></a>第一节    社会主义建设道路初步探索的重要思想成果</h2><h3 id="一、调动一切积极因素为社会主义事业服务的思想"><a href="#一、调动一切积极因素为社会主义事业服务的思想" class="headerlink" title="一、调动一切积极因素为社会主义事业服务的思想"></a>一、调动一切积极因素为社会主义事业服务的思想</h3><p><font color="red"><strong>《论十大关系》</strong></font>是探索中国建设社会主义建设道路的( 良好 )开端”</p>
<p>1956年4月, 毛泽东发表了《论十大关系》的讲话, 提出”把国内外一切积极因素调动起来, 为社会主义事业服务”的社会主义建设的<strong>基本方针</strong>“这是中国共产党人对中国社会主义建设道路总结、探索的初步成果”</p>
<p>在《论十大关系中》的报告中, 毛主席初步总结了我国社会主义建设的经验, <font color="red"><strong>明确提出以苏为鉴, 独立自主地探索适合中国情况的社会主义道路</strong></font>“</p>
<ul>
<li><p><strong>正确处理十大关系( 了解 )</strong></p>
<p>重工业与农业、轻工业的关系( 开辟与苏联有所不同的中国工业化道路 )</p>
<p>沿海工业同内地工业的关系( 开辟与苏联有所不同的中国工业化道路 )</p>
<p>经济建设同国防建设的关系( 开辟与苏联有所不同的中国工业化道路 )</p>
<p>国家、生产单位和生产者个人的关系( 经济体制改革 )</p>
<p>中央和地方的关系( 经济体制改革, 提出中国经济建设若干方针 )</p>
<p>汉族和少数民族的关系( 政治生活和思想问题生活调动各种积极因素的问题 )</p>
<p>党和非党的关系( 政治生活和思想问题生活调动各种积极因素的问题 )</p>
<p>革命和反革命的关系( 政治生活和思想问题生活调动各种积极因素的问题 )</p>
<p>是非关系( 政治生活和思想问题生活调动各种积极因素的问题中国和外国的关系( 政治生活和思想问题生活调动各种积极因素的问题 )</p>
</li>
</ul>
<p> <strong>目的量为了把堂内宝处到内回外的一径厨方社会主义事业服务, 把我国建设成为一个的会主义国家</strong></p>
<ul>
<li><p>积极因素与消极因素</p>
<p>积极因素与消极因素既包括党内因素, 也包括党外因素；</p>
<p>既包括国内因素, 也包括国外因素；既包括直接因素, 也包括间接因素”</p>
<p>积极因素与消极因素是一对矛盾, 既统一又斗争”</p>
<p>在社会主义事业发展中, 积极因素一般处于主导、统治地位, 是可靠保障”</p>
<p>同时两者在一定条件下可以互相转化, 因此我们要创造条件, 大力促使消极因素向积极因素转化, 尽力防止逆转”</p>
</li>
<li><p><strong><font style="background:yellow;">怎样调动一切积极因素为社会主义事业服务？</font></strong></p>
<ol>
<li><p>必须坚持中国共产党的领导</p>
</li>
<li><p>必须发展社会主义民主政治</p>
<p>( <font color="red"><strong>六又政治局面: 又有集中又有民主, 又有纪律又有自由, 又有统一意志, 又有个人心情舒畅、生动活泼 )</strong></font></p>
</li>
<li><p>必须正确认识社会主义发展阶段毛泽东指出, 社会主义分为两个阶段: <font color="red"><strong>不发达的社会主义: 比较发达的社会主义</strong></font>“( 2018多选 )</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>关于社会主义社会矛盾的思想集中体现在毛泽东的《关于正确处理人民内部矛盾的问题》中, 毛泽东在1957年2月所作的<br><font color="red"><strong>《关王正确处理人民内部矛盾的问题》</strong></font>的报告, 系统论述了社会主义社会矛盾的理论</p>
<p>主要观点: </p>
<ol>
<li>矛盾普遍存在</li>
<li>关于社会主义社会的基本矛盾</li>
<li>关于我国社会的主要矛盾和根本任务</li>
<li>关于社会主义社会存在两类不同性质矛盾的理论</li>
<li>正确处理两类不同性质社会矛盾的基本方法</li>
<li>关于正确处理人民内部矛盾的方针</li>
<li>关于区分两类不同性质矛盾和正确处甲人民内邮矛盾的日的知音</li>
</ol>
</li>
</ul>
<h3 id="二、-正确认识和处理社会主义社会矛盾的思想-论述题重点"><a href="#二、-正确认识和处理社会主义社会矛盾的思想-论述题重点" class="headerlink" title="二、    正确认识和处理社会主义社会矛盾的思想( 论述题重点 )"></a>二、    正确认识和处理社会主义社会矛盾的思想( 论述题重点 )</h3><ul>
<li>毛泽东指出, 矛盾是普遍存在的, 社会主义社会同样宽满汤盾正是这些矛盾推动者社会主义社会不断向前发展”要运用对立统一规律深刻分析社会主义社会的矛盾”</li>
<li>社会主义的基本矛盾: 仍然是生产关系和生产力之间的矛盾上层建筑和经济基础之间的矛盾”<strong>社会主义社会的矛盾还是对抗性矛高, 而层非抗性的矛盾”具有那相适应又相汤盾的特点”可以福过社会主义制度本身还断得到解速</strong>“</li>
<li>我国社会的主要矛盾和根本任务”主要矛盾: 人民对建立先进的工业国的要求同落后的农业国的现实之间的矛盾, 人民对经济文化迅速发展的需要同当前经济文化不能满足人民需要的状况之间的矛盾”</li>
</ul>
<p><font color="red"><strong>工作重点</strong></font>: 转到技术革命和社会主义建设上, 全党学科学、技术、新本领”</p>
<ul>
<li><p>社会主义社会的两类不同性质矛盾学说</p>
<p>毛泽东强调, 社会主义社会的矛盾反应在政治上可以划分为敌我矛盾和人民内部矛盾, 是两种性质完全不同的矛盾”</p>
<p>毛泽东关于严格区分和正确处理两类不同性质矛盾的学说, 特别是关于正确处理人民内部矛盾是国家政治生活的主题的思想, 具有重大的实践意义和理论意义”它为正确处理社会主义社会各种矛盾, 协调人与人之间的社会关系, 创造了有利于生产力发展的良好的社会环境和政治局面, 提供了基本的理论依据”它以完整的理论形态、独创性的内容, 丰富了马克思主义的理论宝库”</p>
<ul>
<li><font color="orange"><strong>补充</strong></font>: <ul>
<li>人民内部矛盾: 人民利益根本一致的基础上的矛盾是非对抗性的”</li>
<li>我国民族资本家有两面性, 工人阶级同民族资本家的矛盾属于人民内部矛盾”</li>
<li>在一定条件下, 两类不同性质的矛盾可以互相转化”<br>处理方法: 采用专政和民主这样两种不同的方法”</li>
<li>专政: 运用人民民主专政的国家机器”</li>
<li>民主: 讨论、批评、说服教育”</li>
</ul>
</li>
</ul>
</li>
<li><p>关于正确处理人民内部矛盾的方针( 2015多选 )</p>
</li>
</ul>
<p> <strong>解决人民内部矛盾的总方针: 坚特用民主的方法</strong></p>
<ol>
<li>对于政治思想领域的人民内部矛盾, 实行”团结批评-团结”的方针, 坚持说服教育、讨论的方法；</li>
<li>对于物质利益、分配方面的人民内部矛盾, 实行统筹兼顾、适当安排的方针, 兼顾国家、集体和个人三方面的利益；</li>
<li>对于人民群众和政府机关的矛盾, 坚持民主集中制原则: </li>
<li>对科学文化领域的矛盾, 实行”百花齐放、百家争鸣”的方针；</li>
<li>对共产党与民主党派的矛盾, 实行在坚持社会主义道路和共产党领导的前提下, “长期共存、互相监督”的方针；</li>
<li>对于民族间的矛盾, 实行民族平等、团结互助的方针</li>
</ol>
<ul>
<li><p>正确处理人民内部矛盾的问题是社会主义国家政治生活的生题</p>
<p>毛泽东关于社会主义矛盾的学说, 科学揭示了社会主义社会发展的动力, 为正确处理社会主义社会各种矛盾, 创造良好的社会环境和政治环境, 提供了基本的理论依据, 为后来的社会主义改革奠定了理论基础, 并以独创的内容丰富了马克思主义的理论宝库”</p>
</li>
</ul>
<p>补充: </p>
<ul>
<li><font color="orange"><strong>正确处理人民内部矛盾的方针是</strong></font><ol>
<li>“团结一批评一团结”</li>
<li>“统筹兼顾、适当安排”</li>
<li>“百花齐放、百家争鸣”</li>
<li>“长期共存、互相监督”</li>
</ol>
</li>
</ul>
<h3 id="三、-走工业化道路的思想"><a href="#三、-走工业化道路的思想" class="headerlink" title="三、    走工业化道路的思想"></a>三、    走工业化道路的思想</h3><ul>
<li><p>实现国家工业化是新中国整个经济建设的主要任务</p>
<p>党的七届二中全会提出实现国家工业化的目标”</p>
<p><font color="red"><strong>毛泽东在《论士大关系》中论述的第一大关系, 便是重工业轻工业和农业的送系”( 2019单选 )</strong></font></p>
<p>《关于正确敏处理人民内部矛盾的问题》中提出要走一条有别王苏联的中国工业化道路”</p>
<p>毛泽东提出, 以<strong>工业为主导, 把重工业作为我国经济建设的重点</strong>, 逐步建立独立的比较完整的基础工业体系和国防工业体系, 同时充分注意发展农业和轻工业”</p>
</li>
<li><p>“两条腿走路”的工业化发展思路的实现</p>
<p>毛泽东提出了以农业为基础, 以工业为主导, 以农轻重为序发展国民经济的总方针, 以及一整套”两条腿走路”的工业化发展思路, 即重工业和轻工业同时并举, 中央工业和地方工业同时并举, 沿海工业和内地工业同时并举, 大型企业和中小型企业同时并举, 等等”</p>
<ol>
<li><p>走中国工业化道路, 必须明确战略目标和步骤</p>
<p>要把中国建设成为一个具有现代农业、现代工业、现代国防和现代科学技术的国家”三届全国人大一次会议提出”<strong>两步走</strong>“<br>战略, </p>
<ul>
<li>第一步, 建成一个独立的比较完整的工业体系和国民经济体系, </li>
<li>第二步, 全面实现工业、农业、国防和科学技术现代化”</li>
</ul>
</li>
<li><p>走中国工业化道路, 必须采取正确的经济建设方针”</p>
<p>党的八大提出, 既反保守又反冒进, 在综合平衡总稳步前进的方针</p>
</li>
<li><p>走中国工业化道路, 必须调整和完善关于所有制结构”</p>
<p>毛、刘、周: 把资本主义经济作为社会主义经济的补充</p>
<p>朱德: 发展工业和农业多种经营；</p>
<p>陈云: “三个主体, 三个补充”的设想</p>
</li>
<li><p>走中国工业化道路, 必须积极探索适合我国情况的经济体制和运行机制改革”</p>
<p>毛: 发展商品生产, 利用价值规律”</p>
<p>刘: 使社会主义经济既有计划性又有多样性和灵活性按经济办法管理经济”</p>
<p>陈云: 建立”适合于我国适合和人民需要的社会主义的市场””</p>
<p>毛: 企业”两参一改三结合”( 干部参加劳动, 工人参加管理, 改革不合理的规章制度, 工人群众、领导王部和技术工人三结合” )</p>
<p>邓小平: 改善和加强企业管理, 实行职工代表大会制”</p>
</li>
<li><p>走中国工业化道路, 必须发展科学技术和文化教育”</p>
<p>提出向科学进军, 强调实现四个现代化关键在于科学技术现代化”</p>
</li>
<li><p>走中国工业化道路, 必须重视知识分子工作”</p>
<p>毛泽东提出, 知识分子在革命和建设中具有重要作用”<br>周恩来提出, 知识分子是工人阶级一部分的观点”</p>
</li>
</ol>
</li>
</ul>
<h2 id="第二节-社会主义建设道路初步探索的意义和教训"><a href="#第二节-社会主义建设道路初步探索的意义和教训" class="headerlink" title="第二节    社会主义建设道路初步探索的意义和教训"></a>第二节    社会主义建设道路初步探索的意义和教训</h2><h3 id="一、-意义"><a href="#一、-意义" class="headerlink" title="一、    意义"></a>一、    意义</h3><ul>
<li>第一, 巩固和发展了我国社会主义制度”</li>
<li>第二, 为开创中国特色社会主义提供了宝贵经验、理论准备和物质基础”</li>
<li>第三, 丰富了科学社会主义的理论和实践”</li>
</ul>
<h3 id="二、经验教训-2017论述"><a href="#二、经验教训-2017论述" class="headerlink" title="二、经验教训( 2017论述 )"></a>二、经验教训( 2017论述 )</h3><ul>
<li>第一、必须把马克思主义与中国实际相结合, 探索符合中国特点的社会道路</li>
<li>第二、主必须正确认识社会主义社会的主要矛盾和根本任务, 集中力量发展</li>
<li>第三、必须丛实际出发进行社会主义建设, 建设规模和速度要和国力相适应, 不能急于求成”</li>
<li>第四、必须发展社会主义民主, 健全社会主义法制”</li>
<li>第五、坚持党的民主集中制和集体领导制度, 加强执政党建设”</li>
<li>第六、必须坚持对外开放, 不能关起门来搞建设, 要借鉴和吸收人类文明的共同成巢建设社会主义<ul>
<li>正确认识1: 我国的根本任务是左的生产关系下保护和发展生产力”</li>
<li>正确认识2: 社会主义民主体质以民当家作主”</li>
<li>正确认识3: 健全民主集中制和集体领导制度, 加强执政党建设, 是社会主文事业顺利发展的政治保证”<br>民主集中制是无产阶级政党的根本组织原是指寻党内生活的基本准则”</li>
<li>正确认识4: 改革开放前后两个时期</li>
</ul>
</li>
</ul>
<h1 id="第6章-邓小平理论"><a href="#第6章-邓小平理论" class="headerlink" title="第6章    邓小平理论"></a>第6章    邓小平理论</h1><h2 id="第一节-邓小平理论的形成"><a href="#第一节-邓小平理论的形成" class="headerlink" title="第一节    邓小平理论的形成"></a>第一节    邓小平理论的形成</h2><h3 id="一、-邓小平理论的形成的条件"><a href="#一、-邓小平理论的形成的条件" class="headerlink" title="一、    邓小平理论的形成的条件"></a>一、    邓小平理论的形成的条件</h3><ul>
<li><p>和平和发展成为时代主题是邓小平理论形成的<font color="red"><strong>时代背景</strong></font></p>
<p>和平是东西问题；发展是南北问题”</p>
</li>
<li><p>社会主义建设的经验教训是邓小平理论形成的<font color="red"><strong>历史依据</strong></font></p>
</li>
<li><p>改革开放和现代化建设的实践是邓小平理论形成的<font color="red"><strong>现实依据</strong></font></p>
</li>
</ul>
<h3 id="二、-邓小平理论的形成过程"><a href="#二、-邓小平理论的形成过程" class="headerlink" title="二、    邓小平理论的形成过程"></a>二、    邓小平理论的形成过程</h3><h2 id="第二节-邓小平理论的基本问题和主要内容"><a href="#第二节-邓小平理论的基本问题和主要内容" class="headerlink" title="第二节    邓小平理论的基本问题和主要内容"></a>第二节    邓小平理论的基本问题和主要内容</h2><h3 id="一、-邓小平理论回答的基本问题"><a href="#一、-邓小平理论回答的基本问题" class="headerlink" title="一、    邓小平理论回答的基本问题"></a>一、    邓小平理论回答的基本问题</h3><ul>
<li><p><strong>什么是社会主义、怎样建设社会主义</strong>, 是邓小平在领导改革开放和现代化建设这一新的革命过程中, 不断提出和反复和思考的首要的基本的理论问题”</p>
</li>
<li><p>搞清楚什么是社会主义、怎样建设社会主义, 关键是要在坚持社会主义基本制度的基础上进一步认清社会主义的本质”</p>
<ul>
<li><p>改革开放以来, 他<strong>反复强调坚持四项基本原则, 其实质就是要求我们坚持社会主义基本制度, 即坚持以公有制为基础</strong>、实行按劳分配原则的社会主义基本经济制度, 坚持共产党领导、实行人民民主专政的社会主义基本政治制度坚持以马克思列宁主义、毛泽东思想为指导的社会主义意识形态, 这是我们的立国之本, 是我国一切进步和发展的基础”</p>
</li>
<li><p>1992年初, 邓小平在南方谈话中对社会主义本质作了总结性理论概括: “<strong>社会主义的本质, 是解放生产力, 发展生产力, 消灭剥削, 消除两极分化, 最终达到共同富裕</strong>“”</p>
</li>
</ul>
</li>
<li><p>补充: <font color="orange"><strong>社会主义坚持根本原则</strong></font>: </p>
<ul>
<li><p>一是以社会主义公有制经济为主体</p>
</li>
<li><p>一是共同富裕</p>
</li>
<li><p>2018辨析: 共同富裕是中国特色社会主义的根本原则</p>
<ol>
<li>正确”( 2分 )</li>
<li>共同富裕是中国特色社会主义根本原则”它体现了社公主义的本质要求, 指明了社会主义发展的方向和目标”( 2分 )</li>
<li>共同富裕是科学社会主义的重要价值诉求”( 1分 )</li>
<li>共同富裕是社会主义优越性的重要体现”( 1分 )</li>
<li>共同富裕是中国特色社会主义的基本目标”( 1分 )</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="二、-邓小平理论的主要内容"><a href="#二、-邓小平理论的主要内容" class="headerlink" title="二、    邓小平理论的主要内容"></a>二、    邓小平理论的主要内容</h3><p>1.<strong>社会主义初级阶段理论的提出及其发展</strong></p>
<p>   首次提出: 十一届六中全会</p>
<p>   系统阐述: 十三大</p>
<p>   不断强调: 十五大——&gt;十八大、十九大</p>
<p>2.<strong>社会主义初级阶段的科学含义</strong></p>
<p>   一、我国已经是社会主义社会( 社会性质 )</p>
<p>   二、我国的社会主义社会还处在初级阶段( 发展阶段 )</p>
<p>3.<strong>邓小平理论的主要内容</strong></p>
<ul>
<li><p>解放思想、实事求是的思想路线( <font color="red"><strong>是邓小平理论活的灵魂, 是邓小平理论的精髓</strong></font> )</p>
<p>1978年党的十一届三中全会召开前夕, 在中央工作会议上邓小平发表《解放思想, 实事求是团结一致前看》的讲话, 明确指出: “一个党, 一个国家, 一个民族, 如果一切从本本出发, 思想僵化, 迷信盛行, 那它就不能前进, 它的生机就停止了, 就要亡党亡国”</p>
<p><strong>十一届三中全</strong>会果断作出了把党和国家工作重点转移到社会主义现代化建设上来的战略决策, 提出了一系列有利于增强党的团结和调动一切积极因素的方针政策, <strong>标志着党重新确立了马克思主义的思想路线”</strong></p>
</li>
<li><p>社会主义初级阶段理论</p>
<p>我国处在社会主义初级阶段, 是邓小平和我们党对当代中国基本国情的科学判断”我们讲解放思想, 实事求是, 从实际出发建设社会主义, <strong>最大的”实际”就是中国的基本国情</strong>“</p>
</li>
<li><p>党的基本的路线( 一个中心, 两个基本点 )</p>
<p>党的十三大报告提出了党在社会主义初级阶段的基本路线: 领导和团结全国各族人民以<font color="red">经济建设为中心, 坚持四项基本原则</font>, 坚持改革开放, 自力更生, 艰苦创业, 为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗”</p>
<ul>
<li><p><font color="orange"><strong>补充</strong></font>:</p>
<ul>
<li>==<strong>坚持党的基本路线的要求</strong>: ==<ol>
<li>必须紧紧围绕经济建设这一中心；以经济建设为中心是兴国之要, 是党和国家兴旺发达、长治久安的根本要求”</li>
<li>必须坚持四项基本原则同改革开放结合起来, 正确敵处理改革开放与四项基本原则之间的关系”既要以四项基本原则保证改革开放的正确方向, 又要通过改革开放赋予四项基本原则新的时代内涵, 坚持把以经济建设为中心同四项基本原则、改革开放这两个基本点统一于发展中国特色社会主义的伟大实践”</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>社会主义的根本任务是发展生产力</p>
<ul>
<li>发展就是硬道理, 中国解决所有问题的关键是要靠自己的发展</li>
<li>邓小平深刻地概括出”科学技术是第一生产力”这个新论断</li>
</ul>
</li>
<li><p>三步走战略</p>
<p>1987年4月, 邓小平第一次提出了分”三步走”基本实现现代化的战略”同年10月, <font color="red">党的十三大大把邓小平”三步走”的发展战略构想确定下来</font>, 明确提出: </p>
<ul>
<li>第一步, 从1981年到1990年实现国民生产总值比1980年翻一番, 解决人民的温饱问题: </li>
<li>第二步, 从1991年到20世纪末, 使国民生产总值再翻一番, 达到小康水平；</li>
<li>第三步, 到21世纪中叶, 国民生产总值再翻两番, 达到中等发达国家水平, 基本实现现代化”, 然后在这个基础上继续前进”</li>
</ul>
</li>
<li><p>改革开放理论</p>
<p>新时期最鲜明的特点是改革开放”邓小平明确指出: “<strong>改革是中国的第二次革命</strong>“”中国共产党领导的第一次革命, 把一个半殖民地半封建的旧中国变成了一个社会主义新中国中国共产党领导的第二次革命, 将把一个经济文化比较落后的社会主义中国变成一个现代化的社会主义国家”</p>
<p><strong>改革的性质是社会主义制度的自我完善和自我发展</strong>“改革不是一个阶级推翻另一个阶级那种原来意义上的革命, 也不是原有经济体制的细枝末节的修补, 而是对体制的根本性变革改革的实质和目标, 是要从根本上改变束缚我国生产力发展的经济体制, 建立充满生机和活力的社会主义新经济体制, 同时相应地改革政治体制和其他方面的体制, 以实现中国的计会主义现代化</p>
<p><font color="orange"><strong>补充:</strong></font></p>
<ul>
<li>改革是社会主义发展的直接动力</li>
<li>判断改革得失成败的标准是: “三个有利于”<ol>
<li>改革和各方面工作的是非得失, 归根到底, 要以是否有利于发展社会主义社会的生产力 )</li>
<li>是否有利任增强社会主义国家的综合国力</li>
<li>是否有利于提高人民的生活水平为标准</li>
<li>开放也是改革, 对外开放是建设中国特色社会主义的十顶基本国策</li>
</ol>
</li>
</ul>
</li>
<li><p>社会主义市场经济理论</p>
<p>建立社会主义市场经济体制是我们党的一个伟大创举, 是我国经济体制改革在实践和理论上的重大突破”<u>我国经济体制改革的核心问题是如何正确认识和处理计划与市场的送系”</u></p>
<ul>
<li>一是计划经济和市场经济不是划分社会制度的标志, 计划经济不等于社会主义, 市场经济也不等于资本主义: </li>
<li>二是计划和市场都是经济手段, 对经济活动的调节各有优势和长处, 社会主义实行市场经济要把两者结合起来: </li>
<li>三是市场经济作为资源配置的一种方式本身不具有制度属性, 可以和不同的社会制度结合, 从而表现出不同的性质”</li>
</ul>
</li>
<li><p>“两手住, 两手都要硬”</p>
<p>一手抓物质文明, 一手抓精神文明, 也指一手抓建设, 一手抓法制</p>
</li>
<li><p>“一国两制”</p>
<p>“和平统一、一国两制”构想的基本内容主要有: </p>
<p>1.<strong>坚持一个中国</strong>, 这是”和平统一、一国两制”<br>   的核心, 是发展两岸关系和实现和平统一的基础；<br>2.<strong>两制并存</strong>, 在祖国统一的前提下, 国家的主体部分实行社会主义制度, 同时在台湾、香港、澳门保持原有的社会制度和生活方式长期不变；<br>3.<strong>高度自治</strong>, 祖国完全统一后, 台湾、香港、澳门作为特别行政区, 享有不同于中国其他省、市自治区的高度自治权, 台湾、香港、澳门同胞各种合法权益将得到切实尊重和维护；</p>
<ol start="4">
<li>尽最大努力净取和平统一, 但不承诺放弃使用武力；</li>
<li>解决台湾问题, 实现祖国完全统一, 寄希望于台湾人民”</li>
</ol>
<p><font color="orange"><strong>补充:</strong></font></p>
<ol>
<li>一国两制的伟大构想的提出是从台湾问题开始的</li>
<li>在处理香港问题、澳门问题得到成功实践</li>
</ol>
</li>
<li><p>中国问题的关键在于党</p>
<p><font color="red">建设中国特色社会主义, 关键在于坚持、加强和改善党的领导”</font></p>
<p>加强党的建设, 是我们党领导人民取得革命和建设胜利的一个法宝</p>
</li>
</ul>
<h2 id="第三节-邓小平理论的历史地位"><a href="#第三节-邓小平理论的历史地位" class="headerlink" title="第三节    邓小平理论的历史地位"></a>第三节    邓小平理论的历史地位</h2><h2 id="一、-马克思列宁主义、毛泽东思想的继承和发展"><a href="#一、-马克思列宁主义、毛泽东思想的继承和发展" class="headerlink" title="一、 马克思列宁主义、毛泽东思想的继承和发展"></a>一、 马克思列宁主义、毛泽东思想的继承和发展</h2><h2 id="二、中国特色社会主义理论体系的开篇之作"><a href="#二、中国特色社会主义理论体系的开篇之作" class="headerlink" title="二、中国特色社会主义理论体系的开篇之作"></a>二、中国特色社会主义理论体系的开篇之作</h2><p>邓小平理论第一次比较系统地初步回答了中国社会主义的发展道路、发展阶段、根本任务、发展动力外部条件政治保证、战略步骤、党的领导和依靠力量以及祖国统一等一系列基本问题指导我们党制定了在社会主义初级阶段的基本路线”</p>
<h2 id="三、改革开放和社会主义现代化建设的科学指南"><a href="#三、改革开放和社会主义现代化建设的科学指南" class="headerlink" title="三、改革开放和社会主义现代化建设的科学指南"></a>三、改革开放和社会主义现代化建设的科学指南</h2><ol>
<li>邓小平理论指导了改革开放的伟大实践”党的十一届三中全会以后, 我们党作出的这一系列重大决策, 把改革开放和社会主义现代化建设一步一步推向前进”</li>
<li>邓小平理论使改革开放后的中国发生天翻地覆的变化, 迎来了思想的解放、经济的发展、政治的昌明、教育的勃兴、文艺的繁荣、科学的春天”</li>
<li>邓小平理论是邓小平留给我们的最重要的思想遗产”邓小平理论经过改革开放和现代化建设实践的检验, 已经被证明是指导中国人民建设中国特色社会主义、保证中国在改革开放实现国家繁荣富强和人民共同富裕的系统的科学理论”</li>
</ol>
<h1 id="第7章-“三个代表”重要思想"><a href="#第7章-“三个代表”重要思想" class="headerlink" title="第7章    “三个代表”重要思想"></a>第7章    “三个代表”重要思想</h1><h2 id="第一节-“三个代表”重要思想的形成"><a href="#第一节-“三个代表”重要思想的形成" class="headerlink" title="第一节    “三个代表”重要思想的形成"></a>第一节    “三个代表”重要思想的形成</h2><p>解决党建问题”</p>
<ul>
<li>**世情变化: **当代世界的发展变化<br>对党和国家的新要求( 苏联解体、东欧剧变；美国成为超级大国；经济全球化；新科技革命的影响 )</li>
</ul>
<p><strong>国情变化</strong>: 当代中国发展变化<br>对党和国家的新要<br>求”</p>
<p><strong>党情新变化</strong>:  党的发展变化对自身<br>建设提出的新要求</p>
<h3 id="一、-“三个代表”重要形成的过程"><a href="#一、-“三个代表”重要形成的过程" class="headerlink" title="一、    “三个代表”重要形成的过程"></a>一、    “三个代表”重要形成的过程</h3><p>2000年2月第一次提出</p>
<p>2001年7月1日, 中国共产党成立80周年大会上全面阐述</p>
<p>2002年, 江泽民第一次阐述内在联系: <font color="red"><strong>提出”贯彻‘三个代表’要求<em>关键在坚持与时俱进, 核心在保持党的先进性本质在</em>坚持执政为民</strong></font></p>
<p>2002年11月, 党的十六大写入党章</p>
<p>2004年又写进宪法</p>
<h2 id="第二节-“三个代表”重要思想的核心观点和主要内容"><a href="#第二节-“三个代表”重要思想的核心观点和主要内容" class="headerlink" title="第二节    “三个代表”重要思想的核心观点和主要内容"></a>第二节    “三个代表”重要思想的核心观点和主要内容</h2><h3 id="一、-“三个代表”重要思想的核心观点"><a href="#一、-“三个代表”重要思想的核心观点" class="headerlink" title="一、    “三个代表”重要思想的核心观点"></a>一、    “三个代表”重要思想的核心观点</h3><ol>
<li><p>中国共产党必须始终代<br>表中国先进生产力的发展要求”</p>
<ul>
<li>社会主义的根本任务是发展社会生产力”<strong>始终代表中国先</strong></li>
</ul>
<p> <strong>进生产力的发展要求, 大力促进先进生产力的发展, 是我们党站</strong><br> <strong>在时代前列, 保持先进性的根本体现和根本要求”</strong></p>
<ul>
<li><font color="red"><strong>工人、农民、知识分子是推动我国先进生产力发展和社会</strong></font></li>
</ul>
<p> <strong>全面进步的根本力量</strong>知识分子是先进生产力的开拓者”<strong>人是生</strong><br> <strong>产力中最活跃的因素</strong>“树立人才资源是第一资源的思想”</p>
<ul>
<li><font color="red">科学技术是第一生产力, 是先讲生产力的集中体现和主要标志</font>“科学的本质是创新”科技进步和创新是发展生产力的决定<br>因素”</li>
<li>促进生产关系和上层建筑的各个方面不断体现先进生产力<br>的发展要求</li>
</ul>
</li>
<li><p>中国共产党必须始终代<br>表中国先进文化的前进方向”</p>
<p>大力发展社会主义先进文化, 必须牢牢把握先进文化的前进方向, 建设社会<br>主义精神文明, 不断满足人民群众日益增长的精神文化需求, 不断丰富人民<br>的精神世界, 增强人民的精神力量”</p>
<ul>
<li>发展社会主义先进文化, 就是建设社会主义精神文明”</li>
<li>发展社会主义先进文化, 就是发展面向现代化、面向世界、面向未来<br>的, 民族的科学的大众的社会主义文化”</li>
<li>发展社会主义先进文化, 必须弘扬民族精神”<font color="red"><strong>中华民族形成了以爱国主义为核心的团结统一、爱好和平、勤劳勇敢、自强不息的伟大民族精神</strong></font>“</li>
<li>发展社会主义先进文化, 必须加强社会主义思想道德建设, 这是发展<br>先进文化的重要内容和中心环节”</li>
<li>发展社会主义先进文化, 必须作好思想政治工作”思想政治工作是经<br>济工作和其他一切工作的生命线</li>
</ul>
</li>
<li><p>中国共产党必须始终代<br>表中国最广大人民的根本利<br>益”</p>
<ul>
<li><font color="red"><strong>人民是我们国家的主人, 是决定我国前途和命</strong></font></li>
</ul>
<p> <strong>运的根本力量</strong>, 是历史的真正创造者”</p>
<ul>
<li>我们党来自于人民, 植根于人民, 服务于人民”</li>
<li>我们党始终坚持人民的利益高于一切”没有自<br>己的特殊利益”</li>
<li>要努力使工人、农民、知识分子和其他群众共<br>同享受到经济社会发展的成果”</li>
<li><font color="red"><strong>党和国家一切方针政策, 都要以是否符合最广<br>大人民群众的根本利益为最高衡量标准</strong></font>“</li>
</ul>
</li>
</ol>
<h3 id="二、-“三个代表”重要思想的主要内容"><a href="#二、-“三个代表”重要思想的主要内容" class="headerlink" title="二、    “三个代表”重要思想的主要内容"></a>二、    “三个代表”重要思想的主要内容</h3><ol>
<li><p>发展是党执政兴国的第一要务</p>
<p>社会主义要强大, 要体现优越性, 关键在发展”</p>
</li>
<li><p>建设社会主义市场经济体制</p>
<ul>
<li><font color="red"><strong>须坚持和完善公有制为主体、多种所有制经济共同发展<br>的社会主义基本经济制度</strong></font>“</li>
<li>按照”产权清晰、权责明确、政企分开、管理科学”的<br>要求, 实行规范的公司制改革, 完善法人治理结构, 建立符合市<br>场经济规律和我国国情的企业领导体制和管理制度”</li>
<li>发挥市场在资源配置中的基础性作用, 同时加强国家的<br>宏观调控”</li>
<li>理顺分配关系, 调整和规范国家、企业和个人的分配关<br>系”坚持效率优先, 兼顾公平, 初次分配注重效率, 再次分配注重公平”</li>
<li>建立和完善社会保障体系”</li>
</ul>
</li>
<li><p>全面建设小康社会</p>
<p>十五大报告中初步勾画了实现第三步战略目标<br>的蓝图: </p>
<ul>
<li>21世纪第一个十年实现国民生产总值比<br>2000年翻一番, 使人民的小康生活更加宽裕, 形<br>成比较完善的社会主义市场经济体制；</li>
<li>再经过十年的努力, 到建党一百年时, 使国<br>民经济更加发展, 各项制度更加完善；</li>
<li>到21世纪中叶新中国成立一百年时, 基本<br>实现现代化, 建成富强民主文明的社会主义国家”</li>
</ul>
</li>
<li><p>建设社会主义民主政治</p>
<ul>
<li><font color="red">建设社会主义政治文明, 最根本的就是要坚持党的领<br>导、人民当家作主和依法治国的有机统一”( 这是政治文明建<br>设必须遵循的基本方针, 也是我国政治文明区别于资本主义政<br>治文明的本质特征, </font>党的领导是人民当家作主和依法治国的根<br>本保证, 人民当家作主是社会主义民主政治的本质要求, 依法<br>治国是党领导人民治理国家的基本方略” )</li>
<li>建设社会主义政治文明, 必须坚持依法治国, 建设社<br>会主义法治国家”</li>
<li>建设社会主义政治文明, 必须进行政治体制改革”<br>( 政治体制改革是社会主义政治制度的自我完善和发展” )</li>
<li>发展社会主义民主政治, 必须在四项基本原则的前提<br>下稳妥推进”</li>
</ul>
</li>
<li><p>推进党的建设新的伟大工程</p>
<ul>
<li>坚持党的领导,<font color="red">核心是坚持党的先讲性</font>“使党成为<br>思想上政治上组织上完全巩固、始终站在时代前列带领<br>人民团结奋进的坚强领导核心”</li>
<li>江泽民强调推进党的建设新的伟大工程, <font color="red">重点是加强党的执政能力建设</font>, 不断提高科学判断形势的能力、<br>驾驭市场经济的能力、应对复杂局面的能力、依法执政<br>的能力、总揽全局的能力”</li>
<li>坚持党要管党从严治党的方针”从严治党, 最根<br>本的就是党的各级组织和全体党员、干部, 都要做到严<br>格按照党章办事, 按照党内政治生活准则和党的各项规<br>定办事”从严治党必须全面贯穿到党的思想、政治、组<br>织、作风和制度建设之中.<br>党的作风, 关系党的形象, 关系人心向背, 关系党的生<br>命”<font color="red">加强和改进党的作风建设, 核心问题是保持党同人<br>民群众的血肉联系</font>“我们党的最大政治优势是密切联系<br>群众, 党执政后的最大危险是脱离群众”</li>
<li>领导干部一定要”三讲””</li>
</ul>
</li>
</ol>
<h2 id="第三节-“三个代表”重要思想的历史地位"><a href="#第三节-“三个代表”重要思想的历史地位" class="headerlink" title="第三节    “三个代表”重要思想的历史地位"></a>第三节    “三个代表”重要思想的历史地位</h2><h3 id="一、-中国特色社会主义理论体系的接续发展"><a href="#一、-中国特色社会主义理论体系的接续发展" class="headerlink" title="一、    中国特色社会主义理论体系的接续发展"></a>一、    中国特色社会主义理论体系的接续发展</h3><ol>
<li><p>“三个代表”重要思想坚持把人民的根本利益作<br>为出发点和归宿”</p>
</li>
<li><p>“三个代表”重要思想强调要努力促进人的全面<br>发展”</p>
</li>
<li><p>“三个代表”重要思想, 把党的建设同当今世界<br>的发展趋势, 同我国社会主义的自我完善和发展, 同实<br>现中国特色社会主义的宏伟目标和各项任务联系起来”</p>
<p><font color="red"><strong>始终做到”三个代表”, 是我们党的立党之本、执政<br>之基、力量之源”</strong></font></p>
</li>
</ol>
<h3 id="二、-加强和改进党的建设-推进中国特色社会主义事业的强大理论武器"><a href="#二、-加强和改进党的建设-推进中国特色社会主义事业的强大理论武器" class="headerlink" title="二、    加强和改进党的建设, 推进中国特色社会主义事业的强大理论武器"></a>二、    加强和改进党的建设, 推进中国特色社会主义事业的强大理论武器</h3><p>“三个代表”重要思想提出了党的建设的新要求: </p>
<ol>
<li>必须使全党始终保持与时俱进的精神状态, 不<br>断开拓马克思主义理论发展的新境界；</li>
<li>必须把发<br>展作为党执政兴国的第一要务, 不断开创现代化建设<br>的新局面；</li>
<li>必须最广泛最充分地调动一切积极因<br>素, 不断为中华民族伟大复兴增添新力量；</li>
<li>必须<br>以改革的精神推进党的建设, 不断为党的肌体注入新<br>活力, 充分体现了共产党人的先进性和时代精神, 为<br>加强党的建设指明了方向”</li>
</ol>
<h1 id="第8章-科学发展观"><a href="#第8章-科学发展观" class="headerlink" title="第8章    科学发展观"></a>第8章    科学发展观</h1><h2 id="第一节-科学发展观的形成"><a href="#第一节-科学发展观的形成" class="headerlink" title="第一节    科学发展观的形成"></a>第一节    科学发展观的形成</h2><h3 id="一、-科学发展观的形成条件"><a href="#一、-科学发展观的形成条件" class="headerlink" title="一、    科学发展观的形成条件"></a>一、    科学发展观的形成条件</h3><ol>
<li>科学发展观是在深刻把握我国<font color="red">基本国情</font>和<font color="red">新的阶段性特征</font>的基础上形成和发展<ul>
<li><font color="red">但我国仍处于并将长期处于社会主义初级阶段的基本国情没<br>有变”</font></li>
</ul>
</li>
<li>科学发展观是在深入总结改革开放以来特别是党的十六大以来实践<br>经验的基础上形成和发展的</li>
<li>科学发展观是在深刻分析国际形势、顺应世界发展趋势、借鉴国外发展经验<br>的基础上形成和发展的</li>
</ol>
<h3 id="二、-科学发展观的形成过程"><a href="#二、-科学发展观的形成过程" class="headerlink" title="二、    科学发展观的形成过程"></a>二、    科学发展观的形成过程</h3><ol>
<li><p>科学发展观在抗击非典疫情和探索完善社<br>会主义市场经济体制的过程中逐步形成</p>
<p><font color="red">2003年10月, 第一次提出</font></p>
</li>
<li><p>科学发展观在加强和改善宏观<br>调控的实践中不断充实丰富</p>
</li>
<li><p>以党的十七大为标志, 科学发展观进<br>一步走向成熟</p>
<p>十七大报告提出了”中国特色社会主义理论体系<br>“的科学概念, 把科学发展观与邓小平理论、”三个代<br>表”重要思想一道作为中国特色社会主义理论体系的重<br>要组成部分, 并把科学发展观写入党章”</p>
</li>
</ol>
<h2 id="第二节-科学发展观的科学内涵和主要内容"><a href="#第二节-科学发展观的科学内涵和主要内容" class="headerlink" title="第二节    科学发展观的科学内涵和主要内容"></a>第二节    科学发展观的科学内涵和主要内容</h2><h3 id="一、科学发展观的科学内涵"><a href="#一、科学发展观的科学内涵" class="headerlink" title="一、科学发展观的科学内涵"></a>一、科学发展观的科学内涵</h3><p>科学发展观, <font color="red"><strong>第一要义是发展, 核心<br>立场是以人为本, 基本要求是全面协调可<br>持续, 根本方法是统筹兼顾</strong></font>“</p>
<ol>
<li>推动经济社会发展是科学发<br>展观的第一要义</li>
</ol>
<h3 id="二、科学发展观的主要内容"><a href="#二、科学发展观的主要内容" class="headerlink" title="二、科学发展观的主要内容"></a>二、科学发展观的主要内容</h3>]]></content>
      <categories>
        <category>考研必背</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 http和https(吃牢饭集合)</title>
    <url>/reptile-http-https.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p><strong>HTTP: 超文本传输协议, 默认端口号是80</strong></p>
<ul>
<li>超文本: 是指超过文本, 不仅限于文本; 还包含图片, 音频等文件</li>
<li>传输协议: 是指使用共用约定的固定格式来传递转换成字符串的超文本内容</li>
</ul>

<p><strong>HTTPS: HTTP + SSL(安全套接字层), 即带有安全套接字层的超文本传输协议, 默认端口号: 443</strong></p>
<ul>
<li>SSL对传输的内容(超文本, 也就是请求体或响应体)进行加密</li>
</ul>

<p><strong>可以打开浏览器访问一个url, 右键检查, 点击network, 点选一个url, 查看http协议的形式</strong></p>
<h1 id="HTTPS因为要加密缘故相比HTTP较慢一些-性能低一些-但是比HTTP更安全"><a href="#HTTPS因为要加密缘故相比HTTP较慢一些-性能低一些-但是比HTTP更安全" class="headerlink" title="HTTPS因为要加密缘故相比HTTP较慢一些,性能低一些, 但是比HTTP更安全"></a>HTTPS因为要加密缘故相比HTTP较慢一些,性能低一些, 但是比HTTP更安全</h1><br>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 jsonpath模块(吃牢饭集合)</title>
    <url>/reptile-jsonpath.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="jsonpath模块"><a href="#jsonpath模块" class="headerlink" title="jsonpath模块"></a>jsonpath模块</h1><p><strong>使用场景: 例如多层嵌套的复杂字典, 要根据key和下标来批量提取value就可以用到jsonpath模块</strong></p>
<h3 id="jsonpath模块的安装"><a href="#jsonpath模块的安装" class="headerlink" title="jsonpath模块的安装"></a>jsonpath模块的安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">pip install jsonpath<br></code></pre></td></tr></table></figure>
<h1 id="提取数据方法"><a href="#提取数据方法" class="headerlink" title="提取数据方法"></a>提取数据方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> jsonpath <span class="hljs-keyword">import</span> jsonpath<br>ret = jsonpath(a,<span class="hljs-string">&#x27;jsonpath语法规则字符串&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h1><table>
<thead>
<tr>
<th align="center">jsonpath</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">根节点</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center">现行节点</td>
</tr>
<tr>
<td align="center">. or []</td>
<td align="center">取子节点</td>
</tr>
<tr>
<td align="center">n/a</td>
<td align="center">取父节点, jsonpath未支持</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">就是不管位置, 选择所有符合条件的条件</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配所有元素节点</td>
</tr>
<tr>
<td align="center">n/a</td>
<td align="center">根据属性访问, json不支持, 因为json是个Key-value递归结构, 不需要属性访问</td>
</tr>
<tr>
<td align="center">[]</td>
<td align="center">迭代器标准(可以在里边做简单的迭代操作, 如数组下标, 根据内容选值等)</td>
</tr>
<tr>
<td align="center">[,]</td>
<td align="center">支持迭代器中做多选</td>
</tr>
<tr>
<td align="center">?()</td>
<td align="center">支持过滤操作</td>
</tr>
<tr>
<td align="center">()</td>
<td align="center">支持过表达式计算</td>
</tr>
<tr>
<td align="center">n/a</td>
<td align="center">分组, jsonpath不支持</td>
</tr>
</tbody></table>
<p><strong>常用的</strong></p>
<table>
<thead>
<tr>
<th align="center">常用jsonpath</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">根节点(最外层大括号)</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">子节点</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">子孙节点(内部任意位置, 选择所有符合条件的条件)</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配所有元素节点</td>
</tr>
</tbody></table>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> jsonpath<br><span class="hljs-keyword">import</span> json<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36&quot;</span><br>&#125;<br>response = requests.get(<span class="hljs-string">&#x27;https://www.lagou.com/lbs/getAllCitySearchLabels.json&#x27;</span>,headers=headers)<br><br>dict_data = json.loads(response.content)<br><br><span class="hljs-built_in">print</span>(jsonpath.jsonpath(dict_data,<span class="hljs-string">&#x27;$..name&#x27;</span>))<br></code></pre></td></tr></table></figure>
<br>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 network(牢饭吃到饱)</title>
    <url>/reptile-network.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="network抓包"><a href="#network抓包" class="headerlink" title="network抓包"></a>network抓包</h1><ul>
<li><p>名称: Preserver log </p>
<ul>
<li>功能:保存抓包的历史记录</li>
</ul>
</li>
</ul>
<ul>
<li><p>名称: Filter </p>
<ul>
<li>功能: 过滤清空</li>
</ul>
</li>
</ul>
<ul>
<li><p>名称: XHR</p>
<ul>
<li>功能: 大部分情况的ajax请求</li>
</ul>
</li>
</ul>
<ul>
<li><p>名称: js</p>
<ul>
<li>功能:js请求</li>
</ul>
</li>
</ul>
<ul>
<li><p>名称: css</p>
<ul>
<li>功能: css请求</li>
</ul>
</li>
</ul>
<ul>
<li><p>名称: Ever Listeners</p>
<ul>
<li><p>功能: 事件的监听</p>
<ul>
<li><p>名称: click</p>
</li>
<li><p>功能: 加密</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="js解析"><a href="#js解析" class="headerlink" title="js解析"></a>js解析</h1><ul>
<li><p>定位js文件</p>
<ul>
<li><p>通过initiator定位到js文件</p>
</li>
<li><p>通过seach搜索关键字定位的js文件</p>
</li>
<li><p>通过元素绑定的事件监听函数找到js文件</p>
</li>
</ul>
</li>
</ul>
<br>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 requests模块(吃牢饭集合)</title>
    <url>/reptile-header-requests.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>
<h1 id="response-text和response-content的区别"><a href="#response-text和response-content的区别" class="headerlink" title="response.text和response.content的区别"></a>response.text和response.content的区别</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 导入requests库</span><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 目标url</span><br>url = <span class="hljs-string">&quot;https:www.baidu.com&quot;</span><br><br><span class="hljs-comment"># 向目标url发送get请求</span><br>response = requetst.get(url)<br><br><span class="hljs-comment"># 手动设定编码格式</span><br>response.encoding = <span class="hljs-string">&#x27;utf8&#x27;</span>  <span class="hljs-comment">#等于response.content.decode()</span><br><br><span class="hljs-comment"># 打印响应内容</span><br><span class="hljs-built_in">print</span>(response.text)  <span class="hljs-comment">#等于response.content.decode(&quot;推测出的编码字符集&quot;)</span><br></code></pre></td></tr></table></figure>
<p><strong>response.text</strong></p>
<ul>
<li>类型: str</li>
<li>解码类型: requests模块自动根据HTTP 头部对响应的编码作出有根据的推测, 推测的文本编码</li>
</ul>

<p><strong>response.content</strong></p>
<ul>
<li>类型: bytes</li>
<li>解码类型: 没有指定</li>
</ul>

<p><strong>response.content进行decode解决中文乱码</strong></p>
<ul>
<li>response.content.decode() 默认utf-8</li>
<li>response.content.decode("GBK")</li>
<ul>
<li>utf-8</li>
<li>gbk</li>
<li>gb2312</li>
<li>ascli (阿斯克码)</li>
<li>iso-8859-1</li>
</ul>
</ul>

<h1 id="response响应对象的其它常用属性或方法"><a href="#response响应对象的其它常用属性或方法" class="headerlink" title="response响应对象的其它常用属性或方法"></a>response响应对象的其它常用属性或方法</h1><p><strong>response = requests.get(url) 中response是发送请求获取的响应对象; response响应对象中·除了text, cintent获取响应内容以外还有其它常用的属性或方法</strong></p>
<ul>
<li>response.url 响应的url; 有时候响应utl和请求utl并不一致</li>
<li>response.status_code 响应状态码</li>
<li>response.requests.headers 响应对应的请求头</li>
<li>response.headers 响应头</li>
<li>response.headers._cookies 响应对应请求的cookie; 返回cookieJar类型</li>
<li>response.cookies 响应的cookie (经过set-ccookie动作; 返回cookie类型)</li>
<li>response.json() 自动将json字符串类型的响应内容转换python对象 (dict or list)</li>
</ul>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 导入requests库</span><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 目标url</span><br>url = <span class="hljs-string">&quot;https:www.baidu.com&quot;</span><br><br><span class="hljs-comment"># 向目标url发送get请求</span><br>response = requetst.get(url)<br><br><span class="hljs-comment"># 手动设定编码格式</span><br>response.encoding = <span class="hljs-string">&#x27;utf8&#x27;</span>  <span class="hljs-comment">#等于response.content.decode()</span><br><br><span class="hljs-comment"># 打印响应内容</span><br><span class="hljs-built_in">print</span>(response.url)  <span class="hljs-comment">#打印响应的url</span><br><span class="hljs-built_in">print</span>(response.status_code)  <span class="hljs-comment">#打印响应的状态码</span><br><span class="hljs-built_in">print</span>(response.request.headers)  <span class="hljs-comment">#打印响应对象的请求头</span><br><span class="hljs-built_in">print</span>(response.headers)  <span class="hljs-comment">#打印响应头</span><br><span class="hljs-built_in">print</span>(response.request._cookies)  <span class="hljs-comment">#打印响应的url</span><br><span class="hljs-built_in">print</span>(response.cookies)  <span class="hljs-comment">#打印响应中携带的cookies</span><br></code></pre></td></tr></table></figure>

<!-- 知识点
# 掌握headers参数的使用
# 掌握发送带参数的请求
# 掌握headers中携带cookie
# 掌握cookies参数的使用
# 掌握cookieJar的转换方法
# 掌握超时参数timeout的使用
# 掌握代理ip参数proxies的使用
# 掌握使用verify参数忽略CA证书
# 掌握requests模块发送post请求
# 掌握利用requests.sesion进行状态保持 -->

<h1 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h1><p><strong>实现方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># data通常是一个字典</span><br>requests.post(uel,data)<br></code></pre></td></tr></table></figure>
<br>

<table>
<thead>
<tr>
<th>post数据来源</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>固定值</td>
<td>抓包比较不变值</td>
</tr>
<tr>
<td>输入值</td>
<td>抓包比较根据自身变化值</td>
</tr>
<tr>
<td>预设值-静态文件</td>
<td>需要提前从惊天html中获取</td>
</tr>
<tr>
<td>预设值-发请求</td>
<td>需要对指定地址发送请求获取数据</td>
</tr>
<tr>
<td>在客户端生成的</td>
<td>发现js模拟生成数据</td>
</tr>
</tbody></table>
<h1 id="requests-session"><a href="#requests-session" class="headerlink" title="requests.session"></a>requests.session</h1><p><strong>requests.session的作用</strong></p>
<ul>
<li>自动保存或者处理cookie, 下一次请求会带上前一次的cookie</li>
</ul>
<p><strong>场景</strong></p>
<ul>
<li>连续的多次请求, 自动处理过程中产生的cookie</li>
</ul>
<p><strong>使用方法 注意: sesson对象发送get或post请求参数, 与reques模块发送请求的参数完全一致</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">session = requests.session() <span class="hljs-comment">#实例化session对象</span><br><br>response = session.get(url, headers, ...)<br><br>response = session.post(url, data, ...)<br></code></pre></td></tr></table></figure>
<br>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 re模块的使用(牢饭吃到饱)</title>
    <url>/reptile-re.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="学习re模块先学正则表达式"><a href="#学习re模块先学正则表达式" class="headerlink" title="学习re模块先学正则表达式"></a><a href="https://sdq3.gitee.io/reptile-RegEx.html">学习re模块先学正则表达式</a></h1><h1 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h1><p><strong>匹配字符串中所有的符号正则的内容</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re <br><br>sdq = re.findall(<span class="hljs-string">r&quot;\d+&quot;</span>,<span class="hljs-number">613</span>号实验品 亚亚,<span class="hljs-number">617</span>号实验品 团团,<span class="hljs-number">618</span>号实验品 红绿灯,<span class="hljs-number">619</span>号实验品 火焰球,<span class="hljs-number">624</span>号实验品 安琪,<br><span class="hljs-number">625</span>号实验品 鲁本,<span class="hljs-number">626</span>号实验品 史迪仔)<br><span class="hljs-built_in">print</span>(sdq)<br></code></pre></td></tr></table></figure>
<h1 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h1><p><strong>匹配字符串中所有的内容 [返回的是迭代器] 从迭代器中拿到内容需要.group</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re <br><br>sdq = re.findall(<span class="hljs-string">r&quot;\d+&quot;</span>,<span class="hljs-number">613</span>号实验品 亚亚,<span class="hljs-number">617</span>号实验品 团团,<span class="hljs-number">618</span>号实验品 红绿灯,<span class="hljs-number">619</span>号实验品 火焰球,<span class="hljs-number">624</span>号实验品 安琪,<br><span class="hljs-number">625</span>号实验品 鲁本,<span class="hljs-number">626</span>号实验品 史迪仔)<br><span class="hljs-keyword">for</span> i sdq:<br>    <span class="hljs-built_in">print</span>(sdq.group())<br></code></pre></td></tr></table></figure>
<h1 id="search"><a href="#search" class="headerlink" title="search"></a>search</h1><p><strong>返回第一个拿到的结果, 返回的结果是match对象, .group()是拿数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re <br><br>sdq = re.search(<span class="hljs-string">r&quot;\d+&quot;</span>,<span class="hljs-number">613</span>号实验品 亚亚,<span class="hljs-number">617</span>号实验品 团团,<span class="hljs-number">618</span>号实验品 红绿灯,<span class="hljs-number">619</span>号实验品 火焰球,<span class="hljs-number">624</span>号实验品 安琪,<br><span class="hljs-number">625</span>号实验品 鲁本,<span class="hljs-number">626</span>号实验品 史迪仔)<br><span class="hljs-built_in">print</span>(sdq.group())<br></code></pre></td></tr></table></figure>
<h1 id="match"><a href="#match" class="headerlink" title="match"></a>match</h1><p><strong>从头开始匹配, 前面没有就停止</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re <br><br>sdq = re.search(<span class="hljs-string">r&quot;\d+&quot;</span>,<span class="hljs-number">613</span>号实验品 亚亚,<span class="hljs-number">617</span>号实验品 团团,<span class="hljs-number">618</span>号实验品 红绿灯,<span class="hljs-number">619</span>号实验品 火焰球,<span class="hljs-number">624</span>号实验品 安琪,<br><span class="hljs-number">625</span>号实验品 鲁本,<span class="hljs-number">626</span>号实验品 史迪仔)<br><span class="hljs-built_in">print</span>(sdq.group())<br></code></pre></td></tr></table></figure>
<h1 id="预加载正则表达式"><a href="#预加载正则表达式" class="headerlink" title="预加载正则表达式"></a>预加载正则表达式</h1><p><strong>从头开始匹配, 前面没有就停止</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re <br><br>sdq = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;\d+&quot;</span>)<br><br>zdz = sdq.finditer(<span class="hljs-string">&quot;613号实验品 亚亚,617号实验品 团团,618号实验品 红绿灯,619号实验品 火焰球,624号实验品 安琪,</span><br><span class="hljs-number">625</span>号实验品 鲁本,<span class="hljs-number">626</span>号实验品 史迪仔<span class="hljs-string">&quot;)</span><br><br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> sdz<br>    <span class="hljs-built_in">print</span>(it.group())<br></code></pre></td></tr></table></figure>
<h1 id="预加载正则表达式-1"><a href="#预加载正则表达式-1" class="headerlink" title="预加载正则表达式"></a>预加载正则表达式</h1><p><strong>从头开始匹配, 前面没有就停止</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re <br><br>&lt;div class=&#x27;yy&#x27;&gt;&lt;span id=&quot;613&quot;&gt;亚亚&lt;/span&gt;&lt;/div&gt;<br><br>&lt;div class=&#x27;tt&#x27;&gt;&lt;span id=&quot;617&quot;&gt;团团&lt;/span&gt;&lt;/div&gt;<br><br>&lt;div class=&#x27;hld&#x27;&gt;&lt;span id=&quot;618&quot;&gt;红绿灯&lt;/span&gt;&lt;/div&gt;<br><br>&lt;div class=&#x27;tt&#x27;&gt;&lt;span id=&quot;619&quot;&gt;团团&lt;/span&gt;&lt;/div&gt;<br><br>&lt;div class=&#x27;lb&#x27;&gt;&lt;span id=&quot;625&quot;&gt;鲁本&lt;/span&gt;&lt;/div&gt;<br><br>&lt;div class=&#x27;sdq&#x27;&gt;&lt;span id=&quot;626&quot;&gt;史迪奇&lt;/span&gt;&lt;/div&gt;<br><span class="hljs-comment"># (?&lt;分组名字&gt;正则表达式)</span><br>obj = re.compile(r&quot;&lt;div class=&#x27;.*?&#x27;&gt;&lt;span id=&quot;(?&lt;id&gt;\d+)&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;&lt;/div&gt;, re.S)  # re.S: 让.能匹配换行符<br><br>result = obj.finditer(s)<br><br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> sdz<br>    <span class="hljs-built_in">print</span>(it.group())<br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 selenium自动化(牢饭吃到饱)</title>
    <url>/reptile-selenium.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">pip install selenium<br></code></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>代码调用webdriver操作浏览器</li>
<li>不同的浏览器使用各自不同的driver</li>
</ul>
<h2 id="根据实际环境选择浏览器-谷歌浏览器-火狐浏览器"><a href="#根据实际环境选择浏览器-谷歌浏览器-火狐浏览器" class="headerlink" title="根据实际环境选择浏览器 谷歌浏览器/火狐浏览器"></a>根据实际环境选择浏览器 谷歌浏览器/火狐浏览器</h2><ul>
<li>开发使用有头浏览器</li>
<li>部署使用无头浏览器</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 采用有头浏览器</span><br>browser = webdriver.Chrome()<br><br><span class="hljs-comment"># 要爬取的网页</span><br>browser.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br><br><span class="hljs-comment"># 在百度中搜索史迪奇</span><br>browser.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>).send_keys(<span class="hljs-string">&#x27;史迪奇&#x27;</span>)<br><br><span class="hljs-comment">#模拟点击</span><br>browser.find_element_by_id(<span class="hljs-string">&#x27;su&#x27;</span>).click<br><br><span class="hljs-comment"># 延时3秒</span><br>time.sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 一定要退出</span><br>browser.quit()<br></code></pre></td></tr></table></figure>
<h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 当前标签页浏览器渲染之后的网页源代码</span><br>browser.page_source<br><br><span class="hljs-comment"># 当前标签页的url</span><br>browser.current_url<br><br><span class="hljs-comment"># 关闭当前标签页面, 如果只有一个标签页面则关闭整个浏览器</span><br>browser.close()<br><br><span class="hljs-comment"># 关闭浏览器</span><br>browser.quit()<br><br><span class="hljs-comment"># 页面前进</span><br>browser.forward()<br><br><span class="hljs-comment"># 页面后退</span><br>browser.back()<br><br><span class="hljs-comment"># 页面截图</span><br>browser.screen_shot(img_name)<br></code></pre></td></tr></table></figure>
<h1 id="driver对象定位标签元素获取标签对象方法"><a href="#driver对象定位标签元素获取标签对象方法" class="headerlink" title="driver对象定位标签元素获取标签对象方法"></a>driver对象定位标签元素获取标签对象方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 返回一个元素</span><br>find_element_by_id<br><br><span class="hljs-comment"># 根据类名获取元素列表</span><br>find_element(s)_by_class_name<br><br><span class="hljs-comment"># 根据标签的name属性值返回包括标签对象元素的列表</span><br>find_element(s)_by_name<br><br><span class="hljs-comment"># 返回一个包含元素的列表</span><br>find_element(s)_by_xpath<br><br><span class="hljs-comment"># 根据连接文本获取元素列表</span><br>find_element(s)_by_link_text<br><br><span class="hljs-comment"># 根据标签名获取元素列表</span><br>find_element(s)_by_partial_link_text<br><br><span class="hljs-comment"># 根据css选择器来获取元素列表</span><br>find_element(s)_by_css<br></code></pre></td></tr></table></figure>
<p><strong>特别注意:</strong></p>
<ul>
<li>find_element和find_elements的区别: <ul>
<li>多了给s就返回列表, 没有s就返回匹配到的第一个标签对象</li>
<li>find_element匹配不到就抛出异常, find_elements匹配不到就返回空列表</li>
</ul>
</li>
</ul>
<ul>
<li>by_link_text和by_partial_link_text的区别: <ul>
<li>全部文本和包含某个文本</li>
</ul>
</li>
</ul>
<ul>
<li>find_element_by_xxx<ul>
<li>定位到则是一个对象</li>
<li>定位不到则是报错</li>
</ul>
</li>
</ul>
<ul>
<li>find_elements_by_xxx<ul>
<li>定位到则是一个含有元素的列表</li>
<li>定位不到则是空列表</li>
</ul>
</li>
</ul>
<h1 id="标签对象提取文本内容和属性值"><a href="#标签对象提取文本内容和属性值" class="headerlink" title="标签对象提取文本内容和属性值"></a>标签对象提取文本内容和属性值</h1><ul>
<li>获取文本 element.text<ul>
<li>通过定位获取的标签对象的 text 属性, 获取文本内容</li>
</ul>
</li>
</ul>
<ul>
<li>获取属性值 element.get_attribute(“属性名”)<ul>
<li>通过定位获取的标签对get_attribute 函数, 传入属性名, 来获取获取属性的值</li>
</ul>
</li>
</ul>
<p><strong>例子</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>url = <span class="hljs-string">&quot;https://sz.58.com/ershoufang/?PGTID=0d200001-0000-4f6f-f947-87e3a87719a1&amp;ClickID=1&quot;</span><br><br>browser = webdriver.Chrome()<br><br>browser.get(url)<br><br>el_list = browser.find_elements_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;__layout&quot;]/div/section/section[3]/section[1]/section[2]/div/a/div[2]/div[1]/div[1]/h3&#x27;</span>)<br><br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> el_list:<br>    <span class="hljs-built_in">print</span>(el.text,el.get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>))<br></code></pre></td></tr></table></figure>
<h1 id="标签页的切换"><a href="#标签页的切换" class="headerlink" title="标签页的切换"></a>标签页的切换</h1><ul>
<li><p>获取所有标签页的窗口句柄</p>
</li>
<li><p>利用窗口句柄字切换句柄指向的标签页</p>
<ul>
<li>这里的窗口句柄是指:<ul>
<li>指向标签页对象的标识</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 获取当前所有的标签页的句柄构成的列表</span><br>current_windows = browser.window_handles<br><br><span class="hljs-comment"># 根据标签页句柄列表索引下标进行切换</span><br>browser.switch_to.window(current_windous[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure>
<h1 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a>窗口切换</h1><p><strong>ifame是html中常用的一种技术, 即一个页面嵌套</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 操作frame外边的元素需要切换出去</span><br>Windows = browser.window_handles<br>browser.switch_to.window(windows[<span class="hljs-number">0</span>])<br>content = browser.find_element_by_class_name().text<br><span class="hljs-built_in">print</span>(content)<br>browser.quit()<br></code></pre></td></tr></table></figure>
<h1 id="cookies操作"><a href="#cookies操作" class="headerlink" title="cookies操作"></a>cookies操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>url = <span class="hljs-string">&quot;http://www.baidu.com/&quot;</span><br><br>browser = webdriver.Chrome()<br>browser.get(url)<br><br><span class="hljs-comment"># cookies = &#123;&#125;</span><br><span class="hljs-comment"># for data in browser.get_cookies():</span><br><span class="hljs-comment">#     cookies[data[&#x27;name&#x27;]] = data[&#x27;value&#x27;]</span><br><br><span class="hljs-comment"># 字典推导式</span><br>cookies  = &#123;data[<span class="hljs-string">&#x27;name&#x27;</span>] : data[<span class="hljs-string">&#x27;value&#x27;</span>]<span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> browser.get_cookies()&#125;<br><br><span class="hljs-built_in">print</span>(cookies)<br></code></pre></td></tr></table></figure>
<h1 id="关于js执行"><a href="#关于js执行" class="headerlink" title="关于js执行"></a>关于js执行</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>url = <span class="hljs-string">&quot;http://jn.lianjia.com/&quot;</span><br><br>browser = webdriver.Chrome()<br><br>browser.get(url)<br><br><span class="hljs-comment"># 滚动条拖动 x和y</span><br>js = <span class="hljs-string">&#x27;scrollTo(0,900)&#x27;</span><br><br><span class="hljs-comment"># 执行js</span><br>browser.execute_script(js)<br></code></pre></td></tr></table></figure>
<h1 id="无界面模式"><a href="#无界面模式" class="headerlink" title="无界面模式"></a>无界面模式</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 实例化配置对象</span><br>options = webdriver.ChromeOptions()<br><br><span class="hljs-comment"># 配置对象添加开启无界面模式的命令</span><br>options.add_argument(<span class="hljs-string">&quot;--headless&quot;</span>)<br><br><span class="hljs-comment"># 配置对象添加禁用gpu的命令</span><br>options.add_argument(<span class="hljs-string">&quot;--disable-gpu&quot;</span>)<br><br><span class="hljs-comment"># 实例化带有配置对象的browser对象</span><br>browser = webdriver.Chrome(chrome_options=options)<br></code></pre></td></tr></table></figure>
<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 实例化配置对象</span><br>options = webdriver.ChromeOptions()<br><br><span class="hljs-comment"># 配置对象添加使用代理ip的命令</span><br>options.add_argument(<span class="hljs-string">&quot;--proxy-server=http://202.20.16.82:9527&quot;</span>)<br><br><span class="hljs-comment"># 配置对象添加禁用gpu的命令</span><br>options.add_argument(<span class="hljs-string">&quot;--disable-gpu&quot;</span>)<br><br><span class="hljs-comment"># 实例化带有配置对象的browser对象</span><br>browser = webdriver.Chrome(<span class="hljs-string">&#x27;./chromedriver&#x27;</span>,chome_options=options)<br></code></pre></td></tr></table></figure>
<h1 id="替换user-agent-上网设备"><a href="#替换user-agent-上网设备" class="headerlink" title="替换user-agent(上网设备)"></a>替换user-agent(上网设备)</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 实例化配置对象</span><br>options = webdriver.ChromeOptions()<br><br><span class="hljs-comment"># 配置对象添加使用代理ip的命令</span><br>options.add_argument(<span class="hljs-string">&quot;--user-agent=Mozilla/5.0 HAHA&quot;</span>)<br><br><span class="hljs-comment"># 配置对象添加禁用gpu的命令</span><br>options.add_argument(<span class="hljs-string">&quot;--disable-gpu&quot;</span>)<br><br><span class="hljs-comment"># 实例化带有配置对象的browser对象</span><br>browser = webdriver.Chrome(<span class="hljs-string">&#x27;./chromedriver&#x27;</span>,chome_options=options)<br></code></pre></td></tr></table></figure>
<br>

<br>

<br>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 图像识别引擎(牢饭吃到饱)</title>
    <url>/reptile-tesseract.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="安装tesseract"><a href="#安装tesseract" class="headerlink" title="安装tesseract"></a>安装tesseract</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">windows exe安装配环境变量<br><br>MacOS   brew install tesseract<br><br>Linux   sudo apt-get install tesserac-ocr<br></code></pre></td></tr></table></figure>
<p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-comment"># PIL用于打开图片文件</span><br>pip install pillow<br><br><span class="hljs-comment"># pytesseract模块用于从图片中解析数据</span><br>pip install pytesseract<br></code></pre></td></tr></table></figure>
<h1 id="图片识别引擎的使用"><a href="#图片识别引擎的使用" class="headerlink" title="图片识别引擎的使用"></a>图片识别引擎的使用</h1><p><strong>通过pytesseract模块的image_to_string方法就能将打开图片的文件中的数据提取成字符串数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> pytesseract<br><br><span class="hljs-comment"># 打开一个图片文件</span><br>im = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;起名可以是中文.jpg&#x27;</span>)    //该图片的<span class="hljs-string">&quot;内容&quot;</span>非中文, 中文不识别<br><br>result = pytesseract.image_to_string(im)<br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>
<h1 id="图片识别引擎的使用扩展"><a href="#图片识别引擎的使用扩展" class="headerlink" title="图片识别引擎的使用扩展"></a>图片识别引擎的使用扩展</h1><p><strong><a href="https://www.cnblogs.com/cnlian/p/5765871.html">训练平台</a></strong></p>
<ul>
<li><p>其他OCR平台</p>
<ul>
<li><p><a href="https://azure.microsoft.com/zh-cn/services/cognitive-services/computer-vision">微软Azure图像识别</a></p>
</li>
<li><p><a href="http://aidemo.youdao.com/ocrdemo">有道智能文字识别</a></p>
</li>
<li><p><a href="https://www.aliyun.com/product/cdi">阿里云图文识别</a></p>
</li>
<li><p><a href="https://cloud.tencent.com/product/ocr">腾讯OCR文字识别</a></p>
</li>
</ul>
</li>
</ul>
<br>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 verify参数与CA证书(吃牢饭集合)</title>
    <url>/reptile-verify-CA.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 例如校园网</span><br>url = <span class="hljs-string">&quot;https://sam.huat.edu.cn:8443/selfservice/&quot;</span><br><br>response = requests.get(url, verify=<span class="hljs-literal">False</span>)<br><br><span class="hljs-built_in">print</span>(response.content)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 xpath(牢饭吃到饱)</title>
    <url>/reptile-xpath.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="xpath-是在XML文档中搜索内容的一门语言-可以用绝对定位和相对定位"><a href="#xpath-是在XML文档中搜索内容的一门语言-可以用绝对定位和相对定位" class="headerlink" title="xpath 是在XML文档中搜索内容的一门语言 可以用绝对定位和相对定位"></a>xpath 是在XML文档中搜索内容的一门语言 可以用绝对定位和相对定位</h1><p><strong>html是xml的一个子集</strong></p>
<h1 id="安装xpath"><a href="#安装xpath" class="headerlink" title="安装xpath"></a>安装xpath</h1><p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">pip install xpath<br></code></pre></td></tr></table></figure>
<h1 id="xpath语法"><a href="#xpath语法" class="headerlink" title="xpath语法"></a>xpath语法</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">主要分为<span class="hljs-number">3</span>大类<br><br>层级:   / 直接子集   跳级     斜杠隔开的是节点<br><br>属性:   @ 属性访问  如//link/@href 从选中的节点标签中获取指定的值<br><br>函数:   contains() 包含   text()文本 等...  如//title/text() 从开闭标签之间去文本内容<br></code></pre></td></tr></table></figure>
<br>

<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodename</td>
<td align="center">选中该元素</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">从根节点选取或者是元素和元素间的过度</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">从匹配选择的当前节点选择文档的节点而不用考虑它们的位置</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center">选取属性</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">选取当前节点</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">选取当前节点的父节点</td>
</tr>
<tr>
<td align="center">text()</td>
<td align="center">选取文本</td>
</tr>
</tbody></table>
<h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><p><strong>打开这个<a href="https://www.umei.cc/bizhitupian/weimeibizhi/">网址</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 导入xpath</span><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>xml = <span class="hljs-string">&quot;&quot;&quot;</span><br>&lt;book&gt;<br>    &lt;id&gt;???&lt;/id&gt;<br>    &lt;name&gt;星际宝贝&lt;/name&gt;<br>    &lt;price&gt;!!!&lt;/price&gt;<br>    &lt;nick&gt;实验品&lt;/nick&gt;<br>    &lt;author&gt;<br>        &lt;nick id=&quot;624&quot;&gt;安琪&lt;/nick&gt;<br>        &lt;nick id=&quot;625&quot;&gt;鲁本&lt;/nick&gt;<br>        &lt;nick id=&quot;626&quot;&gt;史迪奇&lt;/nick&gt;<br>        &lt;nick class=&quot;221&quot;&gt;小火花&lt;/nick&gt;<br>        &lt;div&gt;<br>            &lt;nick&gt;搞破坏&lt;/nick&gt;<br>        &lt;/div&gt;<br>        &lt;span&gt;<br>            &lt;nick&gt;吃饭&lt;/nick&gt;<br>        &lt;/span&gt;<br>    &lt;/author&gt;<br><br>    &lt;partner&gt;<br>        &lt;nick id=&quot;029&quot;&gt;跳棋&lt;/nick&gt;<br>        &lt;nick id=&quot;001&quot;&gt;史灵可&lt;/nick&gt;<br>    &lt;/partner&gt;<br>&lt;/book&gt;<br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>tree = etree.HTML(html.text)   <span class="hljs-comment">#加载爬取下来的源码</span><br><span class="hljs-comment"># tree = etree.parse(paese)   #加载文件</span><br><span class="hljs-comment"># tree = etree.XML(xml)       #加载XML</span><br><br>result = tree.xpath(<span class="hljs-string">&quot;/book//nick/text().extract&quot;</span>) <span class="hljs-comment">#text()就是文字 .extract就是提取</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>
<h1 id="HTML代码-保存sdq-html"><a href="#HTML代码-保存sdq-html" class="headerlink" title="HTML代码 保存sdq.html"></a>HTML代码 保存sdq.html</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.google.com&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.sogou.com&quot;</span>&gt;</span>搜狗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;</span>Stitch<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sdz&quot;</span>&gt;</span>史迪仔<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;Lilo&quot;</span>&gt;</span>莉萝<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;Nani&quot;</span>&gt;</span>兰莉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="py代码"><a href="#py代码" class="headerlink" title="py代码"></a>py代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>tree = etree.parse(<span class="hljs-string">&quot;sdq.html&quot;</span>)<br><span class="hljs-comment"># result = tree.xpath(&#x27;/html&#x27;)</span><br><span class="hljs-comment"># result = tree.xpath(&quot;/html/body/ul/li/a/text()&quot;)</span><br><span class="hljs-comment"># result = tree.xpath(&quot;/html/body/ul/li[1]/a/text()&quot;)  # xpath的顺序是从1开始数的, []表示索引</span><br><span class="hljs-comment"># result = tree.xpath(&quot;/html/body/ol/li/a[@href=&#x27;dapao&#x27;]/text()&quot;)  # [@xxx=xxx] 属性的筛选</span><br><span class="hljs-comment"># print(result)</span><br><br><span class="hljs-comment"># ol_li_list = tree.xpath(&quot;/html/body/ol/li&quot;)</span><br><br><span class="hljs-comment"># for li in ol_li_list:</span><br><span class="hljs-comment">#     # 从每一个li中提取到文字信息</span><br><span class="hljs-comment">#     result = li.xpath(&quot;./a/text()&quot;)  # 在li中继续去寻找 相对查找</span><br><span class="hljs-comment">#     print(result)</span><br><span class="hljs-comment">#     result2 = li.xpath(&quot;./a/@href&quot;)  # @属性意思是拿到属性值</span><br><span class="hljs-comment">#     print(result2)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># print(tree.xpath(&quot;/html/body/ul/li/a/@href&quot;))</span><br><span class="hljs-built_in">print</span>(tree.xpath(<span class="hljs-string">&#x27;/html/body/div[1]/text().extract&#x27;</span>))       <span class="hljs-comment">#text()就是文字 .extract就是提取</span><br><span class="hljs-built_in">print</span>(tree.xpath(<span class="hljs-string">&#x27;/html/body/ol/li/a/text().extract&#x27;</span>))      <span class="hljs-comment">#text()就是文字 .extract就是提取</span><br></code></pre></td></tr></table></figure>

<h1 id="选取特定节点的语法"><a href="#选取特定节点的语法" class="headerlink" title="选取特定节点的语法"></a>选取特定节点的语法</h1><h3 id="通过索引修饰节点"><a href="#通过索引修饰节点" class="headerlink" title="通过索引修饰节点"></a>通过索引修饰节点</h3><table>
<thead>
<tr>
<th align="left">路径表达式</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">//title[@lang=”eng”]</td>
<td align="left">选择lang属性值为eng的所有title元素</td>
</tr>
<tr>
<td align="left">/bookstore/book[1]</td>
<td align="left">选择属于bookstore子元素的第一个book元素</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()]</td>
<td align="left">选择属于bookstore子元素的最后一个book元素</td>
</tr>
<tr>
<td align="left">/bookstore/book[last()-1]</td>
<td align="left">选择属于bookstore子元素的倒数第二个book元素</td>
</tr>
<tr>
<td align="left">/bookstore/book[position()&gt;1]</td>
<td align="left">选择bookstore下面的book元素从第二个开始选择</td>
</tr>
<tr>
<td align="left">//book/title[text()=”sdq”]</td>
<td align="left">选择所有book下的title元素仅仅选择文本为sdq的title元素</td>
</tr>
<tr>
<td align="left">/bookstore/book[price&gt;33.33]</td>
<td align="left">选取bookstore元素中book元素的所有title元素且其中price元素的值必须大于33.33</td>
</tr>
</tbody></table>
<h3 id="通过属性值修饰节点"><a href="#通过属性值修饰节点" class="headerlink" title="通过属性值修饰节点"></a>通过属性值修饰节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">//div[@<span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;sdq&quot;</span>]/div/@<span class="hljs-built_in">id</span>     出现在[]中@是使用标签属性名和属性值修饰节点 出现在结尾的/@是取属性值<br></code></pre></td></tr></table></figure>
<h3 id="通过子节点的值修饰节点"><a href="#通过子节点的值修饰节点" class="headerlink" title="通过子节点的值修饰节点"></a>通过子节点的值修饰节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">//span[i&gt;<span class="hljs-number">333</span>]   i是标签<br>//div[span[<span class="hljs-number">2</span>]&gt;<span class="hljs-number">9.3</span>]   span是标签<br></code></pre></td></tr></table></figure>
<h3 id="通过包含修饰"><a href="#通过包含修饰" class="headerlink" title="通过包含修饰"></a>通过包含修饰</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">//div[contains(@<span class="hljs-built_in">id</span>,<span class="hljs-string">&quot;sd&quot;</span>)]       找出sdq通过属性名和大概的属性值 <br>//div[contains(text(),<span class="hljs-string">&quot;下一页&quot;</span>)]     通过文本内容包含有下一页的字  <br></code></pre></td></tr></table></figure>
<h1 id="选取未知节点的语法"><a href="#选取未知节点的语法" class="headerlink" title="选取未知节点的语法"></a>选取未知节点的语法</h1><table>
<thead>
<tr>
<th align="center">通配符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配任何元素节点</td>
</tr>
<tr>
<td align="center">@*</td>
<td align="center">匹配任何属性节点</td>
</tr>
<tr>
<td align="center">node()</td>
<td align="center">匹配任何类型的节点</td>
</tr>
<tr>
<td align="center">//*</td>
<td align="center">全部的标签</td>
</tr>
<tr>
<td align="center">//@*</td>
<td align="center">全部的属性</td>
</tr>
</tbody></table>
<h2 id="xpath复合使用语法"><a href="#xpath复合使用语法" class="headerlink" title="xpath复合使用语法"></a>xpath复合使用语法</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">//h2/a|//td/a<br></code></pre></td></tr></table></figure>
<h1 id="xpath方法返回列表的三种情况"><a href="#xpath方法返回列表的三种情况" class="headerlink" title="xpath方法返回列表的三种情况"></a>xpath方法返回列表的三种情况</h1><ul>
<li><p>返回空列表: 根据xpath语法规则字符串, 没有定位到任何元素</p>
</li>
<li><p>返回由字符串构成的列表: xpath字符串匹配的一定是文本内容或某属性的值</p>
</li>
<li><p>返回由Element对象构成的列表: xpath规则字符串匹配的是标签, 列表中的Element对象可以继续进行xpath</p>
</li>
</ul>
<br>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 代理(吃牢饭集合)</title>
    <url>/reptile-agent.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>
<h1 id="理解使用代理的过程"><a href="#理解使用代理的过程" class="headerlink" title="理解使用代理的过程"></a>理解使用代理的过程</h1><p><strong>代理ip是一个ip, 指向的是一个代理服务器</strong></p>
<p><strong>代理服务器能够帮我们向目标服务器转发请求</strong></p>
<div class="mermaid">
graph LR
A[浏览器]--request-->B[代理]
B[代理]--request-->C[Web Server]
C[Web Server]--response-->B[代理]
B[代理]--response-->A[浏览器]
</div>


<h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p><strong>为浏览器或客户端(发送请求的一方)转发请求的, 叫做正向代理</strong></p>
<ul>
<li>浏览器知道最终处理请求服务器的真实ip地址, 例如vpn</li>
</ul>

<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p><strong>不为浏览器或客户端(发送请求的一方)转发请求的, 而是为最终处理请求的服务器转发请求的,叫做反向代理</strong></p>
<ul>
<li>浏览器不知道服务器的真实ip地址, 例如nginx</li>
</ul>

<h1 id="怎么区分正向代理和反向代理"><a href="#怎么区分正向代理和反向代理" class="headerlink" title="怎么区分正向代理和反向代理"></a>怎么区分正向代理和反向代理</h1><p><strong>知不知道最终服务器的地址作为判断标准 知道正向 不知道反向</strong></p>
<h1 id="代理ip-代理服务器-的分类"><a href="#代理ip-代理服务器-的分类" class="headerlink" title="代理ip(代理服务器)的分类"></a>代理ip(代理服务器)的分类</h1><p><strong>透明代理(Transparent Proxy) 透明代理虽然直接隐藏你的ip地址, 但还是可以查看的到 目标服务器接收到的请求头如下:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">REMOTE_ADDR = Proxy IP<br><br>HTTP_VIA = Proxy IP<br><br>HTTP_X_FORWARDED_FOR = 你的IP<br></code></pre></td></tr></table></figure>
<p><strong>匿名代理(Anonymous Proxy) 使用匿名代理, 别人只能知道你用了代理, 无法知道你是谁 目标服务器接收到的请求头如下:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">REMOTE_ADDR = Proxy IP<br><br>HTTP_VIA = Proxy IP<br><br>HTTP_X_FORWARDED_FOR = Proxy IP<br></code></pre></td></tr></table></figure>
<p><strong>高匿代理(Elite Proxy或者High Anonymous Proxy) 使用高匿代理让别人无法发现你是在用代理, 所以是最好选择 效果最好 目标服务器接收到的请求头如下:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">REMOTE_ADDR = Proxy IP<br><br>HTTP_VIA = <span class="hljs-keyword">not</span> determined<br><br>HTTP_X_FORWARDED_FOR = <span class="hljs-keyword">not</span> determined<br></code></pre></td></tr></table></figure>
<h1 id="根据网站所使用的协议不同-需要使用相应协议的代理服务"><a href="#根据网站所使用的协议不同-需要使用相应协议的代理服务" class="headerlink" title="根据网站所使用的协议不同, 需要使用相应协议的代理服务"></a>根据网站所使用的协议不同, 需要使用相应协议的代理服务</h1><ul>
<li>http代理: 目标url为http协议</li>
<li>https代理: 目标url为https协议</li>
<li>socks隧道代理: 例如socks5
<ul>
<li>socks代理只是简单传递数据包, 不关心是何种应用协议(FTP, HTTP, HTTPS等)</li>
<li>socks代理比http和https代理耗时少</li>
<li>socks代理可以转发http请求和https请求</li>
</ul>
</li>
</ul>

<h1 id="proxies代理参数的使用"><a href="#proxies代理参数的使用" class="headerlink" title="proxies代理参数的使用"></a>proxies代理参数的使用</h1><p><strong>为了让服务器以为不是同一个客户端的请求, 防止频繁向一个域名发送请求被封ip, 所以要使用代理ip</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 主意: proxies字典中包含多个键值对, 发送请求时将按照url地址的协议来选择对应的代理ip</span><br><br><span class="hljs-comment"># proxies通常是用字典形式使用</span><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://106.14.5.128:80&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;http://106.14.5.130:80&quot;</span><br>&#125;<br><br><span class="hljs-comment"># reuests模块使用代理的用法:</span><br>response = requests.get(url, proxies=proxies)<br></code></pre></td></tr></table></figure>
<br>








































































<!-- <div id="dl-1" style="width:100%;height:500px"></div>

<script>
var chartDom = document.getElementById('dl-1');
var myChart = echarts.init(chartDom);
var option;

option = {
    title: {
        text: 'Graph 简单示例'
    },
    tooltip: {},
    animationDurationUpdate: 1500,
    animationEasingUpdate: 'quinticInOut',
    series: [
        {
            type: 'graph',
            layout: 'none',
            symbolSize: 50,
            roam: true,
            label: {
                show: true
            },
            edgeSymbol: ['circle', 'arrow'],
            edgeSymbolSize: [4, 10],
            edgeLabel: {
                fontSize: 20
            },
            data: [{
                name: '节点1',
                x: 300,
                y: 300
            }, {
                name: '节点2',
                x: 800,
                y: 300
            }, {
                name: '节点3',
                x: 550,
                y: 100
            }, {
                name: '节点4',
                x: 550,
                y: 500
            },
            {
                name: '节点5',
                x: 350,
                y: 500
            }


            ],
            links: [],
            links: [{
                source: 0,
                target: 1,
                symbolSize: [5, 20],
                label: {
                    show: true
                },
                lineStyle: {
                    width: 5,
                    curveness: 0.2
                }
            }, {
                source: '节点2',
                target: '节点1',
                label: {
                    show: true
                },
                lineStyle: {
                    curveness: 0.2
                }
            }, {
                source: '节点1',
                target: '节点3'
            }, {
                source: '节点2',
                target: '节点3'
            }, {
                source: '节点2',
                target: '节点4'
            }, {
                source: '节点1',
                target: '节点4'
            },{
                source: '节点5',
                target: '节点1'
            }

            ],
            lineStyle: {
                opacity: 0.9,
                width: 2,
                curveness: 0
            }
        }
    ]
};


          request         request
       ↗￣￣￣￣￣↘   ↗￣￣￣￣￣↘
    浏览器         代理              Web server
       ↖_________↙   ↖_________↙
         response        response


option && myChart.setOption(option);
</script> -->]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 反爬知识大讲解(抓到即坐牢)</title>
    <url>/reptile-prevent.html</url>
    <content><![CDATA[<p><strong>好好劳改重新做人</strong></p>
<a id="more"></a>

<h1 id="通常反爬的三个方向"><a href="#通常反爬的三个方向" class="headerlink" title="通常反爬的三个方向"></a>通常反爬的三个方向</h1><ul>
<li><p>基于身份识别进行反爬</p>
<ul>
<li><p>通过hraders中的User-Agent字段来反爬</p>
<ul>
<li><p>反爬原因: 爬虫默认情况下没有User-Agent, 而是使用模块默认设置</p>
</li>
<li><p>解决方法: 请求之前添加User-Agent即可或者使用User-Agent池来解决</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>通过referer字段或者是其他字段来反爬 </p>
<ul>
<li><p>反爬原因: 爬虫默认情况下不会带上referer字段, 服务器端通过判断请求头是否合法</p>
</li>
<li><p>解决方法: 添加referer字段</p>
</li>
</ul>
</li>
<li><p>通过cookie来反爬</p>
<ul>
<li><p>反爬原因: 通过检查cookie来查看发起请求的用户是否具备相应权限来进行反爬</p>
</li>
<li><p>解决方法: 进行模拟代理, 成功获取cookie之后在进行数据爬取</p>
</li>
</ul>
</li>
<li><p>通过从html静态文件中获取请求数据</p>
<ul>
<li><p>反爬原因: 通过增加获取请求参数的难度进行反爬</p>
</li>
<li><p>解决方法: 仔细分析抓到的每个包, 搞清楚请求之间的联系</p>
</li>
</ul>
</li>
<li><p>通过发生请求获取请求数据</p>
<ul>
<li><p>反爬原因: 通过增加获取请求参数的难度进行反爬</p>
</li>
<li><p>解决方法: 仔细分析抓到的每个包, 搞清楚请求之间的联系, 搞清楚请求参数的来源</p>
</li>
</ul>
</li>
<li><p>通过js生成请求参数</p>
<ul>
<li><p>反爬原因: js生成请求参数</p>
</li>
<li><p>解决方法: 分析js, 观察加密的实现过程, 通过js2py获取js的执行结果或者使用selenium来实现</p>
</li>
</ul>
</li>
<li><p>通过验证码来反爬</p>
<ul>
<li><p>反爬原因: 对方服务器通过弹出验证码来强制用户浏览行为</p>
</li>
<li><p>解决方法: 打码平台或者机器学习的方法识别验证码</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>基于爬虫行为进行反爬</p>
<ul>
<li><p>通过请求IP/账号单位时间内总请求数量进行反爬</p>
<ul>
<li><p>反爬原因: 正常浏览器请求网站, 速度不会太快, 同一个IP/账号大量请求了对方服务器, 有更大的可能性会被识别为爬虫</p>
</li>
<li><p>解决方法: 对应的通过购买高质量的IP的方式能够解决问题或者多账号</p>
</li>
</ul>
</li>
<li><p>通过同一账号/IP请求之间的间隔进行反爬</p>
<ul>
<li><p>反爬原因: 正常浏览器浏览网站请求之间的时间是随机的, 而爬虫前后两个请求之间间隔固定同时间隔较短</p>
</li>
<li><p>解决方法: 请求之间进行随机等待, 模拟真实用户操作, 在添加时间间隔后, 为了能够高速获取数据, 尽量使用代理池, 如果是账号则将账号请求之间设置随机睡眠</p>
</li>
</ul>
</li>
<li><p>通过对请求IP/账号每天请求次数设置阈值进行反爬</p>
<ul>
<li><p>反爬原因: 正常的浏览行为, 其一天次数是有限的, 通常超过某一个值, 服务器就会拒绝响应</p>
</li>
<li><p>解决方法: 对应的通过购买高质量的IP的方式能够解决问题或者多账号, 同时设置请求间随机休眠</p>
</li>
</ul>
</li>
<li><p>通过js实现跳转来反爬</p>
<ul>
<li><p>反爬原因: js实现页面跳转, 无法在源码中获取下一页的url</p>
</li>
<li><p>解决方法: 多次抓包获取跳转url, 分析规律</p>
</li>
</ul>
</li>
<li><p>通过蜜罐(陷阱)获取爬虫IP或代理IP</p>
<ul>
<li><p>反爬原因: 在爬虫获取链接进行请求的过程中, 爬虫会根据正则, xpath, css等方式进行后续链接的提取, 此时服务器端可以设置一个陷阱url, 会被提取规则获取, 但是正常用户无法获取, 这样就能有效的区分爬虫和正常用户</p>
</li>
<li><p>解决方法: 完成爬虫的编写之后, 使用代理批量爬取测试/仔细分析响应内容结构, 找出页面中存在的陷阱</p>
</li>
</ul>
</li>
<li><p>通过假数据反爬</p>
<ul>
<li><p>反爬原因: 向返回的响应中添加假数据库, 通常不会被正常用户看到</p>
</li>
<li><p>解决方法: 长期运行, 核对数据库中数据同实际数据的对应情况, 如果存在问题/仔细分析响应内容</p>
</li>
</ul>
</li>
<li><p>阻塞任务队列</p>
<ul>
<li><p>反爬原因: 通过生成大量垃圾url从而阻塞任务队列, 降低爬虫的实际工作效率</p>
</li>
<li><p>解决方法: 观察运行过程中请求响应状态/仔细分析源码获取垃圾url生成规则, 对url进行过滤</p>
</li>
</ul>
</li>
<li><p>阻塞网络IO</p>
<ul>
<li><p>反爬原因: 发送请求获取响应的过程实际上就是下载的过程, 在任务队列中混入一个大文件的url, 当爬虫在进行该请求是将会占用网络IO, 多线程下载会占用线程</p>
</li>
<li><p>解决方法: 观察运行过程中请求响应状态/多线程对请求线程计时/发送请求钱</p>
</li>
</ul>
</li>
<li><p>运维平台综合审计</p>
<ul>
<li><p>反爬原因: 通过运维平台进行综合管理, 通常采用复合型反爬策略, 多种手段同时使用</p>
</li>
<li><p>解决方法: 仔细分析, 长期运行测试目标网站, 检查数据采集速度多方面处理</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>基于数据加密进行反爬 </p>
<ul>
<li><p>自定义字体来实现反爬</p>
<ul>
<li><p>反爬原因: 使用自有字体文件</p>
</li>
<li><p>解决方法: 切换到手机版/解析字体文件进行翻译</p>
</li>
</ul>
</li>
<li><p>通过css来实现反爬</p>
<ul>
<li><p>反爬原因: 源码数据不为真正数据, 需要通过css位移才能产生真正数据</p>
</li>
<li><p>解决方法: 计算css的偏移</p>
</li>
</ul>
</li>
<li><p>通过js动态生成数据进行反爬</p>
<ul>
<li><p>反爬原因: 通过js动态生成</p>
</li>
<li><p>解决方法: 解析关键js, 获得数据生成流程, 模拟存储数据</p>
</li>
</ul>
</li>
<li><p>通过数据图片化实现反爬</p>
<ul>
<li><p>反爬原因: 通过数据图片化生成</p>
</li>
<li><p>解决方法: 通过使用图片解析引擎从图片解析数据</p>
</li>
</ul>
</li>
<li><p>通过编码格式进行反爬</p>
<ul>
<li><p>反爬原因: 不适合用默认编码格式, 在获取响应之后通常爬虫使用UTF-8格式进行解码, 此时解码结构将会是乱码或者报错</p>
</li>
<li><p>解决方法: 根据源码进行多格式解码或者真正的解码格式</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 报文(吃牢饭集合)</title>
    <url>/reptile-message.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="查看报文"><a href="#查看报文" class="headerlink" title="查看报文"></a>查看报文</h1><p><strong>点击Request Headers旁边的view parsed</strong></p>
<p><strong>注意: view parsed没点之前其实是给你优化过的</strong></p>
<h1 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h1><table>
<thead>
<tr>
<th>GET</th>
<th>HTTP</th>
<th>1.1</th>
<th>Host</th>
</tr>
</thead>
<tbody><tr>
<td>方法</td>
<td>路径</td>
<td>协议版本</td>
<td>发送请求的域名</td>
</tr>
</tbody></table>
<ul>
<li>Content-Type</li>
<li>Host (主机和端口号)</li>
<li>Connection (链接类型/常链接)</li>
<li>UPgrade-Insecure-Requests (升级为HTTPS请求)</li>
<li>User-Agent (用户代理 提供系统信息和浏览器信息)</li>
<li>Referer (页面跳转处)</li>
<li>Cookie (Cookie数据非常重要,)</li>
<li>Authorization (表示HTTP协议中需要认证资源的认证信息, 例如用于jwt认证)</li>
</ul>

<p><strong>请求头表格形式</strong></p>
<table>
<thead>
<tr>
<th align="center">特别关注</th>
<th align="center">以下几个请求头</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Host</td>
<td align="center">域名</td>
</tr>
<tr>
<td align="center">Connection</td>
<td align="center">常链接</td>
</tr>
<tr>
<td align="center">UPgrade-Insecure-Requests</td>
<td align="center">升级为HTTPS请求</td>
</tr>
<tr>
<td align="center">User-Agent</td>
<td align="center">用户代理</td>
</tr>
<tr>
<td align="center">Refrer</td>
<td align="center">页面跳转处, 防盗链</td>
</tr>
<tr>
<td align="center">Cookie</td>
<td align="center">保持状态, 用于跳过账号密码</td>
</tr>
</tbody></table>
<p><strong>响应头表格形式</strong></p>
<table>
<thead>
<tr>
<th align="center">特别关注</th>
<th align="center">以下几个请求头</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HTTP/1.1</td>
<td align="center">协议</td>
</tr>
<tr>
<td align="center">200</td>
<td align="center">状态码</td>
</tr>
<tr>
<td align="center">Set-Cookie</td>
<td align="center">cookie到用户浏览器的缓存非常重要用于跳过账号密码</td>
</tr>
</tbody></table>
<br>


]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 数据提取(吃牢饭集合)</title>
    <url>/reptile-Extraction.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="响应内容分类"><a href="#响应内容分类" class="headerlink" title="响应内容分类"></a>响应内容分类</h1><h2 id="结构化的响应内容"><a href="#结构化的响应内容" class="headerlink" title="结构化的响应内容"></a>结构化的响应内容</h2><h3 id="json字符串-高频出现"><a href="#json字符串-高频出现" class="headerlink" title="json字符串(高频出现)"></a>json字符串(高频出现)</h3><ul>
<li>可以使用re,json等模块来提取特定数据</li>
</ul>
<h3 id="xml数据-低频出现"><a href="#xml数据-低频出现" class="headerlink" title="xml数据(低频出现)"></a>xml数据(低频出现)</h3><ul>
<li>可以使用re,lxml等模块来提取特定数据</li>
</ul>
<h2 id="非结构化的响应内容"><a href="#非结构化的响应内容" class="headerlink" title="非结构化的响应内容"></a>非结构化的响应内容</h2><h3 id="html字符串"><a href="#html字符串" class="headerlink" title="html字符串"></a>html字符串</h3><ul>
<li>可以使用re,lxml等模块来提取特定数据</li>
</ul>
<h1 id="xml与html区别"><a href="#xml与html区别" class="headerlink" title="xml与html区别"></a>xml与html区别</h1><table>
<thead>
<tr>
<th align="center">数据格式</th>
<th align="center">描述</th>
<th align="center">设计目标</th>
<th align="center">个人总结</th>
</tr>
</thead>
<tbody><tr>
<td align="center">XML</td>
<td align="center">Extensible Markup Language(可扩展标记语言)</td>
<td align="center">被设计为传输和存储数据, 其焦点是数据的内容</td>
<td align="center">xml传输和储存数据</td>
</tr>
<tr>
<td align="center">HTML</td>
<td align="center">HyperText Markup Language(超文本标记语言)</td>
<td align="center">显示数据已经然后更好显示数据</td>
<td align="center">html展示数据</td>
</tr>
</tbody></table>
<h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><ul>
<li><p>可扩展标记语言</p>
</li>
<li><p>为了传输和储存数据, 侧重点是在于数据内容本身</p>
</li>
<li><p>xml是一种可扩展标记语言, 样子和html很像, 功能更专注对传输和储存数据</p>
</li>
</ul>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><ul>
<li><p>超文本记语言</p>
</li>
<li><p>为了更好的显示数据, 侧重点是为显示</p>
</li>
<li><p>html是显示效果更好, 用于展示数据</p>
</li>
</ul>
<h1 id="常用的数据解析方法"><a href="#常用的数据解析方法" class="headerlink" title="常用的数据解析方法"></a>常用的数据解析方法</h1><!-- <iframe src="/html/爬虫-数据提取.html"></iframe> -->



<br>

<br>

<br>

<br>

<br>

<br>

<h1 id="jsonpath模块"><a href="#jsonpath模块" class="headerlink" title="jsonpath模块"></a>jsonpath模块</h1><p><a href="/reptile-jsonpath.html">详细说明</a></p>
<h1 id="lxml模块"><a href="#lxml模块" class="headerlink" title="lxml模块"></a>lxml模块</h1><p><a href="/reptile-bs4-lxml.html">详细说明</a></p>
<h1 id="xpath模"><a href="#xpath模" class="headerlink" title="xpath模"></a>xpath模</h1><p><a href="/reptile-xpath.html">详细说明</a></p>
<br>


<!-- ~~~ Python
                                            /   json模块
                                  /   json |
                                 /          \   jsonpath模块
                 数据化数据      /
             /￣￣￣￣￣￣￣￣￣￣\
            /                     \         /   re模块    正则语法
           /                       \  xml  |
          /                                 \   lxml模块  xpath语法
         /                                 
  数据解析
         \ 
          \                                 /   re模块    正则语法         
           \                               /    lxml模块  xpath语法
            \                             /
             \_____________________ html |      beautifulsoup  xpath语法 正则语法 css选择器
                 非结构化数据              \     
                                           \
                                            \   pyquery   css选择器
~~~ -->]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 概念(牢饭吃到饱)</title>
    <url>/reptile-concept.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h1><p><strong>其实就是在服务器那边直接把数据和HTMl整合在一起, 统一返回浏览器, 其实源代码就是网站的基本面貌, 之所以有可视化界面都是浏览器的功劳</strong></p>
<h1 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h1><p><strong>第一次只是请求HTMl骨架, 第二次请求拿到数据, 然后在你的浏览器中组合变形</strong></p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><strong>HTTP协议传输的就是网站源代码</strong></p>
<h1 id="HTTP协议把一条消息分为三大块内容"><a href="#HTTP协议把一条消息分为三大块内容" class="headerlink" title="HTTP协议把一条消息分为三大块内容"></a>HTTP协议把一条消息分为三大块内容</h1><h1>请求: </h1>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">请求行 -&gt; 请求方式(get/post) 请求url地址 协议<br><br>请求头 -&gt; 放一些服务器要使用的附加信息<br><br>请求体 -&gt; 一般放一些请求参数<br></code></pre></td></tr></table></figure>
<h1>响应: </h1>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">状态行 -&gt;  协议 状态码 例如:<span class="hljs-number">404</span><br><br>响应头 -&gt; 放一些客户端要使用的附加信息<br><br>响应体 -&gt; 服务器返回的真正客户端要使用的内容 例如:HTML, json等等<br></code></pre></td></tr></table></figure>
<h1 id="请求头中最常见的一些重要内容"><a href="#请求头中最常见的一些重要内容" class="headerlink" title="请求头中最常见的一些重要内容"></a>请求头中最常见的一些重要内容</h1><p><strong>User-Agent: 请求载体的身份标识(用啥发送的请求)</strong></p>
<p><strong>Referer: 防盗链(这次请求是从哪个页面来的? 防爬会用到)</strong></p>
<p><strong>cookie: 本地字符串数据信息(用户登陆信息, 防爬的token)</strong></p>
<h1 id="响应头中一些重要的内容"><a href="#响应头中一些重要的内容" class="headerlink" title="响应头中一些重要的内容"></a>响应头中一些重要的内容</h1><p><strong>cookie: 本地字符串数据信息(用户登陆信息, 防爬的token)</strong></p>
<p><strong>各种神奇的莫名其妙的字符串(一般都是yoken字样,防止各种攻击和防爬)</strong></p>
<h1 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h1><p><strong>GET: 显示提交</strong></p>
<p>查询用的多</p>
<p><strong>POST: 隐示提交</strong></p>
<p>增加,修改,上传服务器里面的数据</p>
<h1 id="数据解析的三种方式"><a href="#数据解析的三种方式" class="headerlink" title="数据解析的三种方式"></a>数据解析的三种方式</h1><p><strong><a href="/reptile-re.html">re解析</a></strong></p>
<p><strong><a href="/reptile-bs4-lxml.html">bs4解析</a></strong></p>
<p><strong><a href="/reptile-xpath.html">xpath解析</a></strong></p>
<br>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 正则表达式(牢饭吃到饱)</title>
    <url>/reptile-RegEx.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="正则表达式的优点和缺点"><a href="#正则表达式的优点和缺点" class="headerlink" title="正则表达式的优点和缺点"></a>正则表达式的优点和缺点</h1><p><strong>优点: 速度快, 效率高, 准确度高</strong></p>
<p><strong>缺点: 优点老手福利, 新手? ? ?</strong></p>
<h1 id="正则表达式的概念"><a href="#正则表达式的概念" class="headerlink" title="正则表达式的概念"></a>正则表达式的概念</h1><p><strong>使用元字符进行排列组合用来匹配字符串</strong></p>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p><strong>常用元字符</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">.          <span class="hljs-comment"># 匹配除换行符以外的任意字符</span><br>    <br>\w         <span class="hljs-comment"># 匹配字母或数字或下划线</span><br>    <br>\s         <span class="hljs-comment"># 匹配任意的空白符</span><br>    <br>\d         <span class="hljs-comment"># 匹配数字</span><br>    <br>\n         <span class="hljs-comment"># 匹配一个换行符</span><br>    <br>\t         <span class="hljs-comment"># 匹配一个制表符</span><br>    <br>^          <span class="hljs-comment"># 匹配字符串的开始</span><br>    <br>$          <span class="hljs-comment"># 匹配字符串的结尾</span><br>    <br>\w         <span class="hljs-comment"># 匹配非字母或数字或下划线</span><br>    <br>\D         <span class="hljs-comment"># 匹配非数字</span><br>    <br>\S         <span class="hljs-comment"># 匹配非空白符</span><br>    <br>a|b        <span class="hljs-comment"># 匹配字符a或字符b</span><br>    <br>()         <span class="hljs-comment"># 匹配括号内的表达式, 也表示一个组</span><br>    <br>[]         <span class="hljs-comment"># 匹配字符中的字符    例如 [a-zA-z0-9]</span><br>    <br>[^]        <span class="hljs-comment"># 匹配除了字符组中字符的所有字符</span><br></code></pre></td></tr></table></figure>
<p><strong>量词: 控制前面的元字符出现的次数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">*          <span class="hljs-comment"># 重复零次或更多次 </span><br><br>+          <span class="hljs-comment"># 重复一次或更多次</span><br><br>?          # 重复零次或一次  说白了就是出现或者不出现<br><br>&#123;n&#125;        <span class="hljs-comment"># 重复n次</span><br><br>&#123;n,&#125;       <span class="hljs-comment"># 重复n次或更多次</span><br><br>&#123;n,m&#125;      <span class="hljs-comment"># 重复n到m次</span><br></code></pre></td></tr></table></figure>
<p><strong>贪婪匹配和惰性匹配</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python">.*          <span class="hljs-comment"># 贪婪匹配      说白了就是尽可能多的匹配</span><br><br>.*?         # 惰性匹配      说白了就是尽可能少的匹配<br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 比Python功能更加强大的node.js简介(牢饭吃到饱)未完待续</title>
    <url>/reptile-python%E2%80%94node.js.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="node-js爬虫的详细步骤"><a href="#node-js爬虫的详细步骤" class="headerlink" title="node.js爬虫的详细步骤"></a>node.js爬虫的详细步骤</h1><h1 id="第一步-发送http请求-获取整个网页的内容"><a href="#第一步-发送http请求-获取整个网页的内容" class="headerlink" title="第一步 发送http请求, 获取整个网页的内容"></a>第一步 发送http请求, 获取整个网页的内容</h1><h1 id="第二步-通过cheerio对爬取的网页内容进行分析"><a href="#第二步-通过cheerio对爬取的网页内容进行分析" class="headerlink" title="第二步 通过cheerio对爬取的网页内容进行分析"></a>第二步 通过cheerio对爬取的网页内容进行分析</h1><h1 id="第三步-提取关键信息"><a href="#第三步-提取关键信息" class="headerlink" title="第三步 提取关键信息"></a>第三步 提取关键信息</h1><h1 id="使用download库进行批量下载"><a href="#使用download库进行批量下载" class="headerlink" title="使用download库进行批量下载"></a>使用download库进行批量下载</h1><br>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 爬小说(牢饭吃到饱)未完待续</title>
    <url>/reptile-novel.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="爬小说的详细步骤"><a href="#爬小说的详细步骤" class="headerlink" title="爬小说的详细步骤"></a>爬小说的详细步骤</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> bs4.element <span class="hljs-keyword">import</span> PageElement<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><span class="hljs-comment"># 要爬的链接</span><br>a = <span class="hljs-string">&quot;12739599504227601#Catalog&quot;</span><br>url = <span class="hljs-string">&quot;https://www.readnovel.com/book/&quot;</span> + a<br><br><span class="hljs-comment"># 请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36&quot;</span><br>&#125;<br><span class="hljs-comment"># .decode()指定编码</span><br>paqv = requests.get(url, headers=headers ).content.decode()<br>sdq1 = etree.HTML(paqv)<br>hrefs = sdq1.xpath(<span class="hljs-string">&#x27;//div[@class = &quot;volume&quot;]/ul/li/a/@href&#x27;</span>)<br><span class="hljs-keyword">for</span> href <span class="hljs-keyword">in</span> hrefs:<br>    it2 = <span class="hljs-string">&#x27;https:&#x27;</span>+href<br>    resp = requests.get(it2).content.decode()<br>    sdq2 = etree.HTML(resp)<br>    bcsj = sdq2.xpath(<span class="hljs-string">&#x27;//div[@class = &quot;ywskythunderfont&quot;]/p/text()&#x27;</span>)<br>    <span class="hljs-comment"># 把爬下来的数据保存</span><br>    <span class="hljs-keyword">for</span> neirong <span class="hljs-keyword">in</span> bcsj:<br>        s =<span class="hljs-string">&#x27;&#x27;</span>.join(neirong.split())        <br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(s+<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure>
<br>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 爬猫猫图片(牢饭吃到饱)</title>
    <url>/reptile-mao.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><p><strong>打开这个<a href="http://www.ichong123.com/maomao">网址</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 所有用到的库</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 要爬的链接</span><br>url = <span class="hljs-string">&quot;http://www.ichong123.com/maomao&quot;</span><br><br><span class="hljs-comment"># 请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36&quot;</span><br>&#125;<br><br>paqv = requests.get( url=url, headers=headers )<br><br><span class="hljs-comment"># 根据网站的编码来换</span><br>paqv.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><br><span class="hljs-comment"># xiazai = paqv.text</span><br><br><span class="hljs-comment"># print(xiazai)</span><br><br><span class="hljs-comment"># 正则表达式 re.S单行匹配(正则解析比较多) re.M多行匹配()</span><br>sdq1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;div class=&quot;pet_s&quot;&gt;.*?&lt;img src=(?P&lt;mao&gt;.*?)width&#x27;</span>,re.S)<br>paq = sdq1.finditer(paqv.text)<br>a = <span class="hljs-number">1</span><br><span class="hljs-comment"># 用循环来依次下载</span><br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> paq:<br>    time.sleep(<span class="hljs-number">3</span>)  <span class="hljs-comment">#休眠3秒</span><br>    ul = it.group(<span class="hljs-string">&#x27;mao&#x27;</span>)<br>    ul2 = <span class="hljs-built_in">eval</span>(ul)  <span class="hljs-comment">#eval()函数用来执行一个字符串表达式, 并返回表达式的值</span><br>    sdz = requests.get(ul2)<br><br>    <span class="hljs-comment"># 图片文件保存 选择路径</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;E:/百度文档/mao/<span class="hljs-subst">&#123;a&#125;</span>.jpg&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(sdz.content)<br>        f.close()<br>        a+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猫猫下载完了&quot;</span>)<br></code></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 状态码(吃牢饭集合)</title>
    <url>/reptile-state.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><p><strong>常见的状态码 (了解就行)</strong></p>
<ul>
<li>200: 成功</li>
<li>302: 跳转, 新的url在响应的Location头中给出</li>
<li>303: 浏览器对于POST的响应进行重新定向至新的url</li>
<li>307: 浏览器对应GET响应进行重新定向至新的url</li>
<li>403: 资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限)</li>
<li>404: 找不到资源</li>
<li>500: 服务器内部错误</li>
<li>503: 服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码</li>
</ul>

<p><strong>常见状态码表格形式 (了解就行)</strong></p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>代表意思</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>成功</td>
<td></td>
<td></td>
</tr>
<tr>
<td>302</td>
<td>跳转, 新的url在响应的Location头中给出</td>
<td></td>
<td></td>
</tr>
<tr>
<td>303</td>
<td>浏览器对于POST的响应进行重新定向至新的url</td>
<td></td>
<td></td>
</tr>
<tr>
<td>307</td>
<td>浏览器对应GET响应进行重新定向至新的url</td>
<td></td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>找不到资源</td>
<td></td>
<td></td>
</tr>
<tr>
<td>500</td>
<td>服务器内部错误</td>
<td></td>
<td></td>
</tr>
<tr>
<td>503</td>
<td>服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>总结 所有的状态码都不可信, 一切以是否从抓包得到的响应中获得到的数据为准 network中抓包得到的源码才是判断依据, elements中的源码是渲染之后的源码</strong></p>
<table>
<thead>
<tr>
<th align="left">请求过程</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">浏览器</td>
<td align="left">发送所有请求, 进行渲染</td>
</tr>
<tr>
<td align="left">爬虫</td>
<td align="left">发送所有请求, 不会渲染</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">请页面可分为</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">骨骼文件</td>
<td align="left">html静态文件</td>
</tr>
<tr>
<td align="left">肌肉文件</td>
<td align="left">js/ajax请求</td>
</tr>
<tr>
<td align="left">皮肤文件</td>
<td align="left">css/font/图片等</td>
</tr>
</tbody></table>
<p><strong>抓包过程: 根据发送请求的流程分别在 骨骼 / 肌肉 / 皮肤 响应中查找数据</strong></p>
<br>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 请求头和响应头(吃牢饭集合)</title>
    <url>/reptile-header.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h1><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p><strong>301是永久重定向, 之后的请求中客户端应该使用新的URI(即, 可以被浏览器缓存), 对于POST/PUT/DELETE请求 客户端不应该自动的重定向</strong></p>
<p><strong>302是由于未知原因重定向, 之后的请求中客户端不应该用新的URI, 对于POST/PUT/DELETE请求 客户端不应该自动重定向</strong></p>
<p><strong>303是由于未知原因重定向, 之后的请求中客户端不应该用新的URI, 对于POST/PUT/DELETE请求 客户端应该使用GET请求来替代</strong></p>
<p><strong>307是临时重定向, 之后资源可能会回到这个位置, 之后的请求中客户端应该使用旧的URI, 对于POST/PUT/DELETE请求 客户端不应该自动重定向</strong></p>
<br>

<!-- # 查看报文

**点击Request Headers旁边的view parsed**

**注意: view parsed没点之前其实是给你优化过的**

# 报文格式

GET|HTTP|1.1|Host|
-|-|-|-|
方法 | 路径 | 协议版本 |发送请求的域名

<ul>
<li>Content-Type</li>
<li>Host (主机和端口号)</li>
<li>Connection (链接类型/常链接)</li>
<li>UPgrade-Insecure-Requests (升级为HTTPS请求)</li>
<li>User-Agent (用户代理 提供系统信息和浏览器信息)</li>
<li>Referer (页面跳转处)</li>
<li>Cookie (Cookie数据非常重要,)</li>
<li>Authorization (表示HTTP协议中需要认证资源的认证信息, 例如用于jwt认证)</li>
</ul>

**请求头表格形式**

 特别关注|以下几个请求头|| |
-|-|-|-|
Host | 域名 |  |
Connection | 常链接 |  |
UPgrade-Insecure-Requests | 升级为HTTPS请求 |  |
User-Agent | 用户代理|  |
Refrer | 页面跳转处, 防盗链 |  |
Cookie | 保持状态, 用于跳过账号密码 |  |

**响应头表格形式**

 特别关注|以下几个请求头|| |
-|-|-|-|
HTTP/1.1 | 协议 |  |
200 | 状态码 |  |
Set-Cookie | cookie到用户浏览器的缓存非常重要用于跳过账号密码 |  |

# 状态码

**常见的状态码 (了解就行)**

<ul>
<li>200: 成功</li>
<li>302: 跳转, 新的url在响应的Location头中给出</li>
<li>303: 浏览器对于POST的响应进行重新定向至新的url</li>
<li>307: 浏览器对应GET响应进行重新定向至新的url</li>
<li>403: 资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限)</li>
<li>404: 找不到资源</li>
<li>500: 服务器内部错误</li>
<li>503: 服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码</li>
</ul>

**常见状态码表格形式 (了解就行)**

 状态码|代表意思|| |
-|-|-|-|
200 | 成功 |  |
302 | 跳转, 新的url在响应的Location头中给出 |  |
303 | 浏览器对于POST的响应进行重新定向至新的url |  |
307 | 浏览器对应GET响应进行重新定向至新的url |  |
403 | 资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限) |  |
404 | 找不到资源 |  |
500 | 服务器内部错误 |  |
503 | 服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码 |  |

**总结 所有的状态码都不可信, 一切以是否从抓包得到的响应中获得到的数据为准 network中抓包得到的源码才是判断依据, elements中的源码是渲染之后的源码**

 请求过程||
-|-|
 浏览器| 发送所有请求, 进行渲染 |  
  爬虫| 发送所有请求, 不会渲染 |  


 请页面可分为||
-|-|
骨骼文件| html静态文件 |  
肌肉文件| js/ajax请求 | 
皮肤文件| css/font/图片等 |  

**抓包过程: 根据发送请求的流程分别在 骨骼 / 肌肉 / 皮肤 响应中查找数据**


 -->
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 访问百度翻译(牢饭吃到饱)</title>
    <url>/reptile-Baidutranslate.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="导入requests"><a href="#导入requests" class="headerlink" title="导入requests"></a>导入requests</h1><!--more-->
<p><strong>打开cmd输入以下代码</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell">pip install requests<br></code></pre></td></tr></table></figure>
<h1 id="百度翻译案例"><a href="#百度翻译案例" class="headerlink" title="百度翻译案例"></a>百度翻译案例</h1><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://fanyi.baidu.com/sug&quot;</span><br><br>s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要翻译的英文单词&quot;</span>)<br><br>dat = &#123;<br>        <span class="hljs-string">&quot;kw&quot;</span>:s<br>    &#125;<br><br>tou = &#123;<br>    <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Mobile Safari/537.36&quot;</span><br>&#125;<br><br>pachon = requests.post(url,headers=tou,data=dat)<br><br><span class="hljs-built_in">print</span>(pachon)<br><br><span class="hljs-built_in">print</span>(pachon.json())<br><br>pachon.close()  <span class="hljs-comment">#断开/关闭连接, 一定要断开</span><br></code></pre></td></tr></table></figure>
<br>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>电脑刷BIOS(保姆级教程)</title>
    <url>/BOIS.html</url>
    <content><![CDATA[<p><strong>电脑刷BIOS简单到不能再简单</strong></p>
<a id="more"></a>
<h1 id="刷BIOS需谨慎-不然会想我一样花100快去重新烧录"><a href="#刷BIOS需谨慎-不然会想我一样花100快去重新烧录" class="headerlink" title="刷BIOS需谨慎, 不然会想我一样花100快去重新烧录"></a>刷BIOS需谨慎, 不然会想我一样花100快去重新烧录</h1><h3 id="首先下载Windows刷BIOS文件"><a href="#首先下载Windows刷BIOS文件" class="headerlink" title="首先下载Windows刷BIOS文件"></a>首先下载<a href="https://wwr.lanzoui.com/iLf2Is7cohi">Windows刷BIOS文件</a></h3><ul>
<li><p>密码:sdq3</p>
</li>
<li><p>把文件拖入C盘根目录解压</p>
</li>
</ul>
<p><strong>以管理员的方式打开</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> C:/刷BIOS<br></code></pre></td></tr></table></figure>
<p><strong>备份命令 支持很多格式的备份</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">fptw64<span class="hljs-selector-class">.exe</span> -d 备份<span class="hljs-selector-class">.bin</span> -bios<br></code></pre></td></tr></table></figure>
<p><strong>写入命令 支持很多格式的写入</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">fptw64<span class="hljs-selector-class">.exe</span> -f 写入<span class="hljs-selector-class">.bin</span> -bios<br></code></pre></td></tr></table></figure>
<h1 id="dos刷BIOS"><a href="#dos刷BIOS" class="headerlink" title="dos刷BIOS"></a>dos刷BIOS</h1><h3 id="下载微PE把要刷写的BIOS文件U盘"><a href="#下载微PE把要刷写的BIOS文件U盘" class="headerlink" title="下载微PE把要刷写的BIOS文件U盘"></a>下载<a href="https://download.csdn.net/download/qq_44948696/20695927">微PE</a>把要刷写的BIOS文件U盘</h3><p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e39da3e55.jpg"></p>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e39d9ac9c.jpg"></p>
<h3 id="运行MaxDos工具箱"><a href="#运行MaxDos工具箱" class="headerlink" title="运行MaxDos工具箱"></a>运行MaxDos工具箱</h3><p><strong>查看</strong></p>
<figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">dir</span><br></code></pre></td></tr></table></figure>
<p><strong>切换分区</strong></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">A:</span><br><br><span class="hljs-symbol">B:</span><br></code></pre></td></tr></table></figure>
<p><strong>刷新进EC目录下EC</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ECFlash</span><br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e39dc4759.jpg"></p>
<p><strong>进BIOS目录下刷写BIOS</strong></p>
<p><strong>快</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">meset</span> <br></code></pre></td></tr></table></figure>
<p><strong>慢</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flashme</span><br></code></pre></td></tr></table></figure>
<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e39d99735.jpg"></p>
<h3 id="神州SL7D3-神州SL7S3-神州SL7S4用的BIOS"><a href="#神州SL7D3-神州SL7S3-神州SL7S4用的BIOS" class="headerlink" title="神州SL7D3 神州SL7S3 神州SL7S4用的BIOS"></a>神州SL7D3 神州SL7S3 神州SL7S4<a href="https://wwr.lanzoui.com/iFiRVs7ehij">用的BIOS</a></h3><br>





]]></content>
  </entry>
  <entry>
    <title>百度搜索技巧</title>
    <url>/baidu.html</url>
    <content><![CDATA[<p><strong>技巧</strong></p>
<a id="more"></a>

<h1 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h1><p>搜索关键字加” “就行了 用法: “史迪奇”</p>
<h1 id="消除无关性"><a href="#消除无关性" class="headerlink" title="消除无关性"></a>消除无关性</h1><p>搜索关键字加(-)就行了 用法: (-史迪奇)</p>
<h1 id="并行搜索"><a href="#并行搜索" class="headerlink" title="并行搜索"></a>并行搜索</h1><p>搜索关键字加(|)就行了 用法: (史迪奇|史迪仔)</p>
<h1 id="搜索范围限定在网页标题中"><a href="#搜索范围限定在网页标题中" class="headerlink" title="搜索范围限定在网页标题中"></a>搜索范围限定在网页标题中</h1><p>搜索关键字加intitle:就行了 用法: intitle:史迪奇</p>
<h1 id="搜索范围限定在特定站点中"><a href="#搜索范围限定在特定站点中" class="headerlink" title="搜索范围限定在特定站点中"></a>搜索范围限定在特定站点中</h1><p>知道站点的前提下 site:站点域名就行了不要带http: 用法: intitle:<a href="https://sdq3.gitee.io/baidu.html">https://sdq3.gitee.io/baidu.html</a></p>
<h1 id="搜索范围限定在url链接"><a href="#搜索范围限定在url链接" class="headerlink" title="搜索范围限定在url链接"></a>搜索范围限定在url链接</h1><p>搜索关键字加inurl: 就行了 用法:史迪奇 inurl:小怪物</p>
<h1 id="特定格式的文档检索"><a href="#特定格式的文档检索" class="headerlink" title="特定格式的文档检索"></a>特定格式的文档检索</h1><p>搜索关键字加filetype: 就行了   用法:filetype:PDF 如PDF、DOC、XLS等</p>
<h1 id="精确匹配-电影-小说"><a href="#精确匹配-电影-小说" class="headerlink" title="精确匹配 电影 小说"></a>精确匹配 电影 小说</h1><p>搜索关键字加&lt;&gt;就行了 用法: &lt;史迪奇&gt;</p>
<h1 id="开始连接和正在连接"><a href="#开始连接和正在连接" class="headerlink" title="开始连接和正在连接"></a>开始连接和正在连接</h1><p>搜索关键字加(开始连接|正在连接)就行了  用法: 星际宝贝(开始连接|正在连接)</p>
<h1 id="计算器功能"><a href="#计算器功能" class="headerlink" title="计算器功能"></a>计算器功能</h1><p>搜索关键字加数字加减就行了  用法: 史迪奇*3-2+1</p>
<h1 id="仅搜索网站标题"><a href="#仅搜索网站标题" class="headerlink" title="仅搜索网站标题"></a>仅搜索网站标题</h1><p>搜索关键字加t:就行了 用法: t:史迪奇</p>
<h1 id="仅搜索网站的网址"><a href="#仅搜索网站的网址" class="headerlink" title="仅搜索网站的网址"></a>仅搜索网站的网址</h1><p>搜索关键字加u:就行了 用法: u:sdq3.gitee.io</p>
<h1 id="关键字都必须包含"><a href="#关键字都必须包含" class="headerlink" title="关键字都必须包含"></a>关键字都必须包含</h1><p>搜索关键字加 +就行了 用法: 史迪奇 +史迪仔 +是个人</p>
<h1 id="减去想要去除的关键词"><a href="#减去想要去除的关键词" class="headerlink" title="减去想要去除的关键词"></a>减去想要去除的关键词</h1><p>搜索关键字加 -就行了 用法: 史迪奇 -不是个人</p>
<br>]]></content>
  </entry>
  <entry>
    <title>什么是线程?什么是进程?线程与进程到底是什么关系</title>
    <url>/Thread-Process.html</url>
    <content><![CDATA[<p><strong>概念</strong></p>
<a id="more"></a>

<h1 id="什么是线程-学习进程最重要的还是学习线程"><a href="#什么是线程-学习进程最重要的还是学习线程" class="headerlink" title="什么是线程(学习进程最重要的还是学习线程)"></a>什么是线程(学习进程最重要的还是学习线程)</h1><p><strong>线程就是独立执行的路径, 就算在什么都不干的话, 里面会有(主线程)main线程, Java里面还有个一个收垃圾的gc线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">Thread是线程的英文<br></code></pre></td></tr></table></figure>

<h1 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h1><p><strong>把程序跑起来才叫做进程, 进程是执行程序的一次执行过程是一个动态的概念</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java">Process是进程的英文<br></code></pre></td></tr></table></figure>
<h1 id="线程与进程到底是什么关系"><a href="#线程与进程到底是什么关系" class="headerlink" title="线程与进程到底是什么关系"></a>线程与进程到底是什么关系</h1><p><strong>一个进程里面可以包含若干个线程, 一个进程里面必须要有一个线程, 否则没有存在的意义</strong></p>
<h1 id="注意-线程开启不一定马上执行-JVM去告诉操作系统-线程的处理-操作系统再去告诉-CPU怎么处理线程-由CPU调度执行"><a href="#注意-线程开启不一定马上执行-JVM去告诉操作系统-线程的处理-操作系统再去告诉-CPU怎么处理线程-由CPU调度执行" class="headerlink" title="注意: 线程开启不一定马上执行, JVM去告诉操作系统 线程的处理, 操作系统再去告诉 CPU怎么处理线程, 由CPU调度执行"></a>注意: 线程开启不一定马上执行, JVM去告诉操作系统 线程的处理, 操作系统再去告诉 CPU怎么处理线程, 由CPU调度执行</h1><br>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>私有云配置(个人笔记)</title>
    <url>/Private-cloud.html</url>
    <content><![CDATA[<p><strong>要有Linux基础</strong></p>
<a id="more"></a>


<h1 id="空白分区划分"><a href="#空白分区划分" class="headerlink" title="空白分区划分"></a>空白分区划分</h1><p><strong>CentOS7的安装与CentOS6.5的安装有明显的区别在CentOS7安装过程中, 设置分区都需要一个挂载点, 这样一来就无法创建两个空白的磁盘分区作为cinder服务和swift服务的存储磁盘了</strong></p>
<p><strong>所以我们应该在系统安装过程中留下足够的磁盘大小, 系统安装完成后, 使用命令parted划分新分区, 然后使用mkfs.xfs进行文件系统格式化, 完成空白分区的划分  “强烈建议使用fdisk”</strong></p>
<p><strong>parted具体命令如下: 不建议使用</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@compute ~]# parted /dev/md126<br></code></pre></td></tr></table></figure>

<p><strong>创建swift分区, 从702G到</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@compute ~]# (parted) mkpart swift 702G 803G    803G                                                  <br>[root@compute ~]# mkfs.xfs /dev/md126p5<br></code></pre></td></tr></table></figure>
<p><strong>fdisk具体命令如下: 强烈建议使用</strong></p>
<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@compute ~]# fdisk -l <br></code></pre></td></tr></table></figure>
<p><strong>sda为硬盘号</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@compute ~]# fdisk /dev/sda <br></code></pre></td></tr></table></figure>

<p><strong>选择m n是创建 d是删除 w是保存</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Command (m for help): m<br>Command action<br>   a   toggle a bootable flag<br>   b   edit bsd disklabel<br>   c   toggle the dos compatibility flag<br>   d   delete a partition<br>   g   create a new empty GPT partition table<br>   G   create an IRIX (SGI) partition table<br>   l   list known partition types<br>   m   print this menu<br>   n   add a new partition<br>   o   create a new empty DOS partition table<br>   p   print the partition table<br>   q   quit without saving changes<br>   s   create a new empty Sun disklabel<br>   t   change a partition&#x27;s system id<br>   u   change display/entry units<br>   v   verify the partition table<br>   w   write table to disk and exit <br></code></pre></td></tr></table></figure>
<h1 id="配置网络-主机名-修改和添加"><a href="#配置网络-主机名-修改和添加" class="headerlink" title="配置网络 主机名 修改和添加"></a>配置网络 主机名 修改和添加</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">vi /etc/sysconfig/network-scripts/ifcfg-enp*(具体的网口)文件</span><br></code></pre></td></tr></table></figure>
<p><strong>(1) controller节点 配置网络:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">私网的ip地址</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">device=enp8s0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash"><span class="hljs-built_in">type</span>=Ethernet</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">onboot=yes</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">nm_controlled=no</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">bootroto=static</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ipaddr=192.168.88.131</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">prefix=24</span><br><span class="hljs-meta">[root@controller]# </span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">公网的ip地址</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">device=enp9s0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash"><span class="hljs-built_in">type</span>=Ethernet</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">onboot=yes</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">nm_controlled=no</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">bootroto=static</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ipaddr=192.168.200.10</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">prefix=24</span><br></code></pre></td></tr></table></figure>
<p><strong>生效</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">service network restart</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ip a</span><br></code></pre></td></tr></table></figure>
<p><strong>配置主机名: 输入完成 按ctrl+d 退出  重新登陆</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">hostnamectl set-hostname controller</span><br><br></code></pre></td></tr></table></figure>
<p><strong>(2) compute 节点 配置网络:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">私网的ip地址</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">device=enp8s0      //设备名称</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash"><span class="hljs-built_in">type</span>=Ethernet</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">onboot=yes</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">nm_controlled=no</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">bootroto=static</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ipaddr=192.168.100.20</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">prefix=24</span><br><span class="hljs-meta">[root@controller]# </span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">公网的ip地址</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">device=enp9s0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash"><span class="hljs-built_in">type</span>=Ethernet</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">onboot=yes</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">nm_controlled=no</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">bootroto=static</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ipaddr=192.168.200.20</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">prefix=24</span><br></code></pre></td></tr></table></figure>
<p><strong>生效</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">service network restart</span><br></code></pre></td></tr></table></figure>

<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ip a</span><br></code></pre></td></tr></table></figure>
<p><strong>配置主机名: 输入完成 按ctrl+d 退出  重新登陆</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">hostnamectl set-hostname compute/controller</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">hostname</span><br></code></pre></td></tr></table></figure>
<h1 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h1><p><strong>Controller和compute节点</strong></p>
<p><strong>(1)yum源备份</strong></p>
<p><strong>命令解释: 用来为文件或目录改名、或将文件或目录移入其它位置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">mv /etc/yum.repos.d/*  /opt/</span><br></code></pre></td></tr></table></figure>
<p><strong>(2)创建repo文件</strong></p>
<p><strong>controller 在/etc/yum.repos.d创建源文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">vi contrller.repo</span>   <br></code></pre></td></tr></table></figure>
<p><strong>配置本地file</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">[centos]</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">name=centos</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">baseurl=file:///opt/centos</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">enabled=1</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">[iaas]</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">name=iaas</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">baseurl=file:///opt/iaas-repo</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">enabled=1</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">yum repolist</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">cat [文件名]</span><br></code></pre></td></tr></table></figure>
<p><strong>compute 在/etc/yum.repos.d创建centos.repo源文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">vi compute.repo</span> <br></code></pre></td></tr></table></figure>
<p><strong>全部移走</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">mv * /tmp</span><br></code></pre></td></tr></table></figure>
<p><strong>配置ftp</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">[centos]</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">name=centos</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">baseurl=ftp://192.168.88.131/centos</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">enabled=1</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">[iaas]</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">name=iaas</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">baseurl=ftp://192.168.88.131/iaas-repo</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">enabled=1</span><br></code></pre></td></tr></table></figure>
<p><strong>配置http</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">[centos]</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">name=centos</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">baseurl=http://192.168.88.131/centos</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">enabled=1</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">[iaas]</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">name=iaas</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">baseurl=http://192.168.88.131/iaas-repo</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">gpgcheck=0</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">enabled=1</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">yum repolist</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">cat [文件名]</span><br></code></pre></td></tr></table></figure>

<h1 id="挂载iso文件"><a href="#挂载iso文件" class="headerlink" title="挂载iso文件"></a>挂载iso文件</h1><p><strong>挂载CentOS-7xxxx.iso</strong></p>
<p><strong>命令解释: mount挂载Linux系统外的文件, loop是mount用来加载loop设备的选项, 不是文件系统类型</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">mount -o loop /home/sdq/CentOS-7-x86_64-DVD-2003.iso  /mnt</span><br></code></pre></td></tr></table></figure>
<p><strong>命令解释: 删除重来</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">rm -rf /opt/centos/*</span><br></code></pre></td></tr></table></figure>
<p><strong>mkdir创建</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">mkdir /opt/centos</span><br></code></pre></td></tr></table></figure>

<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">df</span><br></code></pre></td></tr></table></figure>

<p><strong>意思是并将光盘内的数据拷贝到centos文件夹中, 数据有点多, 要等一会</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">cp -rvf /mnt/* /opt/centos/</span><br></code></pre></td></tr></table></figure>

<p><strong>umount可卸除目前挂在Linux目录中的文件系统</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">umount  /mnt/</span><br></code></pre></td></tr></table></figure>
<p><strong>挂载XianDian-IaaS-v2.4.iso</strong></p>
<p><strong>mount挂载Linux系统外的文件, loop是mount用来加载loop设备的选项, 不是文件系统类型</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">mount -o loop /home/sdq/chinaskills_cloud_iaas.iso  /mnt</span><br></code></pre></td></tr></table></figure>

<p><strong>意思是并将光盘内的数据拷贝到opt文件夹中, 数据有点多, 要等一会</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">cp -rvf /mnt/* /opt/</span><br></code></pre></td></tr></table></figure>
<p><strong>umount可卸除目前挂在Linux目录中的文件系统</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">umount  /mnt/</span><br></code></pre></td></tr></table></figure>
<h1 id="搭建ftp服务器-开启并设置自启"><a href="#搭建ftp服务器-开启并设置自启" class="headerlink" title="搭建ftp服务器, 开启并设置自启"></a>搭建ftp服务器, 开启并设置自启</h1><p><strong>安装vsftpd 默认-y= yes</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# yum install vsftpd –y<br></code></pre></td></tr></table></figure>
<p><strong>添加anon_root=/opt/</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# vi /etc/vsftpd/vsftpd.conf<br></code></pre></td></tr></table></figure>
<p><strong>启动服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# systemctl start vsftpd<br></code></pre></td></tr></table></figure>

<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">yum repolist</span><br></code></pre></td></tr></table></figure>
<p><strong>在开机时启用服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# systemctl enable vsftpd<br></code></pre></td></tr></table></figure>
<h1 id="搭建http服务器-开启并设置自启"><a href="#搭建http服务器-开启并设置自启" class="headerlink" title="搭建http服务器, 开启并设置自启"></a>搭建http服务器, 开启并设置自启</h1><p><strong>安装httpd 默认-y= yes</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<br>[root@controller ~]# yum install httpd –y<br></code></pre></td></tr></table></figure>
<p><strong>/var/www/html改”/opt”</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# vi /etc/httpd/conf/httpd.conf<br></code></pre></td></tr></table></figure>
<p><strong>启动服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# systemctl start httpd<br></code></pre></td></tr></table></figure>

<p><strong>在开机时启用服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# systemctl enable httpd<br></code></pre></td></tr></table></figure>
<h1 id="配置防火墙和Selinux"><a href="#配置防火墙和Selinux" class="headerlink" title="配置防火墙和Selinux"></a>配置防火墙和Selinux</h1><p><strong>controller/compute都要</strong></p>
<p><strong>编辑selinux文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">vi /etc/selinux/config</span> <br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">SELINUX=permissive</span><br>[root@controller selinux]# setenforce 0<br></code></pre></td></tr></table></figure>
<!-- [root@controller selinux]# getenforce     //查看 -->
<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">getenforce</span> <br></code></pre></td></tr></table></figure>
<p><strong>关闭防火墙并设置开机不自启</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">systemctl stop firewalld.service</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">systemctl <span class="hljs-built_in">disable</span> firewalld.service</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">systemctl status firewalld.service</span><br></code></pre></td></tr></table></figure>
<p><strong>清除缓存和验证yum源 controller/compute都要</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">yum clean all</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">yum repolist</span><br></code></pre></td></tr></table></figure>
<h1 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h1><p><strong>controller和compute节点</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">yum install iaas-xiandian -y</span><br></code></pre></td></tr></table></figure>
<p><strong>编辑文件/etc/xiandian/openrc.sh, 此文件是安装过程中的各项参数, 根据每项参数上一行的说明及服务器实际情况进行配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HOST_IP=192.168.88.131</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HOST_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HOST_NAME=controller</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HOST_IP_NODE=192.168.100.20</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HOST_PASS_NODE=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HOST_NAME_NODE=compute</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">network_segment_IP=192.168.100.0/24</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">RABBIT_USER=openstack</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">RABBIT_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">DB_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">DOMAIN_NAME=demo</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ADMIN_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">DEMO_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">KEYSTONE_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">GLANCE_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">GLANCE_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">NOVA_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">NOVA_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">NEUTRON_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">NEUTRON_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">METADATA_SECRET=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">INTERFACE_IP=192.168.88.131/192.168.100.20(controllerIP/computeIP)</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">INTERFACE_NAME=enp9s0 (外部网络网卡名称)</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">Physical_NAME=provider (外部网络适配器名称)</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">minvlan=101 (vlan网络范围的第一个vlanID)</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">maxvlan=200 (vlan网络范围的最后一个vlanID)</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">CINDER_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">CINDER_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">BLOCK_DISK=md126p4 (空白分区)</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">SWIFT_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">OBJECT_DISK=md126p5 (空白分区)</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">STORAGE_LOCAL_NET_IP=192.168.100.20</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HEAT_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">HEAT_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ZUN_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">ZUN_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">KURYR_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">KURYR_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">CEILOMETER_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">CEILOMETER_PASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">AODH_DBPASS=000000</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">AODH_PASS=000000</span><br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装服务"><a href="#通过脚本安装服务" class="headerlink" title="通过脚本安装服务"></a>通过脚本安装服务</h1><p><strong>执行脚本iaas-pre-host.sh进行安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# iaas-pre-host.sh<br></code></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@controller ~]# chronyc sources -v<br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装数据库服务"><a href="#通过脚本安装数据库服务" class="headerlink" title="通过脚本安装数据库服务"></a>通过脚本安装数据库服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-mysql.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装keystone服务"><a href="#通过脚本安装keystone服务" class="headerlink" title="通过脚本安装keystone服务"></a>通过脚本安装keystone服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-keystone.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装glance服务"><a href="#通过脚本安装glance服务" class="headerlink" title="通过脚本安装glance服务"></a>通过脚本安装glance服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-glance.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h1><p><strong>首先下载(Wget)提供的系统镜像到本地, 本次以上传CentOS_7.5_x86_64镜像为例 安装Wget, 从Ftp服务器上下载镜像到本地</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash"><span class="hljs-built_in">source</span> admin-openrc.sh</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">glance image-create --name <span class="hljs-string">&quot;CentOS7.5&quot;</span> --disk-format qcow2  --container-format bare --progress &lt;       /opt/images/CentOS_7.5_x86_64_XD.qcow2</span>  <br></code></pre></td></tr></table></figure>
<h1 id="安装Nova计算服务"><a href="#安装Nova计算服务" class="headerlink" title="安装Nova计算服务"></a>安装Nova计算服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-nova-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-nova-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Neutron网络服务"><a href="#安装Neutron网络服务" class="headerlink" title="安装Neutron网络服务"></a>安装Neutron网络服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-neutron-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-neutron-compute.sh</span><br></code></pre></td></tr></table></figure>



<h1 id="安装Dashboard服务"><a href="#安装Dashboard服务" class="headerlink" title="安装Dashboard服务"></a>安装Dashboard服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">aas-install-dashboard.sh</span><br></code></pre></td></tr></table></figure>

<h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p><strong>打开浏览器访问Dashboard, 网址<a href="http://controller/">http://controller</a> (或本机内网ip) /dashboard</strong><br><strong>注: 检查防火墙规则, 确保允许http服务相关端口通行, 或者关闭防火墙</strong></p>
<h1 id="创建云主机"><a href="#创建云主机" class="headerlink" title="创建云主机"></a>创建云主机</h1><p><strong>(1) 管理员-&gt;资源管理-&gt;云主机类型-&gt;创建云主机类型</strong></p>
<p><strong>(2) 管理员-&gt;网络-&gt;网络-&gt;创建网络</strong></p>
<p><strong>(2) 项目-&gt;网络-&gt;安全组-&gt;管理规则-&gt;添加规则(ICMP、TCP、UDP)</strong> </p>
<p><strong>(4) 项目-&gt;资源管理-&gt;云主机-&gt;创建云主机</strong></p>
<h1 id="安装Cinder块存储服务"><a href="#安装Cinder块存储服务" class="headerlink" title="安装Cinder块存储服务"></a>安装Cinder块存储服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-cinder-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-cinder-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="验证-以后会用到"><a href="#验证-以后会用到" class="headerlink" title="验证  [以后会用到]"></a>验证  [以后会用到]</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">使用cinder create 创建一个新的卷<br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">cinder create  --display-name myVolume 1</span><br>通过cinder list 命令查看是否正确创建<br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">cinder list</span> <br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-neutron-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Swift对象存储服务"><a href="#安装Swift对象存储服务" class="headerlink" title="安装Swift对象存储服务"></a>安装Swift对象存储服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-swift-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-swift-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Heat编配服务"><a href="#安装Heat编配服务" class="headerlink" title="安装Heat编配服务"></a>安装Heat编配服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-heat.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Zun服务"><a href="#安装Zun服务" class="headerlink" title="安装Zun服务"></a>安装Zun服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-zun-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-zun-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="上传镜像-1"><a href="#上传镜像-1" class="headerlink" title="上传镜像"></a>上传镜像</h1><p><strong>以CentOS7_1804.tar镜像为例, CentOS7_1804.tar镜像包存放在XianDian-IaaS-v2.4.iso镜像包中, 将docker镜像上传到glance中, 通过openstack使用镜像启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash"><span class="hljs-built_in">source</span> /etc/keystone/admin-openrc.sh</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">openstack image create centos7.5 --public --container-format docker --disk-format raw &lt; CentOS7_1804.tar</span><br></code></pre></td></tr></table></figure>
<h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><p><strong>通过glance存储镜像启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">zun run --image-driver glance centos7.5</span><br><span class="hljs-meta">[root@controller]# </span><span class="language-bash">zun list</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Ceilometer监控服务"><a href="#安装Ceilometer监控服务" class="headerlink" title="安装Ceilometer监控服务"></a>安装Ceilometer监控服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-ceilometer-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-ceilometer-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Aodh监控服务"><a href="#安装Aodh监控服务" class="headerlink" title="安装Aodh监控服务"></a>安装Aodh监控服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">iaas-install-aodh.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="更新-清除所有"><a href="#更新-清除所有" class="headerlink" title="更新/清除所有"></a>更新/清除所有</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">yum clean all</span><br></code></pre></td></tr></table></figure>
<h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1><p><strong>httpd为服务名称</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">[root@controller]# </span><span class="language-bash">systemctl restart httpd</span><br></code></pre></td></tr></table></figure>

<h1 id="添加控制节点资源到云平台"><a href="#添加控制节点资源到云平台" class="headerlink" title="添加控制节点资源到云平台"></a>添加控制节点资源到云平台</h1><p><strong>修改openrc.sh  把compute节点的IP和主机名改为controller节点的IP和主机名</strong></p>
<p><strong>运行iaas-install-nova-compute.sh  行过程中需要确认登录controller节点和输入controller节点root用户密码</strong></p>
<h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">scp -r <span class="hljs-comment">[文件名]</span> <span class="hljs-comment">[用户名]</span>@<span class="hljs-comment">[ip]</span>:/home/<span class="hljs-comment">[用户名]</span><br></code></pre></td></tr></table></figure>
<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">ssh <span class="hljs-comment">[用户名]</span>@<span class="hljs-comment">[ip]</span><br></code></pre></td></tr></table></figure>
<p>生成ssh公钥</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen</span><br></code></pre></td></tr></table></figure>
<p>复制密钥给主机2</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">ssh-<span class="hljs-keyword">copy</span>-<span class="hljs-built_in">id</span> [用户名]@[ip]  <br></code></pre></td></tr></table></figure>
<p>然后输入主机2的密码</p>
<p>密钥位置 传过来的在用户目录  将要传的在root目录后缀为pub是公钥 rsa是私钥</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/home/</span>用户名<br><span class="hljs-keyword">ls</span> -a<br><span class="hljs-keyword">cd</span> <span class="hljs-string">.ssh</span><br></code></pre></td></tr></table></figure>
<h1 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>[路径]<br></code></pre></td></tr></table></figure>
<h1 id="查看当前路径"><a href="#查看当前路径" class="headerlink" title="查看当前路径"></a>查看当前路径</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure>
<br>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>职教星2.8.2(搬运软件)</title>
    <url>/zjx2.8.1.html</url>
    <content><![CDATA[<p><strong>职教星2.8.2</strong></p>
<a id="more"></a>

<p><strong>本人找了3天, 相当不容易</strong></p>
<p><strong>有的人甚至拿别人的软件来卖钱, 拿着别人的劳动成果来赚钱, 实在容忍不了越想越气</strong></p>
<h1 id="在我这里拿走职教星2-8-2有两点要求"><a href="#在我这里拿走职教星2-8-2有两点要求" class="headerlink" title="在我这里拿走职教星2.8.2有两点要求"></a>在我这里拿走职教星2.8.2有两点要求</h1><p><strong>1. 不能大势宣传 因为怕职教云知道就会做出应对措施</strong></p>
<p><strong>2. 帮助别人别谈钱, 帮助别人, 别人会看在心里, 然后别人会以你为榜样的去帮助那些需要帮助的人</strong></p>
<h1>拿走的请在下面评论区留言: "我遵守承诺"</h1>

<h1 id="记住千万别成为那些盗取别人劳动成果来赚钱的人渣"><a href="#记住千万别成为那些盗取别人劳动成果来赚钱的人渣" class="headerlink" title="记住千万别成为那些盗取别人劳动成果来赚钱的人渣"></a>记住千万别成为那些盗取别人劳动成果来赚钱的人渣</h1><h1 style="color:red;font-size:50px">这个是承诺的格式, 这是承诺请, 认真对待</h1>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e323c35eb.jpg"></p>
<h1 style="color:red;font-size:50px">截图一定要让我看见QQ头像, 记住使用之前把所有安全软件都关了, 自带的也要</h1>

<p><img src="https://t1.pic.cdn.lkxin.cn/2022/07/30/62e4e323af57f.jpg"></p>
<h1 id="本放链接-想要的话-自己带着承诺完的截图来找我-我给你密码"><a href="#本放链接-想要的话-自己带着承诺完的截图来找我-我给你密码" class="headerlink" title="本放链接!!! 想要的话, 自己带着承诺完的截图来找我, 我给你密码"></a>本放<a href="https://wwr.lanzoui.com/iRu7Bqsx7od">链接</a>!!! 想要的话, 自己带着承诺完的截图来找<a href="https://wpa.qq.com/msgrd?v=3&uin=3083329400&site=qq&menu=yes">我</a>, 我给你密码</h1><br>









]]></content>
  </entry>
  <entry>
    <title>跟我一起学数学</title>
    <url>/mathematics.html</url>
    <content><![CDATA[<p><strong>走进数学的奇妙世界</strong></p>
<a id="more"></a>

<h1 id="高斯算法"><a href="#高斯算法" class="headerlink" title="高斯算法"></a>高斯算法</h1><p><strong>用于解决 1+2+3+4+5+6+7……一直加到n</strong></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(首项 + 末项)</span> * 项数 / <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>


<h1 id="衡量算法"><a href="#衡量算法" class="headerlink" title="衡量算法"></a>衡量算法</h1><p><strong>时间复杂度和空间复杂度</strong></p>
<br>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>跟我一起学算法(概念章)</title>
    <url>/mathematics-concept.html</url>
    <content><![CDATA[<p><strong>走进数学的奇妙世界</strong></p>
<a id="more"></a>

<h1 id="衡量算法"><a href="#衡量算法" class="headerlink" title="衡量算法"></a>衡量算法</h1><p><strong>时间复杂度和空间复杂度</strong></p>
<h1 style="color:red;font-size:50px">时间复杂度: 程序的运行时间和效率</h1>

<h1 style="color:red;font-size:50px">空间复杂度: 程序运行时所占用的内存空间</h1>

<h1 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h1><p><strong>数据结构是数据的组织、管理和存储格式, 其使用目的是为了高效地访问和修改数据</strong></p>
<p><strong>数据结构包含数组、链表这样的线性数据结构, 也包含树、图这样的复杂数据结构</strong></p>
<h1 id="什么是时间复杂度"><a href="#什么是时间复杂度" class="headerlink" title="什么是时间复杂度"></a>什么是时间复杂度</h1><p><strong>时间复杂度是对一个算法运行时间长短的量度, 用大O表示, 记作T(n)=O(f(n))</strong></p>
<p><strong>常见的时间复杂度按照从低到高的顺序, 包括O(1)、O(logn)、O(n)、O(nlogn)、O(n2)等</strong></p>
<h1 id="什么是空间复杂度"><a href="#什么是空间复杂度" class="headerlink" title="什么是空间复杂度"></a>什么是空间复杂度</h1><p><strong>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度, 用大O表示, 记作S(n)=O(f(n))</strong></p>
<p><strong>常见的空间复杂度按照从低到高的顺序, 包括O(1)、O(n)、O(n2)等其中递归算法的空间复杂度和递归深度成正比</strong></p>
<br>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>函数与极限 (第一章)</title>
    <url>/HigherMathematics-Function-limit.html</url>
    <content><![CDATA[<p><strong>跟我一起学数学</strong></p>
<a id="more"></a>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="考点1-求函数的定义域"><a href="#考点1-求函数的定义域" class="headerlink" title="考点1: 求函数的定义域"></a>考点1: 求函数的定义域</h2><h3 id="函数三要素-自变量-x-因变量-y-对应法则-f"><a href="#函数三要素-自变量-x-因变量-y-对应法则-f" class="headerlink" title="函数三要素: 自变量 x 因变量 y 对应法则 f"></a>函数三要素: 自变量 x 因变量 y 对应法则 f</h3><ul>
<li>记为: y = f ( x )  </li>
</ul>
<h3 id="函数的定义域-自变量-x-的取值范围"><a href="#函数的定义域-自变量-x-的取值范围" class="headerlink" title="函数的定义域: 自变量 x 的取值范围"></a>函数的定义域: 自变量 x 的取值范围</h3><h3 id="解题思路-求解不等式方程组"><a href="#解题思路-求解不等式方程组" class="headerlink" title="解题思路: 求解不等式方程组"></a>解题思路: 求解不等式方程组</h3><ul>
<li><p>若函数是几个函数的四则混合式, 则应各部分定义域的交集 </p>
</li>
<li><p>若为分段函数, 则取各部分定义域的并集</p>
</li>
</ul>
<h2 id="考点2-函数奇偶性的判定"><a href="#考点2-函数奇偶性的判定" class="headerlink" title="考点2: 函数奇偶性的判定"></a>考点2: 函数奇偶性的判定</h2><ul>
<li><p>偶次方是偶 </p>
</li>
<li><p>奇次方是奇</p>
</li>
<li><p>sin 是奇</p>
</li>
<li><p>cos 是偶</p>
</li>
<li><p>tan 是奇</p>
</li>
<li><p>常数是偶</p>
</li>
</ul>
<h3 id="1-定义法-定义域D关于原点对称"><a href="#1-定义法-定义域D关于原点对称" class="headerlink" title="(1) 定义法: 定义域D关于原点对称"></a>(1) 定义法: 定义域D关于原点对称</h3><ul>
<li>若 f ( -x ) = -f ( x ), 则称 f ( x ) 为<font color="#ef5b9c">奇函数  奇函数关于原点对称</font>  </li>
</ul>
<!-- <iframe scrolling = "no" id="iframe" src="/html/函数与极限1.html"></iframe> -->

<div class="mermaid">
    graph LR
    A[" f ( -x ) "]--恒等变形-->B[" - f ( x ) "] 
</div>

<!-- <div class="mermaid"> -->
<!-- graph LR -->
<!-- A[" f ( -x ) "]--恒等变形-->
<!-- B[" -f ( x ) "] -->
<!-- </div> -->

<ul>
<li>若 f( -x ) = f ( x ), 则称 f ( x ) 为<font color="#87CEEB">偶函数  偶函数关于y轴对称</font>  </li>
</ul>
<!-- <iframe scrolling = "no" id="iframe" src="/html/函数与极限2.html"></iframe> -->

<div class="mermaid">
    graph LR
    A[" f ( -x ) "]--恒等变形-->B[" f ( x ) "] 
</div>

<!-- <div class="mermaid"> -->
<!-- graph LR -->
<!-- A[" f ( -x ) "]--恒等变形-->
<!-- B[" f ( x ) "]  -->
<!-- </div> -->


<h3 id="2-公式法"><a href="#2-公式法" class="headerlink" title="(2) 公式法:"></a>(2) 公式法:</h3><h4>加减: </h4>

<ul>
<li><p><font color="#ef5b9c">奇</font> ± <font color="#ef5b9c">奇</font> = <font color="#ef5b9c">奇</font></p>
</li>
<li><p><font color="#87CEEB">偶</font> ± <font color="#87CEEB">偶</font> = <font color="#87CEEB">偶</font></p>
</li>
<li><p><font color="#ef5b9c">奇</font> ± <font color="#87CEEB">偶</font> = <font color="#9b95c9">非奇非偶</font></p>
</li>
</ul>
<h4>乘除: </h4>

<ul>
<li><p><font color="#ef5b9c">奇</font> x/÷ <font color="#ef5b9c">奇</font> = <font color="#87CEEB">偶</font></p>
</li>
<li><p><font color="#87CEEB">偶</font> x/÷ <font color="#87CEEB">偶</font> = <font color="#87CEEB">偶</font></p>
</li>
<li><p><font color="#ef5b9c">奇</font> x/÷ <font color="#87CEEB">偶</font> = <font color="#ef5b9c">奇</font></p>
</li>
</ul>
<h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><h2 id="考点1-夹逼准则"><a href="#考点1-夹逼准则" class="headerlink" title="考点1: 夹逼准则"></a>考点1: 夹逼准则</h2><h4>若数列 { xₙ }, { yₙ }, { zₙ } 满足下列条件</h4>

<ul>
<li><p>(1) 从某项开始有 xₙ ≤ yₙ ≤ zₙ</p>
</li>
<li><p>(2) lim xₙ ( n ➝ ∞ ) = lim zₙ ( n ➝ ∞ ) = A, 则数列{ yₙ }的极限存在, 且 lim yₙ ( n ➝ ∞ ) = A</p>
</li>
</ul>
<!-- ![](/images/学数学/夹逼准则.jpg) -->

<h2 id="考点2-两个重要极限"><a href="#考点2-两个重要极限" class="headerlink" title="考点2: 两个重要极限"></a>考点2: 两个重要极限</h2><h3>重要极限一:</h3>

<div class="shuxue"> $$\;\lim_{x\rightarrow0}\frac{\sin\;x}x\;=\;1$$<span class="shuxue2">或</span><span class="shuxue2">$$\lim_{\lbrack\;\rbrack\rightarrow0}\frac{\sin\;\lbrack\;\rbrack}{\lbrack\;\rbrack}\;=\;1$$</span> </div>

<h3>例如: </h3>

<div class="shuxue"> $$\lim_{x\rightarrow0}\frac{\sin\;3x}x\;=\;\underset{x\rightarrow0}{3\;\lim}\frac{\sin\;3x}{3x}\;=\;3$$</div>



<!-- ![](/images/学数学/两个重要极限.jpg) -->

<h3>重要极限二:</h3>

<div class="shuxue"> $$\lim_{x\rightarrow0}{(\;1\;+\;x\;)}^\frac1x\;=\;e\;$$<span class="shuxue2">或</span><span class="shuxue2">$$\lim_{x\rightarrow\infty}{(\;1\;+\;\frac1x\;)}^{x\;=\;e}$$</span></div>

<!-- ![](/images/学数学/两个重要极限2.jpg) -->

<h2 id="考点2-等价无穷小求极限"><a href="#考点2-等价无穷小求极限" class="headerlink" title="考点2: 等价无穷小求极限"></a>考点2: 等价无穷小求极限</h2><h3>常见的等价无穷小:</h3>

<p>当x→0时,</p>
<p><font color="#7bbfea">(1)</font><div class="shuxue"><span class="shuxue2">$$x$$</span><span class="shuxue2">$$\sim$$</span> <span class="shuxue2">$$\sin x$$</span><span class="shuxue2">$$\sim$$</span> <span class="shuxue2">$$\tan x$$</span><span class="shuxue2">$$\sim$$</span><span class="shuxue2">$$arc\sin x$$</span><span class="shuxue2">$$\sim$$</span><span class="shuxue2">$$arc\tan x$$</span><span class="shuxue2">$$\sim$$</span><span class="shuxue2">$$\ln (1 + x )$$</span><span class="shuxue2">$$\sim$$</span><span class="shuxue2">$$e^{x}$$</span></div></p>
<p><font color="#7bbfea">(2)</font><div class="shuxue"><span class="shuxue2">$$1-\cos x \ ~ \sim\frac12x^2$$</span></div></p>
<p><font color="#7bbfea">(3)</font><div class="shuxue"><span class="shuxue2">$$\left( \ 1 + x \ \right)^{a}-1\sim ax$$</span></div></p>
<p><font color="#ed1941">注意:</font> x ➝ 0 时,<div class="shuxue"><span class="shuxue2">$$\left(\ 1\ +\ x\ \right)^\frac12\ -1\ \sim\ \ \frac12x,\ \sqrt{1+x}-1\ \sim\ \frac12x$$</span></div></p>
<!-- <div class="shuxue">
$$x\;\sim\;\sin x\;\sim\;\tan x\;\sim\;arc\sin\;x\;\sim\;arc\tan\;x\;\sim\;\ln\left(1+x\right)\;\sim\;e^{x\;}-1$$</div> -->

<!-- ![](/images/学数学/等价无穷小求极限.jpg) -->


<h2 id="考点4-零点定理证明方程根的存在性"><a href="#考点4-零点定理证明方程根的存在性" class="headerlink" title="考点4: 零点定理证明方程根的存在性"></a>考点4: 零点定理证明方程根的存在性</h2><h3 id="零点定理"><a href="#零点定理" class="headerlink" title="零点定理:"></a>零点定理:</h3><ul>
<li>设 f ( x ) 在 [ a , b ] 闭区间上连续, 且f ( a ) · f ( b ) &lt; 0 则∃ § ∈ ( a , b ) 使得f ( § ) = 0</li>
</ul>
<h3 id="考点5-零点定理证明方程根的存在性"><a href="#考点5-零点定理证明方程根的存在性" class="headerlink" title="考点5: 零点定理证明方程根的存在性"></a>考点5: 零点定理证明方程根的存在性</h3><h4>证明题解题步骤: </h4>

<ul>
<li><p>移动构造辅助函数 f ( x )</p>
</li>
<li><p>验证 f ( a ) · f ( b ) &lt; 0</p>
</li>
<li><p>由零点定理结论: f ( x ) 在 ( a , b ) 内存在零点, 方程有实根</p>
</li>
</ul>
<br>







]]></content>
      <categories>
        <category>跟我一起学数学</category>
      </categories>
  </entry>
  <entry>
    <title>大学英语</title>
    <url>/College-English.html</url>
    <content><![CDATA[<p><strong>英语学习笔记</strong></p>
<a id="more"></a>

<h1 id="考前分析"><a href="#考前分析" class="headerlink" title="考前分析"></a>考前分析</h1><p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220118233134796.png" alt="image-20220118233134796"></p>
<p><strong>Part1 单选题</strong></p>
<ul>
<li>词义辨析题：45%    13道</li>
<li>词语他陪题：23.5%    7道</li>
<li>语法结构题：31.5%    10道</li>
</ul>
<p>1.词义辨析题</p>
<ul>
<li>近形词词义辨析</li>
<li>近义词词义辨析</li>
<li>短语辨析</li>
</ul>
<p>clash    冲突，打斗</p>
<p>crash    （车）碰撞，（飞机）坠毁</p>
<p>eg.His car crashed into a bus yesterday.</p>
<p>​    The plane crashed after take-off.</p>
<p>flash    闪光，闪现</p>
<p>crush    粉碎，压扁</p>
<p><strong><em>eg.Religion has a great _____________ on man’s thought.</em></strong></p>
<p><strong><em>A.effects                    B.affect                C.affection                D.influence</em></strong></p>
<p>解析：</p>
<p>effect    n.影响；</p>
<p>affect    v,影响</p>
<p>affection</p>
<p>influence    n&amp;v.影响（对人的品质的长期影响）</p>
<p>关于turn的短语</p>
<p>turn on </p>
<p>turn off</p>
<p>turn up</p>
<p>turn down </p>
<p>turn over</p>
<p>turn in </p>
<p>turn out</p>
<p>3.语法结构题</p>
<ul>
<li><font style="background:yellow">as的特殊倒装现象：</font></li>
</ul>
<p>​    <font style="background:yellow">adj/adv/n    +    as    +    主    +    谓</font></p>
<p><strong>Part2    阅读理解题</strong></p>
<ul>
<li>推理判断题：44%</li>
<li>事实细节题：35%</li>
<li>主旨大意题：11%</li>
<li>词语理解题：6%</li>
<li>观点态度题：4%</li>
</ul>
<h1 id="上篇：词汇语法"><a href="#上篇：词汇语法" class="headerlink" title="上篇：词汇语法"></a>上篇：词汇语法</h1><h2 id="第一节：时态和语态"><a href="#第一节：时态和语态" class="headerlink" title="第一节：时态和语态"></a>第一节：时态和语态</h2><p>英语时态：</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th>现在</th>
<th>过去</th>
<th>将来</th>
<th>过去将来</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>一般</strong></td>
<td>一般现在时</td>
<td>一般过去时</td>
<td>一般将来时</td>
<td>一般过去将来时</td>
</tr>
<tr>
<td align="left"><strong>进行</strong></td>
<td>现在进行时</td>
<td>过去进行时</td>
<td>将来进行时</td>
<td>过去将来进行时</td>
</tr>
<tr>
<td align="left"><strong>完成</strong></td>
<td>现在完成时</td>
<td>过去完成时</td>
<td>将来完成时</td>
<td>过去将来完成时</td>
</tr>
<tr>
<td align="left"><strong>完成进行</strong></td>
<td>现在完成进行时</td>
<td>过去完成进行时</td>
<td>将来完成进行时</td>
<td>过去将来完成进行时</td>
</tr>
</tbody></table>
<h3 id="考点01-一般现在时"><a href="#考点01-一般现在时" class="headerlink" title="考点01    一般现在时"></a>考点01    一般现在时</h3><ul>
<li><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220318163151574.png"></li>
</ul>
<p><font style="background:yellow">I/we/you/they/复数主语    +动词原形</font></p>
<p><font style="background:yellow">he/she/ir/单数主语    +动词的单三形式</font></p>
<p>一些特殊单三形式：</p>
<p>do    ——    does</p>
<p>go    ——    goes</p>
<p>watch    ——    watches</p>
<p><strong><em>eg.I <font color="red">learn</font> English.</em></strong></p>
<p>​    <strong><em>He<font color="red"> learns </font>English.</em></strong></p>
<p>翻译：她每天写一封信。</p>
<p><strong><em>She <font color="red">writers</font> letter every day.</em></strong></p>
<ul>
<li><p>用法：</p>
<ul>
<li><p>表经常发生的动作</p>
<p>时间副词：always，often，usually（通常），sometimes（有时），every day，once week，twice a month，tree times a year，once in a while（偶尔），now and then（有时；偶尔）…</p>
<ul>
<li><p><strong><em>eg.Tom reads English books <font color="red">every day</font>.</em></strong></p>
<p>​    <strong>He <font color="red">always</font> gets up at 7:00.</strong></p>
</li>
</ul>
</li>
<li><p>表示客观事实或普遍真理</p>
<ul>
<li><p><strong><em>eg.The sun <font color="red">rises </font>in the east.（太阳从东边升起）</em></strong></p>
<p>​    <strong><em>The light <font color="red">travels</font> faster than the sound.</em></strong></p>
<p>​    <strong><em>Mathematics <font color="red">is</font> the language of science.</em></strong></p>
<p>​    <strong><em>He learned that <u>the earth <font color="red">travels</font> aroud the sun</u> yesterday.</em></strong></p>
</li>
</ul>
</li>
<li><p>表示安排或计划好的将要发生的动作，或表示按时间表将要发生的动作</p>
<p>​    常用动词：come，go，start， begin，leave，return…</p>
<ul>
<li><strong><em>eg.The train <font color="red">leaves</font> at 8:00 next  morning.</em></strong></li>
</ul>
</li>
<li><p><strong><font color="orange">主将从现（！！！重要考点！！！）</font></strong></p>
<p>​    含义：主语使用一般将来时，从句（位于连词后面）使用一般现在时</p>
<p>​    用法：通常用在<strong>时间或条件状语从句</strong>中</p>
<p>​    常考连词：</p>
<p>​    时间：when/as soon as（一…就…）/ the moment/the minute</p>
<p>​    条件：if/in case（如果）/as long as（只要）/unless（如果不）/once</p>
<ul>
<li><p><strong><em>eg.I will let you know <font color="red">when</font> I hear from him.</em></strong></p>
<p>​    <strong><em>You will success  <font color="red">if</font> you rey your best.</em></strong></p>
<p>​    <strong><em><font color="red">When </font>I have money,I will buy a car.</em></strong></p>
<p>​    <strong><em><font color="red">If</font> you don’t leave me,we will die together.</em></strong></p>
</li>
</ul>
</li>
<li><p><strong><font color="orange">主祈从现</font></strong></p>
<p>含义：主句是祈使句，从句使用一般现在时</p>
<p>用法：通常用在<strong>时间或条件状语从句</strong>中</p>
<p>常考连词：与主将从现的连词一样</p>
<p>祈使句：</p>
<ol>
<li>动词原形开头    shut up</li>
<li>否定句    Don’t…</li>
<li>Please+动词原形</li>
<li>Let’s…</li>
</ol>
<ul>
<li><strong><em>eg.Please tell her the news <font color="red">when</font> she comes.</em></strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="考点02-一般过去时"><a href="#考点02-一般过去时" class="headerlink" title="考点02    一般过去时"></a>考点02    一般过去时</h3><ul>
<li>谓语结构：动词的过去式</li>
</ul>
<p>用法：用来描述<strong>过去发生的动作或存在的状态</strong></p>
<p>时间状语：</p>
<p>last(night,Friday,week,month,year…)</p>
<p>yesterday,the day before yesterday(前天)</p>
<p>just now,a moment ago,in + 过去年份</p>
<p><strong><em>eg.She <font color="red">bought</font> a car last week.</em></strong></p>
<h3 id="考点03-一般将来时"><a href="#考点03-一般将来时" class="headerlink" title="考点03    一般将来时"></a>考点03    一般将来时</h3><ul>
<li><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220318172818648.png"></li>
</ul>
<p><strong><em>He <font color="red">will write</font> a letter tomorrow.</em></strong></p>
<p><strong><em>Look at the cloud!It is <font color="red">going to rain</font>.</em></strong></p>
<p><strong><em>The grils <font color="red">are to go home</font> next week.</em></strong></p>
<ul>
<li><p>用法：</p>
<ul>
<li><p>将来发生的动作</p>
<p>时间状语：tomorrow，the day after tomorrow（后天），next week/month/year/Monday/Sunday</p>
<p>tonight,this afternoon/evening/Sunday</p>
<p>in the future,in two days(两天后)</p>
<ul>
<li><strong><em>eg.He <font color="red">will write</font> a letter morrow.</em></strong></li>
</ul>
</li>
<li><p>位移动词可以用现在进行时表达一般现在将来时</p>
<p>位移动词：come，go，leave，arrive，fly，return…</p>
<p>leave +地点——&gt;离开某地            leave for +地点——&gt;前往某地</p>
<ul>
<li><p><strong><em>eg.He <font color="red">is leving </font>New York tomorrow.</em></strong></p>
<p>​    <strong><em>I <font color="red">am coming</font> to Jhon’s home next week.</em></strong></p>
</li>
</ul>
</li>
<li><p>祈使句+<font color="red">and for/or</font>+谓语用一般将来时的句子</p>
<p>and——&gt;那么    顺承关系</p>
<p>or——&gt;否则    转折关系</p>
<p><strong><em>eg.Give me more hour,<font color="red">and</font> I will finish it.</em></strong></p>
<p>​    <strong><em>Close the window,<font color="red">or</font> you will catch a cold.</em></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="考点04-现在进行时"><a href="#考点04-现在进行时" class="headerlink" title="考点04    现在进行时"></a>考点04    现在进行时</h3><ul>
<li><p>谓语结构：am/is/are +doing </p>
</li>
<li><p>用法：表示现在正在进行的动作</p>
</li>
<li><p>时间状语：now，at present</p>
<ul>
<li><p><strong><em>eg.I <font color="red">am watching</font> TV.</em></strong></p>
<p>​    <strong><em>He <font color="red">is learning</font> French at collge at present.</em></strong> </p>
</li>
</ul>
</li>
</ul>
<h3 id="考点05-过去进行时"><a href="#考点05-过去进行时" class="headerlink" title="考点05    过去进行时"></a>考点05    过去进行时</h3><ul>
<li><p>谓语结构：was/were + doing</p>
</li>
<li><p>用法：表示过去某一时刻或某一时段内正在进行的动作</p>
<ul>
<li><strong><em>eg.When you called me last night,I <font color="red">was reading</font> a novel（小说）.</em></strong></li>
</ul>
</li>
</ul>
<h3 id="考点06-将来进行时"><a href="#考点06-将来进行时" class="headerlink" title="考点06    将来进行时"></a>考点06    将来进行时</h3><ul>
<li><p>谓语结构：will be + doing</p>
</li>
<li><p>用法：表示将来某一时刻或某时间内正在进行的动作</p>
<ul>
<li><strong><em>eg.I <font color="red">will be cieaning </font>my room this time tomorrow.</em></strong></li>
</ul>
</li>
</ul>
<h3 id="考点07-现在完成时"><a href="#考点07-现在完成时" class="headerlink" title="考点07    现在完成时"></a>考点07    现在完成时</h3><ul>
<li><p>谓语结构：have/has + 过去分词（done）</p>
</li>
<li><p>用法：表示现在已经完成的动作</p>
<ul>
<li><p><strong><em>eg.She <font color="red">has lived</font> Guangdong since 2000.</em></strong></p>
<p>​    <strong><em>We <font color="red">have been</font> friends for ten years.</em></strong></p>
<p>​    <strong><em>I <font color="red">have finished</font> my homework by now(到现在为止).</em></strong></p>
</li>
<li><p>现在完成时常考的时间状语</p>
<ul>
<li><p>for+时间段</p>
<p>for ten days（十天），for a week（一周）</p>
<ul>
<li><strong><em>eg.She <font color="red">has studied</font> English for ten years.</em></strong></li>
</ul>
</li>
<li><p>since+过去时间点</p>
<p>since+一般过去时的从句</p>
<ul>
<li><p><strong><em>eg.She <font color="red">has learned</font> English <u>since 1995</u>.</em></strong></p>
<p>​    <strong>She <font color="red">has learned </font>English since <u>she was a child</u>.</strong></p>
</li>
</ul>
</li>
<li><p><strong>so far;by now; up to now           “到目前为止”</strong></p>
<ul>
<li><p><strong><em>eg.She <font color="red">has learned</font> 8000 words by now.</em></strong></p>
<p>​    <strong>She <font color="red">has learned</font> 8000 words so far</strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="考点08-过去完成时"><a href="#考点08-过去完成时" class="headerlink" title="考点08    过去完成时"></a>考点08    过去完成时</h3><ul>
<li><p>谓语：had + 过去分词（done）</p>
</li>
<li><p>用法：表示过去某个时间或某个动作之前已经完成的动作</p>
<ul>
<li><p><strong><em>eg.在冯绍峰娶赵丽颖之前，他曾爱过倪妮。</em></strong></p>
<p>​    <strong><em>翻译：Feng shaofeng <font color="red">had loved</font> Ni Ni before he <font color="red">married</font> Zhao Liying.</em></strong></p>
<p><strong><em>He bought a new moblie phone last Sunday because his old noe had been stolen.</em></strong></p>
<p><strong><em>总结：两件事都发生在过去，<font color="red">先发生的用过去完成时</font>，后发生的用一般现在时</em></strong></p>
</li>
<li><p>过去完成时常考的时间状语</p>
<ul>
<li><p>by+过去的时间</p>
<p>by the time + 一般过去时的从句    (在…之前)</p>
<ul>
<li><p><strong><em>eg.<u>By the end of last year</u>,he <font color="red">had finshed </font>two papers.</em></strong></p>
<p>​    <strong><em>Peter <font color="red">had colleted</font> 300 stamps <u>by the time he was 10 years old</u>.</em></strong></p>
</li>
</ul>
</li>
<li><p>before + 过去分词</p>
<p>before + 一般过去的从句</p>
<ul>
<li><p><strong><em>eg.<u>Before the end of last year</u>,he <font color="red">had finshed </font>two papers.</em></strong></p>
<p>​    <strong><em>Peter <font color="red">had colleted</font> 300 stamps <u>before the time he was 10 years old</u>.</em></strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="考点09-将来完成时"><a href="#考点09-将来完成时" class="headerlink" title="考点09    将来完成时"></a>考点09    将来完成时</h3><ul>
<li>谓语结构：will/shall have+过去分词（done）</li>
</ul>
<p>​        will适用于各种人称</p>
<p>​        shall have 适用于I/we</p>
<ul>
<li><p>用法：表示将来某个时间或某个动作之前已经完成的动作</p>
<ul>
<li><strong><em>eg.I <font color="red">will have finished</font> the job by the next Friday.</em></strong></li>
</ul>
</li>
<li><p>将来完成是常考的时间状语</p>
<p>by + 将来的时间</p>
<p>by the time + 一般现在时从句</p>
<ul>
<li><p><strong><em>eg.I <font color="red">will have finished</font> my papers <u>by the end of next month.</u></em></strong></p>
<p>​    <strong><em><u>By the time you arrive in Beijing</u>, we <font color="red">wiill have finished</font> the task.</em></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="动词的语态"><a href="#动词的语态" class="headerlink" title="动词的语态"></a>动词的语态</h3><h4 id="考点01-被动语态的结构"><a href="#考点01-被动语态的结构" class="headerlink" title="考点01    被动语态的结构"></a>考点01    被动语态的结构</h4><p><strong><em>He <font color="red">opened</font> font &gt;the door.（主动语态）</em></strong></p>
<p><strong><em>The door <font color="red">was opened </font> by his.（被动语态）</em></strong></p>
<p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220121083655420.png" alt="image-20220121083655420"></p>
<p>一般现在时：am/is/are + done</p>
<p>一般过去式：was/were + done</p>
<p> 一般将来时：will be + done</p>
<p>现在进行时：am/is/are being + done</p>
<p>过去完成时：was/were being + done</p>
<p>现在完成时：have/has been + done</p>
<p>过去完成时：have been + done</p>
<p>将来完成时：will have been +done</p>
<h4 id="考点02-无被动的动词及词组"><a href="#考点02-无被动的动词及词组" class="headerlink" title="考点02    无被动的动词及词组"></a>考点02    无被动的动词及词组</h4><ul>
<li><p><strong><em>eg.The accident was happened last week.(×)</em></strong></p>
<p>​    <strong><em>The accident <font color="red">happened</font> last week.(√)</em></strong></p>
</li>
<li><p>常见的无被动的动词及词组：不及物动词</p>
<p>happen，take place，occur（发生），break out， belong to，prove（证明是）,turn out（结果是），appear，consist of（由…组成），rise…</p>
</li>
</ul>
<h4 id="考点03-主动表被动的四种形式"><a href="#考点03-主动表被动的四种形式" class="headerlink" title="考点03    主动表被动的四种形式"></a>考点03    主动表被动的四种形式</h4><p><strong><em>The pen <font color="red">writes</font> easily.</em></strong></p>
<p><strong><em>The cakes <font color="red">sell</font> quickly.</em></strong></p>
<p><strong><em>The table <font color="red">cleans</font> easily.</em></strong></p>
<ul>
<li>主语（物）+ 特殊动词主动形式（<font color="red">write,sell,drive,wash,clean</font>）+ well,easily</li>
</ul>
<p><strong><em>This silk(丝绸) <font color="red">feels</font> soft.</em></strong></p>
<p><strong><em>The apples <font color="red">taste </font>sweet.</em></strong></p>
<p><strong><em>The song<font color="red"> sounds</font> great.</em></strong></p>
<ul>
<li>主语（物）+  <strong>感官系动词</strong>的主动形式（<font color="red">feel，look，sound，smell，taste</font>）+形容词</li>
</ul>
<p><strong><em>The flowers <font color="red">need watering</font>.</em></strong></p>
<p><strong><em>The washing machine <font color="red">requires repairing</font>.</em></strong></p>
<p><strong><em>Her hair <font color="red">wants cutting</font>.</em></strong></p>
<ul>
<li>主语（物）+want/need/require + doing</li>
</ul>
<p><strong><em>The book<font color="red"> is worth reading</font>.</em></strong></p>
<p><strong><em>The plan <font color="red">is worth considering</font>.</em></strong></p>
<ul>
<li>主语（物）+be worth doing     值得做某事</li>
</ul>
<h2 id="第二节：非谓语动词"><a href="#第二节：非谓语动词" class="headerlink" title="第二节：非谓语动词"></a>第二节：非谓语动词</h2><p>一般情况下一句一主谓，如果超过一个动词</p>
<ol>
<li>用连词“and”，“or”等构成并列句</li>
<li>用连词“which，that，when“等构成三大从句</li>
<li>为打破一个句子只可以有一个中心谓语动词的魔咒，将第二个动词变形为非谓语的形式</li>
</ol>
<p><strong><em>I am a teacher teach English.（×）</em></strong></p>
<p><strong><em>I am a teacher and teach English.（√）</em></strong></p>
<p><strong><em>I am a teacher who teaches English.（√）</em></strong></p>
<p><strong><em>I am a teacher teaching English.（√）</em></strong></p>
<ul>
<li>不定式to do        目的和将来</li>
<li>现在分词doing   进行和一般</li>
<li>过去分词done    被动和完成</li>
</ul>
<ul>
<li><p>用法：</p>
<ul>
<li><p>非谓语动词的否定式的一律在其<strong>正前方</strong>加not</p>
<ul>
<li><strong><em><font color="red">Not having</font> finished his work， he had to stay at home at the weekend.</em></strong></li>
</ul>
</li>
<li><p>非谓语动词做宾语</p>
<ul>
<li><p><strong><em>I love you.</em></strong></p>
<p><strong><em>I love <font color="red">walking</font> along the seaside of Maldives with you.</em></strong></p>
<p><strong><em>I love <font color="red">to walk</font> along the seaside of Maldives with you.</em></strong></p>
<p>实质：谓语动词之后出现第二个动词， 变成非谓语动词</p>
</li>
<li><p>主 + 动词 + to do sth</p>
<p>hope，wish，want， agree， promise</p>
<p>demand，ask，refuse</p>
<p>manage，learn，decide</p>
<p>pretend，choose</p>
</li>
<li><p>口诀：喜欢花费忙着想想 忍不住想要结束练习</p>
<ol>
<li>enjoy doing sth.    喜欢做某事</li>
<li>spend…in doing sth.    花费…做某事</li>
<li>be busy doing sth.     忙于</li>
<li>imagine doing sth.    想想</li>
<li>can’t help doing sth.   忍不住/情不自禁</li>
<li>feel like doing sth.     想要</li>
<li>finish doing sth.      完成</li>
<li>practice  doing sth. 练习</li>
</ol>
<p>口诀：错过建议保持介意值得考虑</p>
<ol>
<li>misss doing sth.        错过</li>
<li>suggest doing sth.    建议</li>
<li>keep （on） doing sth. 保持（继续）</li>
<li>mind doing sth.          介意</li>
<li>be worth doing sth.   值得</li>
<li>consider doing sth.    考虑</li>
</ol>
</li>
</ul>
</li>
<li><p>非谓语作定语</p>
<ol>
<li><p>an <font color="red">interesting </font>story</p>
</li>
<li><p>a car <font color="red">having been repaired</font></p>
</li>
<li><p>the next train <font color="red">to arrive</font> is from New York</p>
</li>
<li><p>实质：前置定语+后置定语</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<pre><code>5. 单个-ing/-ed，前置

   1. -ing+名词：表示用途

      a &lt;font color=&#39;red&#39;&gt;swimming &lt;/font&gt;pool = a pool for swimming

      a &lt;font color=&#39;red&#39;&gt;reading &lt;/font&gt;room = a room for reading

   2. V-ing正在...的，表主动/进行      V-ed已经...的，表完成

      a &lt;font color=&#39;red&#39;&gt;developing &lt;/font&gt;country（发展中的）

      a &lt;font color=&#39;red&#39;&gt;developed &lt;/font&gt;country（发达的）

      &lt;font color=&#39;red&#39;&gt;boiling &lt;/font&gt;water （正在沸腾的）

      &lt;font color=&#39;red&#39;&gt;boiled &lt;/font&gt;water（开水）

      the &lt;font color=&#39;red&#39;&gt;rising &lt;/font&gt;sun（冉冉上升的旭日）

      the &lt;font color=&#39;red&#39;&gt;risen &lt;/font&gt;sun（升起的太阳）

6. 前置定语

   -ing常修饰物，翻译成“令人...”

   -ed常修饰人，翻译成“感到...”

   an &lt;font color=&#39;red&#39;&gt;exciting &lt;/font&gt;new

   an &lt;font color=&#39;red&#39;&gt;excited &lt;/font&gt;man

   a &lt;font color=&#39;red&#39;&gt;moving &lt;/font&gt;film



   ***eg.The girl&lt;font color=&#39;red&#39;&gt; who is sitting&lt;/font&gt; in the corneris       adorable.——&gt;.The girl sitting in the corneris       adorable***

   ​    ***We visited a temple which was built 200 years ago.——&gt;We visited a temple built 200 years ago.***

   ​    ***The vegetables which are sold in this shop are grown without chemicals.——&gt;The vegetables sold in this shop are grown without chemicals.***

   ​    ***The houses which are being built are for the survivors in the quake.——&gt;The houses being built are for the survivors in the quake.***</code></pre>
<ul>
<li><p>非谓语动词作宾补</p>
<p>口诀：要求与命令</p>
<p><font color="red">ask </font>sb. to do sth.</p>
<p><font color="red">tell </font>sb. to do sth.</p>
<p>口诀:想要邀请期待鼓励与建议</p>
<p><font color="red">want </font>sb. to do sth.    想</p>
<p><font color="red">invite </font>sb. to do sth.    邀请</p>
<p><font color="red">expect </font>sb. to do sth.    期待</p>
<p><font color="red">encourage </font>sb. to do sth.    鼓励</p>
<p><font color="red">advise </font>sb. to do sth.    建议</p>
<p><font color="red">suggest </font>sb. to do sth.    建议</p>
<p>一个帮助看着办</p>
<p>help sb. to do sth. = help to do sth.</p>
</li>
</ul>
<pre><code>- 使役动词

  ***have/make/let+人/物+do Let it go.***
  ***have/make/Ilet+人/物+done***

  重要考点：

  &lt;font color=&#39;red&#39;&gt;have sth.done&lt;/font&gt;    让某事被做，即做某事

  have the book &lt;u&gt;printed&lt;/u&gt;（印刷）

  have your eyes &lt;u&gt;examined&lt;/u&gt;（检查）

- 被动to还原

  1. ***My mother &lt;font color=&#39;red&#39;&gt;makes &lt;/font&gt;me &lt;font color=&#39;red&#39;&gt;learn &lt;/font&gt;English every day.***
  2. ***I a&lt;font color=&#39;red&#39;&gt;m made to learn&lt;/font&gt; English every day.***

- 其他常考接宾补动词

  1. ***&lt;font color=&#39;red&#39;&gt;leave/keep&lt;/font&gt; sb doing sth使某人处于某种状态***

     ***eg keep me waiting for 2hours.***

     **leave-left-left **

     ***keep-kept-kept.***

  2. ***&lt;font color=&#39;red&#39;&gt;get&lt;/font&gt; sb.to do sth.使做…***

     ***eg The doctor will get the patient to stop smoking.***</code></pre>
<ul>
<li><p>非谓语动词作状语</p>
<ul>
<li><p>习惯用法：通常放于句首</p>
<ol>
<li>to tell（you）the truth    说实话</li>
<li>to be honest 诚实说；坦白说</li>
<li>to be frank 坦白说</li>
<li>to speak frankly 坦白说</li>
<li>to begin/start with 首先</li>
<li>strange to say 说来奇怪</li>
<li>needless to say 不用说</li>
</ol>
</li>
<li><p>考点：to　do作目的状语可句首可句尾表目的</p>
<p><strong><em>1.We live to serve the people heart and soul.</em></strong></p>
<p><strong><em>2.We study hard to pass the exam.</em></strong></p>
<p><strong><em>3.He got up early to catch the bus.（目的状语）</em></strong></p>
</li>
<li><p>考点：only to（表示出乎意料的结果）</p>
<p><strong><em>eg He hurried to the station only to find the train had left.</em></strong></p>
</li>
<li><p>考点：v-ing与v-ed做状语的两种情况</p>
<ol>
<li><p><strong><em>When he hears the good news,he cries.</em></strong></p>
</li>
<li><p>特点：</p>
<p>​    ①两句有逻辑联系；</p>
<p>​    ②两句主语一样</p>
<p>一主两动</p>
</li>
<li><p><strong><em><font color="red">Hearing</font> the new，he cries.</em></strong> </p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<pre><code>     ***1.We saton the high hillocknd listened to the old story.***

     ***2.We sat on the high hillock,listening to the old story.***

     ***3.Sitting on the high hillock,we listened to the old story.***

  - 独立主格（两主两动）：

    走路的时候，一块馅饼砸到我头上了。

    1. ***When &lt;font color=&#39;red&#39;&gt;I &lt;/font&gt;was walking in a street， &lt;font color=&#39;red&#39;&gt;a pie&lt;/font&gt; fell on my head.***
    2. ***I &lt;font color=&#39;red&#39;&gt;walking&lt;/font&gt; in a street， a pie fell on my head.***



    &lt;font color=&#39;orange&#39;&gt;牢记：独立主格固定句式&lt;/font&gt;

    1. ***&lt;font color=&#39;red&#39;&gt;Time/Weather permitting&lt;/font&gt;，we‘ll go on a journey.***
    2. ***&lt;font color=&#39;red&#39;&gt;Everying taken into consideration&lt;/font&gt;，he ia a very good boy.***
    3. **&lt;font color=&#39;red&#39;&gt;All things considered&lt;/font&gt;，we have to give up the idea.**

    ******</code></pre>
<ul>
<li><p>非谓语动词常考句型</p>
<ol>
<li><p>无用句型：</p>
<p><strong><em>It is no use,no good +（in）doing sth.</em></strong></p>
<p>说多了都是泪。</p>
<p><strong><em>It is no use saying more……….</em></strong></p>
<p><strong><em>There is <font color="red">no use,no good,no point,no sense</font></em></strong><br><strong><em>+（in）doing sth.</em></strong></p>
</li>
<li><p>据说据报道句型<br>+be+said/reported/known/supposed to have done/to have been done..+过去时间状语</p>
<p><strong><em>eg The novels<font color="red"> are reported to have been translated</font> into many languages last year.</em></strong></p>
</li>
<li><p>有do无to </p>
<p>can do nothing but + do </p>
<p>have nothing to do but do（原形）</p>
<p>无do有to：谓语动词不含do，则but后跟to。</p>
<p>have no choice but to do</p>
</li>
<li><p>发现…难做</p>
<p><strong><em>find+sth.difficult/hard/easy + to do</em></strong></p>
<p>finger可换成think，consider</p>
<p>做…有困难</p>
<p><strong><em>have  difficulty/trouble/problem （in） doing</em></strong></p>
</li>
<li><p>复合结构</p>
<p><strong><em>I‘m happy <font color="red">for your telling</font> me the truth.</em></strong></p>
<p><strong><em>I’m angry <font color="red">for Tom‘s not telling</font> me the truth.</em></strong></p>
<p><strong><font color="orange">人物’s+doing</font></strong></p>
</li>
</ol>
</li>
</ul>
<h2 id="第三节：虚拟语气"><a href="#第三节：虚拟语气" class="headerlink" title="第三节：虚拟语气"></a><strong><em>第三节：虚拟语气</em></strong></h2><p>什么是虚拟语气？</p>
<ul>
<li>如果明天下雨，会议将被取消</li>
</ul>
<p>​        <strong><em>If it rains tomorrow，the meeting will be cancelled.</em></strong></p>
<ul>
<li>如果我是范冰冰，我机会马上嫁给李晨。</li>
</ul>
<p>​        <strong><em>If I<font color="red"> were </font>Fan Bingbing，I <font color="red">would marry</font> Li Chen.</em></strong></p>
<ul>
<li>用来表达不可能实现的愿望或与事实相反的假设</li>
</ul>
<h3 id="一、-if型条件虚拟"><a href="#一、-if型条件虚拟" class="headerlink" title="一、    if型条件虚拟"></a>一、    if型条件虚拟</h3><h4 id="考点01-if型条件虚拟表格"><a href="#考点01-if型条件虚拟表格" class="headerlink" title="考点01    if型条件虚拟表格"></a>考点01    if型条件虚拟表格</h4><table>
<thead>
<tr>
<th>条件从句</th>
<th>if从句</th>
<th>主句</th>
</tr>
</thead>
<tbody><tr>
<td>现在</td>
<td>动词的过去式（be用were）</td>
<td>would/could/should/might + do</td>
</tr>
<tr>
<td><strong>过去</strong></td>
<td><strong><font color="red">had done</font></strong></td>
<td><strong><font color="red">would/could/should/might + have done</font></strong></td>
</tr>
<tr>
<td>将来</td>
<td>1.动词的过去式（be用were）<br>2.were to do <br>3.should do</td>
<td>would/could/should/might + do</td>
</tr>
</tbody></table>
<p><strong><em>If I <font color="red">earned</font> a lot money，I <font color="red">will buy</font> a Ferrari（法拉利）.</em></strong></p>
<p><strong><em>If I <font color="red">had studied</font> hard，I <font color="red">would have  entered</font> a good university.</em></strong></p>
<p><strong><em>If you <font color="red">should successed</font> in CET-6，everything <font color="red">would be </font>all right.</em></strong></p>
<h4 id="考点02-错综虚拟"><a href="#考点02-错综虚拟" class="headerlink" title="考点02    错综虚拟"></a>考点02    错综虚拟</h4><p><strong><em>If you <font color="red">had proposed</font> to her <u>last year</u>，she <font color="red">would be</font> your wife <u>now</u>.</em></strong></p>
<h4 id="考点03-省略if型虚拟"><a href="#考点03-省略if型虚拟" class="headerlink" title="考点03    省略if型虚拟"></a>考点03    省略if型虚拟</h4><p><strong><em>If I <font color="red">were</font> Fan Bingbing， I <font color="red">would marry</font> Li Chen immediately.</em></strong></p>
<p><strong><em><font color="red">Were</font> I Fan Binging，I would marry Li Chen immediately.</em></strong></p>
<ul>
<li>省略if的条件：从句中必须有were，had或should当中的任何一个</li>
<li>省略方法：<ol>
<li>去掉if；</li>
<li>把were，had或should提到主语前（句首）</li>
</ol>
</li>
</ul>
<h3 id="二、-含蓄虚拟"><a href="#二、-含蓄虚拟" class="headerlink" title="二、    含蓄虚拟"></a>二、    含蓄虚拟</h3><p><strong><em><font color="red">Without </font>God‘s help，Jack couldn’t have got the ticket.</em></strong></p>
<ol>
<li>without，but for        +名词/名词短语</li>
<li>or，otherwise            +句子    </li>
</ol>
<ul>
<li>对现在/将来的虚拟：</li>
</ul>
<p>​         <strong><em>would/could/should/might + do</em></strong> </p>
<ul>
<li><p>对过去的虚拟</p>
<p><strong><em>would/could/should/might + have done</em></strong></p>
<ul>
<li><p><strong><em>eg:<font color="red">Without</font> CPC,we <u>could not live</u> a happy life now.</em></strong></p>
<p><strong><em>He felt very tired yesterday,<font color="red">or</font> he would have attended the party.</em></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="三、-should型虚拟"><a href="#三、-should型虚拟" class="headerlink" title="三、    should型虚拟"></a>三、    should型虚拟</h3><ol>
<li><p>adj标志词</p>
<ul>
<li><p>形容词+that从句</p>
<p>从句谓语：should+do（should常省略）</p>
<p><strong><em>important essential necessary vital</em></strong></p>
<p><strong><em>advisable preferable desirable</em></strong></p>
<p><strong><em>imperative strange sorry</em></strong></p>
<p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220124074817439.png" alt="image-20220124074817439"></p>
</li>
</ul>
</li>
<li><p>动词标志词（考频最多）</p>
<ul>
<li><p>形容词+that从句</p>
<p>从句谓语：should+do（should常省略）</p>
<p><strong><em>insist 坚持</em></strong></p>
<p><strong><em>oder，command 要求；命令</em></strong></p>
<p><strong><em>asvise，suggest，propose 建议</em></strong></p>
<p><strong><em>demand，ask，require，request 要求</em></strong></p>
<p>口诀：一坚持二命令三建议四要求</p>
<p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220124075706691.png" alt="image-20220124075706691"></p>
</li>
</ul>
</li>
<li><p>名词标志词</p>
<p><font color="red"><strong>名词</strong></font>+that从句</p>
<p>从句谓语：should+do（should常省略）</p>
<p><strong><em>suggestion advise         两建议</em></strong></p>
<p><strong><em>demand requirement  两要求</em></strong></p>
<p><strong><em>order command            两命令</em></strong></p>
<p><strong><em>proposal                        一提议</em></strong></p>
<p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220124075706691.png" alt="image-20220124075706691"></p>
</li>
<li><p>连词性标志词</p>
<ul>
<li><p><strong><em>lest（以防万一）= in case</em></strong></p>
<p><strong><em>for fear that（唯恐；为了防止）</em></strong></p>
<p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220124081213835.png" alt="image-20220124081213835"></p>
</li>
</ul>
</li>
</ol>
<h3 id="四、-句型虚拟"><a href="#四、-句型虚拟" class="headerlink" title="四、    句型虚拟"></a>四、    句型虚拟</h3><ol>
<li><p>would rather    宁愿</p>
<p>现在：过去式（be用were）</p>
<p>将来：过去式（be用were）</p>
<p>过去：had done</p>
</li>
<li><p>wish 但愿</p>
<p>if only 如果…就好了</p>
<p>as if/as though 好像</p>
<ul>
<li><p>现在：过去式（be用were）</p>
<p><strong>将来：would/could/might/ + do</strong></p>
<p>过去：had done</p>
</li>
</ul>
</li>
<li><p>high time句型</p>
<ul>
<li><p><strong><em><font color="red">It is （high/about） time （that）…</font></em></strong></p>
<p>“该做…的时候了”</p>
<p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220124082707148.png" alt="image-20220124082707148"></p>
<ul>
<li><strong><em>eg.It is high time you worked hard.</em></strong></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="第四节：定语从句"><a href="#第四节：定语从句" class="headerlink" title="第四节：定语从句"></a>第四节：定语从句</h2><p><strong>什么是定语从句？</strong></p>
<ul>
<li><p>赵丽颖是一个<font color="red">可爱的</font>女孩。</p>
<p><strong><em>Zhao Liying is a  <font color="red">lovely girl.</font></em></strong></p>
</li>
<li><p>赵丽颖是一个<font color="red">勤奋的</font>女孩。</p>
<p><strong><em>Zhao Liying is a <font color="red"> diligent girl.</font></em></strong></p>
</li>
<li><p><strong>有着一张圆圆的脸的</strong>女孩是赵丽颖。</p>
<p><strong><em>The girl <font color="red">who has a roud face</font> is Zhao Liying.</em></strong></p>
</li>
<li><p>赵丽颖是一个<strong>受许多人欢迎的</strong>女孩.</p>
<p><strong><em>Zhao Liying is a girl <font color="red">who is popular</font> with many people.</em></strong></p>
</li>
</ul>
<ol>
<li>先行词：被定语从句修饰的名词/代词，位于定语从句之前</li>
<li>关系词：引导定语从句的连词，位于先行词之后</li>
<li><strong>主句和从句的划分方法</strong><ul>
<li>从句的起点：关系词之前开始</li>
<li>从句的终点：<ol>
<li>关系词开始有一个谓语动词，到句尾结束</li>
<li>关系词开始有两个谓语动词，到第二个谓语之前结束<ul>
<li><strong><em><font color="red">The man</font>  <font color="cornflowerblue">who is shaking hands with Mary</font> <font color="orange">is Tom.</font></em></strong></li>
<li><strong><em><font color="red">The movie</font>  <font color="cornflowerblue">which we saw last night</font> <font color="orange">was interesting</font>.</em></strong></li>
<li><strong><em>I still remember the day <font color="cornflowerblue">when I first came</font>.</em></strong>限制性定语从句</li>
<li><strong><em>People who take physical exercise live longer.</em></strong>非限制性定语从句</li>
<li><strong><em>Her boyfriend,who is in Beijing now,is coming home next week.</em></strong></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="一、-关系词的选用"><a href="#一、-关系词的选用" class="headerlink" title="一、 关系词的选用"></a>一、 关系词的选用</h3><h4 id="考点01-关系词的分类及作用"><a href="#考点01-关系词的分类及作用" class="headerlink" title="考点01    关系词的分类及作用"></a>考点01    关系词的分类及作用</h4><ul>
<li><p>关系词分类：</p>
<p>关系代词：**<em>who    whom    which    that    whose    as**</em></p>
<p>关系副词：<strong>when    where    why</strong></p>
<ul>
<li><p><strong><em>The man who is shaking hands with Mary is Tom.</em></strong></p>
<p>关系词的作用：</p>
<ul>
<li><p>连接作用（连接主句和从句）</p>
</li>
<li><p>指代作用（指代前面的先行词）</p>
<p>在从句中充当一定的成分</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="考点02-关系词的通常选用方法"><a href="#考点02-关系词的通常选用方法" class="headerlink" title="考点02    关系词的通常选用方法"></a>考点02    关系词的通常选用方法</h4><table>
<thead>
<tr>
<th>关系词</th>
<th>先行词</th>
<th>从句成分</th>
</tr>
</thead>
<tbody><tr>
<td><font color="red"><strong>who</strong></font></td>
<td>人</td>
<td>主语、宾语</td>
</tr>
<tr>
<td><font color="red"><strong>whom</strong></font></td>
<td>人</td>
<td>宾语</td>
</tr>
<tr>
<td><font color="red"><strong>which</strong></font></td>
<td>物</td>
<td>主语、宾语</td>
</tr>
<tr>
<td><font color="red"><strong>that</strong></font></td>
<td>人或物</td>
<td>主语、宾语、表语</td>
</tr>
<tr>
<td><font color="cornflowerblue"><strong>when</strong></font></td>
<td>时间</td>
<td>时间状语</td>
</tr>
<tr>
<td><font color="cornflowerblue"><strong>where</strong></font></td>
<td>地点</td>
<td>地点状语</td>
</tr>
<tr>
<td><font color="cornflowerblue"><strong>why</strong></font></td>
<td>原因</td>
<td>原因状语</td>
</tr>
</tbody></table>
<p>选用步骤：</p>
<ul>
<li><p>看先行词</p>
</li>
<li><p>看从句缺什么成份</p>
<p>如果从句缺少主干成份，答案在关系代词中选</p>
<p>如果从句不缺少主干成份，答案在关系副词中选</p>
</li>
<li><p>怎么判断不缺主干成份？</p>
<p><strong><em>The man who <u>is shaking hands with Mary</u> is Tom.</em></strong></p>
<p><strong><em>The factory which we will visit next week is far from here.</em></strong></p>
<p><strong><em>The company where I work is far from here.</em></strong></p>
</li>
<li><p>常见的及物动词：及物动词缺宾语要加宾语</p>
<ul>
<li><strong><em>remember    forget    visit    spend    say    finish    do</em></strong><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220124124114032.png" alt="image-20220124124114032"></li>
<li>介词（+宾语）</li>
<li>常见的不及物动词<ul>
<li><strong><em>work    go    come    stay    live    listen    look    arrive    rise    depend    suffer</em></strong></li>
<li>be done被动语态后不缺宾语</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="考点03-关系词的特殊选用方法"><a href="#考点03-关系词的特殊选用方法" class="headerlink" title="考点03    关系词的特殊选用方法"></a>考点03    关系词的特殊选用方法</h4><ul>
<li><p>which的特殊用法</p>
<p><strong><em>Rose has fallen in love with Tom,which I can’t believe.</em></strong></p>
<p>which可指代前面一整句话！</p>
<p>此时which译为：“这一点，这件事”</p>
<p><strong><em>He succeeded in the competition,which made his parents very happy.</em></strong></p>
</li>
<li><p>whose的特殊用法</p>
<p>先行词+whose+n</p>
<ul>
<li><p><strong><em>eg.This is Jim whose homework is praised by the teacher.</em></strong></p>
<p>​    <strong><em>The house whose windows face the sea is broken.</em></strong></p>
</li>
</ul>
</li>
<li><p>as的特殊用法</p>
<ul>
<li><p>as放于句首的用法</p>
<p><strong><em>As is known to all</em></strong>               众所周知</p>
<p><strong><em>As is reported</em></strong>                      据报道</p>
<p><strong><em>As is expected</em></strong>                     正如被期待的那样</p>
<p><strong><em>As is mentioned above</em></strong>      正如上面提到的那样        </p>
<p><strong><em>As is often the case</em></strong>            情况通常如此</p>
</li>
<li><p>as放于句中的用法</p>
<p>such/the same + 先行词 + as </p>
<p><strong><em>I have never  seen such a clever  man <font color="red">as </font>he is.</em></strong></p>
<p><strong><em>I like the same books <font color="red">as </font>you like.</em></strong></p>
</li>
</ul>
</li>
<li><p>that的特殊使用情况：</p>
<ul>
<li><p>先行词为以下不定代词或被这些不定代词修饰时：<br><strong><em>all,everything,anything,something,nothing, little,none,any</em></strong>等，关系词一般用that.</p>
<ul>
<li><strong><em>eg.I was very interested in all <font color="red">that </font>she told me.</em></strong></li>
</ul>
</li>
<li><p>先行词被序数词、形容词最高级等词修饰时，关系词一般用that</p>
<ul>
<li><strong><em>eg.This is the best novel <font color="red">that </font>I have ever  read.</em></strong></li>
</ul>
</li>
<li><p>先行词即有人又有物，只能用that</p>
<ul>
<li><strong><em>eg.We’re talking about the piano and the pianist <font color="red">that </font>were in the concert we attended last night.</em></strong></li>
</ul>
</li>
<li><p>that的使用禁忌：</p>
<p>that使用有禁忌</p>
<p>介词后面不考虑，</p>
<p>逗号后面他不去</p>
<p>换个which来代替。</p>
</li>
</ul>
</li>
</ul>
<h3 id="二、-介词-关系代词"><a href="#二、-介词-关系代词" class="headerlink" title="二、    介词+关系代词"></a>二、    介词+关系代词</h3><h4 id="考点01-介词-关系代词"><a href="#考点01-介词-关系代词" class="headerlink" title="考点01    介词+关系代词"></a>考点01    介词+关系代词</h4><ul>
<li><p><strong><em>The man to whom you speak is a teacher.</em></strong><br><strong><em>=The man whom you speak to is a teacher.</em></strong></p>
<p><strong><em>The city _in which she lives is far away.</em></strong><br><strong><em>=The city which she lives in is far away.</em></strong></p>
<ul>
<li><p>先行词是人，介词后用whom</p>
<p>先行词是物，介词后用which</p>
<p>介词的选取问题</p>
<p><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220124172836853.png"></p>
</li>
</ul>
</li>
</ul>
<h4 id="考点02-关系副词-介词-which"><a href="#考点02-关系副词-介词-which" class="headerlink" title="考点02    关系副词=介词+which"></a>考点02    关系副词=介词+which</h4><ul>
<li><p>这是我们一起学习的大学</p>
<p><strong><em>This is the college <font color="red">where </font>we study together.</em></strong></p>
<p><strong><em>This is the college <font color="red">in which </font>we study together.</em></strong></p>
<p><strong>总结：<font color="orange">where =  in which</font></strong></p>
</li>
<li><p>when = 介词 +which</p>
<p><strong><em>year    =    in which</em></strong></p>
<p><strong><em>day    =    on which</em></strong></p>
<p><strong><em>期间    =    during which</em></strong></p>
</li>
<li><p><strong><em>why = for which</em></strong></p>
</li>
</ul>
<h4 id="考点03-介词-关系代词的常见两种结构"><a href="#考点03-介词-关系代词的常见两种结构" class="headerlink" title="考点03    介词+关系代词的常见两种结构"></a>考点03    介词+关系代词的常见两种结构</h4><ul>
<li><p><strong>the+名词+of+which/whom</strong></p>
<p>结构中名词和后面的关系代词为所属关系</p>
<ul>
<li><strong><em>eg.This is the book <font color="red">the cover of which</font> is designed by Lucy.</em></strong></li>
</ul>
</li>
<li><p>表示部分的词语+of+which/whom（物用which；人用whom）</p>
<ul>
<li><strong><em>some，most，either，neither，both，none，all，every，each，数词，分数/百分比，最高级等</em></strong></li>
</ul>
</li>
</ul>
<h2 id="第五节：状语从句"><a href="#第五节：状语从句" class="headerlink" title="第五节：状语从句"></a>第五节：状语从句</h2><p><strong>什么是状语从句？</strong></p>
<p><strong><em>eg: I will go shopping <u>tomorrow.</u></em></strong></p>
<p>​    <strong>I will visit my parents <u>when I have time.</u></strong></p>
<ul>
<li>含义：在主从复合句中，充当状语的从句</li>
<li>分类：按照功能分九类</li>
<li>位置：可位于句前，也可位于句后</li>
</ul>
<h3 id="一、-让步状语从句"><a href="#一、-让步状语从句" class="headerlink" title="一、    让步状语从句"></a>一、    让步状语从句</h3><ul>
<li><p>让步状语从句连词分类：</p>
<ol>
<li><p>“尽管，尽然”类</p>
<ul>
<li><p><strong><em>although, though, even if, even though, while</em></strong></p>
<p><strong><em>eg.Although he is poor, he often helps others.</em></strong></p>
<p>​    <strong><em>Though we are poor, we are still happy.</em></strong></p>
<p>​    <strong><em>She can’t find the answer even if she is smart.</em></strong></p>
</li>
<li><p>as（需要特殊倒装）</p>
<p><font color="red"><strong>公式：adj/adv/n/v + as + 主 + 谓</strong></font></p>
<p><strong>考点：</strong></p>
<p>​    as放第二位</p>
<p>​    后面是“主+谓”陈述语序</p>
<p>​    n前不加任何冠词</p>
<p><strong><em>eg: Smart as he is, he can’t find the answer.</em></strong></p>
</li>
</ul>
</li>
<li><p>疑问词+ever = no matter + 疑问词</p>
<ul>
<li><p>whatever = no matter what（无论什么）</p>
<p>考点：语序问题</p>
<p>​    whatever + 名词</p>
<p>​    whatever + 主 + 谓</p>
<p><strong><em>eg.<font color="red">Whatever</font> you want to do, you should try your best.</em></strong></p>
</li>
<li><p>however = no matter how（无论怎样）</p>
<p><font color="red">no matter how + adj/adv<br>主+谓</font></p>
<p><font color="red">however<br>+adj/adv+主+谓</font></p>
<p><strong><em>eg: We must finish the work , <font color="red">no matter how</font></em></strong><br><strong><em>difficult it is.</em></strong></p>
</li>
<li><p>whoever = no matter who（无论谁）</p>
<p><strong><em>eg: <font color="red">Whoever</font> you are, you should turn off the</em></strong><br><strong><em>light.</em></strong></p>
</li>
<li><p>wherever = no matter where（无论哪里）</p>
</li>
<li><p>whenever = no matter when（无论何时）</p>
<p>​    <strong><em>eg: <font color="red">Wherever</font> he went , he carried a notebook</em></strong><br><strong><em>with him.</em></strong></p>
<p>​        <strong><em><font color="red">Whenever </font>he tried to explain any new idea, he</em></strong><br><strong><em>just couldn’t make himself understood.</em></strong></p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="二、-条件状语从句"><a href="#二、-条件状语从句" class="headerlink" title="二、 条件状语从句"></a>二、 条件状语从句</h3><ul>
<li><p><font color="red"><strong>IF</strong></font></p>
<p>含义：如果</p>
<p>用法：主将从现</p>
<p><strong><em>eg.<font color="red">If </font>it ranis tomorrow,the flight will be cancelled.</em></strong></p>
</li>
<li><p><font color="red"><strong>unless</strong></font></p>
<p>含义：如果不；除非=if not</p>
<p>用法：和if一样（主将从现）</p>
<p><strong><em>eg: We won’t arrive there on time, <font color="red">unless </font>we</em></strong><br><strong><em>reserve the earliest flight.</em></strong></p>
<p>​    <strong><em>You will miss the bus <font color="red">unless </font>you hurry uo.</em></strong></p>
</li>
<li><p>as long as = so long as</p>
<p>含义：只要</p>
<p>用法：主将从现</p>
<p><strong><em>eg.<font color="red">As long as</font> we work hard, we will succeed.</em></strong></p>
</li>
<li><p>provided(taht) = providing(that)</p>
<p>含义：假如</p>
<p><strong><em>eg: The car will be in good condition <font color="red">provided</font></em></strong><br><strong><em>that it is taken care of carefully.</em></strong></p>
</li>
<li><p>on condition that</p>
<p>含义：条件是</p>
<p><strong><em>eg: I will lend you the book<font color="red"> on condition that</font>you return it to me in time.</em></strong></p>
</li>
<li><p>in case</p>
<p>含义：万一；如果</p>
<p><strong><em>eg<font color="red">.In case</font> John comes, please tell him wait.</em></strong></p>
</li>
</ul>
<h3 id="三、-原因状语从句"><a href="#三、-原因状语从句" class="headerlink" title="三、 原因状语从句"></a>三、 原因状语从句</h3><ul>
<li><p>because（直接原因）</p>
<p>位置：多位于句末</p>
<p>考点：because和because of的区别</p>
<p>​        because（连词）+ 句子</p>
<p>​        because of（介词词组）+ 名词/代词</p>
<p><strong><em>eg: The boy was very upset <font color="red">because </font>he couldn’t</em></strong><br><strong><em>find his dog.</em></strong></p>
</li>
<li><p>for</p>
<p>含义：因为；由于</p>
<p>用法：后跟补充说明的理由或原因</p>
<p>​            常位于主句之后</p>
<p><strong><em>eg: I believe her, <font color="red">for </font>she doesn’t lie to me.</em></strong></p>
<p>​    <strong><em>I can’t find Lucy, <font color="red">for </font>I have never seen her.</em></strong></p>
</li>
<li><p>as</p>
<p>含义：因为，由于</p>
<p>位置：经常放于句首</p>
<p><strong><em>eg: <font color="red">As </font>it is very cold today, he decides not to</em></strong><br><strong><em>go out.</em></strong></p>
</li>
<li><p>since = now that</p>
</li>
<li><p>含义：既然（表示对方已知的原因）</p>
<p><strong>eg: <font color="red">Since </font>everyone has come, we can set off.</strong></p>
</li>
</ul>
<p>  ​    <strong><em><font color="red">Now that</font> everyone has come, we can set off.</em></strong></p>
<ul>
<li><p>considering that</p>
<p>含义：鉴于，顾及到</p>
<p><strong><em>eg: <font color="red">Considering </font>that many people were absent,</em></strong><br><strong><em>we decided to put off the meeting.</em></strong></p>
</li>
<li><p>in that</p>
<p>含义：因为，由于</p>
<p><strong><em>eg: The place is great <font color="red">in that</font> it is far from the</em></strong><br><strong><em>downtown area.</em></strong></p>
</li>
</ul>
<h3 id="四、-时间状语从句"><a href="#四、-时间状语从句" class="headerlink" title="四、 时间状语从句"></a>四、 时间状语从句</h3><ul>
<li><p>常用时间状语从句连词：</p>
<ul>
<li><p>when，while，as（当…的时候）</p>
</li>
<li><p>before（在…以前），after（在…之后）</p>
</li>
<li><p>since（自从…以来）</p>
</li>
<li><p>not…until(直到…才)</p>
</li>
<li><p>as soon as（一…就）</p>
<p>the moment = the minute</p>
<p>no sooner… than = hardly…when…</p>
</li>
</ul>
</li>
</ul>
<h3 id="五、-地点状语从句"><a href="#五、-地点状语从句" class="headerlink" title="五、    地点状语从句"></a>五、    地点状语从句</h3><ul>
<li><p>常用地点状语从句连词：</p>
<p>where(在………地方)</p>
<p>wherever(在任何地方)</p>
<p>everywhere(在每个地方)</p>
<p><strong><em>eg: You should leave things <font color="red">where </font>you can find</em></strong><br><strong><em>them.</em></strong></p>
</li>
</ul>
<h3 id="六、-结果状语从句"><a href="#六、-结果状语从句" class="headerlink" title="六、    结果状语从句"></a>六、    结果状语从句</h3><ul>
<li>常用结果状语从句连词：</li>
</ul>
<p>​        so…that…如此…..以至于</p>
<p>​        such… that…如此….以至于</p>
<p>​        <strong><em>eg: He ran so quickly <font color="red">that </font>we all couldn’t catch</em></strong><br><strong><em>up with him.</em></strong></p>
<p>​        <strong><em>Mike is so honest a man <font color="red">that </font>we all believe him.</em></strong></p>
<h3 id="七、-目的状语从句"><a href="#七、-目的状语从句" class="headerlink" title="七、    目的状语从句"></a>七、    目的状语从句</h3><ul>
<li><p>常用目的状语从句连词：</p>
<p>so that..为了，以便于</p>
<p>in order that…为了,以便</p>
<p>lest,for fear that, in case 以免, 以防</p>
<p><strong><em>eg: I am studying hard <font color="red">so that</font> I can go to a</em></strong><br><strong><em>famous university.</em></strong></p>
</li>
</ul>
<h3 id="八、-比较状语从句"><a href="#八、-比较状语从句" class="headerlink" title="八、    比较状语从句"></a>八、    比较状语从句</h3><ul>
<li><p>常用比较状语从句连词：</p>
<ol>
<li><p>as…as.… 像..…—样</p>
<p><strong><em>eg: He studies <font color="red">as hard as</font> his brother.</em></strong></p>
<p>​    <strong><em>This film is <font color="red">as interesting as</font> that one.</em></strong></p>
</li>
<li><p>than…比…..</p>
<p><strong><em>eg : The new library is twice larger <font color="red">than</font> the old</em></strong><br><strong><em>one.</em></strong></p>
<p>​    <strong><em>The youth of today are better off <font color="red">than </font>we used</em></strong><br><strong><em>to be.</em></strong></p>
<ul>
<li><p>总结：倍数表达法</p>
<ul>
<li><p>倍数表达法一：</p>
<p><strong><font color="red">A+谓语+倍数 +as +adj/adv 原级+as +B..</font></strong><br><strong><em>eg:The new library is three times as large as the</em></strong><br><strong><em>old one.</em></strong></p>
</li>
<li><p>倍数表达法二：</p>
<p><strong><font color="red">A+谓语+倍数 +比较级+than+B…</font></strong></p>
<p><strong><em>eg: The new library is twice larger than the old</em></strong><br><strong><em>one.</em></strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>the+比较级…, the +比较级….…（越…就越…）</p>
<p><strong><em>eg: The harder you work, the luckier you will be.</em></strong></p>
</li>
</ol>
</li>
</ul>
<h3 id="九、-方式状语从句"><a href="#九、-方式状语从句" class="headerlink" title="九、    方式状语从句"></a>九、    方式状语从句</h3><ul>
<li>常用方式状语从句连词：</li>
</ul>
<p>​        as（按照）</p>
<p>​        just as(正如)</p>
<p>​        as if,as though(好像）</p>
<p>​        <strong><em>eg: We must do as our teacher tells us (to do).</em></strong><br><strong><em>He looks as if he is angry.</em></strong></p>
<h2 id="第六节：名词性从句"><a href="#第六节：名词性从句" class="headerlink" title="第六节：名词性从句"></a>第六节：名词性从句</h2><p><strong>什么是名词性从句？</strong></p>
<p>​    含义：<br>在主从复合句中，充当主语、宾语、表语、同位语从句</p>
<p>​    分类：按照所作成分可分为四类</p>
<p><strong>1.主语从句</strong></p>
<ul>
<li><p><strong><em><font color="red">His jod</font> is boring.</em></strong></p>
</li>
<li><p><strong><em><font color="red">What he does every day</font> is boring.</em></strong></p>
<ul>
<li><p>位置：常在与句首，主机谓语动词前</p>
<p><strong><em>eg.<font color="red">Taht I love you</font> is true.</em></strong></p>
<p>​    <strong><em><font color="red">That we finish our task early</font> is necessary.</em></strong></p>
<ul>
<li><p><strong><em><font color="red">It</font> necessary that we finish our task early.</em></strong></p>
<p>It作形式主语，真正的主语是that从句</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>2.宾语从句</strong></p>
<ul>
<li><p><strong><em>I don’t like <font color="red">his job</font>.</em></strong></p>
</li>
<li><p><strong><em>I don’t <font color="red">what he does every day</font>.</em></strong></p>
</li>
<li><p>位置：常位于动词、介词之后</p>
<p><strong><em>eg:I believe <font color="red">that you will pass</font> the <font color="red">exam</font>.</em></strong></p>
<p>​    <strong><em>I think about what I should do.</em></strong></p>
<p><strong><em>I think it important that I will never give up.</em></strong></p>
<p>it作形式宾语，真正的宾语是that从句</p>
</li>
</ul>
<p><strong>3.表语从句</strong></p>
<ul>
<li><p><strong><em>This is <font color="red">his job</font>.</em></strong></p>
</li>
<li><p><strong><em>This is <font color="red">what he does every day</font>.</em></strong></p>
</li>
<li><p>位置：常跟在系动词后（be动词、感官系动词）</p>
<p><strong><em>eg:Our plan is <font color="red">that we will get married next year</font>.</em></strong></p>
<p>​        <strong><em>It seems <font color="red">that it is going to snow</font>.</em></strong></p>
</li>
</ul>
<p><strong>4.同位语从句</strong></p>
<ul>
<li><p><strong><em>I know Ma Yun，a teacher.</em></strong></p>
</li>
<li><p><strong><em>I know the new that <font color="red">he doesn’t like money</font>.</em></strong></p>
</li>
<li><p>常放在抽象名词后，对其进行解释说明，通常有that引导</p>
<p>eg:That is the fact that he passed the CET-6.</p>
<ul>
<li><p>常见的抽象名词：</p>
<p><strong><em>fact、news、idea、doubt、conclusion（结论）、</em></strong></p>
<p><strong><em>evidence（证据）</em></strong></p>
</li>
</ul>
</li>
</ul>
<p><strong>练习：判断下列是哪种从句？</strong></p>
<ul>
<li><strong><em>That I love you is true.</em></strong></li>
<li><strong><em>He says that he loves me.</em></strong></li>
<li><strong><em>Our plan is that we will get married next year.</em></strong></li>
<li><strong><em>The news that Mary passed away is amazing.</em></strong></li>
</ul>
<h3 id="考点01-名词性从句语序问题"><a href="#考点01-名词性从句语序问题" class="headerlink" title="考点01    名词性从句语序问题"></a>考点01    名词性从句语序问题</h3><ul>
<li><p>名词性从句使用陈述语序：</p>
<p><strong><font color="red">引导词+主语+谓语</font></strong></p>
</li>
</ul>
<p><strong>eg:你是谁？</strong></p>
<p><strong>Who are you?</strong></p>
<p><strong>请忘记你是谁。</strong></p>
<p><strong>Please forget <font color="red">who you are</font>.</strong></p>
<ul>
<li>名词性从句的语序题解题步骤：<ul>
<li>如果选项中的引导词没有放在从句最前面，<br>排除！</li>
<li>如果引导词后面不是“主+谓”的形式，排除！</li>
<li>剩下选项即为正确答案。</li>
</ul>
</li>
</ul>
<h3 id="考点02-名词性从句引导词的选用"><a href="#考点02-名词性从句引导词的选用" class="headerlink" title="考点02    名词性从句引导词的选用"></a>考点02    名词性从句引导词的选用</h3><ul>
<li><p>引导词的分类：</p>
<ul>
<li><p>连接词：that</p>
</li>
<li><p>连接词：whether/if</p>
</li>
<li><p>连接代词：what,which,who,whom,-ever</p>
</li>
<li><p>连接副词：when,where,why,how,-evr</p>
</li>
</ul>
<ol>
<li><p>连接词：that</p>
<ul>
<li><p>连接作用</p>
</li>
<li><p>没有任何含义</p>
</li>
<li><p>不作任何成分</p>
</li>
<li><p>只有在引导宾语从句时才可以省略</p>
<p><strong><em>eg: I believe <font color="red">that </font>he is right.</em></strong></p>
</li>
</ul>
</li>
<li><p>连接词：whether/if</p>
<ul>
<li><p>连接作用</p>
</li>
<li><p>有含义：“是否”（不确定的含义）</p>
</li>
<li><p>在从句中不作任何成分</p>
</li>
<li><p>任何情况下都不可省略</p>
<p><strong><em>eg:<font color="red">Whether he will agree</font> is unknown.</em></strong></p>
</li>
</ul>
<p><strong><font color="orange">补充：</font></strong></p>
<ul>
<li><p>whether和if的区别</p>
<p><font color="red"><strong>表“是否”含义，只能用whether的情况</strong></font></p>
<ul>
<li><p>whether…or not</p>
<p>当后面跟or not 时用whether（固定搭配），<br>or not可紧跟whether后，也可分开。</p>
<p><strong><em>eg: I didn’t know <font color="red">whether or not</font> he had arrived</em></strong><br><strong><em>in Beijing.</em></strong></p>
</li>
<li><p>置于句首的主从</p>
</li>
<li><p>同位语从句和表从</p>
</li>
<li><p>介词+whether</p>
</li>
<li><p>whether to do</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>连接代词：what</p>
<ul>
<li><p>连接作用</p>
</li>
<li><p>指代所说的话、所做的事儿或所看见的东西<br>（不可指代人，除人之外都可以指代）</p>
</li>
<li><p>在从句中作主语、宾语或表语</p>
<p><strong><em>eg:<font color="red">What</font> he said made me happy.</em></strong></p>
</li>
</ul>
</li>
<li><p>连接代词：which</p>
<ul>
<li><p>连接作用</p>
</li>
<li><p>有含义：“哪一个”</p>
</li>
<li><p>指代物，在从句中作主语、宾语</p>
</li>
<li><p>which+名词</p>
<p><strong><em>eg:There are three books here.I don’t know</em></strong><br><strong><em><font color="red">which book I should choose</font>.</em></strong></p>
</li>
</ul>
</li>
<li><p>连接代词：who</p>
<ul>
<li><p>连接作用</p>
</li>
<li><p>不可指物</p>
</li>
<li><p>指代人</p>
</li>
<li><p>在从句中作主语/宾语</p>
<p><strong><em>eg: I want to know who gives you the book.</em></strong></p>
</li>
</ul>
</li>
<li><p>连接代词：whom</p>
<ul>
<li><p>连接作用</p>
</li>
<li><p>指代人</p>
</li>
<li><p>在从句中作宾语</p>
<p><strong><em>eg: I want to know <font color="red">whom the car belongs to</font>.</em></strong></p>
</li>
</ul>
</li>
<li><p>连接代词：-ever</p>
<ul>
<li><p>whoever            无论谁（主格）</p>
<ul>
<li><p>连接作用</p>
</li>
<li><p>指代人</p>
</li>
<li><p>在从句中作主语/宾语</p>
<p><strong><em>eg:<font color="red"> Whoever</font> comes back first is the winner.</em></strong></p>
</li>
</ul>
</li>
<li><p>whomever</p>
<pre><code>    无论谁（宾格）</code></pre>
</li>
<li><p>whatever           无论什么</p>
</li>
<li><p>whichever          无论哪一个</p>
</li>
</ul>
</li>
<li><p>连接副词：when</p>
<p>含义：什么时候，何时</p>
<p><strong><em>eg: I ask him <font color="red">when </font>he will be back to pick me</em></strong><br><strong><em>up.</em></strong></p>
</li>
<li><p>连接副词：where</p>
<p>含义：什么地方，何地</p>
<p><strong><em>eg: <font color="red">Where she lives</font> hasn’t been found out.</em></strong></p>
</li>
<li><p>.连接副词：why</p>
<p>含义：为什么</p>
<p><strong><em>eg: She explained <font color="red">why she failed in the maths<br>exam</font>.</em></strong></p>
</li>
<li><p>连接副词：how</p>
<p>含义：如何，怎样</p>
<p><strong><em>eg: I asked him <font color="red">how we could get the tickets<br>for the New Year Party</font>.</em></strong></p>
</li>
<li><p>连接副词：-ever</p>
</li>
</ol>
</li>
</ul>
<pre><code>  - whenever
        无论何时    
  - wherever
        无论何地
  - however    无论怎样</code></pre>
<h3 id="考点03-形式主语和形式宾语"><a href="#考点03-形式主语和形式宾语" class="headerlink" title="考点03    形式主语和形式宾语"></a>考点03    形式主语和形式宾语</h3><ul>
<li><p>代词it来充当形式主语和形式宾语：</p>
<ul>
<li><strong><em>It is necessary <font color="red">that we finish our task early</font>.</em></strong></li>
<li><strong><em>I think it important <font color="red">that we save water.</font></em></strong></li>
</ul>
</li>
<li><p>形式主语的常考句型：</p>
<ul>
<li><p>It is likely that …可能…</p>
</li>
<li><p>It is no wonder that…难怪…, 不足为奇…</p>
</li>
<li><p>It is reported that… 据报道…</p>
</li>
<li><p>It is said that…据说…</p>
</li>
<li><p>It is known that…众所周 知…</p>
</li>
<li><p>It happens+that 从句<br>碰巧…</p>
<p><strong><em>eg: It happens that I met her in the street this</em></strong><br><strong><em>morning.</em></strong></p>
</li>
<li><p>It occurs to sb +that 从句 某人突然想起…</p>
<p><strong><em>eg: It suddenly occurred to him that he had left</em></strong><br><strong><em>his keys in the office.</em></strong></p>
</li>
<li><p>think + it + adj<br>+<br>that 从句/to do…</p>
<p><strong><em>think/consider/find/make/regard/feel/believe</em></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="考点04-同位语从句"><a href="#考点04-同位语从句" class="headerlink" title="考点04    同位语从句"></a>考点04    同位语从句</h3><ul>
<li><p><strong><em>That is the fact that <font color="red">he passed the CET-6</font>.</em></strong></p>
<p>同位语从句：抽象名词+从句解释说明作用；</p>
<p>​                        that作引导词，不充当句子成分</p>
<p>注意区别定语从句:</p>
<p><strong><em>That is the book that he bought last week.</em></strong></p>
<p>定语从句：先行词+从句，修饰限定作用；</p>
<p>​                    that作关系代词，替代先行词在从句充当基本成分</p>
</li>
<li><p>常考抽象名词：</p>
<ul>
<li><p>belief , idea/view/opinion, doubt ,<br>conclusion</p>
<p>信仰观点怀疑结论</p>
</li>
<li><p>suggestion/advice , fact , proof/evidence,<br>truth</p>
<p>建议事实证明真相</p>
</li>
<li><p>news/information , promise, plan ,<br>possibility</p>
<p>消息承诺计划的可能性</p>
</li>
<li><p>通常看到以上单词，首选that来引导同位语从句</p>
<ul>
<li>特殊情况doubt：</li>
<li>肯定句：whether</li>
<li>否定句：that</li>
<li>句型：There is no doubt that …毫无疑问..</li>
</ul>
</li>
</ul>
</li>
<li><p>补充：有关reason的句型</p>
<ul>
<li>The reason why…<br>定从</li>
<li>The reason is that …<br>表从</li>
<li>The reason (why) … is that ..<br>定从/表从</li>
<li>That is why.. 表从</li>
</ul>
</li>
</ul>
<h2 id="第七节：主谓一致"><a href="#第七节：主谓一致" class="headerlink" title="第七节：主谓一致"></a>第七节：主谓一致</h2><p><strong>什么是主谓一致？</strong></p>
<p><strong><em>eg: A cat is sleeping.</em></strong></p>
<p>​    <strong><em>Three cats are sleeping.</em></strong></p>
<h3 id="考点01-谓语V用单数意义的常考情况"><a href="#考点01-谓语V用单数意义的常考情况" class="headerlink" title="考点01    谓语V用单数意义的常考情况"></a>考点01    谓语V用单数意义的常考情况</h3><ol>
<li><p><strong>主语抽象表单一</strong></p>
<ul>
<li><p>动名词短语</p>
<p><strong><em>eg: Saying is easier than doing.</em></strong></p>
</li>
<li><p>不定式短语</p>
<p><strong><em>eg: To teach others is to teach yourself.</em></strong></p>
</li>
<li><p>疑问词+to do</p>
<p><strong><em>eg: <font color="red">What to do next</font> is up to you.</em></strong></p>
</li>
<li><p>主语从句</p>
<p><strong><em>eg: Whatever he says is of no importance.</em></strong></p>
</li>
</ul>
</li>
<li><p>时重长度与价值</p>
<p>时间、重量、长度、距离、金额等</p>
<p><strong>eg: <font color="red">Thirty dollars</font> is enough.</strong></p>
<p>​    <strong><font color="red">Five kilometers</font> is a long way.</strong></p>
<p>​    <strong><font color="red">Ten  years</font> has passed since he left.</strong></p>
</li>
<li><p>自身含义是单数的不定代词</p>
<p>either , neither , each , every</p>
<p>以上词修饰主语，谓语动词统一用单数意义的</p>
<p><strong><em>eg: Every means <font color="red">has been</font> tried but without</em></strong><br><strong><em>much result.</em></strong></p>
<p>​    <strong><em>Neither of the plans <font color="red">suits</font> me.</em></strong></p>
</li>
<li><p>学科、国家及组织等专有名词</p>
<p>常用学料名词常以“-ics结尾</p>
<p>mathematics（数学）                    physics（物理）</p>
<p>economics(经济学）                       politics(政治学）</p>
<p>statistics(统计学）</p>
<pre><code>                      electronics(电子学）</code></pre>
<p>the United Nations 联合国</p>
<p>the New York Times 纽约时报</p>
</li>
<li><p>many a,more than one 连单用单</p>
<p>接单数名词，且动词用单三形式</p>
<p><strong><em>eg: More than one <font color="red">person has</font> been infected</em></strong><br><strong><em>with the disease.</em></strong></p>
<p><strong><em>Many a student was asked to write an article.</em></strong></p>
</li>
</ol>
<h3 id="考点02-谓语V用复数意义的常考情况"><a href="#考点02-谓语V用复数意义的常考情况" class="headerlink" title="考点02    谓语V用复数意义的常考情况"></a>考点02    谓语V用复数意义的常考情况</h3><ol>
<li>由and,both…and…连接的并列主语</li>
</ol>
<p>  <strong><em>eg: Both boys and girls like watching TV.</em></strong></p>
<p>  <font color="orange"><strong>注意：当and连接的两个名词只有一个定冠词the</strong><br>  <strong>修饰时，看成单数。</strong></font></p>
<p>  <strong><em>The singer and dancer is on the stage.</em></strong></p>
<p>  <strong><em>The singer and the dancer are on the stage.</em></strong></p>
<ol start="2">
<li><p>人们加警察，家禽并牛群，公众年轻人<br> 服装鞋袜裤手套，常作复数没问题</p>
<p>people police poultry(家禽）cattle（牛群）<br>public(公众）youth(年轻人）<br>clothes(衣服）shoes(鞋子）socks(袜子）<br>trousers(裤子）gloves(手套）</p>
</li>
</ol>
<p>  <strong><em>eg: The Chinese people are brave.</em></strong></p>
<ol start="3">
<li><p>the + adi表示一类人</p>
<p>the rich富人</p>
<pre><code>           the poor穷人</code></pre>
<p>the young年轻人</p>
<pre><code>   the old老人</code></pre>
</li>
</ol>
<p>  <strong><em>eg: The rich are not always happy.</em></strong></p>
<h3 id="考点03-谓语动词可单可复情况"><a href="#考点03-谓语动词可单可复情况" class="headerlink" title="考点03    谓语动词可单可复情况"></a>考点03    谓语动词可单可复情况</h3><ol>
<li><p>就近原则</p>
<p><strong><font color="red">口诀：两or一nor一but，就近原则记心间</font></strong></p>
<p>.. or …<br>或者                            either… or …或者</p>
<p>neither … nor …两者都不<br>   not only …but also…不仅…而且…</p>
<p>There be…</p>
</li>
<li><p>就远原则</p>
<p><strong><font color="red">口诀：和也除了包括than，就远原则记心间</font></strong></p>
<p>和：with/together with/along with</p>
<p>也:as well as</p>
<p>除了:except/except for/besides/in addition to</p>
<p>包括：including</p>
<p>than:rather than 而不是</p>
</li>
<li><p>许多、一些、百分数，是单是复看名词的单复数</p>
<p>plenty of 许多</p>
<pre><code>                part of一部分
                            half of 一半</code></pre>
<p>most of大多数                    some of一些</p>
<pre><code>                             rest of 剩余</code></pre>
<p>ten percent of</p>
<pre><code>               two thirds of</code></pre>
<p><strong><em>eg: Four-fifths of the buildings are destoryed.</em></strong></p>
</li>
<li><p>集体名词，整体用单数，成员用复数</p>
<p>group            小组                    小组成员</p>
<p>class              班里                    班级的同学</p>
<p>family</p>
<pre><code>       家庭                    家人</code></pre>
<p>team              队</p>
<pre><code>                  队员</code></pre>
<p>army              军队</p>
<pre><code>              军队的士兵</code></pre>
</li>
<li><p>若与冠词相联系，请君一定细辨析</p>
<ul>
<li><p>在定语从句中</p>
<p>one of …who /that…<br>复数</p>
<p>the (only)one of .….who/that…单数</p>
</li>
<li><p>the number of .…. 的数量           单数</p>
<p>a number of<br>许多</p>
<pre><code>                    复数</code></pre>
</li>
</ul>
</li>
</ol>
<h2 id="第八节：特殊句型"><a href="#第八节：特殊句型" class="headerlink" title="第八节：特殊句型"></a>第八节：特殊句型</h2><h3 id="一、-倒装句"><a href="#一、-倒装句" class="headerlink" title="一、    倒装句"></a>一、    倒装句</h3><ul>
<li><strong><em><font color="red">I finish my homework.</font></em></strong></li>
<li><strong><em><font color="red">He likes the book.</font></em></strong></li>
<li><strong><em><font color="red">She opened the window.</font></em></strong></li>
</ul>
<h4 id="考点01-识别倒装的结构"><a href="#考点01-识别倒装的结构" class="headerlink" title="考点01    识别倒装的结构"></a>考点01    识别倒装的结构</h4><ul>
<li><p><strong><em>I have been working here for seven years.</em></strong></p>
</li>
<li><p><strong><em>The boy was hit by a car.</em></strong></p>
</li>
<li><p><strong><em>He can marry a pretty wife.</em></strong></p>
<p>谓语动词一个单词</p>
<pre><code>                                独立谓语</code></pre>
<p>谓语动词两个单词（或者2个以上）</p>
<pre><code>   复合谓语</code></pre>
</li>
<li><p>助动词的分类：</p>
<p>do类：<br>do does did</p>
<p>have类：have has had</p>
<p>be类：<br>am is are was were</p>
<p>will类：<br> will would</p>
<p>情态助动词：will(would)<br>shall(should)<br>may(might)<br>must(must)<br>can(could)</p>
</li>
</ul>
<h4 id="考点02-半倒装具体使用情况"><a href="#考点02-半倒装具体使用情况" class="headerlink" title="考点02    半倒装具体使用情况"></a>考点02    半倒装具体使用情况</h4><ol>
<li><p>否定词放于句首后用半倒装</p>
<ul>
<li>never/seldom/ few/ little/ not/nowhere<br>rarely(很少)/barely(几乎不）</li>
<li>by no means /in no case / in no way/ under<br>no circumstance/ at no time/on no account</li>
</ul>
</li>
<li><p>Only（只有）+状语，放于句首后用半倒装</p>
<p>by + doing<br>方式</p>
<p>when/after/before…<br>时间</p>
<p>in/at/on …<br>地点</p>
<p>if条件</p>
<p><strong><em>eg: Only in this way can we have a better future.</em></strong></p>
</li>
<li><p>so/such放于句首，后用半倒装</p>
<p>So+形/副+半倒+that从句</p>
<p>Such+名+半倒+that从句<br>含义：如此…以至于</p>
<p><strong><em>eg : So fast does he run that he is far ahead of</em></strong><br><strong><em>others.</em></strong></p>
</li>
<li><p>反复倒装</p>
<p><strong>题目构成：句1+句2</strong></p>
<p><strong>解题方法：</strong></p>
<p><strong>句1是肯定句：So+助/情态v+主语</strong><br><strong>“也是”</strong></p>
<p><strong>句1是否定句：Neither/Nor +助/情态v+主语</strong><br><strong>“也不是”</strong></p>
</li>
</ol>
<p>   <strong><em>-I like English.</em></strong></p>
<p>   <strong><em>-So do I.</em></strong></p>
<p>   <strong><em>-I don’t drink coffee.</em></strong></p>
<p>   <strong><em>-Neither do I.</em></strong></p>
<ol start="5">
<li><p>四大加分句型</p>
<ul>
<li><p>“一…就…”句型：</p>
<p>Hardly/Scarcely+had+主语+done+when+从句</p>
<p>No sooner+had+主语+done+than+从句</p>
</li>
<li><p>Not only … but also …句型</p>
<pre><code>     “不但…而且…”</code></pre>
<p>Not only 半倒装…,    but also 不用半倒装</p>
<p><strong><em>eg: Not only <font color="red">can Tom sing</font> so well, but also all</em></strong><br><strong><em>his family members are good singers.</em></strong></p>
</li>
<li><p>Not until…       知道…才…</p>
<p><strong><em>eg: Not until next week <font color="red">will the sports meetingbe held.</font></em></strong></p>
<p><strong><em>Not until I came home <font color="red">did my mother go</font> to<br>bed last night.</em></strong></p>
</li>
</ul>
</li>
<li><p>强调句基本句型：</p>
<p>It is/was+被强调部分+that/who +其它</p>
<p><strong><em>Alipay affects people’s life in China.</em></strong></p>
<p>强调主语：**<em>It is Alipay that affects people’s life in China.**</em></p>
<p>强调宾语：<br><strong><em>It is people’s life that Alipay affects in China.</em></strong></p>
<p>强调地点状语：<br><strong><em>It is in China that Alipay affects people’s life.</em></strong></p>
<ul>
<li><p>如何判断一个句子是不是强调句？</p>
<p><strong><font color="red">判断方法：去掉It is/was..that,句子仍完整。</font></strong></p>
<p><strong><em>eg : It was 3 o’clock that I came back home.</em></strong>(×)</p>
<p>​    <strong><em>It was at 3 o’clock that I came back home.</em></strong>(√)</p>
</li>
</ul>
</li>
<li><p>反义疑问句</p>
<p>反义疑问句通常形式：(前肯后否，前否后肯)</p>
<p>若陈述句部分是肯定形式，则反义疑问句部分用否定</p>
<p>若陈述句部分是否定形式，则反义疑问句部分用肯定</p>
<p><strong><em>eg : They work hard, <font color="red">don’t they</font>?</em></strong></p>
<p>​    <strong><em>You didn’t go home, <font color="red">did you</font>?</em></strong></p>
</li>
</ol>
<p>   常考特殊情况：当陈述部分为主从复合句时</p>
<p>   反义疑问句部分：以一般应和主句保持一致</p>
<p>   <strong><em>He doesn’t say she will come, does he?</em></strong></p>
<p>   <strong><em>She believes what you say, doesn’t she?</em></strong></p>
<p>   但当陈述句部分是：I think\believe\suppose等，</p>
<p>   反义疑问句部分：和从句的主语和谓语动词保持一致</p>
<p>   <strong><em>I don’t think Tom will come here, will he?</em></strong></p>
<p>   <strong><em>I believe that our experiment will succeed,won’t it?</em></strong></p>
<h1 id="中篇：基础语法"><a href="#中篇：基础语法" class="headerlink" title="中篇：基础语法"></a>中篇：基础语法</h1><h2 id="第一节：名词"><a href="#第一节：名词" class="headerlink" title="第一节：名词"></a>第一节：名词</h2><h3 id="考点01-名词的数"><a href="#考点01-名词的数" class="headerlink" title="考点01    名词的数"></a>考点01    名词的数</h3><ol>
<li><p>可数名词的规则变化</p>
<ul>
<li><p>一般直接在名词后：<br>+S</p>
<p>“两本书”怎么说？ two books</p>
</li>
<li><p>特殊结尾的单词，以s，sh，ch，x结尾的：<br>+es</p>
<p>“五个盘子”<br>five dishes</p>
<p>“六个盒子”<br>six boxes</p>
</li>
<li><p>以y结尾的：</p>
<p>辅音+y的变化：y一<br>i+ es</p>
<p>baby——&gt;babies</p>
<p>stofy——&gt;Stories</p>
<p>city——&gt;citles</p>
<p>以y结尾的：<br>元音+y的变化：直接加s</p>
<p>boy——&gt;boys</p>
<p>toy——&gt;toys</p>
</li>
<li><p>一些以字母f或fe结尾的单词：</p>
<p>把f或fe变v，再+es</p>
<p>树叶：leaf</p>
<p>狼：wolf</p>
<p>口诀巧记：</p>
<p>树叶半数自己黄，leaf half self</p>
<p>妻子拿刀去割粮，wife knife</p>
<p>架后窜出一只狼，shelf wolf</p>
<p>就像小偷逃命亡。thief life</p>
</li>
</ul>
</li>
</ol>
<pre><code> 特殊情况直接+s

 屋顶：roof

 证据：proof

 信心：
 belief</code></pre>
<ul>
<li><p>以o结尾的单词，多数在词尾：+s</p>
<p>photo<br>piano<br>zoo</p>
<p>以o结尾的单词特殊情况：在词尾+es</p>
<p>巧记：黑人英雄坐在火山上吃着西红柿和土豆听回声</p>
<p>Negro hero volcano tomato potato echo</p>
</li>
</ul>
<ol start="2">
<li><p>可数名词的不规则变化</p>
<ul>
<li><p>中间元音字母的变化</p>
<p>man -men</p>
<pre><code>        woman- women</code></pre>
<p>foot - feet</p>
<pre><code>         tooth - teeth</code></pre>
<p>goose-geese</p>
</li>
<li><p>单复数同形</p>
<p>fish - fish<br>deer - deer<br>sheep - sheep<br>means - means<br>species - species</p>
</li>
</ul>
</li>
<li><p>特殊变化形式</p>
<p>child - children</p>
<p>phenomenon - phenomena（现象）</p>
<p>ox - oxen</p>
<p>mouse - mice</p>
</li>
<li><p>“各国人”的变化</p>
<p>a Chinese - two Chinese</p>
<p>a Japanese - two Japanese</p>
<p>a Swiss - two Swiss</p>
<p>an Englishman - two Englishmen</p>
<p>a Frenchman - two Frenchmen</p>
<p>a Dutchman - two Dutchmen</p>
<p>a Russian - two Russians</p>
<p>a German - two Germans</p>
<p>记忆口诀：</p>
<p>中日瑞不变，英法荷变中间，多数s加后面</p>
</li>
<li><p>不可数名词</p>
<ul>
<li><p>常见的不可数名词：</p>
<p>advice建议 news消息，新闻 information信息</p>
<p>weather天气 air空气<br>wood木头，木材</p>
<p>knowledge知识 traffic交通 luggage/baggage行李</p>
</li>
<li><p>不可数名词“复数”表其他含义</p>
<p>wood 木材</p>
<pre><code>                                       woods森林</code></pre>
<p>water水                                                 waters水域，河流</p>
<p>time 时间                                              times时代；倍；次</p>
</li>
</ul>
</li>
</ol>
<h3 id="考点02-名词的量"><a href="#考点02-名词的量" class="headerlink" title="考点02    名词的量"></a>考点02    名词的量</h3><ol>
<li><p>单位词</p>
<p><strong><em>eg: <font color="red">a piece</font> of advice</em></strong></p>
<p>​    <strong><em><font color="red">three pieces</font> of advice</em></strong></p>
<p>​    <strong><em><font color="red">a bottle</font> of water</em></strong></p>
<p>​    <strong><em><font color="red">a bunch</font> of flowers</em></strong></p>
<p>​    <strong><em><font color="red">a pair</font> of shoes</em></strong></p>
</li>
</ol>
<h3 id="考点03-名词的格"><a href="#考点03-名词的格" class="headerlink" title="考点03    名词的格"></a>考点03    名词的格</h3><ul>
<li><p>名词所有格</p>
<ul>
<li><p>‘s属格</p>
<p>这个老师的书<br>the teacher’s book</p>
<p>玛丽的老公<br>Mary’s husband</p>
<p>这些男孩们的手机 these boys’ mobile phones</p>
</li>
<li><p>of属格</p>
<p>书的封皮<br>the cover of the book</p>
<p>团队的未来<br>the future of the team</p>
</li>
<li><p>双重属格：</p>
<p>玛丽的朋友中的一个<br>ends<br>a friend of Mary’s</p>
<p>我的朋友中的一个<br>a friend of mine</p>
</li>
</ul>
</li>
</ul>
<h3 id="考点04-名词跟介词的搭配"><a href="#考点04-名词跟介词的搭配" class="headerlink" title="考点04    名词跟介词的搭配"></a>考点04    名词跟介词的搭配</h3><ol>
<li><p>名词+for</p>
<p>charge for要价，收费</p>
</li>
</ol>
<p>   need for<br>   对……的需求</p>
<p>   reason for 对…..的原因</p>
<p>   sympathy for 对…..表示同情</p>
<p>   substitution for 代替….</p>
<ol start="2">
<li><p>名词+in</p>
<p>success in 在……方面成功</p>
<p>confidence in<br>对……的信心</p>
<p>expert in<br>某方面……的专家</p>
<p>belief in<br>相信………</p>
<p>advance in……的进展</p>
</li>
<li><p>名词+on</p>
<p>concentration on 关注</p>
<p>discussion on 讨论</p>
<p>emphasis on<br>强调</p>
<p>impression on 对.…的印象</p>
</li>
</ol>
<p>   stress on 强调……</p>
<p>   comment on 对….…的评论</p>
<p>   dependence on<br>   依赖于……</p>
<p>   effect on<br>   对……的影响</p>
<p>   impact on<br>   对……的影响</p>
<p>   influence on 对……的影响</p>
<ol start="4">
<li><p>名词+with</p>
<p>combination with 与.….….的结合</p>
<p>contact with 与……的联系</p>
<p>association with<br>与……的联系</p>
</li>
<li><p>名词+to</p>
<p>access to<br>接近……</p>
<p>answer to<br>……的答案</p>
<p>approach to<br>……的方法</p>
<p>attitude 对……的态度</p>
<p>toindifference to 对.….…漠不关心</p>
<p>response to 响应.…..</p>
<p>contribution to 对….的贡献</p>
<p>limit to<br>……的限制</p>
<p>objection to反对……</p>
<p>reaction to 对…的反应</p>
</li>
</ol>
<h3 id="考点05-常考名词短语"><a href="#考点05-常考名词短语" class="headerlink" title="考点05    常考名词短语"></a>考点05    常考名词短语</h3><ul>
<li><strong><em>make a <font color="red">profit</font> on 在….上获利</em></strong></li>
<li><strong><em>pay in <font color="red">cash</font>用现金支付</em></strong></li>
<li><strong><em>have an <font color="red">effect </font>&gt;on 对….产生影响</em></strong></li>
<li><strong><em>play a <font color="red">role </font>in 起…作用</em></strong></li>
<li><strong><em>make <font color="red">room </font>for 给..腾地方</em></strong></li>
<li><strong><em>have a qood <font color="red">sense </font>of direction 方向感很好</em></strong></li>
<li><strong><em>take <font color="red">advantage </font>of 利用…..</em></strong></li>
<li><strong><em>do sb.a <font color="red">favor</font>帮某人一个忙</em></strong></li>
<li><strong><em>on second <font color="red">thoughts </font>再经考虑</em></strong></li>
<li><strong><em>lose one’s <font color="red">temper</font>发脾气</em></strong></li>
</ul>
<h3 id="考点06-形近词辨析"><a href="#考点06-形近词辨析" class="headerlink" title="考点06    形近词辨析"></a>考点06    形近词辨析</h3><ul>
<li><p><strong><em>context(上下文，语句；发生背景)</em></strong></p>
<p><strong><em>contest(竞赛，比赛)</em></strong></p>
<p><strong><em>content(内容；目录)</em></strong> </p>
<p><strong><em>contact(接触；联络)</em></strong></p>
<p><strong><em>contrast (对比，对照)</em></strong></p>
<p><strong><em>contract(合同，合约)</em></strong></p>
</li>
<li><p><strong><em>latitude：纬度</em></strong></p>
<p><strong><em>altitude：海拔高度</em></strong></p>
<p><strong><em>gratitude:感激之情</em></strong></p>
<p><strong><em>attitude:态度，看法</em></strong></p>
<p><strong><em>multitude:大量；众多</em></strong></p>
</li>
<li><p><strong><em>effect：影响，效果</em></strong></p>
<p><strong><em>effort：努力</em></strong></p>
</li>
<li><p><strong><em>source：来源，出处</em></strong></p>
<p><strong><em>resourse：（自然等）资源，财力</em></strong></p>
</li>
<li><p><strong><em>vacation:假期</em></strong></p>
<p><strong><em>vocation:工作，职业</em></strong></p>
</li>
</ul>
<h3 id="考点07-近义词辨析"><a href="#考点07-近义词辨析" class="headerlink" title="考点07    近义词辨析"></a>考点07    近义词辨析</h3><ul>
<li><p><strong><em>ache:（身体某一部位）持久的疼痛，隐痛</em></strong></p>
<p><strong><em>suffering:（身体或精神上）疼痛，痛苦，折磨</em></strong></p>
<p><strong><em>eg: Death finally bring an end to her sufferig.</em></strong></p>
</li>
<li><p><strong><em>damage:(有形）损坏，破坏</em></strong></p>
<p><strong><em>injury：（事故等）伤害，损害</em></strong></p>
</li>
<li><p><strong><em>accident：（交通）事故</em></strong></p>
<p><strong><em>incident：次要的小事件</em></strong></p>
<p><strong><em>event：重大的事件</em></strong></p>
</li>
<li><p><strong><em>sight：视力，看到（常指无意识地看到）</em></strong></p>
<p><strong><em>look：看（主动地朝…看</em></strong><br><strong><em>有意以</em></strong></p>
<p><strong><em>view：风景，风光；观点</em></strong></p>
<p><strong><em>glance：匆忙一瞥，闪现</em></strong></p>
</li>
</ul>
<h2 id="第二节-代词"><a href="#第二节-代词" class="headerlink" title="第二节    代词"></a>第二节    代词</h2><h3 id="考点01-人称代词主语和宾语对的用法"><a href="#考点01-人称代词主语和宾语对的用法" class="headerlink" title="考点01    人称代词主语和宾语对的用法"></a>考点01    人称代词主语和宾语对的用法</h3><ul>
<li><p><strong><em>主语：      I       we    he</em></strong></p>
<pre><code>***she***</code></pre>
<p>  <strong><em>it</em></strong><br>  <strong><em>they</em></strong><br>   <strong><em>you</em></strong></p>
</li>
<li><p><strong><em>宾语：    me   us    him    her</em></strong><br> <strong><em>it</em></strong><br>  <strong><em>them</em></strong><br>  <strong><em>you</em></strong></p>
</li>
<li><p><strong><em>-<font color="red">I </font>like dogs. Please give <font color="red">me </font>two dogs.</em></strong></p>
<p><strong><em>-<font color="red">You </font>should take care of <font color="red">them</font> carefully.</em></strong></p>
</li>
</ul>
<h3 id="考点02-两类物主代词使用规则"><a href="#考点02-两类物主代词使用规则" class="headerlink" title="考点02    两类物主代词使用规则"></a>考点02    两类物主代词使用规则</h3><ul>
<li><p><strong><em>形容词物主代词：my      our   your    his    her     its    their</em></strong></p>
</li>
<li><p><strong><em>名词性物主代词：mine  ours  yours  his    hers    its   theirs</em></strong></p>
</li>
<li><p><strong><em>-Is this <font color="red">your </font>dog?</em></strong></p>
<p><strong><em>-No , <font color="red">mine </font>is at home. It is <font color="red">hers</font>.</em></strong></p>
</li>
</ul>
<h3 id="考点03-反身代词"><a href="#考点03-反身代词" class="headerlink" title="考点03    反身代词"></a>考点03    反身代词</h3><ul>
<li><p><strong><em>myself</em></strong><br><strong><em>yourself</em></strong><br><strong><em>himself</em></strong><br><strong><em>herself</em></strong><br><strong><em>itself</em></strong><br><strong><em>ourselves yourselves themselves</em></strong></p>
</li>
<li><p><em>e<strong>njoy oneself 玩得开心</strong></em></p>
<p><strong><em>dress oneself 打扮</em></strong></p>
</li>
</ul>
<p>  <strong><em>seat oneself</em></strong><br>  <strong><em>就座</em></strong></p>
<p>  <strong><em>call oneself</em></strong><br>  <strong><em>自称</em></strong></p>
<p>  <strong><em>teach oneself 自学</em></strong></p>
<p>  <strong><em>depend on oneself 靠某人自己</em></strong></p>
<p>  <strong><em>devote oneself to</em></strong><br>  <strong><em>献身于</em></strong></p>
<p>  <strong><em>help oneself to 自用，自取（食物等）</em></strong></p>
<p>  <strong><em>make oneself at home 不要客气</em></strong></p>
<p>  <strong><em>by oneself 独自</em></strong></p>
<p>  <strong><em>be oneself 显得自然</em></strong></p>
<h3 id="考点04-指示代词的基本用法"><a href="#考点04-指示代词的基本用法" class="headerlink" title="考点04    指示代词的基本用法"></a>考点04    指示代词的基本用法</h3><ol>
<li><p>this或these:</p>
<ul>
<li><p>常指时间或空间较近的人或物</p>
<p><strong><em>eg: This is a tiger.</em></strong></p>
</li>
<li><p>通常指代后面提到过的事物</p>
<p><strong><em>eg: What I want tell you is this: the meeting is</em></strong><br><strong><em>put off.</em></strong></p>
</li>
</ul>
</li>
<li><p>that或those:</p>
<ul>
<li><p>常指时间或空间较远的人或物</p>
<p><strong><em>eg: That is a deer.</em></strong></p>
</li>
<li><p>通常指代前面提到过的事物</p>
<p><strong><em>eg:He had a bad cold.That is why he didn’t</em></strong><br><strong><em>attend the meeting.</em></strong></p>
</li>
</ul>
</li>
</ol>
<h3 id="考点05-指示代词在比较级中的运用"><a href="#考点05-指示代词在比较级中的运用" class="headerlink" title="考点05    指示代词在比较级中的运用"></a>考点05    指示代词在比较级中的运用</h3><p>为了避免与前面名词重复，可以用that或those来<br>代替</p>
<p><strong><em>eg: The population in Shanghai is larger than</em></strong><br><strong><em><font color="red">that </font>in Guangzhou.</em></strong></p>
<p>​    <strong><em>Computers made in Nanjing are just as good as</em></strong></p>
<p><strong><em><font color="red">those </font>made in Shanghai.</em></strong></p>
<h3 id="考点06-both-either-neither-all-none"><a href="#考点06-both-either-neither-all-none" class="headerlink" title="考点06    both,either,neither,all,none"></a>考点06    both,either,neither,all,none</h3><ol>
<li><p>both：（两者）都</p>
<p>常用结构：both…and…</p>
<p><strong><em>eg: Both Mary and Tom are my friends.</em></strong></p>
</li>
<li><p>either:（两者中）任一个</p>
<p>常用结构：either … or…要么…要么…</p>
<p><strong><em>eg: Either you or I am going there.</em></strong></p>
</li>
<li><p>neither:（两者）都不</p>
<p>常用结构：neither .… nor…</p>
<p><strong><em>eg: Neither you nor Tom is my friends.</em></strong></p>
</li>
<li><p>all：（三者或三者以上）都</p>
<p><strong><em>eg: All are in favor of the proposal.</em></strong></p>
</li>
<li><p>none：（三者或三者以上）都不，一个也没有</p>
<p>none:既可以指人，也可以指物</p>
<p>搭配：none of</p>
</li>
</ol>
<h3 id="考点07-other-another等不定代词"><a href="#考点07-other-another等不定代词" class="headerlink" title="考点07    other,another等不定代词"></a>考点07    other,another等不定代词</h3><ol>
<li><p>other :<br>other:另外的，其他的</p>
<p>other+可数名词复数</p>
<p><strong><em>eg: Do you have other questions?</em></strong></p>
</li>
<li><p>others :<br>others：另一些（后不加名词）</p>
<p>搭配: some … others…</p>
<p><strong><em>eg: Some students like English and others like</em></strong><br><strong><em>physics.</em></strong></p>
</li>
<li><p>the other :</p>
<p>the other:另一个的，另外的</p>
<p>搭配: one … the other…</p>
<p><strong><em>eg: I have two dogs. One is white, the other is</em></strong><br><strong><em>black.</em></strong></p>
</li>
<li><p>the others:</p>
<p>the others：另外一些（后不加名词）</p>
<p><strong><em>eg: There are 40 boys. Two boys will go to the</em></strong><br><strong><em>zoo, and the others will stay at home.</em></strong></p>
</li>
<li><p>another :</p>
<ol>
<li><p>又一，再一</p>
<p><strong><em>eg: I want to eat another apple.</em></strong></p>
</li>
<li><p>另外几（个、天、周等）</p>
<p><strong><em>eg: We need anothor three days.</em></strong></p>
</li>
</ol>
</li>
</ol>
<h3 id="考点08-常考复合不定代词"><a href="#考点08-常考复合不定代词" class="headerlink" title="考点08    常考复合不定代词"></a>考点08    常考复合不定代词</h3><ul>
<li><p><strong><em>some-, any-, every-, no-</em></strong></p>
</li>
<li><p><strong><em>-body, -one, -thing</em></strong></p>
</li>
</ul>
<h2 id="第三节-动词"><a href="#第三节-动词" class="headerlink" title="第三节    动词"></a>第三节    动词</h2><h3 id="考点01-实意动词"><a href="#考点01-实意动词" class="headerlink" title="考点01    实意动词"></a>考点01    实意动词</h3><ul>
<li><p>实意动词的分类：</p>
<ol>
<li><p>及物动词（vt.）：后面直接跟宾语</p>
<p><strong><em>eg: He writes a book.</em></strong></p>
<p>​    <strong><em>A book is written by him.</em></strong></p>
</li>
<li><p>不及物动词（vi.）：</p>
<p>后面不能直接跟宾语</p>
<p><strong><em>eg: An accident happened.</em></strong></p>
</li>
<li><p>既可作及物动词也可作不及物动词</p>
<p><strong><em>eg: I sing.</em></strong></p>
<p>​    <strong><em>I sing a song.</em></strong></p>
<p><strong><em>I study.</em></strong></p>
<p>​    <strong><em>I study a problem.</em></strong></p>
</li>
</ol>
</li>
<li><p>常见的及物动词：</p>
<ul>
<li><p>forget<br>visit raise<br>·remember<br>arouse</p>
</li>
<li><p>spend<br>do<br>finish<br>say</p>
</li>
<li><p>enjoy<br>love…</p>
<ul>
<li><p><strong><em>eg: You visit the White House.</em></strong></p>
<p><strong><em>I enjoy my trip.</em></strong></p>
<p><strong><em>She finishes her homework.</em></strong></p>
<p><strong><em>I spend the winter vacation in Shanghai.</em></strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>常见的不及物动词：</p>
<p><strong>work</strong><br><strong>stay</strong><br><strong>go</strong><br><strong>come</strong></p>
<p><strong>live</strong><br><strong>listen</strong><br><strong>look</strong><br><strong>arrive</strong></p>
<p><strong>depend</strong><br><strong>suffer</strong><br><strong>arise</strong><br><strong>rise</strong></p>
<p><strong>happen occur</strong></p>
<p><strong><em>eg:I work in Guangzhou.</em></strong><br><strong><em>I come.</em></strong></p>
<p>​    <strong><em>An accident happenned last week.</em></strong></p>
<p>​     <strong><em>I study every day.</em></strong></p>
<p>​     <strong><em>The sun rises.</em></strong></p>
<p>​     <strong><em>I arrive at the train station yesterday.</em></strong></p>
</li>
</ul>
<h3 id="考点02-系动词"><a href="#考点02-系动词" class="headerlink" title="考点02    系动词"></a>考点02    系动词</h3><p>这类动词意思不完整，所以无法单独存在，后需<br>主不表<br>要跟表语。</p>
<p><strong><em>eg : I am a teacher.</em></strong><br><strong><em>She becomes a teacher.</em></strong></p>
<p>​    <strong><em>She becomes a teacher.</em></strong></p>
<ol>
<li><p>be动词</p>
</li>
<li><p>关于“变化”的系动词：</p>
<ul>
<li><p>become(变成)<br>用法：指从一个状态向另一个状态的变化</p>
<p><strong><em>eg : She <font color="red">becomes </font>beautiful.</em></strong></p>
<p>​    <strong><em>She <font color="red">becomes </font>a good student.</em></strong></p>
</li>
<li><p>turn（变成）<br>用法：</p>
<p>turn通常用与颜色或情绪相关的形容词作表语</p>
<p><strong><em>eg : The leaves <font color="red">turn </font>yellow.</em></strong></p>
<p>​    <strong><em>His face <font color="red">turned </font>red with anger.</em></strong></p>
</li>
<li><p>get（变成）<br>用法：</p>
<p>get常用“生气”或“激动”的adj作表语</p>
<p><strong><em>eg : He <font color="red">get</font> mad.</em></strong></p>
</li>
<li><p>go（转变成）</p>
<p>用法：go主要指一种由强到弱或由好到坏的变化</p>
<p><strong><em>eg : In hot weather, meat <font color="red">goes </font>bad.</em></strong></p>
</li>
<li><p>grow（变成）</p>
<p>用法：常指逐渐地变成新状态，强调渐变的过程</p>
<p><strong><em>eg : The girl <font color="red">grew</font> thinner and thinner.</em></strong></p>
<p>​    <strong><em>The sky <font color="red">grew </font>dark.</em></strong></p>
</li>
</ul>
</li>
<li><p>感官系动词：</p>
<p>look看起来</p>
<p>sound<br>smell</p>
<p>taste尝起来</p>
<p>摸走味<br>feel</p>
<p>后跟形容词，而不跟副词</p>
<p><strong><em>eg : His idea sounds good.</em></strong><br><strong><em>The food smells good.</em></strong><br><strong><em>The cloth feels soft.</em></strong></p>
<p>​    <strong><em>The flowers look beautiful.</em></strong></p>
</li>
<li><p>“似平好像”系动词</p>
<p>seem = appear</p>
<p>用法：seem之后跟不定式短语作表语</p>
<p><strong><em>eg: He seems to know it.</em></strong></p>
<p>​    <strong><em>He seems (to be) happy.</em></strong><br><strong><em>The situation doesn’t seem (to be) so desperate.</em></strong></p>
</li>
<li><p>“保持”系动词</p>
<p>keep , stay, remain</p>
<p><strong><em>eg: He keeps silent at the meeting.</em></strong></p>
<p>​    <strong><em>The price remains unchanged.</em></strong></p>
</li>
</ol>
<h3 id="考点03-助动词"><a href="#考点03-助动词" class="headerlink" title="考点03    助动词"></a>考点03    助动词</h3><p>助动词：置于动词前，使动词能表现出时态、语<br>态、否定句、疑问句等变化。</p>
<ul>
<li><p><strong><em>eg : I <font color="red">must </font>go now.</em></strong></p>
<p><strong><em>I <font color="red">have lived</font> in Zhengzhou for ten years.</em></strong></p>
<p><strong><em>Do you <font color="red">love </font>me?</em></strong></p>
</li>
<li><p>助动词的分类：</p>
<ul>
<li><p>be类：am,is,are,was,were</p>
</li>
<li><p>have类：has,had<br>have</p>
</li>
<li><p>do类：do,does,did</p>
</li>
<li><p>情态助动词</p>
<p><strong><em>will (would), shall (should), can(could),</em></strong><br><strong><em>may(might), must(must), have to, need, dare（敢）,</em></strong><br><strong><em>ought to(应该),</em></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="考点04-情态动词-动词原形"><a href="#考点04-情态动词-动词原形" class="headerlink" title="考点04    情态动词+动词原形"></a>考点04    情态动词+动词原形</h3><ol>
<li><p>will(would)</p>
<p>“将，将要”，表达将来或意愿</p>
<p><strong><em>eg: I will go shopping tomorrow.</em></strong></p>
<p>补充：<strong>would rather(=had rather)</strong></p>
<p>​            <strong><em>would rather+ do sth</em></strong></p>
<p>​            <strong><em>would rather + do… than do…</em></strong></p>
<p><strong><em>eg: I would rather go home.</em></strong></p>
<p>​    <strong><em>I would rather die than marry him.</em></strong></p>
</li>
<li><p>should(shall)</p>
<p>“应当”，表达义务或责任=ought to</p>
<p><strong><em>eg: We should be kind to others.</em></strong></p>
<p>​    <strong><em>Students should develop a good attitude</em></strong><br><strong><em>towards tests.</em></strong></p>
</li>
<li><p>can (could)</p>
<p>“能，能够”，常常表示一种能力<br>=be able to</p>
<p><strong><em>eg:I can play the guitar.</em></strong></p>
</li>
<li><p>may (might)</p>
<p>常表许可或可能性，“可以”<br>“可能”之意<br>（许可）</p>
<p><strong><em>eg: May I take the book?</em></strong></p>
<p>​    <strong><em>It may be true.</em></strong></p>
<p><strong><em>The light may cause damage to human eyes.</em></strong></p>
</li>
<li><p>must (must)</p>
<p>“必须”，通常表示强制</p>
<p><strong><em>eg: You must finish the work.</em></strong></p>
</li>
<li><p>补充：must和have to<br>eg:</p>
<p><strong><em>You must love your country.(强制的必须)</em></strong></p>
<p><strong><em>You have to love your country.(有勉强意味）</em></strong></p>
<p>否定形式含义：</p>
<p>mustn’t“绝不可以，禁止”</p>
<p>don’t have to“不必，不需要”</p>
</li>
<li><p>need</p>
<ul>
<li><p>“需要”，既可作实意动词，也可作情态助动词</p>
<p>实意动词用法：<br>常用肯定句型：need to do sth;need sth.</p>
<p><strong><em>eg: He needs to go home.</em></strong></p>
<p>​    <strong><em>He doesn’t need to go home.</em></strong></p>
</li>
<li><p>情态助动词用法：<br>常用于否定句型：needn’t do sth.</p>
<p><strong><em>eg:I needn’t go home.</em></strong></p>
</li>
</ul>
</li>
</ol>
<h3 id="考点05-情态动词对现在的推测"><a href="#考点05-情态动词对现在的推测" class="headerlink" title="考点05    情态动词对现在的推测"></a>考点05    情态动词对现在的推测</h3><ul>
<li><p>对现在的推测：</p>
<p> must be…一定…..</p>
<p>may/may not be…或许,也许…</p>
<p>can’t/couldn’t be..一定不,一定没有.…..</p>
<p><strong><em>eg: She must be tired now.</em></strong></p>
</li>
</ul>
<h3 id="考点06-情态动词表对过去推测"><a href="#考点06-情态动词表对过去推测" class="headerlink" title="考点06    情态动词表对过去推测"></a>考点06    情态动词表对过去推测</h3><ul>
<li><p><strong><em>用法</em></strong><br><strong><em>:</em></strong></p>
<p><strong><em>may/might have done.过去可能已经做了某事</em></strong></p>
<p><strong><em>must have done.过去肯定做了某事（不用于否定结构）</em></strong></p>
<p><strong><em>could have done.过去本能做但未做</em></strong></p>
<p><strong><em>can’t/couldn’t have done.过去不可能做过某事</em></strong></p>
<p><strong><em>should have done.过去本应该做却未做</em></strong></p>
<p><strong><em>shouldn’t have done.过去本不需要做却做</em></strong></p>
<p><strong><em>ought to have done.过去本应该做却未做</em></strong></p>
<p><strong><em>oughtn’t to have done.过去本不需要做却做</em></strong></p>
<p><strong><em>needn’t have done.过去本没必要做却做了</em></strong></p>
</li>
</ul>
<h3 id="考点07·常考动词搭配"><a href="#考点07·常考动词搭配" class="headerlink" title="考点07·常考动词搭配"></a>考点07·常考动词搭配</h3><ol>
<li><p>turn动词搭配：</p>
<p><strong><em>turn down 调小音量；拒绝</em></strong></p>
<p><strong><em>turn up调高音量；出现</em></strong></p>
<p><strong><em>turn on 打开设备</em></strong></p>
<p><strong><em>turn off关闭设备</em></strong></p>
<p><strong><em>turn into 变成</em></strong></p>
<p><strong><em>turn in 上交，交出</em></strong></p>
<p><strong><em>turn out结果是，制作，生产</em></strong></p>
<p><strong><em>turn over翻转；移交；仔细考虑</em></strong></p>
<p><strong><em>turn to变成；求助于</em></strong></p>
<p><strong><em>turn from对……感到厌恶</em></strong></p>
</li>
<li><p>put动词搭配：</p>
<p><strong><em>put aside储存，留用（金钱/时间）</em></strong></p>
<p><strong><em>put away 把.…收拾起来放好</em></strong></p>
<p><strong><em>put down 记下,放下</em></strong></p>
<p><strong><em>put forward 提出</em></strong></p>
<p><strong><em>put off 推迟</em></strong></p>
<p><strong><em>put on穿上，戴上;上演</em></strong></p>
<p><strong><em>put out 熄灭</em></strong></p>
<p><strong><em>put up提出；建造</em></strong></p>
<p><strong><em>put up with容忍，忍受</em></strong></p>
</li>
<li><p>set动词搭配：</p>
<p><strong><em>set up 创立，建立</em></strong></p>
<p><strong><em>set about 开始着手</em></strong></p>
<p><strong><em>set aside 把…….搁置一旁，留出</em></strong></p>
<p><strong><em>set down 放下，记下</em></strong></p>
<p><strong><em>set free 释放（某人）</em></strong></p>
<p><strong><em>set off 出发，启程</em></strong></p>
<p><strong><em>set out动身，启程，开始</em></strong></p>
<p><strong><em>set back 推迟，延缓</em></strong></p>
</li>
<li><p>break动词搭配：</p>
<p><strong><em>break up打碎；（关系）破裂，分手，离婚</em></strong></p>
<p><strong><em>break down 破坏；停止运转，（机器）出故障</em></strong></p>
<p><strong><em>break in打断谈话，插嘴</em></strong></p>
<p><strong><em>break into闯进；突然开始（笑，哭等）</em></strong></p>
<p><strong><em>break out爆发，侵袭（灾难/疾病）</em></strong></p>
<p><strong><em>break through 突破进展</em></strong></p>
<p><strong><em>break off停顿；结束；脱落</em></strong></p>
<p><strong><em>break away 离开；背叛</em></strong></p>
</li>
<li><p>call 动词搭配：</p>
<p><strong><em>call in召集；收回</em></strong></p>
<p><strong><em>call off取消；叫走</em></strong></p>
<p><strong><em>call on拜访；号召；要求</em></strong></p>
<p><strong><em>call up使想起；征召服役</em></strong></p>
<p><strong><em>call for要求，需要</em></strong></p>
</li>
</ol>
<h3 id="考点08-近义词词义辨析"><a href="#考点08-近义词词义辨析" class="headerlink" title="考点08    近义词词义辨析"></a>考点08    近义词词义辨析</h3><ul>
<li><strong><em>affect v.影响，直接影响</em></strong></li>
</ul>
<p>​        <strong><em>effect  n.影响have …effect on</em></strong></p>
<p>​        <strong><em>influence n&amp;v影响（指潜移默化的影响）</em></strong></p>
<p>​        <strong><em>impact n&amp;v影响（冲击力较强的影响）</em></strong></p>
<ul>
<li><img src="/College-English.htm/Users\Yun~\AppData\Roaming\Typora\typora-user-images\image-20220301201712649.png" alt="image-20220301201712649"></li>
</ul>
<h3 id="考点09-形近词词义辨析"><a href="#考点09-形近词词义辨析" class="headerlink" title="考点09    形近词词义辨析"></a>考点09    形近词词义辨析</h3><ul>
<li><p><strong><em>rise (vi.</em></strong><br><strong><em>）（数量或水平的）增加；（日月星辰）上升，升起</em></strong></p>
<p><strong><em>arise (vi.</em></strong><br><strong><em>（希望、困难、讨论、问题等）产生，</em></strong><br><strong><em>出现</em></strong></p>
<p><strong><em>raise(vt.</em></strong><br><strong><em>举起；增加，提高（数量、水平）</em></strong></p>
<p><strong><em>arouse(vt.）激起，引起（感情、态度）</em></strong></p>
</li>
<li><p><strong><em>clash：冲突，打斗</em></strong></p>
<p><strong><em>crash：（车）碰撞，（飞机）坠毁</em></strong></p>
<p><strong><em>eg. His car crashed into a bus yesterday.</em></strong></p>
<p>   <strong><em>The plane crashed after take-off.</em></strong></p>
<p><strong><em>flash：闪光，闪现</em></strong></p>
<p><strong><em>crush：粉碎，压扁</em></strong></p>
</li>
<li><p><strong><em>confirm：（提供证据）证实，证明，确认</em></strong></p>
<p><strong><em>conform：顺从，顺应；遵守，服从（法律等）</em></strong></p>
<p><strong><em>confine：限定，限制</em></strong></p>
<p><strong><em>inform：通知，告知</em></strong></p>
</li>
</ul>
<h2 id="第四节-形容词"><a href="#第四节-形容词" class="headerlink" title="第四节    形容词"></a>第四节    形容词</h2><p><strong>什么是形容词</strong>？<br>·</p>
<p>用来<font color="red">修饰名词</font>、<font color="red">代词</font>的一类词，表示名词、代词<br>的性质和特征<br>的</p>
<p><strong><em>eg : This is an interesting story.</em></strong></p>
<p><strong><em>The dog is clever.</em></strong></p>
<p><strong>形容词的功能</strong></p>
<ol>
<li><p>定语</p>
<p><strong><em>eg:This is an ins=tereting book.</em></strong> </p>
</li>
<li><p>表语</p>
<p><strong><em>eg:This book is interesting.</em></strong></p>
</li>
<li><p>补语</p>
<p><strong><em>eg:We find this bonk interesting.</em></strong></p>
</li>
</ol>
<h3 id="考点01-形容词作前置定语"><a href="#考点01-形容词作前置定语" class="headerlink" title="考点01    形容词作前置定语"></a>考点01    形容词作前置定语</h3><ul>
<li><p>单个形容词：一般放在所修饰的名词之前</p>
<p><strong><em>eg:一个漂亮的女孩 a beautiful girl</em></strong></p>
<p>​    <strong><em>一只可爱的狗</em></strong><br><strong><em>a cute dog</em></strong></p>
<p>​    <strong><em>一个干净的房间 a clean room</em></strong></p>
<p><strong>思考多个形容词如何表达？</strong></p>
<p>​    一个漂亮的法国小女孩<br>a beautiful little French girl</p>
<p>​    一朵美丽的小红花 a beautiful little red flower</p>
<p>​    一条强壮的黄色大狼狗<br>a strong big yellow wolf dog</p>
<ul>
<li><p>多个形容词修饰一个名词的排列口诀：</p>
<p><strong><font color="red">美小圆旧黄，法国木书房</font></strong></p>
<p>限定词：冠词、数词、物主代词、指示代词、不定代<br>词</p>
<p><strong><em>eg:一个黑色新钢笔 a new black pen</em></strong></p>
<p>​    <strong><em>这座古老的中式石桥</em></strong><br><strong><em>the old Chinese stone bridge</em></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="考点02-形容词作后置定语"><a href="#考点02-形容词作后置定语" class="headerlink" title="考点02    形容词作后置定语"></a>考点02    形容词作后置定语</h3><p><strong>作后置定语（五种情况）</strong></p>
<ol>
<li><p>通常以a-开头的adj,修饰名词应后置，不用于名词前</p>
<p>如: alike, alone. alive, asleep, awake</p>
<p><strong><em>eg：一个睡看的婴儿 a baby asleep</em></strong></p>
<p>​    <strong><em>一个活着的男人 a man alive</em></strong></p>
</li>
<li><p>某些以<font color="red">-able</font>和<font color="red">-ible</font>结尾的形容词常作后置定语</p>
<p>available , imaginable(可想象的), possible, visible</p>
<p><strong><em>eg : Do you have a room available?</em></strong></p>
<p>​    <strong><em>She will be available this afternoon.</em></strong></p>
<p>考点：available常作后置定语</p>
<p>​    指物：可获得的；可购得的；可找到的</p>
<p>​    指人：有空的</p>
</li>
<li><p>adj修饰复合不定代词，应后置</p>
<p>some-,any-,every-,no-</p>
<p>-body,-one,-thing</p>
<p><strong><em>eg : There is <font color="red">something interesting</font> in the</em></strong><br><strong><em>newspaper.</em></strong></p>
</li>
<li><p>present,absent常作后置定语</p>
<p><strong><font color="red">present作“出席的，到场的”之意，不用于名词前</font></strong></p>
<p><strong><font color="red">absent作“缺席的，不在的”之意，不用于名词前</font></strong></p>
<p><strong><em>eg : All the students present can get a book</em></strong><br><strong><em>today.</em></strong></p>
<p>​    <strong><em>All the students absent won’t get the book.</em></strong></p>
</li>
<li><p>长、宽、高、深及年龄，莫忘定语如何放</p>
<p><strong><em>eg : The river is about 200 meters long and 10</em></strong><br><strong><em>meters wide.</em></strong></p>
<p>​    <strong><em>I am 20 years old.</em></strong><br><strong><em>Mount Qomolangma is 8844.43 meters high.</em></strong></p>
<p>​    <strong><em>The Yellow River is about 2.5 meters deep.</em></strong></p>
</li>
</ol>
<p><strong>由分词转化而来的形容词</strong></p>
<p>过去分词（-ed)转化而来的adj：用来修饰人</p>
<p>现在分词（-ing）转化而来的adj：用来修饰物</p>
<p>巧记：人-d物-ing</p>
<p><strong><em>eg : This is an interesting book.</em></strong></p>
<p>​    <strong><em>He is interested in this book.</em></strong></p>
<ul>
<li><p>excite 使兴奋</p>
<p>excited：感到兴奋的</p>
<p>exciting：令人兴奋的</p>
</li>
<li><p>interest使感兴趣</p>
<p>interested：感到有趣的</p>
<p>interesting：有趣的</p>
</li>
<li><p>surprise 使惊奇</p>
<p>surprised：感到惊奇的</p>
<p>surprising：令人惊奇的</p>
</li>
<li><p>disappoint使失望</p>
<p>disappointed：感到失望的</p>
<p>disappointing：令人失望的</p>
</li>
<li><p>discourage 使灰心；使泄气</p>
<p>discouraged：感到气馁的</p>
<p>discouraging：令人泄气的</p>
</li>
<li><p>annoy使恼怒</p>
<p>bored：厌倦的</p>
<p>boring：令人厌倦的</p>
</li>
<li><p>confuse使困惑</p>
<p>confused：感到困惑的</p>
<p>confusing：令人困惑的</p>
</li>
<li><p>please使愉快</p>
<p>pleased：感到高兴的</p>
<p>pleasing：令人愉快的</p>
</li>
<li><p>bore使厌烦</p>
<p>bored：厌倦的</p>
<p>boring：令人厌倦的</p>
</li>
<li><p>embarrass使尴尬</p>
<p>embarrassed：感到尴尬的</p>
<p>embarrassing：令人尴尬的</p>
</li>
</ul>
<p><strong>口固定搭配：</strong></p>
<ol>
<li><p>be + adj + about +宾语</p>
<p>eg: be worried about 对…担心</p>
<p>​    be anxious about 对…焦虑</p>
<p>​    be concerned about 对.….关心</p>
<p>​    be particular about 对…..挑剔</p>
<p><strong><em>She is always particular about her boyfriend.</em></strong></p>
</li>
<li><p>be + adj + at +宾语</p>
<p>eg:be good at 擅长</p>
<p>​    be amazed at 对…吃惊</p>
<p>​    be disgusted at 对.….厌恶</p>
<p>​    be surprised at 对…吃惊</p>
<p><strong><em>They were amazed at what their mother did.</em></strong></p>
</li>
<li><p>be + adj +for+宾语</p>
<p>eg: be responsible for 对…负责</p>
<p>​    be famous for 以…闻名</p>
<p><strong><em>The writer is famous for his stories.</em></strong></p>
<p><strong><em>Everyone should be responsible for his work.</em></strong></p>
</li>
<li><p>be + adj+ in +宾语</p>
<p>eg: be interested in 对.….感兴趣</p>
<p>​    be absorbed in 专心于</p>
<p>​    be involved in卷入，涉及到</p>
<p><strong><em>We should be absorbed in our study.</em></strong></p>
<p><strong><em>Mary was involved in an accident.</em></strong></p>
</li>
<li><p>be+d+of+语</p>
<p>eg: be ashamed of 对…羞愧</p>
<p>​    be capable of 有能力</p>
<p>​    be fond of 喜爱</p>
<p>​    be proud of 骄傲</p>
<p>​    be worthy of 值得…</p>
</li>
<li><p>be + adj ＋ to +宾语</p>
<p>eg:be sensitive to 对.….敏感</p>
<p>​    be devoted to 致力于</p>
<p>​    be similar to 与…相似</p>
<p>​    be superior to 优于</p>
<p>​    be inferior to 劣于</p>
<p>​    be addicted to 沉迷于</p>
</li>
<li><p>be ＋adj＋with＋宾语</p>
<p>eg: be popular with 受…欢迎</p>
<p>​    be satisified with 对.…满意</p>
<p>​    A be familiar with B. = B be familiar to A.</p>
</li>
</ol>
<h3 id="考点03-形近词词义辨析"><a href="#考点03-形近词词义辨析" class="headerlink" title="考点03    形近词词义辨析"></a>考点03    形近词词义辨析</h3><ul>
<li><p>respective：分别的，各自的得</p>
<p>respectable：值得尊敬的，体面的</p>
<p>respected:受到尊敬的</p>
<p>respectful：尊敬的，有礼貌的，恭敬的</p>
<p>respecting：关于（prep.）</p>
</li>
<li><p>sensible：理智的，明智的</p>
<p>sensitive:敏感的，善解人意的，灵敏的</p>
<p>sentimental：情感的，伤感的</p>
</li>
<li><p>late:晚的，迟的；晚期的，接近末期的</p>
<p>last:最后的，最末的；上一个的</p>
<p>later:较晚的<br>latter:后者的</p>
</li>
<li><p>sufficient：足够的，充分的</p>
<p>efficient：有能力的，有效率的</p>
<p>effective：有效的，起作用</p>
</li>
<li><p>average:（水平等）平常的，平均的</p>
<p>normal:（精神及身体状况等）正常的</p>
<p>usual:通常的，寻常的（常指发生频率高的事）</p>
<p>general:大致的，全体的，普遍的</p>
<p>ordinary:普通的，平常的；平凡的；平淡无奇的</p>
<p>regular:有规律的；频繁的，定期的</p>
</li>
<li><p>silent：不说话的，沉默的；无声的，寂静的</p>
<p>queit：宁静的，安静的</p>
<p>still：静止的，不动的，没有活力的</p>
<p>calm：镇定的，冷静的，沉着的</p>
</li>
</ul>
<h2 id="第五节-副词"><a href="#第五节-副词" class="headerlink" title="第五节    副词"></a>第五节    副词</h2><h3 id="一、-副词的构词法"><a href="#一、-副词的构词法" class="headerlink" title="一、    副词的构词法"></a>一、    副词的构词法</h3><ul>
<li><p>一般以-ly结尾为副词</p>
<p>eg: normally , hardly , usually , probably ,<br>willingly（乐意地），generally（普遍地），<br>carefully,directly,clearly(清楚地）,<br>greatly（非常，极大地）……</p>
<ul>
<li><p>特殊情况：一些以-ly结尾的可以用作形容词</p>
<p>friendly（友好的）,deadly（致命的）,<br>lonely(孤独的）,likely(可能的）,<br>lively（充满活力的），lovely（可爱的）……</p>
</li>
</ul>
</li>
</ul>
<h3 id="二、-副词的功能"><a href="#二、-副词的功能" class="headerlink" title="二、    副词的功能"></a>二、    副词的功能</h3><ol>
<li><p>修饰动词：此时副词通常置于动词之后</p>
<p><strong><em>eg: He studies hard.</em></strong></p>
</li>
<li><p>修饰形容词：此时副词通常置于该形容词之前</p>
<p><strong><em>eg: He is very kind.</em></strong></p>
</li>
<li><p>修饰副词：此时副词通常置于该副词之前</p>
<p><strong><em>eg: He studies very diligently.</em></strong></p>
</li>
<li><p>修饰全句：此时副词通常置于句首</p>
<p><strong><em>eg: Fortunately, he did not die.</em></strong></p>
</li>
</ol>
<h3 id="三、-enough的用法"><a href="#三、-enough的用法" class="headerlink" title="三、    enough的用法"></a>三、    enough的用法</h3><ol>
<li><p>adj.足够的，充足的</p>
<p>用法：修饰名词，通常置于名词之前</p>
<p><strong><em>eg: They have enough money to buy the</em></strong><br><strong><em>tickets.</em></strong></p>
</li>
<li><p>adv.足够地，充分地，充足地</p>
<p>用法：用于形容词、副词、动词之后</p>
<p><strong><em>eg: She is old enough to decide for herself.</em></strong></p>
</li>
<li><p>adj + enough to do sth.足够..做某事</p>
<p><strong><em>This house isn’t big enough for us.</em></strong></p>
<p><strong><em>He couldn’t earn enough to support the family.</em></strong></p>
</li>
</ol>
<p>四、    so和such的用法区别</p>
<ol>
<li><p>so（adv.）表程度，含义为：如此</p>
<p>用法：可以修饰形容词或副词：so+adj./adv.</p>
<p>常用结构：so+adj.+a(n)+可数名词单数</p>
<p><strong><em>eg: She is so beautiful.</em></strong></p>
<p>​    <strong><em>She is so beautiful a girl.</em></strong></p>
<ul>
<li><p>特殊用法：so+many/few/much/little+名词</p>
<p><strong><em>eg:so many/few flowers(如此多/少的花）</em></strong></p>
<p>​    <strong><em>so much/little money(如此多/少的钱）</em></strong></p>
</li>
</ul>
</li>
<li><p>such: (adj.)<br>表程度，含义为：如此的</p>
<p>用法：修饰名词，结构为：such+n.</p>
<p>​    常用结构如下：</p>
<p>​        <strong><em>such + a(n)+ adj.+可数名词单数</em></strong></p>
<p>​        <strong><em>such +adj.+可数名词复数</em></strong></p>
<p>​        <strong><em>such +adj.+不可数名词</em></strong></p>
</li>
<li><p>every day 和everyday</p>
<p>every day:每天</p>
<p>everyday:平常的，日常的</p>
</li>
</ol>
<h2 id="第六节-比较等级"><a href="#第六节-比较等级" class="headerlink" title="第六节    比较等级"></a>第六节    比较等级</h2><h3 id="一、-原级比较"><a href="#一、-原级比较" class="headerlink" title="一、    原级比较"></a>一、    原级比较</h3><ol>
<li><p>肯定式：as/so+adj./adv.的原级+as</p>
<p>含义：一方和…另一方一样…</p>
<p><strong><em>eg：迪丽热巴和古力娜扎一样好看。</em></strong></p>
<p>​    <strong><em>Reba is as beautiful as Nazha.</em></strong></p>
<p><strong><em>This film is as interesting as that one.</em></strong></p>
</li>
<li><p>否定式：not as/so+adj./adv.的原级+as</p>
<p>含义：一方不及另一方…</p>
<p><strong><em>eg：古力娜扎不如迪丽热巴好看。</em></strong></p>
<p>​    <strong><em>Nazha is not as beautiful as Reba.</em></strong></p>
</li>
<li><p>注意：</p>
<p>当as…as…句型中，两个as中间有名词，应用句型：</p>
<p><strong><em>as +adj.+a(n)+单数名词+as…</em></strong></p>
<p><strong><em>as many/much/few/little +复数n/不可数n+ as…</em></strong></p>
<p><strong><em>eg: She is as good a student as Mary.</em></strong></p>
</li>
</ol>
<h3 id="二、-最高形式"><a href="#二、-最高形式" class="headerlink" title="二、    最高形式"></a>二、    最高形式</h3><ol>
<li><p>规则变化：</p>
<ul>
<li><p>比较级在词尾+er</p>
<p>最高级在词尾+est</p>
<p>eg: tall- taller- tallest</p>
<p>​    hard- harder-hardest</p>
<p>​    clever-cleverer-cleverest</p>
</li>
<li><p>以字母”e”结尾的，在词尾加-r和-st</p>
<p>eg: nice - nicer - nicest</p>
<p>fine - finer - finest</p>
<p>simple - simpler - simplest</p>
<p>large - larger - largest</p>
</li>
<li><p>以辅音字母加“y”结尾的，变y为i再加-er和-est</p>
<p>eg: easy - easier - easiest</p>
<p>​    early - earlier - earliest</p>
</li>
<li><p>对于多音节和部分双音节词：</p>
<p>词前加more表比较级</p>
<p>词前加most表比较级</p>
<p><strong><em>eg: important- more important- most important</em></strong></p>
<p>​    <strong><em>famous- more famous- most famous</em></strong></p>
<p>​    <strong><em>popular- more popular- most popular</em></strong></p>
<p>​    <strong><em>careful-more careful-most careful</em></strong></p>
</li>
</ul>
</li>
<li><p>不规则变化：</p>
<p>many/much- more -most</p>
<p>good/well - better - best</p>
<p>bad/badly/ill - worse -worst<br>l</p>
<p>ittle - less - least</p>
<p>far - farther/further - farthest/furthest</p>
<p><strong><em>eg : I couldn’t walk any farther/further.</em></strong></p>
<p>​    <strong><em>The police decide to investigate further.</em></strong></p>
<p>old - older/elder - oldest/eldest</p>
<p>年龄比较用older,oldest</p>
<p><strong><em>eg:He is older than me.</em></strong></p>
<p>家庭中的长幼顺序用elder,eldest</p>
<p><strong><em>eg:elder sister长姐</em></strong></p>
</li>
<li><p>比较级+than</p>
<p><strong><em>eg: Mary works harder than Tom.</em></strong></p>
<p>​    <strong><em>Health is more important than wealth.</em></strong></p>
</li>
<li><p>表达“越来越”含义</p>
<p>单音节词：比较级+and+比较级</p>
<p>多音节词：more and more + adj/adv</p>
<p><strong><em>eg: bigger and bigger</em></strong></p>
<p>​    <strong><em>more and more beautiful</em></strong></p>
</li>
<li><p>the+比较级+主谓.…，the+比较级+主谓…</p>
<p><strong><em>eg:The harder you work, the luckier you will</em></strong><br><strong><em>be.</em></strong></p>
</li>
<li><p>可以放在比较级前修饰比较级的词：</p>
<p>口诀：四个A甚至仍旧没有任何的马骑，怎么走的相当远</p>
<p>四个A:a little,a bit,a lot,a great deal</p>
<p>甚至：even;仍旧：still;任何：any;</p>
<p>many/much , rather, quite/fairly, far</p>
<p><strong><em>eg : He is much taller than me.</em></strong></p>
</li>
<li><p>特殊情况：比较用原级，后用to</p>
<p>superior高级的</p>
<p>inferior下等的</p>
<p>senior年长的</p>
<p>junior年少的</p>
<p><strong><em>eg:The computer is superior to that one.</em></strong></p>
</li>
<li><p>倍数表达法</p>
<ul>
<li>倍数表达法一：<ul>
<li>A+谓语+倍数+比较级+than+B.</li>
</ul>
</li>
<li>倍数表达法二：<ul>
<li>A+谓语+倍数+as +adj/adv原级+as+B.</li>
</ul>
</li>
</ul>
<p>杨颖的眼睛比孙红雷的眼睛大三倍。</p>
<p><strong><em>Yang’s eyes are three times bigger than Sun’s</em></strong><br><strong><em>eyes.</em></strong></p>
<p>杨颖的眼睛是孙红雷眼睛的四倍。</p>
<p><strong><em>Yang’s eyes are four times as big as Sun’s eyes.</em></strong></p>
</li>
<li></li>
</ol>
<h2 id="第七节-连词"><a href="#第七节-连词" class="headerlink" title="第七节    连词"></a>第七节    连词</h2><h3 id="考点01-all的常考介词短语"><a href="#考点01-all的常考介词短语" class="headerlink" title="考点01    all的常考介词短语"></a>考点01    all的常考介词短语</h3><ol>
<li><p>above all 最重要的是；尤其是</p>
<p><strong><em>eg: Above all, we should recognize our</em></strong><br><strong><em>strengths and weaknesses.</em></strong></p>
</li>
<li><p>first of all 首先</p>
<p><strong><em>eg:First of all, we should make education</em></strong><br><strong><em>universal.</em></strong></p>
</li>
<li><p>after all 毕竟</p>
<p><strong><em>eg:After all, no one knows me better than me.</em></strong></p>
</li>
<li><p>all in all总之，整体来说</p>
<p><strong><em>eg: All in all, Lifelong learning is essential to</em></strong><br><strong><em>everyone.</em></strong></p>
</li>
<li><p>(not)…at all 一点也（不)</p>
<p><strong><em>eg:He didn’t allow smoking in his room,</em></strong><br><strong><em>actually he didn’t allow his family to smoke at</em></strong><br><strong><em>all.</em></strong></p>
</li>
<li><p>all over到处，遍地</p>
<p><strong><em>eg: I have stamps from all over the world.</em></strong></p>
</li>
<li><p>all around整个那一带，到处</p>
<p><strong><em>eg : Look at the companies all around you.</em></strong></p>
</li>
</ol>
<h3 id="考点02-out-of-n常考介词短语"><a href="#考点02-out-of-n常考介词短语" class="headerlink" title="考点02    out of +n常考介词短语"></a>考点02    out of +n常考介词短语</h3><ol>
<li><p>out of style过时的，不流行的</p>
<p>反义短语：in style流行的</p>
</li>
<li><p>out of fashion 过时的</p>
</li>
<li><p>out of date 过时的，过期的</p>
</li>
<li><p>out of control失去控制，不受约束</p>
<p>反义短语：under control处于控制之下</p>
</li>
<li><p>out of order（机器、设备等）出故障<br>次序混乱，乱七八糟</p>
<p><strong><em>eg : My watch is out of order.</em></strong></p>
<p>​    <strong><em>The room was out of order.</em></strong></p>
</li>
<li><p>out of condition 身体不好，情况欠佳</p>
<p><strong><em>eg : I’m out of condition.</em></strong></p>
</li>
<li><p>out of danger 脱离险境</p>
</li>
<li><p>out of place 不在适当的位置；</p>
</li>
<li><p>out of service不适宜<br>失效，停止运行</p>
</li>
<li><p>out of sight看不见的</p>
</li>
<li><p>out of temper 发怒的</p>
</li>
<li><p>out of trouble 摆脱困境</p>
</li>
<li><p>outof work失业</p>
</li>
</ol>
<h3 id="考点03-under-n常考介词短语"><a href="#考点03-under-n常考介词短语" class="headerlink" title="考点03    under+n常考介词短语"></a>考点03    under+n常考介词短语</h3><ol>
<li>under control处于控制之下，情况正常</li>
<li>under threat 受到威胁</li>
<li>under no circumstance绝不，任何情况下都不</li>
<li>under discussion处于讨论之中</li>
<li>under consideration 在考虑之中</li>
<li>under age未成年</li>
<li>under construction 在建设中</li>
<li>under investigation 在调查中</li>
<li>under repair 在修理中</li>
</ol>
<h3 id="考点04-介词on常考介词短语"><a href="#考点04-介词on常考介词短语" class="headerlink" title="考点04    介词on常考介词短语"></a>考点04    介词on常考介词短语</h3><ol>
<li>on purpose 故意地</li>
<li>on duty值班</li>
<li>on behalf of 代表</li>
<li>on account of 由于</li>
<li>on condition that… 在…条件下</li>
<li>on holiday 在度假</li>
<li>on the average平均</li>
<li>on time准时</li>
<li>on weekdays 在工作日</li>
</ol>
<h3 id="考点05-at的常考介词短语"><a href="#考点05-at的常考介词短语" class="headerlink" title="考点05    at的常考介词短语"></a>考点05    at的常考介词短语</h3><ol>
<li><p>at least 至少</p>
<p><strong><em>eg:You should write at least 120 words.</em></strong></p>
</li>
<li><p>at first当初，起初</p>
<p><strong><em>eg:When he came for the interview, Sam felt</em></strong><br><strong><em>nervous at first, but soon calmed down.</em></strong></p>
</li>
<li><p>at the same time与此同时</p>
</li>
<li><p>at the age of…在…某人多少岁时</p>
<p>eg : He could make a living at the age of seven.</p>
</li>
<li><p>at the cost of 以…为代价</p>
</li>
<li><p>at the expense of 以…为代价</p>
</li>
<li><p>at the sight of 一看见..就…</p>
<p>eg : Our hopes arose at the first sight of the<br>doctor.</p>
</li>
<li><p>at the risk of<br>冒……险</p>
</li>
<li><p>at the thought of -想起….</p>
</li>
<li><p>at a speed of以……的速度</p>
</li>
<li><p>be angry <font color="red">with </font>sb.生某人的气</p>
<p>be angry <font color="red">about </font>sth.对某事生气</p>
</li>
<li><p>in the course of 在…….过程中</p>
</li>
<li><p>as a result of 作为………的结果，由于</p>
</li>
<li><p>by means of 借助……的手段，依靠……的方法</p>
</li>
<li><p>for the sake of 为了.…….起见</p>
</li>
<li><p>in that case 如果那样的话</p>
</li>
<li><p>in case免得，以防</p>
</li>
<li><p>in no case 绝不，任何情况下都不</p>
</li>
<li><p>in any case 在任何情况下，不管怎样</p>
</li>
<li><p>for a moment片刻，一下</p>
</li>
<li><p>in a moment立即，马上，一会儿</p>
</li>
<li><p>for the moment 目前，暂时</p>
</li>
<li><p>at the moment 此刻</p>
</li>
<li><p>off the point离题，不切要领</p>
</li>
<li><p>on the point 即将..时候;在….点上</p>
</li>
<li><p>to the point 中肯，切中要害</p>
</li>
<li><p>in the point 就..而言</p>
</li>
</ol>
<h3 id="考点六-besides-except-but-except-for"><a href="#考点六-besides-except-but-except-for" class="headerlink" title="考点六    besides,except,but,except for"></a>考点六    besides,except,but,except for</h3><ol>
<li><p>besides“除……之外还有”</p>
<p>注意：包括所除的人或物</p>
<p><strong><em>eg: Besides his girlfriend, his mother also goes</em></strong><br><strong><em>to see the movie.</em></strong></p>
<p>表达含义：女朋友和妈妈都去看了电影。</p>
<p><strong><em>Everyone has a girlfriend besides me.</em></strong></p>
<p>表达含义：我跟大家都有女朋友。</p>
</li>
<li><p>except”（同类中）除去”</p>
<p>注意：不包括所除的人或物</p>
<p><strong><em>eg: Everyone has a girlfriend except me.</em></strong></p>
<p>表达含义：大家都有女朋友，就我没有。</p>
<p><strong><em>The shop is open every day except Monday.</em></strong></p>
<p>表达含义：商店只有周一不营业。</p>
</li>
<li><p>but“除了”</p>
<p>注意：不包括所除的人或物</p>
<p><strong><em>eg:I have no friend friend but you.</em></strong></p>
<p>表达含义：除了你以外，我没有朋友。</p>
<p><strong><em>I want nobody but you.</em></strong></p>
<p>表达含义：除了你，我谁都不想要。</p>
</li>
<li><p>except for<br>“除了”</p>
<p>注意：不同类中除去某一细节</p>
<p><strong><em>Your writing is good except for a few grammar</em></strong><br><strong><em>mistakes.</em></strong></p>
<p><strong><em>The weather was good except for an occasional</em></strong><br><strong><em>shower.</em></strong></p>
</li>
</ol>
<h2 id="第八节-冠词和数词"><a href="#第八节-冠词和数词" class="headerlink" title="第八节 冠词和数词"></a>第八节 冠词和数词</h2><h3 id="考点01-冠词的分类及用法"><a href="#考点01-冠词的分类及用法" class="headerlink" title="考点01    冠词的分类及用法"></a>考点01    冠词的分类及用法</h3><ul>
<li><p>冠词的概念：<br>冠词是一种虚词，置于名词前，起限定说明的作用</p>
<ul>
<li><p>冠词的分类：</p>
<p>定冠词：the</p>
<p>不定冠词：a,an</p>
<p>零冠词：不使用冠词的情况</p>
</li>
<li><p>定冠词的用法</p>
<p>特指双熟悉，<br>上文已提及，</p>
<p>世上独无二，<br>序数最高级，</p>
<p>某些专有名，<br>方位及乐器。</p>
</li>
<li><p>零冠词的用法：</p>
<p>泛指概念，可用于不可数名词或复数名词之前</p>
<p>用于一日三餐名词之前</p>
<p>表示星期、月份、季节、节假日等时间名词前</p>
</li>
</ul>
</li>
<li><p>不定冠词的用法：</p>
<ul>
<li><p>不定冠词有a和an两种形式：</p>
<p>a用于辅音音素开头的单词</p>
<p>an用于元音音素开头的单词</p>
<p><strong><em>eg:a house    a university    a teacher</em></strong></p>
<p>​    <strong><em>an umbrella</em></strong><br>​    <strong><em>an example</em></strong><br>   <strong><em>an hour</em></strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="考点02-数词的分类及用法"><a href="#考点02-数词的分类及用法" class="headerlink" title="考点02    数词的分类及用法"></a>考点02    数词的分类及用法</h3><p>数词的分类：</p>
<p>基数词：表示数目的数词</p>
<p>序数词：表示顺序的数词</p>
<p>分数词</p>
<ul>
<li><p>基数词</p>
<p>eg: one, two, three…..</p>
<p>注意：</p>
<ul>
<li><p>表示确切数字时,hundred,thousand,million,<br>billion等只能用单数形式，不能加s</p>
<p><strong><em>eg:three hundred</em></strong></p>
<p>​    <strong><em>six thousand</em></strong></p>
</li>
<li><p>不表示具体确切的数字时，加s，且后跟of</p>
<p><strong><em>eg: hundreds of</em></strong><br><strong><em>数百，成百上千的</em></strong></p>
<p>​    <strong><em>thousands of数千，成干上万的</em></strong></p>
<p>dozen(一打,12个）<br>score(20个）</p>
<p>表示确切数字时不用复数形式，表示不确切数字要用复数形式</p>
<p><strong><em>eg: two dozen bottles of water</em></strong></p>
<p>​    <strong><em>scores of students</em></strong></p>
<p>基数词+连字符+名词</p>
<p>可构成复合式形容词，此时名词用单数形式</p>
<p><strong><em>eg: a ten-minute walk</em></strong><br><strong><em>十分钟的步行路程</em></strong></p>
</li>
</ul>
</li>
<li><p>序数词：</p>
<p><strong><em>eg: first, second, third,</em></strong></p>
<p><strong><em>fourth, fifth, sixth, seventh, eighth, ninth…..</em></strong></p>
</li>
<li><p>分数词：</p>
<p>分数词构成口诀：</p>
<p>分子基数词，<br>分母序数词，</p>
<p>分子大于1，<br>分母加-s.</p>
<p><strong><em>eg:四分之ー：one-fourth</em></strong><br><strong><em>三分之二：two-thirds</em></strong><br><strong><em>九分之五：five-ninths</em></strong></p>
</li>
</ul>
<h1 id="下篇：阅读与作文"><a href="#下篇：阅读与作文" class="headerlink" title="下篇：阅读与作文"></a>下篇：阅读与作文</h1><h2 id="第一节-阅读理解"><a href="#第一节-阅读理解" class="headerlink" title="第一节    阅读理解"></a>第一节    阅读理解</h2><p><strong>文章体裁</strong>：记叙文、议论文、说明文、应用文</p>
<p>分类：</p>
<p>推理判断题（约占44%）<br>事实细节题（约占35%）<br>主旨大意题（约占11%）<br>词语理解题（约占6%）<br>观点态度题（约占4%）</p>
<ol>
<li><p>读懂题且</p>
<p>做阅读理解</p>
<p>最佳步骤：<br>先看问题，弄清楚提问的内容，然后带着问题有目的<br>地阅读，目标明确地寻找答案</p>
</li>
<li><p>会读文章</p>
<p>阅读理解测试目的：<br>测试考生通过文章获取信息的能力</p>
<p>阅读方法：</p>
<p>略读法：快速了解文章大意及要点</p>
<p>查阅法：根据有效信息定位问题在原文中的位置</p>
</li>
<li><p>平时反复练习，培养阅读能力</p>
<p>做到每天至少练习两篇文章，保证阅读量。<br>根据自己的情况，设定时间完成，逐渐缩短阅读<br>时间</p>
</li>
</ol>
<h3 id="考点01-关键词定位"><a href="#考点01-关键词定位" class="headerlink" title="考点01    关键词定位"></a>考点01    关键词定位</h3><ul>
<li>优先找时间、数字、人名、地名等专有名词</li>
<li>找实词，着重看名词，其次看动词</li>
<li>关键词也可能出现在选项中。<br>（选项中若有2-4个相同的词，一般是关键词）</li>
<li>注意：尽量避免用中心词和常用词做关键词！</li>
</ul>
<h3 id="考点02-顺序定位"><a href="#考点02-顺序定位" class="headerlink" title="考点02    顺序定位"></a>考点02    顺序定位</h3><p>通常出题顺序和文章段落顺序一致</p>
<h3 id="考点03-推理判断题"><a href="#考点03-推理判断题" class="headerlink" title="考点03    推理判断题"></a>考点03    推理判断题</h3><ul>
<li><p>推理判断题的特点：</p>
<ul>
<li><p>要求考生根据文章的内容和结构作出合乎逻辑的推论</p>
</li>
<li><p>推理判断题的答案往往是需要进行推理出来的，<br>所以原文通常没有直接给出答案</p>
</li>
</ul>
</li>
<li><p>推理判断题常见干扰项的特点：</p>
<ul>
<li><p>直接照抄原文，非推断出的结论，通常是干扰项</p>
</li>
<li><p>看似是原文中推断出来的结论，但是与原文不符</p>
</li>
<li><p>根据常识判断是对的，但不能从原文推断出来</p>
</li>
<li><p>推理判断题题干常见词：</p>
<p>imply 暗示<br>infer 推理<br>conclude 推断<br>suggest表明<br>indicate表明，指示</p>
</li>
</ul>
</li>
</ul>
<h3 id="考点04-事实细节题"><a href="#考点04-事实细节题" class="headerlink" title="考点04    事实细节题"></a>考点04    事实细节题</h3><ul>
<li><p>事实细节题的特点：</p>
<ul>
<li>主要考查考生把握文章具体信息的能力。</li>
<li>在查找文章信息时，一定要认真理解题干题意，<br>准确定位答案的出处。</li>
</ul>
</li>
<li><p>·事实细节题的做题技巧：</p>
<ol>
<li><p>做好细节题的关键</p>
<ul>
<li><p>善于利用题干提供的关键词进行定位</p>
</li>
<li><p>一眼秒杀关键词</p>
<p>人名、地名，数字，年代，时间，日期，大写字母，<br>特殊标点符号</p>
</li>
<li><p>然后在定位处寻找答案</p>
</li>
</ul>
</li>
<li><p>通常正确选项会利用同义替换，所以要特点注意<br>同义替换的选项。</p>
</li>
</ol>
</li>
<li><p>事实细节题的干扰项特点：</p>
<ol>
<li>部分信息正确，另一部分错误；</li>
<li>是原文信息，但不是题目所要求的内容；</li>
<li>与原句内容相似但过于绝对化；</li>
<li>符合常识，但不是文章的内容；</li>
<li>明显不是文章的信息。</li>
</ol>
</li>
</ul>
<h3 id="考点05-主旨大意题"><a href="#考点05-主旨大意题" class="headerlink" title="考点05    主旨大意题"></a>考点05    主旨大意题</h3><p>题目常见关键词：</p>
<ul>
<li><p>主旨类：</p>
<p>main idea/ main point/key point</p>
<p>main topic/mainly discuss</p>
<p>mainly explain/ is mainly about</p>
</li>
<li><p>目的类：purpose</p>
</li>
<li><p>标题类：best title</p>
</li>
<li><p>主旨题的答案要从主题句中得出，关键在于找出<br>主题句出现的地方：<br>文章首句、各段段首句和段尾句</p>
</li>
<li><p>解题技巧：</p>
<ol>
<li><p>根据主题词进行选择<br>主题词：可能是同一词反复出现，也可能是同一类词<br>贯穿全文。</p>
</li>
<li><p>运用排除</p>
<p>正确答案：一般概括全文，内容全面，含义深刻</p>
<p>错误答案：</p>
<p>a）太具体只是文章的部分信息；</p>
<p>b）太笼统超出文章的范围；</p>
<p>c）正确信息与错误信息组合；</p>
<p>d）与文章内容无关。</p>
</li>
</ol>
</li>
</ul>
<h3 id="考点06-词义理解题"><a href="#考点06-词义理解题" class="headerlink" title="考点06    词义理解题"></a>考点06    词义理解题</h3><ul>
<li><p>考查方式：</p>
<ol>
<li><p>猜单词或短语</p>
<ul>
<li>生词本义（大纲外词汇）</li>
<li>熟词僻义（大纲内词汇）</li>
</ul>
</li>
<li><p>猜代词（如it、that、they)</p>
<p>提问方式：</p>
<p>In the second paragraph , the word “them” refers to _______.</p>
<p>The underline word<br>“it”<br>refers to _______.</p>
<p>做题方法：找到代词指代内容，一般指上文提到的</p>
</li>
<li><p>猜句子</p>
</li>
</ol>
</li>
</ul>
<h3 id="考点07-作者态度题"><a href="#考点07-作者态度题" class="headerlink" title="考点07    作者态度题"></a>考点07    作者态度题</h3><ul>
<li>态度题做题注意事项：<ol>
<li>特别注意首先看清楚“谁对谁”的态度</li>
<li>作者态度一般与文章相关联，不要把自己的态度纳<br>入其中</li>
</ol>
</li>
<li>作者态度分类：<ol>
<li>支持，赞同，乐观<br>客观，</li>
<li>中立<br>反对，</li>
<li>批评，怀疑，悲观</li>
</ol>
</li>
<li>常见观点态度词：<ol>
<li>negative消极的</li>
<li>positive积极的</li>
<li>indifferent漠不关心的</li>
<li>neutral 中立的</li>
<li>disapproval 不赞成的</li>
<li>approval 赞成的</li>
<li>supportive支持的</li>
<li>critical 批评的</li>
<li>sarcastic 讽刺的</li>
</ol>
</li>
</ul>
<h3 id="考点08-文章信号词"><a href="#考点08-文章信号词" class="headerlink" title="考点08    文章信号词"></a>考点08    文章信号词</h3><ol>
<li><p>转折信号词</p>
<p>明显转折词：but,however,while,nevertheless</p>
<p>含蓄转折词：in fact,actually,as a matter of fact;<br>in contrast, on the contrary;</p>
<p>让步转折词：although,though,<br>even if, even though ;<br>in spite of, despite</p>
</li>
<li><p>表原因的信号词：</p>
<p>because , as , for , since , now that;</p>
<p>result from, due to, because of, on account of ;</p>
</li>
<li><p>表结果的信号词：</p>
<p>cause,lead to,result in 导致（+结果）<br>so,thus,therefore,consequently 因此</p>
<p>As a result,（+结果）</p>
</li>
<li><p>表条件的信号词：</p>
<p>if , unless , in case ,</p>
</li>
<li><p>信号词的目的：</p>
<p>这类信号词是阐述作者观点态度的</p>
<p>而作者的观点态度是全文论证的核心，通常也是<br>文章的主题句</p>
<p>信号词：</p>
<ul>
<li><p> think, believe, consider, hold, conclude,suggest , show, indicate</p>
</li>
<li><p> idea, thought, attitude</p>
</li>
<li><p>for , against</p>
</li>
<li><p>in my opinion, my view is, as I see</p>
</li>
<li><p>in short, in sum, in a word,</p>
</li>
<li><p>in brief, to conclude, to sum up</p>
</li>
</ul>
</li>
</ol>
<ol>
<li><p>信号词作用：是为了证明结论提供所需论据的</p>
</li>
<li><p>阅读方式：由于在考试做题中，我们更看重结论<br>而非论据，因此这类信号词一般标志着其附近的<br>例子可以略读。</p>
</li>
<li><p>规律总结：英语中通常先说结论，后举例子</p>
</li>
<li><p>例子、实验信号词</p>
<ul>
<li><p>such as, for example =for instance +例子</p>
</li>
<li><p>例子+illustrate.….+结论</p>
<p>结论+ to illustrate this…+例子</p>
</li>
<li><p>experiment, research, survey …</p>
</li>
</ul>
</li>
<li><p>强调类信号词</p>
<p>比较级、最高级词：</p>
<p>比较级例如：more than，as…as,</p>
<p>最高级例如：-est，most important等</p>
</li>
<li><p>专家、大众信号词<br>说明父</p>
<ul>
<li>专家：其的观点或话语往往是文章讲述的核心，<br>是作者引用来支持自己观点的，通常都是作者认<br>可的。</li>
</ul>
<p><strong><em>eg:scientist,psychologist(心理学家),expert,</em></strong><br><strong><em>researcher, professor, doctor,..</em></strong></p>
<ul>
<li>大众：专家以外的所有人</li>
</ul>
<p><strong><em>eg: most of us, some of us, some parents,</em></strong><br><strong><em>boys and girls</em></strong><br><strong><em>It is generally accepted…</em></strong></p>
</li>
<li><p>特殊标点信号词</p>
<p>——    破折号表解释；表转折</p>
<p>“”        重要的人物说的重要的话语</p>
<p>！        本句是重点（强调，感慨等）</p>
<p>？        对该句的回答是重点</p>
</li>
</ol>
<h2 id="第二节-完形填空"><a href="#第二节-完形填空" class="headerlink" title="第二节    完形填空"></a>第二节    完形填空</h2><p>完型题材类型：</p>
<ul>
<li><p>多为说明文，主题涉及社会现象、</p>
</li>
<li><p>人文科学等<br>总-分结构，首句点明主题</p>
</li>
</ul>
]]></content>
      <categories>
        <category>考研必背</category>
      </categories>
  </entry>
  <entry>
    <title>啥是函数</title>
    <url>/HigherMathematics-function.html</url>
    <content><![CDATA[<p><strong>跟我一起学数学</strong></p>
<a id="more"></a>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li><p>设数集D⊂R,如果对D中每个数x,变量y按照一定法则在R中有唯一确定的数值与之对应, 则称y是x的函数</p>
</li>
<li><p>记为: y=f(x), x∈D</p>
<ul>
<li><p>x称为自变量</p>
</li>
<li><p>y称为因变量</p>
</li>
<li><p>D称为定义域</p>
</li>
</ul>
</li>
<li><p>记作Df  即Df=D</p>
</li>
</ul>
<h1 id="值域"><a href="#值域" class="headerlink" title="值域"></a>值域</h1><ul>
<li>函数值f(x)的全体所构成的集合称为函数f的<font color="#DC143C">值域</font>,记作R,或f(D),即Rf=f(D)={y|y=f(x)x∈D}</li>
</ul>
<h5>构成函数的要素: 定义域Df, 对应法则f<h5>


<h1 id="函数的图形"><a href="#函数的图形" class="headerlink" title="函数的图形"></a>函数的图形</h1><ul>
<li>在坐标平面上的点集C={(x,y)|y=f(x),x∈D}称为函数y=f(x)的图形</li>
</ul>
<h3 id="常数函数"><a href="#常数函数" class="headerlink" title="常数函数"></a>常数函数</h3><ul>
<li>函数y=C,其中C为某确定的常数定义域为D=(-∞,+∞),值域为R={C},图形是一条平行于x轴的直线</li>
</ul>
<h3 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h3><figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">      / -<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>&lt;<span class="hljs-number">0</span><br>y<span class="hljs-operator">=</span>|<span class="hljs-keyword">x</span>|<span class="hljs-operator">=</span><br>      \ <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>≥<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<ul>
<li><p>定义域为D=(-∞,+∞)</p>
</li>
<li><p>值域Rf=[0,+∞)</p>
</li>
</ul>
<h3 id="符号函数"><a href="#符号函数" class="headerlink" title="符号函数"></a>符号函数</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">       / 1, x&gt;0<br><span class="hljs-attribute">y</span>=sgnx=  0, <span class="hljs-attribute">x</span>=0<br>       \ -1, x&lt;0<br></code></pre></td></tr></table></figure>
<ul>
<li><p>定义域为D=(-∞,+∞)</p>
</li>
<li><p>值域Rf=[-1,0,1)</p>
</li>
<li><p>x=sgnx·|x| </p>
</li>
</ul>
<h3 id="取整函数"><a href="#取整函数" class="headerlink" title="取整函数"></a>取整函数</h3><ul>
<li><p>y=[x]的定义域为D=(-∞,+∞)</p>
</li>
<li><p>值域为整数集Z</p>
</li>
</ul>
<h3 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h3><ul>
<li>自变量在不同范围中, 对应则用不同的式子来表示</li>
</ul>
<h1 id="函数的特性"><a href="#函数的特性" class="headerlink" title="函数的特性"></a>函数的特性</h1><h3 id="函数的有界性"><a href="#函数的有界性" class="headerlink" title="函数的有界性"></a>函数的有界性</h3><h4>上界</h4>

<ul>
<li>设函数f(x)的定义域为D, 数集X⊂D, 如果存在数K1, 使得对任一 x∈X, 都有f(x)≤K1, 则称函数f(x)在X上有<font color="#CD4F39">上界</font>, 而K1称为函数f(x)在X上的一个<font color="#CD4F39">上界</font></li>
</ul>
<h4>下界</h4>

<ul>
<li>如果存在数K2, 使得对任一 x∈X, 都有f(x)≥K2, 则称函数f(x)在X上有<font color="#CD4F39">下界</font>, 而K2称为函数f(x)在X上的一个<font color="#CD4F39">下界</font></li>
</ul>
<h4>有界</h4>

<ul>
<li>如果存在正数M, 使得对任一 x∈X, 都有|f(x)|≤M, 则称函数f(x)在X上有<font color="#CD4F39">有界</font></li>
</ul>
<h4>无界</h4>

<ul>
<li>如果这样的M不存在, 则称函数f(x)在X上<font color="#CD4F39">无界</font></li>
</ul>
<h3 id="函数的单调性-单调函数"><a href="#函数的单调性-单调函数" class="headerlink" title="函数的单调性/单调函数"></a>函数的单调性/单调函数</h3><h4>单调增加</h4>

<ul>
<li>设函数发(x)的定义域为D, 区间I⊂D, 如果对于区间I内的任意两点x1及x2, 当x1&lt;x2时, 恒有 f(x1)&lt;f(x2), 则称函数f(x)在区间I内是单调增加</li>
</ul>
<h4>单调减少</h4>

<ul>
<li>如果对于区间I内的任意两点x1及x2, 当x1&lt;x2时, 恒有 f(x1)&gt;f(x2), 则称函数f(x)在区间I内是单调减少</li>
</ul>
<h3 id="函数的奇偶性"><a href="#函数的奇偶性" class="headerlink" title="函数的奇偶性"></a>函数的奇偶性</h3><h4>奇函数</h4>

<ul>
<li>设函数f(x)的定义域D关于原点对称, 如果任意x∈D, f(-x)=-f(x)  <font color="#CD4F39">原点对称</font></li>
</ul>
<p><strong>f(x)=sinx是奇函数</strong></p>
<h4>偶函数</h4>

<ul>
<li>如果任意x∈D, f(-x)=f(x)  <font color="#CD4F39">Y轴对称</font></li>
</ul>
<p><strong>f(x)=cosx是偶函数</strong></p>
<p><strong>f(x)=sinx + cosx是非奇非偶</strong></p>
<h3 id="函数的周期性"><a href="#函数的周期性" class="headerlink" title="函数的周期性"></a>函数的周期性</h3><ul>
<li>周期函数的周期是指最小正周期 sinx, cosx以2π为周期 tanx以π为周期</li>
</ul>
<ul>
<li>设函数f(x)的定义域为D, 如果存在一个正数T, 使得对于任一x∈D有x±T∈D且 f(x+T)=f(x)则称f(x)为周期函数, T称为函数f(x)的周期</li>
</ul>
<h1 id="初等函数"><a href="#初等函数" class="headerlink" title="初等函数"></a>初等函数</h1><ul>
<li>由常数和基本初等函数经过有限次的四则运算和有限次的函数复合步骤所构成的并可用一个式子表示的函数,称为初等函数</li>
</ul>
<p><img src="/images/%E5%AD%A6%E6%95%B0%E5%AD%A6/%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0.jpg"></p>
<p><img src="/images/%E5%AD%A6%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0.jpg"></p>
<br>
<!-- ### 幂函数: y=Xα (α∈R是常数)

<h3 id="指数函数-y-ax-a-gt-0-a≠1"><a href="#指数函数-y-ax-a-gt-0-a≠1" class="headerlink" title="指数函数:y=ax (a&gt;0,a≠1)"></a>指数函数:y=ax (a&gt;0,a≠1)</h3><h3 id="对数函数-y-loga-x-a-gt-0-a≠1"><a href="#对数函数-y-loga-x-a-gt-0-a≠1" class="headerlink" title="对数函数:y=loga x (a&gt;0,a≠1)"></a>对数函数:y=loga x (a&gt;0,a≠1)</h3><h3 id="特别地-当a-e时-记作y-lnx"><a href="#特别地-当a-e时-记作y-lnx" class="headerlink" title="特别地,当a=e时,记作y=lnx"></a>特别地,当a=e时,记作y=lnx</h3><h3 id="–-gt"><a href="#–-gt" class="headerlink" title="–&gt;"></a>–&gt;</h3><br>

<!-- ⊆是包含于符号：A包含于B-则A为B的子集或等于B。

⊇是包含符号：A包含B-则B为A的子集或等于A。

⫋真包含：A真包含于B-则A为B的真子集，若B={1，2}，则A={1}或{2}或空集。

运算符号：

如加号 (+) ，减号 (－) ，乘号 (×或·) ，除号 (÷或/) ，两个集合的并集 (∪) ，交集 (∩) ，根号 (√￣) ，对数 (log，lg，ln，lb) ，比 (:) ，绝对值符号| |，微分 (d) ，积分 (∫) ，闭合曲面 (曲线) 积分 (∮) 等。

关系符号：

如"="是等号，"≈"是近似符号 (即约等于) , "≠"是不等号，">"是大于符号，"<"是小于符号，"≥"是大于或等于符号 (也可写作"≮"，即不小于) , "≤"是小于或等于符号 (也可写作"≯"，即不大于) , "→ "表示变量变化的趋势。

"∽"是相似符号，"≌"是全等号，"∥"是平行符号，"⊥"是垂直符号，"∝"是正比例符号 (表示反比例时可以利用倒数关系) , "∈"是属于符号，"⊆"是包含于符号，"⊇"是包含符号，"|"表示"能整除" (例如a|b 表示"a能整除b"，而  -->

</h5></h5>]]></content>
      <categories>
        <category>跟我一起学数学</category>
      </categories>
  </entry>
  <entry>
    <title>导数与微分 (第二章)</title>
    <url>/HigherMathematics-derivative-differentiate.html</url>
    <content><![CDATA[<p><strong>跟我一起学数学</strong></p>
<a id="more"></a>

<h1 id="导数的概念与运算法则"><a href="#导数的概念与运算法则" class="headerlink" title="导数的概念与运算法则"></a>导数的概念与运算法则</h1><h2 id="考点1-导数的定义"><a href="#考点1-导数的定义" class="headerlink" title="考点1: 导数的定义"></a>考点1: 导数的定义</h2><h3>定义:</h3>

<div class="shuxue">若$$\lim_{\triangle x\rightarrow\infty}\frac{f(\;x_0\;+\;\triangle x\;)-f(\;x_0\;)}{\triangle x}\\$$ 存在,则称 $$\;y=f(x)\;\\\\$$ 在 $$\;\;x_0\;\;\\\\$$ 处可导</div>

<div class="shuxue">称该极限为,$$\;y=f(x)\;\\\\$$在$$\;\;x_0\;\;\\\\$$ 处的导数 </div>

<div class="shuxue">记作: <span class="shuxue2">$$f\;'\;(\;x_0\;)\;,\;\\\\$$</span><span>$$f\;'\;(\;x_0\;)\;,\;\\\\$$</span><span>$${}_{\;x\;=\;x_0\;}\\\\$$</span></div>


<h3>特别的:</h3>

<div class="shuxue">$$f\;'\;(\;x_0\;)\;=\;\lim_{\triangle x\rightarrow0}\frac{f(\;x_0\;+\;\triangle x\;)\;-\;f\left(\;x_0\;\right)}{\triangle x}\\$$</div>

<div class="shuxue">$$=\lim_{x\rightarrow0}\frac{f(\;x\;)\;-\;f\left(\;x_0\;\right)}{x\;-\;x_0}\\\\$$ </div>

<div class="shuxue"><span>$$\;f\;'\;\left(\;x\;\right),\;\;\\\\$$</span><span>$$\;y\;'\;,\;\frac{\displaystyle dy}{\displaystyle dx}\;\\\\$$</span><span>$$\frac{\displaystyle dy}{\displaystyle dx}\;\\\\$$</span></div>

<h3>导函数记作:</h3>

<div class="shuxue"><span class="shuxue2">$$\;f\;'\;\left(\;x\;\right),\;\;y\;'\;,\;\frac{dy}{dx}\;$$</span></div>


<h2 id="考点2-高阶导数"><a href="#考点2-高阶导数" class="headerlink" title="考点2: 高阶导数"></a>考点2: 高阶导数</h2><h3 id="求n阶段方法"><a href="#求n阶段方法" class="headerlink" title="求n阶段方法:"></a>求n阶段方法:</h3><h4>求出f(x)的前几阶导, 总结规律, 得n阶导</h4>

<h4>高阶导数公式:</h4>

<p><font color="#7bbfea">(1)</font></p>
<div class="shuxue"><span>$${(\;e\;^{x\;})}^{\;(\;n\;)}\;=\;e^x,$$</span><span>$$(\;e^{\;ax\;+\;b}\;)\;^{(\;n\;)}\;=\;a^{\;n\;}e\;^{ax\;+\;b},\;$$</span><span>$${(\;a^{x\;})}^{(\;n\;)}\;=\;{(\;\ln\;a\;)}^{\;n}\;a^{\;x}$$</span></div>

<p><font color="#7bbfea">(2)</font></p>
<div class="shuxue"><span>$$\left(\;x^n\;\right)^{(\;n\;)}\;=\;n!,\;$$</span><span>$$\left(\;x^m\;\right)^{(\;n\;)\;}\;=\;$$</span><span>$$0.\;( \;m < n\;)$$</span></div>


<p><font color="#7bbfea">(3)</font></p>
<div class="shuxue"><span>$${(\;\sin\;x\;)}^{\;(\;n\;)\;}=\;\sin\;(\;x\;+\;\frac{n\;\mathrm\pi}2\;),\\\\$$</span><span>$${(\;\cos\;x)}^{\;(\;n\;)}\;=\;\cos\;(\;x\;+\;\frac{n\;\mathrm\pi}2\;)\\\\$$</span></div>


<h2 id="考点3-求隐函数的导数"><a href="#考点3-求隐函数的导数" class="headerlink" title="考点3: 求隐函数的导数"></a>考点3: 求隐函数的导数</h2><div class="shuxue">定义: 显函数 $$ \;y\; \;=\; f\; (\; x\; )\;$$, 隐函数$$ \;F \; ( \;x \;,\; y \; ) \; = \; 0\;$$</div>

<h3>解题方法:</h3>

<h4>方法一: 复合函数法</h4>

<div class="shuxue">方程 $$\;F\;=\;(\;x\;,\;y\;)\;=\;0\;$$, 两边同时对$$\;x\;$$求导, 解出$$\;y'\;$$ </div>

<div class="shuxue">注意: <span>$$\;x\;$$</span>是<span>$$\;y\;$$</span>的函数</div>

<h4>方法二: 公式法</h4>

<p><font color="#7bbfea">(1)</font></p>
<div class="shuxue">构造二次元函数 $$\;F\;=\;(\;x\;,\;y\;)\;$$</div>

<p><font color="#7bbfea">(2)</font></p>
<div class="shuxue">求偏导数 $$\;F_x\;(\;x\;,\;y\;),\;F_{y\;}(\;x\;,\;y\;)\;$$</div>

<p><font color="#7bbfea">(3)</font></p>
<div class="shuxue">带公式 $$\;\frac{dy}{dx}\;=\;-\;\frac{Fx\;(\;x\;,\;y\;)}{Fy\;(\;x\;,\;y\;)}$$</div>

<h2 id="考点4-求参数方程的导数"><a href="#考点4-求参数方程的导数" class="headerlink" title="考点4: 求参数方程的导数"></a>考点4: 求参数方程的导数</h2><p><font color="#7bbfea">(1)</font></p>
<div class="shuxue">参数方程: $$\;\left\{\begin{array}{l}x\;=\;\varphi\;(\;t\;)\\y\;=\;\psi\;(\;t\;)\end{array}\right.\;$$</div>

<p><font color="#7bbfea">(2)</font></p>
<div class="shuxue">求导公式: $$\;\frac{dy}{dx}\;=\;\frac{dy\;/\;dt}{dx/\;dt}\;=\;\frac{\psi\;'\;(\;t\;)\;}{\varphi\;'\;(\;t\;)}$$</div>

<div class="shuxue">$$\;\frac{d^2\;y}{d^{2\;}x}\;=\;\frac d{dx}\;\left(\;\frac{dy}{dx}\;\right)\;=\;\frac{d\;(\;{\displaystyle\frac{dy}{dx}}\;)\;/\;dt}{dx\;/\;dt}$$</div>

<br>]]></content>
      <categories>
        <category>跟我一起学数学</category>
      </categories>
  </entry>
  <entry>
    <title>高等数学 微分中值定理及导数的应用 (第三章)</title>
    <url>/HigherMathematics-Differential-Derivative.html</url>
    <content><![CDATA[<p><strong>跟我一起学数学</strong></p>
<a id="more"></a>

<h1 id="第一节-微分中值定理及洛必达法则"><a href="#第一节-微分中值定理及洛必达法则" class="headerlink" title="第一节 微分中值定理及洛必达法则"></a>第一节 微分中值定理及洛必达法则</h1><h2 id="考点1-罗尔定理"><a href="#考点1-罗尔定理" class="headerlink" title="考点1: 罗尔定理"></a>考点1: 罗尔定理</h2><h3>设 f ( x )满足:</h3>

<p><font color="#7bbfea">(1) </font>在 [ a , b ]上连续</p>
<p><font color="#7bbfea">(2) </font>在 ( a , b )内可导</p>
<p><font color="#7bbfea">(3) </font>f ( a ) = f ( b ), 则 ∃ § ∈ ( a , b )</p>
<h2 id="考点1-拉姆朗日中值定理"><a href="#考点1-拉姆朗日中值定理" class="headerlink" title="考点1: 拉姆朗日中值定理"></a>考点1: 拉姆朗日中值定理</h2><h3>设 f ( x )满足:</h3>

<p><font color="#7bbfea">(1) </font>在 [ a , b ]上连续</p>
<p><font color="#7bbfea">(2) </font>在 ( a , b )内可导</p>
<p><font color="#7bbfea">(3) </font>f ( a ) = f ( b ), 则 ∃ § ∈ ( a , b ) 使 $$lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|&lt;\epsilon)=1, i=1,…,n$$  </p>
<br>



]]></content>
      <categories>
        <category>跟我一起学数学</category>
      </categories>
  </entry>
  <entry>
    <title>数列的极限</title>
    <url>/limit-of-sequence.html</url>
    <content><![CDATA[<p><strong>跟我一起学数学</strong></p>
<a id="more"></a>

<h1 id="数列的定义"><a href="#数列的定义" class="headerlink" title="数列的定义"></a>数列的定义</h1><h4>概念</h4>

<p><img src="/images/%E5%AD%A6%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%88%97%E7%9A%84%E6%A6%82%E5%BF%B5.jpg"></p>
<h4>数列的项</h4>

<p><img src="/images/%E5%AD%A6%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%88%97%E7%9A%84%E9%A1%B9.jpg"></p>
<h1 id="数列极限的定义"><a href="#数列极限的定义" class="headerlink" title="数列极限的定义"></a>数列极限的定义</h1><p><img src="/images/%E5%AD%A6%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%88%97%E7%9A%84%E9%A1%B9.jpg"></p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p><img src="/images/%E5%AD%A6%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90%E7%9A%84%E5%85%AC%E5%BC%8F.jpg"></p>
<h1 id="收敛数列的性质"><a href="#收敛数列的性质" class="headerlink" title="收敛数列的性质"></a>收敛数列的性质</h1><p><img src="/images/%E5%AD%A6%E6%95%B0%E5%AD%A6/%E6%94%B6%E6%95%9B%E6%95%B0%E5%88%97%E7%9A%84%E6%80%A7%E8%B4%A8.jpg"></p>
<br>

<!-- ### 幂函数: y=Xα (α∈R是常数)

### 指数函数:y=ax (a>0,a≠1)

### 对数函数:y=loga x (a>0,a≠1)

### 特别地,当a=e时,记作y=lnx

###  -->

<!-- ⊆是包含于符号：A包含于B-则A为B的子集或等于B

⊇是包含符号：A包含B-则B为A的子集或等于A

⫋真包含：A真包含于B-则A为B的真子集, 若B={1, 2}, 则A={1}或{2}或空集

运算符号：

如加号 (+) , 减号 (－) , 乘号 (×或·) , 除号 (÷或/) , 两个集合的并集 (∪) , 交集 (∩) , 根号 (√￣) , 对数 (log, lg, ln, lb) , 比 (:) , 绝对值符号| |, 微分 (d) , 积分 (∫) , 闭合曲面 (曲线) 积分 (∮) 等

关系符号：

如"="是等号, "≈"是近似符号 (即约等于) , "≠"是不等号, ">"是大于符号, "<"是小于符号, "≥"是大于或等于符号 (也可写作"≮", 即不小于) , "≤"是小于或等于符号 (也可写作"≯", 即不大于) , "→ "表示变量变化的趋势

"∽"是相似符号, "≌"是全等号, "∥"是平行符号, "⊥"是垂直符号, "∝"是正比例符号 (表示反比例时可以利用倒数关系) , "∈"是属于符号, "⊆"是包含于符号, "⊇"是包含符号, "|"表示"能整除" (例如a|b 表示"a能整除b", 而  -->

]]></content>
      <categories>
        <category>跟我一起学数学</category>
      </categories>
  </entry>
  <entry>
    <title>映射与函数</title>
    <url>/mathematics-Mapping-function.html</url>
    <content><![CDATA[<p><strong>跟我一起学数学</strong></p>
<a id="more"></a>

<h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><h3 id="映射的3要素-定义域-x-值域范围-Y-对应法则-f"><a href="#映射的3要素-定义域-x-值域范围-Y-对应法则-f" class="headerlink" title="映射的3要素: 定义域(x)  值域范围(Y)  对应法则(f)"></a>映射的3要素: 定义域(x)  值域范围(Y)  对应法则(f)</h3><p><strong>注意: 高等数学里面X和x代表不同意思</strong></p>
<ul>
<li><p>X 是指变量</p>
</li>
<li><p>x 是指取值</p>
</li>
</ul>
<h2 id="X-Y-非空集合-法则f-对X中每个元素x-唯一的与之对应"><a href="#X-Y-非空集合-法则f-对X中每个元素x-唯一的与之对应" class="headerlink" title="X Y 非空集合  法则f 对X中每个元素x 唯一的与之对应"></a>X Y 非空集合  法则f 对X中每个元素x 唯一的与之对应</h2><ul>
<li>f 映射 f:X→Y  (y=f(x), x∈X)</li>
</ul>
<p><strong>注意: 这上面的Y 意思是 像 原像</strong></p>
<p>定义域  Df    (Domain)<br>值域    Rf    (Range RfCY)</p>
<p>y = f(x)<br>像   原像</p>
<h1 id="映射的3种情况"><a href="#映射的3种情况" class="headerlink" title="映射的3种情况"></a>映射的3种情况</h1><h2 id="满射-多对一"><a href="#满射-多对一" class="headerlink" title="满射 (多对一)"></a>满射 (多对一)</h2><p><strong>没有映射 f:X→Y, 若 Rf = Y, 则称f为满射</strong></p>
<h2 id="单射-一对一"><a href="#单射-一对一" class="headerlink" title="单射 (一对一)"></a>单射 (一对一)</h2><p><strong>若对x1, x2∈X, 当x1 ≠ x2时有f(x1) ≠ f(x2)则称为单射</strong></p>
<h2 id="一一映射-或-双射"><a href="#一一映射-或-双射" class="headerlink" title="一一映射 或 双射"></a>一一映射 或 双射</h2><p><strong>满射加单射 即单又满的映射, 称为 “一一映射”</strong></p>
<h2 id="逆映射"><a href="#逆映射" class="headerlink" title="逆映射"></a>逆映射</h2><p><strong>一定是是单射</strong></p>
<h2 id="符合映射"><a href="#符合映射" class="headerlink" title="符合映射"></a>符合映射</h2><p><strong>注意: 符合的顺序不同它的映射也不同</strong></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>解释: 函数是一种特殊的映射</li>
</ul>
<h3 id="函数的3要素-定义域-x-值域范围-Y-对应法则-f"><a href="#函数的3要素-定义域-x-值域范围-Y-对应法则-f" class="headerlink" title="函数的3要素: 定义域(x)  值域范围(Y)  对应法则(f)"></a>函数的3要素: 定义域(x)  值域范围(Y)  对应法则(f)</h3><p><strong>概念: 设数集D⊂R, 称映射 f:D→R为定义在D上的函数 记作 y=f(x) , x∈D</strong></p>
<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><h2 id="符号函数"><a href="#符号函数" class="headerlink" title="符号函数"></a>符号函数</h2><h2 id="函数的几种特性"><a href="#函数的几种特性" class="headerlink" title="函数的几种特性"></a>函数的几种特性</h2><p><strong>有界性</strong></p>
<ul>
<li><p>上界: ∃k1  f(x)≤k1 一个上界</p>
</li>
<li><p>上界: ∃k2  f(x)≥k2 一个下界</p>
</li>
<li><p>有界: ∃正数M  |f(x)|≤M 有界</p>
</li>
<li><p>无界: ∀正数M   x1∈x   |f(x)|&gt;M  既有上界也有下界</p>
</li>
</ul>
<br>

<!-- ⊆是包含于符号：A包含于B-则A为B的子集或等于B

⊇是包含符号：A包含B-则B为A的子集或等于A

⫋真包含：A真包含于B-则A为B的真子集, 若B={1, 2}, 则A={1}或{2}或空集

运算符号：

如加号 (+) , 减号 (－) , 乘号 (×或·) , 除号 (÷或/) , 两个集合的并集 (∪) , 交集 (∩) , 根号 (√￣) , 对数 (log, lg, ln, lb) , 比 (:) , 绝对值符号| |, 微分 (d) , 积分 (∫) , 闭合曲面 (曲线) 积分 (∮) 等

关系符号：

如"="是等号, "≈"是近似符号 (即约等于) , "≠"是不等号, ">"是大于符号, "<"是小于符号, "≥"是大于或等于符号 (也可写作"≮", 即不小于) , "≤"是小于或等于符号 (也可写作"≯", 即不大于) , "→ "表示变量变化的趋势

"∽"是相似符号, "≌"是全等号, "∥"是平行符号, "⊥"是垂直符号, "∝"是正比例符号 (表示反比例时可以利用倒数关系) , "∈"是属于符号, "⊆"是包含于符号, "⊇"是包含符号, "|"表示"能整除" (例如a|b 表示"a能整除b", 而  -->

]]></content>
      <categories>
        <category>跟我一起学数学</category>
      </categories>
  </entry>
  <entry>
    <title>高等数学学习计划</title>
    <url>/HigherMathematics-learning-plan.html</url>
    <content><![CDATA[<p><strong>跟我一起学数学</strong></p>
<a id="more"></a>

<h1 id="第一章-函数与极限"><a href="#第一章-函数与极限" class="headerlink" title="第一章 函数与极限"></a>第一章 函数与极限</h1><h4>常考</h4>

<ul>
<li>映射与函数</li>
<li>无穷大与无穷小</li>
<li>极限运算法则</li>
<li>极限存在准则</li>
<li>两个重要极限</li>
<li>无穷小的比较</li>
<li>函数的连续性与间断点</li>
</ul>
<h4>不常考</h4>

<ul>
<li>数列的极限</li>
<li>函数的极限</li>
<li>连续函数的运算与初等函数的连续性连续性与间断点</li>
<li>闭区间上连续函数的性质</li>
</ul>
<!-- ![](/images/学数学/考试大纲函数与极限.jpg) -->

<h1 id="第二章-导数与微分"><a href="#第二章-导数与微分" class="headerlink" title="第二章 导数与微分"></a>第二章 导数与微分</h1><h4>常考</h4>

<ul>
<li>函数的求导法则</li>
<li>高阶导数</li>
<li>隐函数即由参数方程所确定的导数相关变化率</li>
</ul>
<h4>不常考</h4>

<ul>
<li>导数的概念</li>
<li>函数的微分</li>
</ul>
<!-- ![](/images/学数学/考试大纲导数与微分和微分中值定理与导数的应用.jpg) -->

<h1 id="第三章-微分中值定理与导数的应用"><a href="#第三章-微分中值定理与导数的应用" class="headerlink" title="第三章 微分中值定理与导数的应用"></a>第三章 微分中值定理与导数的应用</h1><h4>常考</h4>

<ul>
<li>微分中定理</li>
<li>洛必达法则</li>
<li>泰勒公式</li>
<li>函数的单调性与曲线的凹凸性</li>
<li>函数的极限与最大值最小值</li>
</ul>
<h4>不常考</h4>

<ul>
<li>函数图像的描绘</li>
<li>曲率</li>
<li>方程的近似解</li>
</ul>
<!-- ![](/images/学数学/考试大纲常微分方程和多元函数微分法及其应用.jpg) -->

<h1 id="第四章-不定积分"><a href="#第四章-不定积分" class="headerlink" title="第四章 不定积分"></a>第四章 不定积分</h1><h4>常考</h4>

<ul>
<li>换元积分法</li>
<li>分布积分法</li>
<li>有理函数的积分</li>
</ul>
<h4>不常考</h4>

<ul>
<li>不定积分的概念与性质</li>
<li>积分表的使用</li>
</ul>
<h1 id="第五章-定积分及应用"><a href="#第五章-定积分及应用" class="headerlink" title="第五章 定积分及应用"></a>第五章 定积分及应用</h1><h4>必考</h4>

<ul>
<li>定积分的换元法和部分积分法</li>
</ul>
<h4>不常考</h4>

<ul>
<li>定积分的概念与性质</li>
<li>微积分基本公式</li>
<li>反常积分</li>
<li>定积分的元素法</li>
<li>定积分在几何学上的应用</li>
<li>定积分在物理学上的应用</li>
</ul>
<!-- ![](/images/学数学/考试大纲不定积分和定积分及应用.jpg) -->

<h1 id="第六章-常微分方程"><a href="#第六章-常微分方程" class="headerlink" title="第六章 常微分方程"></a>第六章 常微分方程</h1><h4>常考</h4>

<ul>
<li>可分离变量的微分方程</li>
<li>一阶线性微分方程</li>
<li>常系数其次线性微分方程</li>
</ul>
<h4>不常考</h4>

<ul>
<li>微分方程的基本概念</li>
</ul>
<h1 id="第七章-多元函数微分法及其应用"><a href="#第七章-多元函数微分法及其应用" class="headerlink" title="第七章 多元函数微分法及其应用"></a>第七章 多元函数微分法及其应用</h1><h4>必考</h4>

<ul>
<li>偏导数</li>
</ul>
<h4>常考</h4>

<ul>
<li>全微分</li>
<li>多元复合函数的求导法则</li>
<li>隐函数的求导公式</li>
</ul>
<h4>不常考</h4>

<ul>
<li>多元函数的基本概念</li>
</ul>
<!-- ![](/images/学数学/考试大纲常微分方程和多元函数微分法及其应用.jpg) -->

<h1 id="第八章-重积分"><a href="#第八章-重积分" class="headerlink" title="第八章 重积分"></a>第八章 重积分</h1><h4>常考</h4>

<ul>
<li>二重积分的计算法</li>
<li>三重积分</li>
<li>重积分的应用 (大部分考察二重积分的应用 求表面积)</li>
</ul>
<h4>不常考</h4>

<ul>
<li>二重积分的概念与性质</li>
</ul>
<h1 id="第九章-无穷级数"><a href="#第九章-无穷级数" class="headerlink" title="第九章 无穷级数"></a>第九章 无穷级数</h1><h4>常考</h4>

<ul>
<li>常数项级数的概念和性质</li>
<li>常数项级数的审敛法</li>
</ul>
<!-- ![](/images/学数学/考试大纲重积分和无穷级数.jpg) -->

<h1 id="考试分析-重点"><a href="#考试分析-重点" class="headerlink" title="考试分析(重点)"></a>考试分析(重点)</h1><h4>可以拿分</h4>

<ul>
<li>单选题</li>
<li>填空题</li>
<li>计算题</li>
</ul>
<h4>题型所占分值</h4>

<table>
<thead>
<tr>
<th align="center">题型</th>
<th align="center">分值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">单选题</td>
<td align="center">5x3=15</td>
</tr>
<tr>
<td align="center">填空题</td>
<td align="center">5x3=15</td>
</tr>
<tr>
<td align="center">计算题</td>
<td align="center">8x6=48</td>
</tr>
<tr>
<td align="center">综合体</td>
<td align="center">10x12=22</td>
</tr>
<tr>
<td align="center">总计</td>
<td align="center">100</td>
</tr>
</tbody></table>
<!-- ![](/images/学数学/考试大纲考题分值.jpg) -->


<h1 id="考试内容分析"><a href="#考试内容分析" class="headerlink" title="考试内容分析"></a>考试内容分析</h1><h4>计算题</h4>

<ul>
<li>不定积分</li>
</ul>
<h4>综合题</h4>

<ul>
<li>函数与极限 (高)</li>
<li>微分中值定理与导数的应用 (高) </li>
<li>定积分及应用 (高)</li>
<li>多元函数微分法及其应用 (可能)</li>
<li>重积分 (可能)</li>
<li>导数与微分 (可能)</li>
<li>常微分方程 (可能)</li>
<li>函数与极限 (以极限的形式出题)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">考试章节</th>
<th align="center">2020年</th>
<th align="center">百分比</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1.函数与极限</td>
<td align="center">12</td>
<td align="center">12%</td>
</tr>
<tr>
<td align="center">2.导数与微分</td>
<td align="center">9</td>
<td align="center">9%</td>
</tr>
<tr>
<td align="center">3.微分中值定理与导数的应用</td>
<td align="center">15</td>
<td align="center">15%</td>
</tr>
<tr>
<td align="center">4.不定积分</td>
<td align="center">9</td>
<td align="center">9%</td>
</tr>
<tr>
<td align="center">5.定积分及应用</td>
<td align="center">19</td>
<td align="center">19%</td>
</tr>
<tr>
<td align="center">6.常微分方程</td>
<td align="center">9</td>
<td align="center">9%</td>
</tr>
<tr>
<td align="center">7.多元函数微分法及其应用</td>
<td align="center">9</td>
<td align="center">9%</td>
</tr>
<tr>
<td align="center">8.重积分</td>
<td align="center">9</td>
<td align="center">9%</td>
</tr>
<tr>
<td align="center">9.无穷级数</td>
<td align="center">9</td>
<td align="center">9%</td>
</tr>
</tbody></table>
<!-- # 考试特点: 小题难度低, 重基础, 结合题较难 -->

<h1 id="学习方法-课本过两遍-多做题-多总结做题方法"><a href="#学习方法-课本过两遍-多做题-多总结做题方法" class="headerlink" title="学习方法: 课本过两遍, 多做题, 多总结做题方法"></a>学习方法: 课本过两遍, 多做题, 多总结做题方法</h1><br>








]]></content>
      <categories>
        <category>跟我一起学数学</category>
      </categories>
  </entry>
  <entry>
    <title>鲲鹏微认证(日后会更新)</title>
    <url>/Kunpeng-micro-authentication.html</url>
    <content><![CDATA[<p><strong>鲲鹏微认证笔记</strong></p>
<a id="more"></a>

<h1 id="C-C-代码迁移"><a href="#C-C-代码迁移" class="headerlink" title="C/C++代码迁移"></a>C/C++代码迁移</h1><h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2><ul>
<li>典型的如C/C++/Go语言, 都属于编译型语言, 编译型语言开发的程序从x86处理器迁移到鲲鹏处理器时, 必须经过重新编译才能运行</li>
</ul>
<ul>
<li>从源码到程序的过程<ul>
<li>源码需要由编译器, 汇编器翻译成机器指令, 再通过链接器链接库函数生成机器语言程序<br>
<br>

</li>
</ul>
</li>
</ul>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">源码</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">预处理</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">预编译文件</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">编译</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">汇编代码</span>    --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">汇编</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">目标文件</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">链接</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>&gt;  <span class="hljs-comment">可执行文件</span><br><br><span class="hljs-comment">testc</span>      <span class="hljs-comment">gcc</span> <span class="hljs-literal">-</span><span class="hljs-comment">E</span> <span class="hljs-comment">testc</span> <span class="hljs-literal">-</span><span class="hljs-comment">o</span> <span class="hljs-comment">testi</span>      <span class="hljs-comment">texti</span>       <span class="hljs-comment">gcc</span> <span class="hljs-literal">-</span><span class="hljs-comment">S</span> <span class="hljs-comment">testio</span> <span class="hljs-comment">tests</span>      <span class="hljs-comment">texts</span>          <span class="hljs-comment">gcc</span> <span class="hljs-literal">-</span><span class="hljs-comment">S</span> <span class="hljs-comment">testso</span> <span class="hljs-comment">testo</span>     <span class="hljs-comment">testo</span>       <span class="hljs-comment">gcc</span> <span class="hljs-literal">-</span><span class="hljs-comment">S</span> <span class="hljs-comment">testso</span> <span class="hljs-comment">testo</span>     <span class="hljs-comment">text</span><br></code></pre></td></tr></table></figure>
<h2 id="C-C-代码需要迁移的原因"><a href="#C-C-代码需要迁移的原因" class="headerlink" title="C/C++代码需要迁移的原因"></a>C/C++代码需要迁移的原因</h2><ul>
<li>架构差异:<ul>
<li>x86和鲲鹏处理器(aarch64)属于不同架构</li>
</ul>
</li>
</ul>
<ul>
<li>指令极差异:<ul>
<li>x86属于复杂指令集</li>
<li>鲲鹏处理器(aarch64)属于精简指令集</li>
</ul>
</li>
</ul>
<ul>
<li>向量寄存器的差异:<ul>
<li>x86和鲲鹏处理器(aarch64)使用向量寄存器不同, 向量指令集也存在差异</li>
</ul>
</li>
</ul>
<h1 id="C-C-代码构建编译过程"><a href="#C-C-代码构建编译过程" class="headerlink" title="C/C++代码构建编译过程"></a>C/C++代码构建编译过程</h1><h2 id="C-C-代码工程主要包括两类文件"><a href="#C-C-代码工程主要包括两类文件" class="headerlink" title="C/C++代码工程主要包括两类文件:"></a>C/C++代码工程主要包括两类文件:</h2><ul>
<li>编译构建脚本<ul>
<li>Makefile CmakeListstxt Configure autogensh bootstrapsh等等</li>
</ul>
</li>
</ul>
<ul>
<li>C/C++源码<ul>
<li>src examples tests等等</li>
</ul>
</li>
</ul>
<h2 id="可能涉及到的移植项"><a href="#可能涉及到的移植项" class="headerlink" title="可能涉及到的移植项"></a>可能涉及到的移植项</h2><ul>
<li>编译构建脚本类文件<ul>
<li>编译选项的移植(指定数据类型, 生成代码特性, 目标执行器架构, 处理器硬件加速功能等)</li>
</ul>
</li>
</ul>
<ul>
<li>C/C++代码类文件<ul>
<li>编译宏移植(用户自定义宏移植, 编译器自定义宏移植)</li>
<li>编译器自带builtin函数移植</li>
<li>内联汇编移植</li>
<li>SSE intrinsic函数移植(MMX/SEE类函数移植, AVX函数移植)</li>
</ul>
</li>
</ul>
<!-- # C/C++代码编译构建过程

~~~

~~~ -->

<h1 id="直接真题-CTRL-F"><a href="#直接真题-CTRL-F" class="headerlink" title="直接真题 CTRL+F"></a>直接真题 CTRL+F</h1><h2 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h2><p><strong>yum和rpm安装方式本质都是基于RPM包来安装软件</strong> √</p>
<p><strong>交叉编译是在一个平台 上生成另一个平台上可执行的代码</strong> √</p>
<p><strong>BenchmarkSQL使用GCC编译进行编译安装</strong> ×</p>
<p><strong>Dockerfile中的每一条指令 都分别对应镜像的每一层</strong> √</p>
<p><strong>C/C++语言属于编译型语言, 其编译后得到的可执行程序执行时依赖的指令是与CPU架构不相关的, 因此此类应用程序不需要移植</strong> ×</p>
<p><strong>Centos是开源的操作系统, Debian不属于开源操作系统</strong> ×</p>
<p><strong>Tai Shan服务器的CPU是ARM架构的</strong> √</p>
<p><strong>华为鲲鹏云服务产品发布前, 需要先加入鲲鹏凌云伙伴计划并通过鲲鹏云服务兼容性认证</strong> √</p>
<p><strong>通过”ps -ef | grep PostgreSQL “命令可以确认数据库进程是否启动</strong> ×</p>
<p><strong>为方便客户业务的统一部署,  镜像服务建立起了镜像与弹性云服务器之间 镜像与裸金属服务器之间 以及镜像与外部文件之间的直接联系</strong> √</p>
<p><strong>一个弹性公网IP能同时给多个弹性云服务器使用</strong> ×</p>
<p><strong>华为鲲鹏性能优化工具支持分析C/C+ +和Java Mixed-Mode两种应用程序类型</strong> √</p>
<p><strong>对于Java类应用程序进行性能分析时, 由于受java的jit编译的限制, 函数分析结果中只能查看到对应的源码, 无法查看汇编和代码流图</strong> √</p>
<p><strong>HiBench支持在编译时指定编译模块</strong> √</p>
<p><strong>docker的基础镜像中包含父镜像</strong> ×</p>
<p><strong>华为鲲鹏云服务可提供KC1型ECS和KS1型BMS</strong> √</p>
<p><strong>Tai Shan服务器必须使用特殊的专有内存和硬盘</strong> x</p>
<p><strong>Java/Python的虚拟机不支撑再鲲鹏上源码编译, 只能使用yum方式安装</strong> x</p>
<!-- **个人理解Python是解释型语言,Java在鲲鹏里面也被强制列为解释型语言** -->
<!-- **用户想安装按RPM方式发行的软件, 只需简单地输入命令rpm -ivh xxxrpm即可** -->
<h2 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h2><p>类RedHat系统提供了什么命令来安装, 卸载和升级rpm软件包    (A)<br>    A rpm<br>    B dpkg<br>    C tar<br>    D apt-get</p>
<p>下面哪个工具不属于鲲鹏开发套件?      (A)<br>    A 分析扫码工具<br>    B 代码迁移工具<br>    C 性能调优工具<br>    D Vtune</p>
<p>使用命令rpmbuild -bb XX spec (XX表示文件名)制作RPM包时, RPM包生成在什么目录下?      (C)<br>A BUILD B SOURCE C RPMS D SPEC</p>
<p>在BenchmarkSQL执行以下哪个脚本, 可以对表中写入数据?      (A)<br>A runLoader sh B runBenchmark sh C runDatabaseBuild sh D runDatabaseDestroy Sh</p>
<p>BenchmarkSQL执行以下哪个脚本加载数据?      (B)<br>A runBenchmark sh B runDat abaseBuild sh C runDat abaseDestroy sh D runLoader sh</p>
<p>代码扫描工具Dependency Advisor是部署在哪种架构的服务器或者弹性云服务器上?      (D)<br>A ARM B 鲲鹏 C Power D x86</p>
<p>以下哪个不属于镜像管理特性?      (D)<br>A 修改镜像 B 删除镜像 C 镜像导出 D 查询镜像</p>
<p>Hi Bench是什么？      (C)<br>A 大数据开发框架 B 大数据可视化平台 C 大数据基准测试套件 D 大数据分析工具</p>
<p>关于容器的删除操作, 以下哪项是正确的？      (C)<br>A 可通过”docker rm &lt;容器ID&gt;”删除正在运行的容器<br>B 可通过”docker rmi &lt;容器ID&gt;”删除已停止的容器<br>C 可通过”docker rm &lt;容器ID&gt;”删除已停止的容器<br>D 可通过”docker rmi &lt;容器ID&gt;”删除正在运行的容器</p>
<p>关于华为鲲鹏迁移工具分析报告提供的依赖库so文件的操作建议, 以下哪项是不正确的?      (A)<br>A 目前不存在鲲鹏平台无法识别的依赖库So文件<br>B 鲲鹏平台不支持该类依赖库S0文件,需要用户自行处理<br>C 如果依赖库so文件已经过鲲鹏平台验证, 但无二进制安装包,则需要用户下载依赖库源码, 然后上传至目标服务器进行编译安装<br>D 如果依赖库S0文件已经过鲲鹏平台验证, 且已有二进制安装包,则用户可以直按将工具提供的开源版本依赖库安装包下载到本地, 然后上传至目标服务器进行安装使用</p>
<p>以下关于web界面访问华为鲲鹏代码迁移工具的方式,描述正确的是      (A)<br>A 单用户单任务访问<br>B 多用户多任务并发访间<br>C 多用户同时访问<br>D 单用户多任务访问</p>
<p>以下哪个选项不是iSula通用容器引辈的特点?      (C)<br>A 升级不中断业务 B 增强安全性和调测特性 C 大幅提升容器性能 D 快速灵活</p>
<p>在修改BenchmarkSQL连接PostereSQL的配置文件时, 关于runMins和runTxnsPerTerminal这两个参数的设置, 以下哪项是正确的?      (A)<br>A 必须有一个设定为0  B 必须相等 C 均为0   D 必须不相等, 且均不为0</p>
<p>扫描工具Dependency Advi sor支持以下哪种使用模式?      (A)<br>A web B make C test D name</p>
<p>如果要放开外部对弹性云服务器的8080端口访问, 可以通过配置以下哪项功能实现?      (C)<br>A 弹性公网IP带宽 B 主机组 C 安全组 D VPC子网</p>
<p>系统盘镜像类型不包含以下哪个      (A)<br>A 机架服务器系统盘镜像 B 普通云服务器系统盘镜像 C GPU加速云服务器系统盘镜像 D 裸金属云服务器系统盘镜像</p>
<p>私有镜像通过以下哪个功能可以实现本地业务部署和公有云业务部署的统一化持久化?      (A)<br>A 镜像导出  B 镜像市场 C 镜像复制 D 镜像共享</p>
<p>以下哪个命令表示只生成rpm源代码的命令?      (B)<br>A rpmbuild -ba B rpmbuild- bs C rpmbuild -bc D rpmbuild -bb</p>
<p>以下哪个不是使用rpm工具安装软件?      (A)<br>A 自动安装依赖包 B 全自动安装 C 能够进行数据库的记载 D 自定义安装路径</p>
<p>提供预装操作系统 应用环境和各类软件的优质第三方镜像是属于以下哪种镜像?      (C)<br>A 共享镜像 B 私有镜像 C 市场镜像 D 公共镜像</p>
<p>ssh协议默认端口号是什么?      (C)<br>A 9600 B 23 C 22 D 513</p>
<p>关于容器相关概念的描述, 以下哪项是错误的?      (C)<br>A 标签:可用于识别不同的变体或版本<br>B 仓库: 一个软件库,  存储了可下载并安装在系统中的软件包<br>C 镜像:容器的运行实例<br>D 容器:image的运行实例</p>
<p>使用gcc编译时, 编译选项-march的作用是什么?      (A)<br>A 指定指令集<br>B 指定cpu型号<br>C 指定流水线<br>D 提升兼容性</p>
<p>下列哪个是华为鲲鹏生态兼容的非国产操作系统?      (C)<br>A BCLinux<br>B openEuler<br>C Ubuntu<br>D Kylin</p>
<p>谁是Linux之父?      (D)<br>A Richard Matthew Stal lman B Andrew Morton C Bill Gates D LimusTorval ds</p>
<h2 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h2><p>可以从哪些方面对Post greSQL进行性能调优?      (A C)<br>A 数据库参数 B 硬件 C 编译参数 D 操作系统</p>
<p>使用BenchmarkSQL前需要进行哪些操作?      (A C D)<br>A 配置环境变量 B 重启服务器 C 安装JDK  D 使环境变量生效</p>
<p>关于rpm包和SRPM包的描述, 以下正确的是?      (A B D)<br>A SRPM包含源代码而RPM不包含 B rpm包可以直接安装, SRPM包不可以 C 两者都可修改编译参数 D rpm包是已编译的程序, 而SRPM不是</p>
<p>镜像服务的典型应用场景有哪些?      (A B C)<br>A 快速部署应用 B 批量复制弹性云服务器 C 传统业务上云 D 实时同步数据</p>
<p>镜像文件一般包括以下哪些内容?      (A C)<br>A 预装的软件 B 数据盘 C 操作系统 D 系统盘</p>
<p>以下哪些不是针对spec文件的操作命令?      (A B)<br>A cmake B makefile C make D make install</p>
<p>rpm安装包有哪些优点?      (A B C D)<br>A 提供软件版本资讯, 软件名称, 软件用途等相关信息, 便于了解软件<br>B 内含编译程序, 免编译<br>C 使用数据库记录rpm文件的相关参数, 便于升级 移除 查询与验证<br>D 预先检查系统版本, 可避免文 件被错误安装</p>
<p>创建C/C++程序性能分析任务时, 以下关于分析类型, 描述正确的是?      (A B C)<br>A Profile System,即采集整个服务器系统, 无需关注系统中有哪些类型的应用在运行, 采集时长需要配置参数控制, 适用于多业务混合运行和有子进程的场景<br>B Attach to Process,即该采集对象针对正在运行的应用程序, 通过关联到运行该应用程序的PID的方式, 来实时跟踪和采集该应用程序的性能数据,采集时长需要配置参数控制, 适用于某些应用需要长时间持续运行和采集的场景<br>C Launch Application,即采集启动的时候, 同时启动Application,采集时长受Appl ication的执行时间来控制, 适用于Application运行时间较短的场景<br>D C/C++程序仅支持Launch Application和Attach to Process两种分析类型</p>
<p>以下哪些属于Dockerfile的指令？      (A B C D)<br>A FROM B CMD C EXPOSE D RUN</p>
<p>关于使用源码方式安装加速引擎软件, 以下说法正确的有哪些?      (A B C D)<br>A 编译安装zlib加速库<br>B 在下载好的源码目录下, 使用make命令编译加速器<br>C 编译安装加速器OpenSSL引擎<br>D 编译安装Warpdrive驱动开发库<br>E 安装openssl 111a或以上版本<br>F 安装内核开发包kernel-devel</p>
<p>同一段C/C++代码, 在鲲鹏处理器与x86架构处理器上编译的可执行程序有哪些不同?      (A B)<br>A 指令 B 指令使用的寄存器 C 功能 D 文件结构</p>
<p>以下关于X6000 V5描述正确的是?      (A C D)<br>A 机框支持2个3000w电源<br>B 每个服务器节点支持3个半高半长标准PCIe插槽<br>C 支持4个半宽双路服务器节点<br>D 每个服务器节点支持16个DDR4 DIM插槽</p>
<p>以下哪些场景属于数据密集紧耦合场景?      (C D)<br>A 基因测序<br>B 流体动力学<br>C 天气预测<br>D 环境预测</p>
<p>在PostgreSQL迁移流程中, 包含以下哪些步骤?      (A D)<br>A 迁移分析 B 性能测试 C 环境准备 D 源码修改</p>
<p>通过以下哪些方式可以获取华为鲲鹏系列服务?      (B C)<br>A 购买华为云鲲鹏弹性云服务器<br>B 购买基于x86架构的弹性云服务器<br>C 购买RH服务器<br>D 购买Tai shan服务器</p>
<p>私有镜像包含以下哪些功能?      (A B C D)<br>A 镜像加密 B 镜像共享 C 镜像导出 D 镜像复制</p>
<p>在华为公有云中, 私有镜像包括?      (B C)<br>A 市场镜像 B 系统镜像 C 数据镜像 D 共享镜像</p>
<p>docker run -p 6379:6379 v $PWD/data:/data -d t_arm64v8/centos_ redis:505 redis server –appendonly yes关于此命令的描述, 以下哪些是正确的?      (B C D)<br>A “6379:6379” :将主机的6379端口映射到容器的6379端口<br>B “appendonly yes”, 打开持久化配置<br>C 该命令功能是启动容器, 并在容器启动时候执行容器内的redis-server服务<br>D “$PWD/data: /data” :将主机中当前目录下的data挂载到容器的/data</p>
<p>使用华为鲲鹏代码迁移工具对源码进行扫描分析时, 需要进行哪些方面的检查和分析?      (A B C D)<br>A 检查x86平台与鲲鹏平台相异的编译器宏 编译选项 buildin函数 attribute函数等列表<br>B 对比输入的(S0文件名)列表和S0依赖库白名单<br>C 扫描分析用户软件目标二进制文件依赖的源文件集合<br>D 检查Make file中的编译链接</p>
<p>C/C++语言开发的源码在编译时, 以下哪些模块是不需要的？      (B C)<br>A 汇编器 B 存储器 C 加载器 D 编译器</p>
<p>以下哪些是Tai Shan大数据方案使用的主要服务器型号?      (A B)<br>A 2280均衡型 B 5280存储型 C XA320计算节点 D X6000高密型</p>
<p>以下关于华为鲲鹏920的特点描述正确的有哪些?      (C D)<br>A 性能可匹配Intel Skylake(V5) 高端处理器型号<br>B CPU最多支持2个100GE网口, 支持RoCE特性<br>C 相比同等性能的Intel处理器, 功耗更低<br>D 支持8内存通道, 带宽高于Intel Skyl ake (V5)的6通道</p>
<p>BenchmarkSQL配置文件中loadWorkers指的是什么 ( )<br>A、并发用户数<br>B、数据库装载并发数<br>C、数据库并行数<br>D、数据库表的数量<br>答案：B<br>TPCC衡量标准是什么？<br>A、QphH<br>B、响应时间<br>C、tpmC<br>D、TPS<br>答案：C<br>Porting Advisor工具在移植源码过程中的作用是？<br>A、分析源码, 并给出移植工作量<br>B、分析源码, 并给出分析报告和源码修改建议<br>C、分析源码, 并修改源码<br>D、分析源码, 并给出性能优化建议<br>答案：B<br>华为鲲鹏BMS云服务器最高可提供多少核？<br>A、32<br>B、48<br>C、62<br>D、128<br>答案：D<br>IMS私有镜像类型不包括以下哪项？<br>A、系统盘镜像<br>B、整体镜像<br>C、数据盘镜像<br>D、整机镜像<br>答案：B<br>可以根据设定的寻路协议实时自动优化网络结构, 以保持客户使用的网络持续稳定、高效.这句话是关于以下哪项的描述？<br>A、静态BGP<br>B、全动态BGP<br>C、独享宽带<br>D、共享宽带<br>答案：B<br>以下哪条命令可以查看docker镜像？<br>A、docker images<br>B、docker list<br>C、docker container ls<br>D、docker -a<br>答案：A<br>以下哪个工具可以用于鲲鹏平台上进行代码迁移？<br>A、Tuning kit<br>B、Dependency Advisor<br>C、Porting Advisor<br>D、GCC<br>答案：C<br>Suse操作系统是从哪个版本开始处于Kunpeng 920的OS生态圈？<br>A、SLES 12.3<br>B、SLES 12.4<br>C、SLES 15<br>D、SLES 15.1<br>答案：D<br>以下哪项不是TaiShan服务器的优点？<br>A、国产化, 自主安全可控<br>B、多物理核心, 并发性能高<br>C、低功耗, 绿色节能<br>D、生态完备, 上层应用支持好<br>答案：D<br>以下哪个不是华为云鲲鹏生态帮助伙伴/开发者商业变现的方式?<br>A、华为鲲鹏严选馆:鲲鹏应用, 优先推荐, 快速商业变现<br>B、华为提供鲲鹏人才培养:专业培训, 完善的鲲鹏工程师认证体系<br>C、华为提供鲲鹏原厂认证:专业团队, 专业工具, 1对1技术支持<br>D、华为鲲鹏云专业服务:客户业务系统一站式搬迁服务<br>答案：D<br>金融行业的鲲鹏硬替代应用不包括以下哪项?<br>A、经营分析<br>B、核心应用<br>C、办公支撑<br>D、互联网银行<br>答案：B<br>以下哪种工具可用于制作RPM包?<br>A、rpm-cmake<br>B、rpm make<br>C、rpm-test<br>D、rpm-build<br>答案：D<br>对PostgreSQL的编译参数进行调优时需要在CFLAGS字段中添加哪些选项<br>A、-march= and<br>B、-march=armv8- a+crc+lse<br>C、-march=armv8-a<br>D、march =X86<br>答案：B<br>以下哪个是BenchmarkSQL连接PostgreSQL的配置文件?<br>A、props.mysq1<br>B、props.pg<br>C、props.ora<br>D、props.percona<br>答案：B<br>以下哪种语言的源码文件不能用Porting Advisor迁移工具进行迁移分析?<br>A、C++<br>B、C<br>C、Java<br>D、汇编<br>答案：C<br>在华为云上, 通过以下哪种方式或工具可以访问外网?<br>A、弹性公网IP<br>B、云硬盘<br>C、VPC<br>D、镜像<br>答案：A<br>在仅有x86服务器或者云服务器下, 如何编译出ARM环境下执行的程序?<br>A、安装交叉编译环境, 通过交叉编译环境执行编译<br>B、直接编译<br>C、使用x86下新版本gcc编译<br>D、修改权限编译<br>答案：A<br>关于加密镜像的描述, 以下哪项是正确的?<br>A、使用加密的弹性云服务器创建的镜像为加密镜像<br>B、使用加密镜像创建的弹性云服务器不一定被加密<br>C、使用加密的弹性云服务器创建的镜像密钥与加密云服务器的密钥不同<br>D、使用加密的弹性云服务器创建的镜像为非加密镜像<br>答案：A<br>以下关于镜像的描述, 不正确的是?<br>A、用户可以快速复制私有镜像, 不受region限制<br>B、查询镜像时, 支持通过标签过滤查询镜像<br>C、通过导入外部镜像文件创建镜像时, 不支持qcow2格式<br>D、支持key-value类型的镜像标签<br>答案：C<br>多选题<br>以下哪些属于华为云鲲鹏伙伴计划？<br>A、鲲鹏凌云伙伴计划<br>B、鲲鹏智数伙伴计划<br>C、鲲鹏展翅伙伴计划<br>D、鲲鹏翱翔伙伴计划<br>答案：ABC<br>以下哪些属于鲲鹏通用解决方案？<br>A、HCSO解决方案<br>B、大数据解决方案<br>C、HPC解决方案<br>D、分布式存储<br>答案：ABCD<br>华为鲲鹏性能优化工具能够提供 ( ) 方面的性能分析结果<br>A、分析Top热点函数<br>B、分析函数火焰图<br>C、分析热点函数代码映射<br>D、分析不同函数对应top-down模型的各指标值<br>答案：ABCD<br>华为鲲鹏性能优化工具支持从哪些维度分析应用的性能瓶颈？<br>A、C/C++<br>B、Java Mixed-Mode<br>C、Locks and Waits<br>D、LLC&amp;DDR<br>答案：AB<br>下列哪些选项可能会影响WRF性能<br>A、网络带宽<br>B、并行线程数<br>C、内存刷新频率<br>D、存储读写速度<br>答案：ABCD<br>HiBench支持的框架有哪些？<br>A、flinkbench<br>B、hadoopbench<br>C、stormbench<br>D、sparkbench<br>答案：ABCD<br>弱内存序问题主要与如下那些因素相关？<br>A、多线程<br>B、多进程<br>C、不同CPU之间Cache同步<br>D、一级、二级、三级Cache间数据同步<br>E、不同core之间Cache同步<br>答案：ACE<br>在向鲲鹏处理器迁移软件时, 以下哪些是可能导致编译错误或告警的原因？<br>A、编译选项<br>B、数据类型不同<br>C、汇编指令<br>D、弱内存序问题<br>答案：ABC<br>关于Docker的镜像仓库, 说法正确的是？<br>A、实现Docker镜像的全局存储<br>B、提供API接口<br>C、提供Docker镜像的下载/推送/查询<br>D、可用于租户管理<br>答案：ABCD<br>关于执行命令”docker ps -a”后, 显示的标题含义描述, 正确的是？<br>A、CONTAINER ID:容器的唯一表示ID<br>B、IMAGE:创建容器时使用的镜像<br>C、COMMAND:容器最后运行的命令<br>D、CREATED:创建容器的时间<br>答案：ABCD<br>华为鲲鹏代码迁移工具能够提供 ( ) 方面的移植评估结果<br>A、扫描源码中有多少个安装包<br>B、扫描源码中有多少可以移植的依赖库SO文件<br>C、扫描源码中有多少行可以移植的C/C++代码、汇编代码<br>D、预估移植所需的工作量<br>答案：BC<br>华为鲲鹏代码迁移工具适用于以下哪些类型的应用程序？<br>A、C/C++<br>B、Java<br>C、汇编<br>D、Python<br>答案：AC<br>为什么x86架构处理器上的软件在鲲鹏处理器使用时需要移植？<br>A、两种处理器的指令集不同<br>B、源代码需要按照目标处理的指令集编译成指令才能运行<br>C、编译型语言由编译器静态编译成指令和数据<br>D、解释型语言由语言的虚拟机在运行时将源码/字节码编译成指令和数据<br>答案：ABCD<br>TaiShan 200机架服务器包含哪些型号？<br>A、2280<br>B、5280<br>C、2480<br>D、X6000<br>答案：ABC<br>华为鲲鹏920处理器内置了那些加速器？<br>A、.SSL加速引擎<br>B、加解密加速引擎<br>C、压缩解压缩加速引擎<br>D、语音识别加速引擎<br>答案：ABC<br>以下哪些关于华为鲲鹏920处理器的描述是正确的 () ？<br>A、最多支持64核<br>B、采用了7nm的制造工艺<br>C、支持PCIe 4.0接口, 并兼容PCIe 3.0/2.0/1.0<br>D、支持多种加速器<br>答案：ABCD<br>围绕鲲鹏计算产业, 华为提供 ( ) 支持<br>A、云服务<br>B、工具链<br>C、社区服务<br>D、专业服务<br>答案：ABCD<br>华为鲲鹏计算产业相关产品有哪些？<br>A、华为鲲鹏处理器<br>B、TaiShan服务器<br>C、华为云鲲鹏云服务<br>D、X86服务器<br>答案：ABC<br>以下哪些是鲲鹏社区可以提供的服务？<br>A、获得海量软件的迁移指导<br>B、了解鲲鹏解决方案<br>C、获取最新的鲲鹏咨询<br>D、直接获得社区扶持<br>答案：ABC<br>镜像有哪些类别？<br>A、公共镜像<br>B、自由镜像<br>C、私有镜像<br>D、共享镜像<br>答案：ACD<br>以下哪些子文件包含在rpmbuild文件夹的目录结构中？<br>A、SOURCE<br>B、BUILD<br>C、SPEC<br>D、SRPMS<br>答案：BD<br>以下哪些命令可以安装C语言开发环境？<br>A、apt-get groupinstall build-essential<br>B、apt-get install build-essential<br>C、yum install Development Tools<br>D、yum groupinstall Development Tools<br>答案：BD<br>关于 Dockerfile 的描述, 以下哪些是正确的？<br>A、Dockerfile一般包含四部分内容：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令<br>B、Dockerfile中, 第一条指令必须为 FROM指令<br>C、EXPOSE在Dockerfile中是必选的<br>D、完成Dockerfile编写后, 可以通过docker build命令来创建镜像<br>答案：ABD<br>华为鲲鹏云服务包括以下哪些？<br>A、华为鲲鹏裸金属服务器<br>B、鲲鹏弹性云服务器<br>C、鲲鹏容器<br>D、鲲鹏云手机<br>答案：ABCD<br>以下哪些属于华为鲲鹏920芯片的特点？<br>A、集成最多64个自研核<br>B、支持8通道DDR4控制器<br>C、支持CCIX接口<br>D、只支持GE/10GE网络<br>答案：ABC<br>以下哪些属于鲲鹏软件栈发布的五大软件领域？<br>A、操作系统<br>B、游戏软件<br>C、基础软件<br>D、应用软件<br>答案：ACD<br>在BenchmarkSQL连接PostgreSQL前, 在PostgreSQL侧需要修改哪些文件<br>A、pg_ident.conf<br>B、PosgreSQL.conf<br>C、pg_hba.conf<br>D、PostgreSQL.auto.conf<br>答案：BC<br>BenchmarkSQL可以对哪些数据库进行测试?<br>A、Post gresSQL<br>B、Oracle<br>C、SQL Server<br>D、MySQL<br>答案：ABCD<br>判断题<br>鲲鹏计算平台已经兼容的操作系统可通过<a href="http://support.huawei.com/onlinetoolweb/ftca/index?serise=9%E9%93%BE%E6%8E%A5%E6%9F%A5%E8%AF%A2">http://support.huawei.com/onlinetoolweb/ftca/index?serise=9链接查询</a> √<br>华为云鲲鹏社区目前是否提供软件下载功能？ √<br>可以执行rpmbuild -ba redis.spec生成二进制文件 ×<br>使用华为鲲鹏性能优化工具对C/C++应用程序进行性能分析时, 能够查看到函数源代码、汇编代码, 以及函数汇编代码basic block的控制流图 √<br>CPU性能和网络带宽都会影响HPC性能 √<br>纯Java语言开发的代码, 无依赖的SO库文件不需要编译, 可以直接在JVM (Java虚拟机) 中运行 √<br>鲲鹏处理器和x86处理器的add指令是一样的 ×<br>Tune是一种通过非侵入式系统画像的负载感知方法, 识别业务并匹配最佳资源模型, 实时响应业务特征变化的AI自动调优系统 √<br>Android手机应用在鲲鹏云服务上运行仍需要指令翻译器 ×<br>在BenchmarkSQL的测试结果中, Running Average tpmTOTAL 值和Current tpmTOTAL值越高, 表示性能越差. ×<br>Porting Advisor工具界面中的GCC版本需要与后台操作系统中的GCC版本保持一致 ×<br>rpm包中包含所有源代码文件 ×<br>私有镜像不能通过外部镜像文件创建 ×</p>
<br>
















]]></content>
      <categories>
        <category>鲲鹏云</category>
      </categories>
  </entry>
  <entry>
    <title>鲲鹏题库</title>
    <url>/Kunpeng-question.html</url>
    <content><![CDATA[<p><strong>鲲鹏笔记+题库</strong></p>
<a id="more"></a>

<p><strong>Kunpeng 920处理器采用的是哪种架构的芯片()</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Power</li>
<li>X86</li>
<li>ARM</li>
<li>MIPS</li>
</ol>
<font color="#F08080">正确答案 C <br>解答: kunpeng920: 首款7nm ARM服务器处理器, 32/48/64核, 2.6GHz</font>

<p><strong>以下哪些属于华为鲲鹏920芯片的特点?()</strong></p>
<ol style="list-style-type:upper-alpha">
<li>只支持GE/10GE网络</li>
<li>支持8通道DDR4控制器</li>
<li>集成最多64个自研核</li>
<li>支持CCIX接口</li>
</ol>
<font color="#F08080">正确答案 B C D<br>解答: 支持2*100G RoCE v2, 支持25GE/50GE/100GE标准NIC</font>

<p><strong>以下哪项不是TaiShan 200机架服务器的优点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>超强算力: 高性能鲲鹏920处理器</li>
<li>分级存储: 支持大容量存储硬盘和ES3000 V5 NVMe SSD</li>
<li>全系列服务器支持液冷技术, 超强散热</li>
<li>大内存容量: 8通道内存技术, 可支持32个DDR内存插槽</li>
</ol>
<font color="#F08080">正确答案 C <br>解答: 全系列都支持风冷散热</font>

<p><strong>中标麒麟操作系统采用强化的Linux内核, 分为哪些版本?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>安全版</li>
<li>桌面版</li>
<li>通用版</li>
<li>高级版</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 中标麒麟是中标Linux和银河麒麟合并后发布的一款Linux发行版本, 中标麒麟操作系统采用强化的Linux内核, 分成桌面版, 通用版, 高级版和安全版等, 满足不同客户的要求, 已经广泛的使用在能源, 金融, 交通, 政府, 央企等行业领域</font>

<p><strong>在OpenEuler操作系统中, 如果要以YYYY-mm-DD HH:MM的格式输出当前时间, 下列选项中正确的是哪项?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Date + "%Y-%m-%d %H:%M"</li>
<li>Date</li>
<li>Date +%Y-%m-%d %H:%M:%S</li>
<li>Date –utc</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 时间一定要有引号</font>


<p><strong>下列关于TaiShan服务器的说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TaiShan服务器采用降额选件与冗余设计, 以提升服务器使用寿命</li>
<li>TaiShan X6000 的XA320计算节点支持水冷散热</li>
<li>TaiShan 2280 v2服务器均配置2颗64核鲲鹏920处理器</li>
<li>TaiShan X6000的XA320计算节点支持2路62核kunpeng 920处理器</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 器件高质量, 降额选件与冗余设计
降额选件: 
1, 电信级的元器件供应商认证流程
2, 降额设计, 设计额定值远高于承受应力
冗余热插拔: 
1, PSU/FAN(电源/风扇)等易损部件冗余设计
2, PCIe部件支持热插拔(部分机型)
出厂前, 服务器经过硬件2000+项, 软件10000+项的严苛测试, 以及300+项的多个国家级地区的准入认证
持续改进的质量文化, 并将改进点融合到到下一个质量循环中</font>


<p><strong>C/C++编写的应用程序从x86平台向华为鲲鹏平台迁移软件, SO动态链接库在源码编译时需要先替换</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 详情查看软件迁移的五个阶段</font>

<p><strong>鲲鹏分析扫描工具Dependency Advisor的白名单是用来记录鲲鹏平台已经支持的so文件, 软件和支持状态的列表, 白名单可以在华为鲲鹏开发者论坛下载并更新</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: so文件, 软件和支持状态的列表, 白名单确实可以在华为鲲鹏开发者论坛下载并更</font>

<p><strong>容器退出后会处于终止(exited)状态, 可以通过”docker ps -a”查看相关容器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: docker ps -a: 查看容器运行中和未运行的容器
</font>

<p><strong>C/C++代码在编译时遇到如下错误提示: “gcc: error: unrecognized command line option ‘-m64’”以下说法不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>-m64是AMD的CPU编译64位程序的编译选项</li>
<li>编译选项错误</li>
<li>删除编译选项, 重新编译</li>
<li>在鲲鹏处理器上编译时, 可以将-m64改为-mabi=lp64重新编译</li>
</ol>
<font color="#F08080">正确答案 C <br>解答: 应该是删除编译选项, 重新编译</font>

<p><strong>鲲鹏管理员只能将鲲鹏性能优化工具Tuning Kit安装在TaiShan服务器上</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 确实只能将鲲鹏性能优化工具Tuning Kit安装在TaiShan服务器上</font>

<p><strong>用户可以使用ping命令准确评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: ping命令评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</font>

<p><strong>测试执行过程中, 需要详细记录测试环境, 准备测试数据, 测试脚本等</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 确实要记录详细记录测试环境, 准备测试数据, 测试脚本</font>

<p><strong>弹性公网IP(Elastic IP, 简称EIP)提供独立的公网IP资源, 包括公网IP地址与公网出口带宽服务</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 确实包括公网IP地址与公网出口带宽服务</font>

<p><strong>下列选项中, 不属于IMS私有镜像类型的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据盘镜像</li>
<li>整体镜像</li>
<li>整机镜像</li>
<li>系统盘镜像</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 没有整体镜像这种镜像类型</font>

<p><strong>Docker是一个开源的应用容器引擎, 镜像时Docker容器的基石, 容器是镜像的运行实例, 实际操作中docker从镜像仓库获取镜像的命令是哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Docker fetch</li>
<li>Docker get</li>
<li>Docker search</li>
<li>Docker pull</li>
</ol>
<font color="#F08080">正确答案 D <br>解答: Docker pull命令用来从仓库拉取镜像</font>

<p><strong>以下选项中, 哪些是鲲鹏服务器在大数据场景下的技术优势?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>内存带宽提升, 支持更高内存速率</li>
<li>多核算力, 提升了大数据任务的并发度</li>
<li>芯片内置加速器, 优化了压缩和序列化场景性能</li>
<li>指令优化, JDK对于ARM增加了指令流水的适配, 更好支撑了大数据执行效率</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 以上都是</font>

<p><strong>以下选项中, 哪些是大数据的计算模型?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>流处理</li>
<li>批处理</li>
<li>关系型数据库</li>
<li>即席分析查询</li>
</ol>
<font color="#F08080">正确答案 A B D<br>解答: 关系型数据库是数据库类型之一</font>

<p><strong>以下选项中, 哪项不属于华为鲲鹏伙伴计划?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏智数伙伴计划</li>
<li>鲲鹏凌云伙伴计划</li>
<li>鲲鹏翱翔伙伴计划</li>
<li>鲲鹏展翅伙伴计划</li>
</ol>
<font color="#F08080">正确答案 C <br>解答: 鲲鹏伙伴计划是鲲鹏社区最全, 最新, 最官方的政策发布窗口, 影响辐射鲲鹏生态万千开发者, 合作伙伴；目前有鲲鹏凌云伙伴计划, 鲲鹏展翅伙伴计划, 鲲鹏智数伙伴计划等三大生态伙伴计划分别面向不同类型的开发者和合作伙伴</font>

<p><strong>鲲鹏920芯片有以下几种物理核数型号?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>64核</li>
<li>48核</li>
<li>16核</li>
<li>34核</li>
</ol>
<font color="#F08080">正确答案 A B D<br>解答: 鲲鹏920支持32, 48, 64核可选</font>

<p><strong>关于华为云服务中的鲲鹏云手机服务的特性, 以下哪些描述是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>支持自研高性能GPU</li>
<li>Monbox双OS共内核架构</li>
<li>兼容32/64位ARM原生指令</li>
<li>运行在华为自研芯片及硬件底座上</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: </font>

<p><strong>以下哪种不是iSula的部署模式?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>应用容器</li>
<li>系统容器</li>
<li>安全容器</li>
<li>通用容器</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 通用容器bs不是iSula的部署模式</font>

<p><strong>Android手机应用在鲲鹏云手机上运行仍需要指令翻译器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 B <br>解答: Android手机应用也是基于鲲鹏架构开发的, 所以不需要指令翻译器</font>

<p><strong>以下哪些属于Dockerfile的指令?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>CMD</li>
<li>FROM</li>
<li>RUN</li>
<li>EXPOSE</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: CMD,FROM,RUN,EXPOSE都是Dockerfile的指令</font>

<p><strong>Docker仓库可以用来保存容器镜像, 并且可以保存容器镜像的多个版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 支持保存容器镜像的多个版本</font>

<p><strong>华为开源镜像与maven中央仓库, CentOS等多家海外官方源站进行合作和认证, 为用户提供可信的组件下载来源</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 的确为用户提供可信的组件下载来源</font>

<p><strong>使用华为开源镜像站下载组件或者镜像, 有如下哪些优势?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>华为云开源镜像与官方社区合作, 保障组件安全, 故能避免不必要的安全风险</li>
<li>解决由于访问国外网络导致的效率问题</li>
<li>获取华为公司特有的SDK, 组件资源等</li>
<li>免费使用</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 全部都是优势</font>

<p><strong>下列选项中, 哪些是金融行业的鲲鹏替代应用?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>核心应用</li>
<li>经营分析</li>
<li>互联网银行</li>
<li>办公支撑</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 全部都是金融行业的鲲鹏替代应用</font>

<p><strong>openEluer支持的A-Tune是一种通过非侵入式系统画像的负载感知方法, 识别业务并匹配最佳资源模型, 实时响应业务特征变化的AI自动调优系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 是通过非侵入式系统画像</font>

<p><strong>下列哪个是华为鲲鹏生态兼容的非国产操作系统?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Ubuntu</li>
<li>Deepin</li>
<li>Kylin</li>
<li>openEuler</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: Ubuntu Linux是由南非人马克·沙特尔沃思(Mark Shuttleworth)创办的基于Debian Linux的操作系统, 于2004年10月公布Ubuntu的第一个版本(Ubuntu 4.10"Warty Warthog")Ubuntu适用于笔记本电脑, 桌面电脑和服务器, 特别是为桌面用户提供尽善尽美的使用体验</font>

<p><strong>关于华为鲲鹏迁移工具分析报告提供的依赖库so文件的操作建议, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>如果迁移工具不提供该库下载, 或该库未开源, 需要用户自行替换为同类功能库</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 但无二进制安装包, 则需要用户下载依赖库源码, 然后上传至目标服务器进行编译安装</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 且已有二进制安装包, 则用户可以直接将工具提供的开源版本依赖库安装包下载在本地, 然后上传至目标服务器进行安装使用</li>
<li>目前不存在鲲鹏平台无法识别的依赖库so文件</li>
</ol>
<font color="#F08080">正确答案 D <br>解答: 还是存在</font>

<p><strong>关于迁移语言开发的开源软件, 以下选项不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>将x86平台下的可执行文件部署到基于鲲鹏的虚拟机可以直接执行</li>
<li>使用makefile编译源码, 生成可执行程序</li>
<li>编译前, 要使用开源软件源码中的cmake或autoconfig脚本生成makefile</li>
<li>可以通过开源软件中的readme了解外部依赖库</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: C/C++属于解释型语言, 跨平台迁移时需要重新编译</font>

<p><strong>鲲鹏分析扫描工具Dependency Advisor支持以下哪种功能特性? (多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>向用户提供软件移植报告, 提供移植工作量评估</li>
<li>检查用户Java类软件包(JAR, WAR)中包含的so依赖库和二进制文件, 并评估上述文件的可移植性</li>
<li>检查用户C/C++软件构建工程文件, 并评估该文件的可移植性</li>
<li>检查用户C/C++软件源码, 并评估软件源文件的可移植性</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 全部都要</font>

<p><strong>鲲鹏分析扫描工具Dependency Advisor的白名单是用来记录鲲鹏平台已经支持的so文件, 软件和支持状态的列表, 白名单可以在华为鲲鹏开发者论坛下载并更新</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 可以下载并更新</font>

<p><strong>关于镜像和容器的描述, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>容器不具有root权限, 因此不存在从容器上攻击主机和主机上其他容器的可能</li>
<li>容器是由镜像实例化而来的</li>
<li>容器是动态的, 可用容器来运行应用</li>
<li>镜像是只读的, 可以理解为静态文件</li>
</ol>
<font color="#F08080">正确答案 A B<br>解答: 容器是具有root权限</font>

<p><strong>用户可以使用哪些工具监测CPU使用情况? (多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>top</li>
<li>iostat</li>
<li>mpstat</li>
<li>pidstat</li>
<li>vmstat</li>
<li>sar</li>
</ol>
<font color="#F08080">正确答案 A B C D E F <br>解答: top,iostat,mpstat,pidstat,vmstat,sar全是监测工具</font>

<p><strong>鲲鹏性能优化工具Tuning Kit只支持Web模式或者CLI模式, 两种模式不能同时安装</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 只支持Web模式或者CLI模式, 两种模式不能同时安装</font>

<p><strong>下列关于容器镜像服务SWR, 说法错误的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>使用docker tag命令给要上传的镜像打标签</li>
<li>使用docker push命令上传镜像</li>
<li>可以根据需要设置镜像的属性</li>
<li>暂未提供私有镜像库</li>
</ol>
<font color="#F08080">正确答案 D <br>解答: 已经提供私有镜像库
<br>容器镜像服务(Software Repository for Container, 简称SWR)是一种支持镜像全生命周期管理的服务, 提供简单易用, 安全可靠的镜像管理功能, 包括镜像的上传, 下载, 删除等SWR提供私有镜像库, 并支持细粒度的权限管理, 可以为不同用户分配相应的访问权限(读取, 编辑, 管理)SWR还支持容器镜像版本更新自动触发部署您只需要为镜像设置一个触发器, 通过触发器, 可以在每次镜像版本更新时, 自动更新云容器引擎(CCE)中使用该镜像部署的应用</font>

<p><strong>华为鲲鹏分析扫描工具Dependency Advisor, 支持分析以下哪些类型的文件?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>源代码</li>
<li>未安装Dependency Advisor工具的服务器上的源代码</li>
<li>已安装的软件</li>
<li>软件安装包</li>
</ol>
<font color="#F08080">正确答案 A C D<br>解答: 分析扫描工具功能特性: 
检查用户软件资源包(RPM, DEB, TAR, ZIP, GZIP文件)中包含的SO(Shared Object)依赖库和可执行文件, 并评估SO依赖库和可执行文件的可移植性和在安装包中的相对路径
检查用户Java类软件包(JAR, WAR)中包含的SO依赖库和二进制文件, 并评估上述文件的可移植性
检查指定的用户软件安装路径下的SO依赖库和可执行文件, 并评估SO依赖库和可执行文件的可移植性
检查用户C/C++软件构建工程文件, 并评估该文件的可移植性
检查用户C/C++软件源码, 并评估软件源文件的可移植性
向用户提供软件移植报告, 提供移植工作量评估
支持命令行方式和Web两种工作模式</font>

<p><strong>动漫渲染这种数据轻量松耦合场景适合采用HPC解决方案</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 的确是HPC解决方案</font>

<p><strong>在使用man查看一个命令的帮助信息时, 下列说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>在命令使用格式中, [ ]表示的是必选内容</li>
<li>在命令使用格式中, …表示的是同类内容可以有多个</li>
<li>通常情况下, --help比man查看的命令帮助信息更多</li>
<li>在命令使用格式中, <>表示的是可选内容</li>
</ol>
<font color="#F08080">正确答案 B <br>解答: <>表示必选内容</font>

<p><strong>安装华为鲲鹏代码迁移工具需要以下哪种运行环境?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Go</li>
<li>C</li>
<li>Python</li>
<li>Java</li>
</ol>
<font color="#F08080">正确答案 C <br>解答: </font>

<p><strong>以下哪项命令的描述是错误的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"docker ps -a": 列出运行中和未运行的容器</li>
<li>"docker search centos": 从docker Hub中搜索相关的centos的镜像</li>
<li>"docker ps": 列出所有运行中的容器</li>
<li>"docker images ps": 列出镜像和容器</li>
</ol>
<font color="#F08080">正确答案 D <br>解答: "docker images ps": 列出镜像</font>

<p><strong>docker Daemon是服务端守护进程, 负责接收客户端的指令(创建, 运行, 分发容器), 并处理这些请求</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 确实是docker Daemon的功能</font>

<p><strong>C/C++代码在编译时遇到如下错误提示: “gcc: error: unrecognized command line option ‘-m64’ “以下说法不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>在鲲鹏处理器上编译时, 可以将-m64修改为-mabi=lp64重新编译</li>
<li>-m64是AMD的CPU编译64位程序的编译选项</li>
<li>编译选项错误</li>
<li>删除编译选项, 重新编译</li>
</ol>
<font color="#F08080">正确答案 D <br>解答: 不是删除编译选项</font>

<p><strong>使用Sysbench测试MySQL性能时, Sysbench自带的测试套不包括以下哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>oltp_delete</li>
<li>oltp_random_points</li>
<li>oltp_update_index</li>
<li>oltp_point_select</li>
</ol>
<font color="#F08080">正确答案 B <br>解答: 不包括    oltp_random_points</font>

<p><strong>perf工具可以用于测试CPU性能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: perf工具的确用于测试CPU性能</font>


<p><strong>以下选项中, 哪些是鲲鹏社区可以提供的服务?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>获得最新的鲲鹏咨询</li>
<li>获得海量软件的迁移指导</li>
<li>通过鲲鹏论坛与开发者交流学习</li>
<li>了解鲲鹏解决方案</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 全都是提供的服务</font>

<p><strong>关于华为鲲鹏系列裸金属服务的描述, 以下哪些是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>可提供128众核算力</li>
<li>全新SDI 3.0技术带宽可支持40Gbps</li>
<li>可搭载自研AI芯片Ascend 310/910</li>
<li>不支持存储共享卷</li>
</ol>
<font color="#F08080">正确答案 A B C <br>解答: 支持存储共享卷</font>

<p><strong>以下哪种型号的TaiShan服务器最适合海量存储业务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>2280</li>
<li>5280</li>
<li>2480</li>
<li>X6000</li>
</ol>
<font color="#F08080">正确答案 B <br>解答: 5280服务器最适合海量存储业务</font>

<p><strong>openEuler是个单用户多任务的操作系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案 A <br>解答: 多用户, 多任务, 支持多线程和多CPU的操作系统</font>

<p><strong>下列哪个是华为鲲鹏生态兼容的非国产?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>openEuler</li>
<li>Ubuntu</li>
<li>Kylin</li>
<li>Deepin</li>
</ol>
<font color="#F08080">正确答案 B <br>解答: penEuler=欧拉, Kylin=麒麟, Deepin=深度均为国产的Linux操作系统</font>

<p><strong>关于Dockerfile的描述,以下哪些是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Dockerfile一般包含四部分内容基础镜像信息, 维护者信息, 镜像操作指令和容器启动时执行指令</li>
<li>cd命令可直接运行在Dockerfile中</li>
<li>Dockerfile中, 第一条指令必须为 FROM指令</li>
<li>完成Dockerfile编写后, 可以通过docker build命令来创建镜像</li>
</ol>
<font color="#F08080">正确答案 A C D <br>解答: WORKDIR: 切换目录用, 可以多次切换(相当于cd命令)</font>

<p><strong>CentOS执行如下命令:docker run -p 6379:6379 -v $PWD/data:/data -d t_armb4v8/centos _redis:5.05 redis-server –appendonly yes,, 关于此命令的措述以下哪些是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"$PWD/data:/data":将主机中当前目录下的data挂载到容器的/data</li>
<li>"6379:6379":将主机的6379端口映射到容器的6379端口</li>
<li>该命令功能是启动容器, 并在容器启动时候执行容器内的redis-server服务</li>
<li>" appendonly yes"打开持久化配置</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 全部正确</font>

<p><strong>可以通过以下哪些方式创建镜像?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通过命令来创建容器镜像</li>
<li>通过wget方式创建镜像</li>
<li>利用Dockerfile来创建镜像</li>
<li>通过yum install方式创建镜像</li>
</ol>
<font color="#F08080">正确答案 A C <br>解答: docker pull方式或者docker build, Dockerfile方式获取或者构建的镜像</font>

<p><strong>用户在安装鲲鹏分析扫描工具Dependency Advisor前需要哪些准备工作?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>确认服务器和操作系统满足要求</li>
<li>配置安装环境</li>
<li>安装包完整性校验</li>
<li>已安装远程SSH登录工具</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 全都要做</font>

<p><strong>使用gcc编译时,编译选项-march的作用是什么?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>指定流水线</li>
<li>指定指令集类型</li>
<li>提升兼容性</li>
<li>指定cpu型号</li>
</ol>
<font color="#F08080">正确答案 B <br>解答: -march是指定cpu的指令集, broadwell是x86的一款cpu, 实用鲲鹏处理器需要指定为armv8-a</font>

<p><strong>凌云伙伴计划相关知识点</strong></p>
<img src="https://img.xiaoqiqiao.com/private-course/test_file/198/image1606463855872.png" alt>

<ol style="list-style-type:upper-alpha">
<li>公有云</li>
<li>私有云</li>
<li>桌面云</li>
<li>专有云</li>
</ol>
<font color="#F08080">正确答案 A B C <br>解答: 没有专有云</font>

<p><strong>整机镜像可以通过一下哪些方式创建?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通过云服务器制作整机镜像</li>
<li>云服务器备份</li>
<li>云硬盘</li>
<li>云备份</li>
</ol>
<font color="#F08080">正确答案 A B C D<br>解答: 注意问的是整机镜像</font>

<br>]]></content>
      <categories>
        <category>鲲鹏云</category>
      </categories>
  </entry>
  <entry>
    <title>鲲鹏题库1.5</title>
    <url>/Kunpeng-question1.5.html</url>
    <content><![CDATA[<p><strong>鲲鹏笔记+题库</strong></p>
<a id="more"></a>

<p><strong>1.Kunpeng 920处理器采用的是哪种架构的芯片()(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Power</li>
<li>X86</li>
<li>ARM</li>
<li>MIPS</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: kunpeng920: 首款7nm ARM服务器处理器, 32/48/64核, 2.6GHz</font>

<p><strong>2.以下哪种型号的TaiShan服务器最适合海量存储业务?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>2280</li>
<li>5280</li>
<li>2480</li>
<li>X6000</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 5280服务器最适合海量存储业务, 存储密集型:5290 (4u72盘) , 5280 (4u40盘) </font>

<p><strong>3.移动端应用测试推荐采用哪个华为云鲲鹏云服务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏ECS</li>
<li>鲲鹏云手机</li>
<li>鲲鹏CCI</li>
<li>鲲鹏CCE</li>
</ol>
<font color="#F08080">正确答案: B<br>解答: 移动端应用场景采用云手机 </font>

<p><strong>4.下列哪些芯片不是TaiShan服务器必有的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Hi 1812智能SSD控制芯片</li>
<li>Hi 1710智能管理芯片</li>
<li>Hi 1822智能融合网络芯片</li>
<li>Kunpeng 920</li>
</ol>
<font color="#F08080">正确答案: A B C <br>解答: 泰山服务器中CPU是焊接在主机上的, 不能更换 </font>

<p><strong>5.下列选项中, 哪些是华为云鲲鹏生态提供给伙伴的权益和支持?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>华为提供鲲鹏人才培养:专业培训, 完善的鲲鹏工程师认证体系</li>
<li>华为提供鲲鹏原厂认证:专业团队, 专业工具, 1对1技术支持</li>
<li>华为鲲鹏云专业服务:客户业务系统一站式搬迁服务</li>
<li>华为鲲鹏严选馆:鲲鹏应用, 优先推荐, 快速商业变现</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都是华为云鲲鹏生态提供给伙伴的权益和支持</font>

<p><strong>6.以下哪些属于华为鲲鹏920芯片的特点?()(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>只支持GE/10GE网络</li>
<li>支持8通道DDR4控制器</li>
<li>集成最多64个自研核</li>
<li>支持CCIX接口</li>
</ol>
<font color="#F08080">正确答案: B C D <br>解答: 支持2*100G RoCE v2, 支持25GE/50GE/100GE标准NIC</font>

<p><strong>7.以下哪项不是TaiShan 200机架服务器的优点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>超强算力: 高性能鲲鹏920处理器</li>
<li>分级存储: 支持大容量存储硬盘和ES3000 V5 NVMe SSD</li>
<li>全系列服务器支持液冷技术, 超强散热</li>
<li>大内存容量: 8通道内存技术, 可支持32个DDR内存插槽</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 全系列都支持风冷散热</font>

<p><strong>8.下列哪个不是鲲鹏云BMS的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>自助申请, 一键式console操作, 易使用</li>
<li>支持CPU, 内存等资源的弹性扩展</li>
<li>包年包月灵活付费</li>
<li>灵活的网络配置</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 不支持CPU, 内存等资源的弹性扩展, 可以横向扩展 (即单点场景和集群场景) </font>

<p><strong>9.鲲鹏计算产业生态中, 哪个不是华为已经或者即将要做开源的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>GaussDB OLTP单机版</li>
<li>openEuler操作系统</li>
<li>MindSore AI框架</li>
<li>Kunpeng 920处理器架构</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: Kunpeng 920处理器架构不是</font>

<p><strong>10.中标麒麟操作系统采用强化的Linux内核, 分为哪些版本?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>安全版</li>
<li>桌面版</li>
<li>通用版</li>
<li>高级版</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 中标麒麟是中标Linux和银河麒麟合并后发布的一款Linux发行版本, 中标麒麟操作系统采用强化的Linux内核, 分成桌面版, 通用版, 高级版和安全版等, 满足不同客户的要求, 已经广泛的使用在能源, 金融, 交通, 政府, 央企等行业领域</font>

<p><strong>11.可以通过修改/etc/sudoers文件为普通用户分配特权</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 该文件允许特定用户像root用户一样使用各种各样的命令, 而不需要root用户的密码</font>

<p><strong>12.以下哪些是openEuler的技术特性?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>支持块设备I/O跟踪</li>
<li>优化编辑器, 使用更加稳定</li>
<li>改进安装程序, 简化安装</li>
<li>多种安全机制, 保障系统安全</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 以上全部是openEuler的技术特性</font>

<p><strong>13.一颗Kunpeng 920处理器集成了CPU, SAS控制器, 南桥, ROCE网卡四种功能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 高集成:一颗=4颗芯片</font>

<p><strong>14.在OpenEuler操作系统中, 如果要以YYYY-mm-DD HH:MM的格式输出当前时间, 下列选项中正确的是哪项?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Date + "%Y-%m-%d %H:%M"</li>
<li>Date</li>
<li>Date +%Y-%m-%d %H:%M:%S</li>
<li>Date –utc</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 时间一定要有引号</font>

<p><strong>15.在openEuler中, timedatectl命令修改日期格式正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Timedatectl set-time DD-mm-YYYY</li>
<li>Timedatectl set-time YYYY-DD-mm</li>
<li>Timedatectl set-time YYYY-mm-DD</li>
<li>Timedatectl set-time mm-DD-YYYY</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: Timedatectl set-time YYYY-mm-DD才是正确的时间格式</font>

<p><strong>16.下列关于TaiShan服务器的说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TaiShan服务器采用降额选件与冗余设计, 以提升服务器使用寿命</li>
<li>TaiShan X6000 的XA320计算节点支持水冷散热</li>
<li>TaiShan 2280 v2服务器均配置2颗64核鲲鹏920处理器</li>
<li>TaiShan X6000的XA320计算节点支持2路62核kunpeng 920处理器</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 器件高质量, 降额选件与冗余设计
降额选件: 
1, 电信级的元器件供应商认证流程
2, 降额设计, 设计额定值远高于承受应力
冗余热插拔: 
1, PSU/FAN(电源/风扇)等易损部件冗余设计
2, PCIe部件支持热插拔(部分机型)
出厂前, 服务器经过硬件2000+项, 软件10000+项的严苛测试, 以及300+项的多个国家级地区的准入认证
持续改进的质量文化, 并将改进点融合到到下一个质量循环中</font>

<p><strong>17.使用迁移工具Porting Advisor时, 界面提示: “源代码路径错误”, 应该重新填写源码存放路径, 点击按钮重新分析</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: Porting Advisor是源代码路径错误, 应该重新填写源码存放路径, 点击按钮重新分析</font>

<p><strong>18.C/C++语言开发的源码在编译时, 以下哪些模块是不需要的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>加载器</li>
<li>编译器</li>
<li>汇编器</li>
<li>存储器</li>
</ol>
<font color="#F08080">正确答案: B C D <br>解答: 编译时不需要 编译器 汇编器 存储器</font>

<p><strong>19.C/C++编写的应用程序从x86平台向华为鲲鹏平台迁移软件, SO动态链接库在源码编译时需要先替换</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 详情查看软件迁移的五个阶段</font>

<p><strong>20.关于容器描述, 以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>容器是一种轻量级, 可移植, 自包含的软件打包技术</li>
<li>容器为应用提供封装和隔离的功能</li>
<li>容器具备迁移功能, 可以把x86环境的容器实例直接迁移到鲲鹏服务器上</li>
<li>Docker"几乎"成为事实上的容器标准</li>
</ol>
<font color="#F08080">正确答案: A B D <br>解答: 容器实例无法迁移</font>

<p><strong>21.使用Python语言开发的程序在迁移至鲲鹏处理器时, 开发者必须先将源码编译成pyc文件(字节码)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 解释型语言迁移时一般不需要重新编译</font>

<p><strong>22.用户在使用docker构建镜像时, docker镜像中必须有一个基础镜像</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确是必须有一个基础镜像</font>

<p><strong>23.在使用Porting Advisor工具对程序进行分析时, 针对程序中未提供下载的依赖so库, 以下说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Porting Advisor工具可以根据用户提供的依赖so库源码提供移植建议</li>
<li>Porting Advisor可以自动获取依赖so库源码</li>
<li>Porting Advisor可以自动扫描so库中的源码, 并给出分析移植建议</li>
<li>Porting Advisor可以分析依赖so库中的热点函数</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 针对程序中未提供下载的依赖so库, Porting Advisor工具可以根据用户提供的依赖so库源码提供移植建议</font>

<p><strong>24.鲲鹏分析扫描工具Dependency Advisor的白名单是用来记录鲲鹏平台已经支持的so文件, 软件和支持状态的列表, 白名单可以在华为鲲鹏开发者论坛下载并更新</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 可以下载并更新</font>

<p><strong>25.容器实例支持直接跨不同指令集架构平台的迁移</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 容器实例无法迁移</font>

<p><strong>26.关于容器的迁移, 以下哪些说法是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>X86平台获取的镜像可以迁移到x86平台</li>
<li>跨平台的容器无法运行, 会出现格式不支持等错误</li>
<li>X86平台获取的镜像可以直接迁移到鲲鹏平台</li>
<li>鲲鹏平台获得的镜像可以直接迁移到x86平台</li>
</ol>
<font color="#F08080">正确答案: A B <br>解答: 容器迁移时, 实例无法迁移, 可通过相应架构的镜像重新生成容器</font>

<p><strong>27.通过鲲鹏分析扫描工具Dependency Adcisor不可以进行下列哪个操作?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>下载分析报告</li>
<li>查看已下载分析报告的记录</li>
<li>恢复已删除的分析报告</li>
<li>删除分析报告</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 不可以恢复已删除的分析报告</font>

<p><strong>28.鲲鹏处理器CPU指令长度为定长二进制指令</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 鲲鹏处理器CPU是定长二进制</font>

<p><strong>29.鲲鹏性能优化工具Tuning Kit只支持Web模式或者CLI模式, 两种模式不能同时安装</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 只支持Web模式或者CLI模式, 两种模式不能同时安装</font>

<p><strong>30.关于命令docker commit -a “huawei.com” -m “redis images” f4603f1f918a t_arm64v8/centos:7,以下哪项描述是错误的:</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"f4603f1f918a":容器ID</li>
<li>该命令功能是根据镜像ID创建一个新的镜像</li>
<li>"huawei.com":提交镜像的作者</li>
<li>"t_arm64v8/centos:7":新生成的镜像名称</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 这个命令的功能是提交镜像</font>

<p><strong>31.容器退出后会处于终止(exited)状态, 可以通过”docker ps -a”查看相关容器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: docker ps -a: 查看容器运行中和未运行的容器
</font>

<p><strong>32.C/C++代码在编译时遇到如下错误提示: “gcc: error: unrecognized command line option ‘-m64’ “以下说法不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>-m64是AMD的CPU编译64位程序的编译选项</li>
<li>编译选项错误</li>
<li>删除编译选项, 重新编译</li>
<li>在鲲鹏处理器上编译时, 可以将-m64修改为-mabi=lp64重新编译</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 不是删除编译选项</font>

<p><strong>33.以下哪些属于从x86到鲲鹏平台的软件迁移的流程?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>技术分析>编译迁移>功能验证>性能调优</li>
<li>性能调优>技术分析>编译迁移>功能验证</li>
<li>功能验证>技术分析>编译迁移>性能调优</li>
<li>技术分析>功能验证>编译迁移>性能调优</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 软件迁移的五个阶段:技术分析>编译迁移>功能验证>性能调优>规模商用</font>

<p><strong>34.鲲鹏分析扫描工具Dependency Advisor只能用于分析, 扫描需要迁移到TaiShan服务器的应用</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 只能就错了 分析工具应用场景:当客户需要将有源代码的软件移植到鲲鹏计算平台上时, 可使用该工具自动分析出软件依赖库在华为鲲鹏平台的兼容性, 用户源码需修改的规模, 并评估用户软件移植的工作量</font>

<p><strong>35.以下哪些跟软件构建和运行环境相关?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>OS</li>
<li>JDK/Python</li>
<li>编译器</li>
<li>驱动</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部相关</font>

<p><strong>36.鲲鹏管理员只能将鲲鹏性能优化工具Tuning Kit安装在TaiShan服务器上</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 确实只能将鲲鹏性能优化工具Tuning Kit安装在TaiShan服务器上</font>

<p><strong>37.用户可以使用ping命令准确评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: ping命令评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</font>

<p><strong>38.测试执行过程中, 需要详细记录测试环境, 准备测试数据, 测试脚本等</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 确实要记录详细记录测试环境, 准备测试数据, 测试脚本</font>

<p><strong>39.可恢复性测试是性能测试常用方法之一</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 关键字 "之一" 是正确的</font>

<p><strong>40.下列选项中, 哪个Linux命令可以检测到CPU各核以及进程的CPU使用情况？</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Mpstat</li>
<li>Vmstat</li>
<li>Top</li>
<li>Ps</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: top是最常用的Linux性能监测工具之一, 通过top工具可以监视进程和系统整体性能, 特别是CPU的时间分布  top,iostat,mpstat,pidstat,vmstat,sar全是监测工具</font>

<p><strong>41.Jmeter包括以下哪些组件?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>监听器 (Listener) </li>
<li>配置元件 (Config Element) </li>
<li>逻辑控制器 (Logic Controller) </li>
<li>取样器 (Sampler) </li>
<li>虚拟用户 (VUser) </li>
<li>线程组 (Thread Group) </li>
</ol>
<font color="#F08080">正确答案: A B C D E F <br>解答: 包括监听器 配置元件 逻辑控制器 取样器 虚拟用户 线程组等组件</font>

<p><strong>42.下列选项中, 哪个linux工具可以用于评估当前主机或虚拟机内存的性能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Perf</li>
<li>Vmstat</li>
<li>Lmbench</li>
<li>Free</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: Free评估当前主机或虚拟机内存的性能</font>

<p><strong>43.弹性公网IP(Elastic IP, 简称EIP)提供独立的公网IP资源, 包括公网IP地址与公网出口带宽服务</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 确实包括公网IP地址与公网出口带宽服务</font>

<p><strong>44.在华为开源镜像站中, 提供如下哪些功能?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>为个人开发及持续构建场景提供maven, npm, pypi, nuget, php等语言类依赖下载服务</li>
<li>提供如apache, nginx, mysql, jenkins等40+种常用开发工具及库</li>
<li>提供开源组件搜索服务, 帮助用户更加方便的查找所需组件及其相关信息</li>
<li>提供centos, Ubuntu, debian等多种主流开源操作系统包下载服务</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 这些功能全都有</font>

<p><strong>45.在仅有x86物理服务器或者x86的弹性云服务器的情况下, 如何编译出ARM环境下执行的程序?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>修改权限编译</li>
<li>安装交叉编译环境, 通过交叉编译环境执行编译</li>
<li>使用x86下新版本的gcc编译</li>
<li>直接编译</li>
</ol>
<font color="#F08080">正确答案:  B <br>解答: 交叉编译</font>

<p><strong>46.下列选项中, 不属于IMS私有镜像类型的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据盘镜像</li>
<li>整体镜像</li>
<li>整机镜像</li>
<li>系统盘镜像</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 没有整体镜像这种镜像类型</font>

<p><strong>47.用户在使用华为云开源镜像服务时, 下列哪一项是只有当注册用户登陆华为云账户才可以享受的增值服务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>不限量下载组件, 镜像等</li>
<li>不限时下载组件镜像等</li>
<li>扩大私有依赖容量</li>
<li>CDN加速功能</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: CDN加速功能需要注册用户登录才能使用</font>

<p><strong>48.交叉编译可以理解为, 用户在x86平台上, 编写程序并编译成能运行在ARM平台的程序, 编译得到的程序在x86平台上是不能运行的, 必须放在ARM平台上才能运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 编译后必须放在ARM平台上才能运行</font>

<p><strong>49.当网络结构发生变化时, 静态BGP无法实时自动调整网络设置以保障用户体验</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 正确, 正好与动态BGP相反</font>

<p><strong>50.华为鲲鹏性能优化工具TuningKit支持通过火焰图查看热点函数及其调用栈</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 通过火焰图查看热点函数及其调用栈</font>

<p><strong>51.华为弹性云服务器属于以下哪种服务类别?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据库</li>
<li>计算</li>
<li>网络</li>
<li>存储</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 华为云计算类服务:ECS, BMS, DeH, 容器类, 无服务器类</font>

<p><strong>52.云计算领域正在兴起一场以docker为代表的容器技术革命, 以下哪些是容器技术所具有的优势?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>占用空间少, 资源开销小</li>
<li>相比虚拟机更加轻量, 秒级启动</li>
<li>镜像机制, 支持不可变架构 (immutable infrastructure) </li>
<li>方便易用, 使用门槛低</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都是容器技术的优势</font>

<p><strong>53.Docker是一个开源的应用容器引擎, 镜像时Docker容器的基石, 容器是镜像的运行实例, 实际操作中docker从镜像仓库获取镜像的命令是哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Docker fetch</li>
<li>Docker get</li>
<li>Docker search</li>
<li>Docker pull</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: Docker pull命令用来从仓库拉取镜像</font>

<p><strong>54.以下选项中, 哪项不是华为云对象存储服务OBS的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>大带宽, 支撑大数据业务的性能要求</li>
<li>高可靠</li>
<li>按照64MB每块, 分块存储数据</li>
<li>支持100KM同城多机房多活</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 支持100KM同城多机房多活不是华为云对象存储服务OBS的特点正常的都支持</font>

<p><strong>55.以下选项中, 哪些是鲲鹏服务器在大数据场景下的技术优势?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>内存带宽提升, 支持更高内存速率</li>
<li>多核算力, 提升了大数据任务的并发度</li>
<li>芯片内置加速器, 优化了压缩和序列化场景性能</li>
<li>指令优化, JDK对于ARM增加了指令流水的适配, 更好支撑了大数据执行效率</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部是大数据场景下的技术优势</font>

<p><strong>56.以下选项中, 哪些属于鲲鹏软件栈发布的软件领域?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据库软件</li>
<li>操作系统</li>
<li>基础软件</li>
<li>应用软件</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部属于鲲鹏软件栈发布的软件领域</font>

<p><strong>57.以下选项中, 哪些是大数据的计算模型?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>流处理</li>
<li>批处理</li>
<li>关系型数据库</li>
<li>即席分析查询</li>
</ol>
<font color="#F08080">正确答案: A B D <br>解答: 关系型数据库是数据库类型之一</font>

<p><strong>58.以下选项中, 哪项不属于华为鲲鹏伙伴计划?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏智数伙伴计划</li>
<li>鲲鹏凌云伙伴计划</li>
<li>鲲鹏翱翔伙伴计划</li>
<li>鲲鹏展翅伙伴计划</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 鲲鹏伙伴计划是鲲鹏社区最全, 最新, 最官方的政策发布窗口, 影响辐射鲲鹏生态万千开发者, 合作伙伴; 目前有鲲鹏凌云伙伴计划, 鲲鹏展翅伙伴计划, 鲲鹏智数伙伴计划等三大生态伙伴计划分别面向不同类型的开发者和合作伙伴</font>

<p><strong>59.鲲鹏社区中, 以下哪个模块提供安装, 移植, 调优等指导文档?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏论坛</li>
<li>鲲鹏应用专区</li>
<li>鲲鹏文档中心</li>
<li>鲲鹏学院</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 鲲鹏文档中心</font>

<p><strong>60.Centos环境下, 修改了配置文件/etc/profile后, 可以执行source命令使之生效</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确是执行source命令使之后生效</font>

<p><strong>61.以下那些是华为鲲鹏云手机服务主要的应用场景?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>高性能计算</li>
<li>应用托管</li>
<li>移动安全办公</li>
<li>云游戏</li>
</ol>
<font color="#F08080">正确答案: B C D <br>解答: 云手机不适用于高性能计算场景</font>


<p><strong>62.鲲鹏920芯片有以下几种物理核数型号?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>64核</li>
<li>48核</li>
<li>16核</li>
<li>34核</li>
</ol>
<font color="#F08080">正确答案: A B D <br>解答: 鲲鹏920支持32, 48, 64核可选</font>


<p><strong>63.鲲鹏云BMS硬件配置规格固定, 无法再扩充资源, 如CPU, 存储空间等</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 可以通过提交工单的方式申请扩大配额</font>

<p><strong>64.以下哪个选项不是iSula通用容器引擎的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>升级不中断业务</li>
<li>大幅提升容器性能</li>
<li>快速灵活</li>
<li>增强安全性和调测特性</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 升级不中断业务, 快速灵活, 增强安全性和调测特性没有大幅提升容器性能</font>

<p><strong>65.关于华为云服务中的鲲鹏云手机服务的特性, 以下哪些描述是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>支持自研高性能GPU</li>
<li>Monbox双OS共内核架构</li>
<li>兼容32/64位ARM原生指令</li>
<li>运行在华为自研芯片及硬件底座上</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部特性都是</font>

<p><strong>66.openEuler是一款开源操作系统, 支持鲲鹏及其他多种处理器, 能充分释放计算芯片的潜能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: openEuler的确支持鲲鹏及其他多种处理器</font>

<p><strong>67.以下哪种不是iSula的部署模式?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>应用容器</li>
<li>系统容器</li>
<li>安全容器</li>
<li>通用容器</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 通用容器不是iSula的部署模式</font>

<p><strong>68.下列哪项不是openeuler.org开源社区提供的功能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>openEuler操作系统帮助文档</li>
<li>openEuler源代码托管</li>
<li>博客</li>
<li>openEuler系统镜像下载</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 博客不是</font>

<p><strong>69.Android手机应用在鲲鹏云手机上运行仍需要指令翻译器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: Android手机应用也是基于鲲鹏架构开发的, 所以不需要指令翻译器</font>

<p><strong>70.openEuler-20.03-LTS中默认的文件系统是ext4, 同时也兼容ext3/2和XFS文件系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 确实默认的文件系统是ext4, 同时也兼容ext3/2和XFS文件系统</font>

<p><strong>71.TaiShan V2服务器最多支持多少个计算内核?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>48</li>
<li>32</li>
<li>128</li>
<li>64</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 鲲鹏920最高支持64核, 2*64=128</font>

<p><strong>72.鲲鹏计算产业目标是建立完善的开发者和产业人才体系, 通过产业联盟, 开源社区, OpenLab, 行业标准组织一起完善产业链, 打通行业全栈, 使鲲鹏生态成为开发者和用户的首选</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 这是对的</font>

<p><strong>73.TaiShan 200服务器2280型与X86服务器RH2288H V5具有相同的内存和硬盘兼容性</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: TaiShan 200服务器2280型与X86服务器RH2288H 不相同</font>

<p><strong>74.鲲鹏分析扫描工具Dependency Advisor只能部署在鲲鹏平台上</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 该工具安装在X86服务器上, 当客户有软件需要移植到TaiShan服务器上时, 可先用该工具分析可移植性和移植投入该工具解决了客户软件移植评估分析过程中人工分析投入大, 准确率低, 整体效率低下的痛点, 通过该工具能够自动分析并输出指导报告</font>

<p><strong>75.以下哪些属于Dockerfile的指令?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>CMD</li>
<li>FROM</li>
<li>RUN</li>
<li>EXPOSE</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: CMD,FROM,RUN,EXPOSE都是Dockerfile的指令</font>

<p><strong>76.创建源码分析任务时, 设置编译器版本的目的是什么?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>用于检查源码中使用的架构相关的编译器宏, builtin函数, attribute函数, 用户自定义宏等, 确定需要移植的源码及源文件</li>
<li>用于解析用户软件的Makefile文件, 整理出用户软件目标二进制文件依赖的源文件集合和编译时依赖的so文件名, 使用的编译选项, 宏定义和变量</li>
<li>用于区分不同的源码使用的编译器版本</li>
<li>用于确定x86与鲲鹏平台相异的编译器宏, 编译选项, builtin函数, attribute函数等列表</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都是目的</font>

<p><strong>77.华为鲲鹏代码迁移工具支持CLI和Web两种访问方式, 两种访问方式必须分开部署</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 正确, 不能同时部署两种方式</font>

<p><strong>78.关于华为鲲鹏迁移工具分析报告提供的依赖库so文件的操作建议, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>如果依赖库so文件已经过鲲鹏平台验证, 且已有二进制安装包, 则用户可以直接将工具提供的开源版本依赖库安装包下载在本地, 然后上传至目标服务器进行安装使用</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 但无二进制安装包, 则需要用户下载依赖库源码, 然后上传至目标服务器进行编译安装</li>
<li>如果迁移工具不提供该库下载, 或该库未开源, 需要用户自行替换为同类功能库</li>
<li>目前不存在鲲鹏平台无法识别的依赖库so文件</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: so依赖库白名单用来记录鲲鹏平台已经支持的SO文件列表及支持状态 (二进制安装或者源码编译安装) , 也在不断更新</font>

<p><strong>79.以下关于docker容器性能的描述, 不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>直接基于物理机部署的容器, 没有Hypervisor层开销, 性能基本接近物理机</li>
<li>Docker由于轻量, 所以拉起速度可达秒级</li>
<li>Docker共享宿主机内核, 系统级虚拟化, 占用资源少</li>
<li>Docker具有完整的GuestOS</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 虚拟机有完整的GuestOS</font>

<p><strong>80.若需要使用华为鲲鹏920内置加速引擎, 则必须使用openssl 1.1.la及以上版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确必须使用openssl 1.1.la及以上版本</font>

<p><strong>81.Porting Advisor移植工具源码分析结果中提供针对每个待移植文件的源码修改意见, 但仅提供修改意见, 不会修改用户的源代码</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: Porting Advisor不会修改用户的源代码</font>

<p><strong>82.关于使用源码方式安装加速引擎软件, 以下说法正确的有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>编译安装zlib加速卡</li>
<li>安装openssl 1.1.la或以上版本</li>
<li>编译安装Warpdrive驱动开发库</li>
<li>编译安装加速器OpenSSL引擎</li>
<li>在下载好的源码目录下, 使用make命令编译加速器</li>
<li>安装内核开发包kernel-devel</li>
</ol>
<font color="#F08080">正确答案: A B C D E F <br>解答: 全部都正确</font>

<p><strong>83.华为鲲鹏代码迁移工具能够针对以下哪些场景提供精准的迁移指导和建议?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>对于汇编指令的移植优化, 由于汇编指令在x86和鲲鹏平台上完全不同, 工具会直接提供ARM版本的相应指令进行替换</li>
<li>对于一些特殊的指令用法差异, 工具也能精准识别出来, 列如_sync_fetch_and_add函数读取的变量, 会涉及到原子操作和锁操作, 必须按变量长度进行字节对齐, 避免触发异常, 导致程序错误</li>
<li>对于已经有编译好可用的依赖库文件, 工具提供开源版本的下载链接提供用户直接使用</li>
<li>对于乘法函数, 工具能够自动识别并推荐使用ARM平台支持的NEON向量乘法指令进行替换</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部场景提供精准的迁移指导和建议</font>

<p><strong>84.Instruction Set Architecture (指令集架构) 是软件和硬件的接口</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确软件和硬件的接口</font>

<p><strong>85.在将软件迁移至鲲鹏处理器时, 需要在声明char类型的变量时增加关键字signed或unsigned显示指定有符号或无符号类型</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: char类型的变量时增加关键字signed或unsigned的确显示指定有符号或无符号类型</font>

<p><strong>86.关于华为鲲鹏应用迁移的描述, 以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Openlab提供生态认证, 帮助ISV合作伙伴推广生态</li>
<li>Openlab不仅提供线上服务器资源, 同时还提供编译构建等持续构建能力, 以及安全/兼容性/稳定性/功耗/性能等测试套</li>
<li>使用openlab线上资源作为迁移环境, 本地办公环境需要能够连接公网</li>
<li>如果迁移的代码包含开源软件源码, 服务器环境需要能够连接公网</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都是华为鲲鹏应用迁移的描述</font>

<p><strong>87.C/C++语言属于编译型语言, 其编译后得到的可执行程序执行时依赖的指令是与CPU架构不相关的, 因此此类应用程序不需要移植</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 像Java, Python等解释型语言编译后得到的可执行程序执行时依赖的指令是与CPU架构不相关的, 因此此类应用程序不需要移植</font>

<p><strong>88.Docker仓库可以用来保存容器镜像, 并且可以保存容器镜像的多个版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 支持保存容器镜像的多个版本</font>

<p><strong>89.当鲲鹏管理员使用鲲鹏性能优化工具Tuning Kit新建系统配置全景分析任务时, 可以设置以下哪些采样类型?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>运行环境</li>
<li>上下文切换</li>
<li>软件</li>
<li>硬件</li>
</ol>
<font color="#F08080">正确答案: C D <br>解答: 系统配置全景分析:通过采集整个系统的软硬件配置信息, 并分析配置是否合理针对不合理的项根据当前已有经验提供优化建议</font>

<p><strong>90.当鲲鹏管理员使用鲲鹏性能优化工具Tuning Kit新建函数分析任务时, 可以选择设置以下哪种分析任务类型?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>C/C++程序</li>
<li>汇编程序</li>
<li>Java Mixed-Mode</li>
<li>Python</li>
</ol>
<font color="#F08080">正确答案: A C <br>解答: 函数级性能分析
C/C++程序分析:支持分析C/C++程序代码, 找出性能瓶颈点, 给出对应的热点函数及其源码和汇编指令; 支持通过火焰图展示函数的调用关系, 给出优化路径
JAVA Mixed-Mode分析:支持分析JAVA程序代码, 找出性能瓶颈点, 给出对应的热点函数; 支持通过火焰图展示函数的调用关系, 给出优化路径</font>

<p><strong>91.鲲鹏性能优化工具Tuning Kit可以支持以下哪种功能特性?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>函数级性能分析</li>
<li>代码片段级性能分析</li>
<li>进程/线程级性能分析</li>
<li>系统级性能分析</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部特性都是</font>

<p><strong>92.在默认的配置下, 使用Sysbench测试MySQL性能时, 下面有哪些不是输出结果的指示值?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>压测使用的线程数</li>
<li>99%的时延</li>
<li>QPS</li>
<li>TPS</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 前95%的请求的最大响应时间</font>

<p><strong>93.鲲鹏性能优化工具Tuning Kit的函数分析结果的函数页面不包括以下哪个区域?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>火焰图</li>
<li>源代码</li>
<li>函数分析详情</li>
<li>汇编代码</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 不包括火焰图</font>

<p><strong>94.用户在测试MySQL/PostgreSQL过程中, 以下哪些选项是需要测试的性能指标?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据库应用进程/线程的运行状态</li>
<li>内存占用</li>
<li>网络带宽占用率</li>
<li>UDP端口的包速率</li>
<li>磁盘利用率</li>
<li>CPU使用情况</li>
</ol>
<font color="#F08080">正确答案: A B C D E F <br>解答: 全部都是需要测试的性能指标</font>

<p><strong>95.鲲鹏性能优化工具Tuning Kit不支持在分析任务执行过程中升级</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 不支持在分析任务执行过程中升级</font>

<p><strong>96.华为开源镜像与maven中央仓库, CentOS等多家海外官方源站进行合作和认证, 为用户提供可信的组件下载来源</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确为用户提供可信的组件下载来源</font>

<p><strong>97.使用华为开源镜像站下载组件或者镜像, 有如下哪些优势?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>华为云开源镜像与官方社区合作, 保障组件安全, 故能避免不必要的安全风险</li>
<li>解决由于访问国外网络导致的效率问题</li>
<li>获取华为公司特有的SDK, 组件资源等</li>
<li>免费使用</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都是优势</font>

<p><strong>98.下列关于私有IP说法正确的是?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>私有IP的路由信息不能对外散播</li>
<li>使用私用IP作为来源或目的地址的封包, 不能透过Internet来转送</li>
<li> 关于私有IP的参考记录 (如DNS) , 可用于外部网络使用</li>
<li>私有IP的路由信息可以对外散播</li>
</ol>
<font color="#F08080">正确答案: A B <br>解答: 私有IP的路由信息不能对外散播和私有IP的路由信息可以对外散播</font>

<p><strong>99.私有镜像不能通过外部镜像文件创建</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答:私有镜像可以通过外部镜像文件创建</font>

<p><strong>100.公共镜像是由云平台官方提供的标准操作系统的公共基础镜像, 对所有用户可见</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确对所有用户可见</font>

<p><strong>101.EulerOS是适用于ARM64和x86机器的性能最好的操作系统之一, 能够运行在高度可扩展的多核系统上, 支持最严苛的工作负载</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确能够运行在高度可扩展的多核系统上</font>

<p><strong>102.以下哪中语言的源代码文件不能使用华为鲲鹏代码迁移工具Porting Advisor进行迁移分析?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>C</li>
<li>汇编</li>
<li>C++</li>
<li>Java</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 鲲鹏中Java是解释型语言</font>


<p><strong>103.使用华为鲲鹏代码迁移工具Porting Advisor迁移软件时, 迁移工具可以生成兼容华为鲲鹏平台的代码</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 代码迁移工具提供迁移建议, 不提供自动迁移功能</font>

<p><strong>104.下列选项中, 哪些场景适合使用HPC解决方案?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>天气预测</li>
<li>基因测序</li>
<li>流体动力学</li>
<li>环境预测</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 天气预测, 基因测序, 流体动力学, 环境预测都适合使用HPC解决方案</font>

<p><strong>105.下列选项中, 哪些是金融行业的鲲鹏替代应用?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>核心应用</li>
<li>经营分析</li>
<li>互联网银行</li>
<li>办公支撑</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 核心应用, 经营分析, 互联网银行, 办公支撑都是金融行业的鲲鹏替代应用</font>


<p><strong>106.下列选项中, 哪项是Spark性能比Hadoop较为领先的原因?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Spark是一个分布式数据基础设施</li>
<li>Spark通过内存中的DAG有向无环图, 减少落盘计算</li>
<li>Spark是一个批处理框架</li>
<li>Spark是一个流处理框架</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: Spark性能比Hadoop较为领先的原因是Spark通过内存中的DAG有向无环图, 减少落盘计算</font>


<p><strong>107.以下选项中, 哪些是华为鲲鹏伙伴计划包含的公共权益?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>业务支持</li>
<li>营销支持</li>
<li>技术支持</li>
<li>培训支持</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 业务支持, 营销支持, 技术支持, 培训支持都是华为鲲鹏伙伴计划包含的公共权益</font>

<p><strong>108.鲲鹏社区提供基于华为鲲鹏处理器和系列化芯片构筑面向政府, 金融和运营商等行业客户的全栈IT基础设施解决方案</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 鲲鹏社区不提供上述的服务由华为云提供</font>


<p><strong>109.下列用户信息文件描述中错误的是哪项?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>/etc/group:组信息文件</li>
<li>/etc/defaut/useradd:定义默认设置文件</li>
<li>/ect/shadow:用户密码明文文件</li>
<li>/ect/passwd:用户账号信息文件</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: /etc/shadow 文件, 用于存储 Linux 系统中用户的密码信息 (密文) , 又称为"影子文件"</font>


<p><strong>110.openEuler-20.03-LTS-aarch64操作系统可以安装在哪些服务器上?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>RH5885H V5</li>
<li>TaiShan X6000</li>
<li>TaiShan 2280</li>
<li>RH2288H V5</li>
</ol>
<font color="#F08080">正确答案: B C <br>解答: AD是x86架构服务器</font>

<p><strong>111.下列选项中, 哪些是ARM处理器的应用领域?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>移动终端领域</li>
<li>E级超算系统领域</li>
<li>超大型云数据中心领域</li>
<li>企业应用领域</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 这些领域都可以用ARM处理器</font>


<p><strong>112.CentOS是一个基于哪种操作系统代码开发, 并依照开放源代码规定发布的源代码所编译而成的企业级Linux版本?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>SLES</li>
<li>Redhat Enterprise Linux</li>
<li>EulerOS</li>
<li>Debian</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: CentOS来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成, CentOS不包含封闭源代码软件CentOS是RHEL源码再编译的产物, 而且在RHEL的基础上修正了不少已知的Bug, 相对于其他Linux发行版, 其稳定性值得信赖</font>

<p><strong>113.下列选项中, 关于ARM芯片相比于x86架构芯片的优势, 说法正确的有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>单位芯片面积算力更强</li>
<li>ARM芯片工艺相对x86更先进</li>
<li>相同的芯片尺寸下, ARM的核数比x86的多</li>
<li>众核架构更符合分布式业务的需求</li>
</ol>
<font color="#F08080">正确答案: A C D <br>解答: ARM芯片工艺相对x86省电不能说更先进 
</font>

<p><strong>114.华为拥有ARM V8架构的永久授权</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 华为的确拥有ARM V8架构的永久授权</font>

<p><strong>115.openEuler系统中, 本地用户 (自定义用户) 的UID起始编号是多少?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>500</li>
<li>0</li>
<li>1000</li>
<li>1001</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: UID起始编号1000</font>

<p><strong>116.openEluer支持的A-Tune是一种通过非侵入式系统画像的负载感知方法, 识别业务并匹配最佳资源模型, 实时响应业务特征变化的AI自动调优系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确是openEluer支持的A-Tune是一种通过非侵入式系统画像的负载感知方法, 识别业务并匹配最佳资源模型, 实时响应业务特征变化的AI自动调优系统</font>


<p><strong>117.ISV合作伙伴基于华为鲲鹏云服务在华为云云市场做产品或解决方案发布前, 需要先加入鲲鹏凌云伙伴计划并通过鲲鹏云服务兼容性认证</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确先加入鲲鹏凌云伙伴计划并通过鲲鹏云服务兼容性认证</font>

<p><strong>118.下列哪个是华为鲲鹏生态兼容的非国产操作系统?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Ubuntu</li>
<li>Deepin</li>
<li>Kylin</li>
<li>openEuler</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: Ubuntu Linux是由南非人马克·沙特尔沃思(Mark Shuttleworth)创办的基于Debian Linux的操作系统, 于2004年10月公布Ubuntu的第一个版本(Ubuntu 4.10"Warty Warthog")Ubuntu适用于笔记本电脑, 桌面电脑和服务器, 特别是为桌面用户提供尽善尽美的使用体验</font>

<p><strong>119.TaiShan 5280服务器是4U2路存储型服务器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 5280服务器确实是4U2路存储型服务器</font>


<p><strong>120.下列选项中, 哪项不是华为云提供的鲲鹏云服务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏容器服务</li>
<li>鲲鹏SQL Server服务</li>
<li>鲲鹏应用运维服务</li>
<li>鲲鹏云硬盘服务</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 鲲鹏SQL Server服务不是华为云提供的鲲鹏云服务</font>


<p><strong>121.关于GPL的描述正确的有哪些?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>GPL允许用户任意复制, 传递, 修改及再次发布遵从GPL的软件</li>
<li>遵从GPL的软件不允许收费</li>
<li>基于自由软件修改再次发布的软件仍需要遵循GPL</li>
<li>GPL是自由软件的通行许可证</li>
</ol>
<font color="#F08080">正确答案: A C D <br>解答: GPL (通用性公开许可证, 开源协议) :
1, 自由软件的通用许可证
2, 允许用户任意复制, 传递, 修改及再发布
3, 基于自由软件修改再次发布的软件, 仍需遵循GPL</font>

<p><strong>122.关于华为鲲鹏迁移工具分析报告提供的依赖库so文件的操作建议, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>如果迁移工具不提供该库下载, 或该库未开源, 需要用户自行替换为同类功能库</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 但无二进制安装包, 则需要用户下载依赖库源码, 然后上传至目标服务器进行编译安装</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 且已有二进制安装包, 则用户可以直接将工具提供的开源版本依赖库安装包下载在本地, 然后上传至目标服务器进行安装使用</li>
<li>目前不存在鲲鹏平台无法识别的依赖库so文件</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 目前还是存在鲲鹏平台无法识别的依赖库so文件</font>

<p><strong>123.使用C/C++/Go语言开发的源码, 必须要编译后才能运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: C/C++/Go语言属于编译型语言</font>

<p><strong>124.若需要使用华为鲲鹏920内置的加速引擎, 则必须使用openssl 1.1.la及以上版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 必须使用openssl 1.1.la及以上版本</font>

<p><strong>125.关于迁移语言开发的开源软件, 以下选项不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>将x86平台下的可执行文件部署到基于鲲鹏的虚拟机可以直接执行</li>
<li>使用makefile编译源码, 生成可执行程序</li>
<li>编译前, 要使用开源软件源码中的cmake或autoconfig脚本生成makefile</li>
<li>可以通过开源软件中的readme了解外部依赖库</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: C/C++属于解释型语言, 跨平台迁移时需要重新编译</font>

<p><strong>126.鲲鹏分析扫描工具Dependency Advisor支持以下哪种功能特性?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>向用户提供软件移植报告, 提供移植工作量评估</li>
<li>检查用户Java类软件包(JAR, WAR)中包含的so依赖库和二进制文件, 并评估上述文件的可移植性</li>
<li>检查用户C/C++软件构建工程文件, 并评估该文件的可移植性</li>
<li>检查用户C/C++软件源码, 并评估软件源文件的可移植性</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都有</font>

<p><strong>127.鲲鹏分析是用来记录鲲鹏平台已经支持的so文件, 软件和支持状态的列表, 白名单可以在华为鲲鹏开发者论坛下载并更新</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: so文件, 软件和支持状态的列表, 白名单确实可以在华为鲲鹏开发者论坛下载并更</font>

<p><strong>128.以下哪项不属于容器的状态?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>paused</li>
<li>created</li>
<li>exited</li>
<li>deleted</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: exited不属于容器的状态</font>

<p><strong>129.以下哪项是华为鲲鹏代码迁移工具能够实现的功能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>给出性能优化建议</li>
<li>修改用户的源代码</li>
<li>分析软件源代码, 提供应用移植指导 </li>
<li>执行应用的编译安装</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 分析软件源代码, 提供应用移植指导是华为鲲鹏代码迁移工具能够实现的功能</font>


<p><strong>130.鲲鹏分析扫描工具Dependency Advisor可以同时安装Web模式和CLI模式</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 只支持Web模式或者CLI模式, 两种模式不能同时安装</font>


<p><strong>131.关于镜像和容器的描述, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>容器不具有root权限, 因此不存在从容器上攻击主机和主机上其他容器的可能</li>
<li>容器是由镜像实例化而来的</li>
<li>容器是动态的, 可用容器来运行应用</li>
<li>镜像是只读的, 可以理解为静态文件</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 容器具有root权限</font>

<p><strong>132.使用华为鲲鹏代码迁移工具对源码进行扫描分析时, 需要进行哪些方面的检查和分析?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>对比输入的{so文件名}列表和so依赖库白名单</li>
<li>检查x86平台和鲲鹏平台相异的编译器宏, 编译选项, buildin函数, attribute函数等列表</li>
<li>扫描分析用户软件目标二进制文件依赖的源文件集合</li>
<li>检查Makefile中的编译链接</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都要检查</font>

<p><strong>133.Docker仓库可以用来保存容器镜像, 并且可以保存容器镜像的多个版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 支持保存容器镜像的多个版本</font>

<p><strong>134.下列选项中, 哪个不属于redis的主要性能指标命令?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>get</li>
<li>lpush</li>
<li>lpull</li>
<li>set</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: lpull不属于redis的主要性能指标命令</font>

<p><strong>135.用户可以使用哪些工具监测CPU使用情况?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>top</li>
<li>iostat</li>
<li>mpstat</li>
<li>pidstat</li>
<li>vmstat</li>
<li>sar</li>
</ol>
<font color="#F08080">正确答案: A B C D E F <br>解答: top,iostat,mpstat,pidstat,vmstat,sar全是监测工具</font>

<p><strong>136.鲲鹏管理员可以将鲲鹏性能优化工具Tuning Kit安装在以下哪些操作系统上?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>RedHat 7.0</li>
<li>中标麒麟V7R6</li>
<li>CentOS 7.6</li>
<li>EulerOS 2.8</li>
</ol>
<font color="#F08080">正确答案: C D <br>解答: CentOS EulerOS</font>

<p><strong>137.鲲鹏性能优化工具Tuning Kit只支持Web模式或者CLI模式, 两种模式不能同时安装</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 两种模式不能同时安装</font>


<p><strong>138.鲲鹏管理员使用安装鲲鹏性能优化工具Tuning Kit时, 端口号可以配置为8000</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 端口号可以配置为8000</font>


<p><strong>139.用户可以通过Redis自带的redis-speed工具测试lpush命令执行的性能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 不可以</font>


<p><strong>140.私有镜像通过以下哪个功能可以实现本地业务部署和公有云业务部署的统一化持久化?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>镜像共享</li>
<li>镜像复制</li>
<li>镜像复制</li>
<li>镜像导出</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 镜像导出开源实现本地业务部署和公有云业务部署的统一化持久化</font>

<p><strong>141.华为开源镜像站中的镜像必须通过网络代理才能下载, 无法直接下载到本地</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 可以直接下载</font>


<p><strong>142.可以根据设定的寻址路由协议实现自动优化网络结构, 以保持客户使用的网络持续稳定, 高效这句话是关于以下哪项的描述?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>全动态BGP</li>
<li>静态BGP</li>
<li>静态BGP</li>
<li>独享带宽</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 全动态BGP</font>


<p><strong>143.华为云开源镜像仓库中的依赖包更新周期间隔多久?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>每月更新一次</li>
<li>每周更新一次</li>
<li>每年更新一次</li>
<li>每天会随官方发布的版本进行更新</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 每天会随官方发布的版本进行更新</font>

<p><strong>144.系统盘镜像可以用来创建相同系统盘配置的云服务器, 且可以多次重复使用</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确可以多次重复使用</font>

<p><strong>145.当网络结构发生变化时, 静态BGP无法实现自动调整网络设置以保障用户体验</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 网络结构比较复杂时建议选择动态BGP</font>

<p><strong>146.下列关于容器镜像服务SWR, 说法错误的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>使用docker tag命令给要上传的镜像打标签</li>
<li>使用docker push命令上传镜像</li>
<li>可以根据需要设置镜像的属性</li>
<li>暂未提供私有镜像库</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 已经提供私有镜像库
<br>容器镜像服务(Software Repository for Container, 简称SWR)是一种支持镜像全生命周期管理的服务, 提供简单易用, 安全可靠的镜像管理功能, 包括镜像的上传, 下载, 删除等SWR提供私有镜像库, 并支持细粒度的权限管理, 可以为不同用户分配相应的访问权限(读取, 编辑, 管理)SWR还支持容器镜像版本更新自动触发部署您只需要为镜像设置一个触发器, 通过触发器, 可以在每次镜像版本更新时, 自动更新云容器引擎(CCE)中使用该镜像部署的应用</font>

<p><strong>147.华为云弹性云服务器的CPU架构有哪几种?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>CentOS</li>
<li>x86架构</li>
<li>鲲鹏架构</li>
<li>AMD</li>
</ol>
<font color="#F08080">正确答案: B C <br>解答: x86和AMD</font>

<p><strong>148.华为鲲鹏分析扫描工具Dependency Advisor, 支持分析以下哪些类型的文件?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>源代码</li>
<li>未安装Dependency Advisor工具的服务器上的源代码</li>
<li>已安装的软件</li>
<li>软件安装包</li>
</ol>
<font color="#F08080">正确答案: A B C <br>解答: 分析扫描工具功能特性:
检查用户软件资源包 (RPM, DEB, TAR, ZIP, GZIP文件) 中包含的SO (Shared Object) 依赖库和可执行文件, 并评估SO依赖库和可执行文件的可移植性和在安装包中的相对路径
检查用户Java类软件包 (JAR, WAR) 中包含的SO依赖库和二进制文件, 并评估上述文件的可移植性
检查指定的用户软件安装路径下的SO依赖库和可执行文件, 并评估SO依赖库和可执行文件的可移植性
检查用户C/C++软件构建工程文件, 并评估该文件的可移植性
检查用户C/C++软件源码, 并评估软件源文件的可移植性
向用户提供软件移植报告, 提供移植工作量评估
支持命令行方式和Web两种工作模式</font>

<p><strong>149.Docker是目前容器技术领域最热门的开源项目, 下面哪项不属于Docker的基本概念?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Volume</li>
<li>Repository</li>
<li>Image</li>
<li>Deployment</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: Volume
你想把docker容器和你的数据分开的时候, 你就要挂载一个本地文件夹到docker窗口中这肯定是基本概念了
Repository
docker镜像的存储分发位置, 可以是公有的和私有的, 公有的就是你经常用docker pull xxx, 不带前缀访问的docker hub
Image:镜像
docker pull xxx[:tag] 就是从docker仓库中下载一个[最新的]xxx的镜像
Deployment
部署, 你可以把应用部署在docker中,但是这不是docker的基本概念这是运维的概念, docker是平台</font>


<p><strong>150.根据对计算节点间信息依赖度的不同, 可将HPC解决方案的应用场景分为紧耦合型和松耦合性</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确分为紧耦合型和松耦合性</font>


<p><strong>151.动漫渲染这种数据轻量松耦合场景适合采用HPC解决方案</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确可以数据轻量松耦合场景适合采用HPC解决方案</font>

<p><strong>152.在使用man查看一个命令的帮助信息时, 下列说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>在命令使用格式中, [ ]表示的是必选内容</li>
<li>在命令使用格式中, …表示的是同类内容可以有多个</li>
<li>通常情况下, --help比man查看的命令帮助信息更多</li>
<li>在命令使用格式中, <>表示的是可选内容</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: <>表示必选内容</font>

<p><strong>153.TaiShan 5280存储型服务器支持哪些RAID类型?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>RAID5</li>
<li>RAID1</li>
<li>RAID0</li>
<li>RAID10</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都有</font>

<p><strong>154.华为鲲鹏计算加速型弹性云服务器主要应用在以下哪个场景?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>高性能计算</li>
<li>大数据</li>
<li>AI训练和推理</li>
<li>通用计算</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 加速型弹性云服务器主要用于AI训练和推理</font>


<p><strong>155.华为鲲鹏弹性云服务器不包含以下哪种类型?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通用型</li>
<li>网络密集型</li>
<li>内存密集型</li>
<li>存储密集型</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 通用型, 存储密集型, 内存密集型, 计算加速型</font>


<p><strong>156.TaiShan 2280服务器适用于低功耗场景</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: TaiShan2280:2U2路均衡型</font>

<p><strong>157.华为作为鲲鹏计算产业的一员, 掌握Arm64处理器核, 微架构及芯片设计技术的关键技术, 拥有ARM V8永久架构授权, 并在此基础上发展Kunpeng系列处理器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 是正确的</font>

<p><strong>158.华为鲲鹏云服务可提供KC1型ESC和KS1型BMS</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 鲲鹏云服务可提供KC1型ESC和KS1型BMS</font>

<p><strong>159.下列选项中, 关于华为鲲鹏920的特点描述正确的有哪些?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>支持8内存通道, 带宽高于Intel Skylake (V5) 的6通道</li>
<li>性能可匹配Inter Skylake (V5) 高端处理器型号</li>
<li>相比同等性能的Intel处理器, 功耗更低</li>
<li>CPU支持2个100GE网口, 支持RoCE特性</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 以前全部都是</font>

<p><strong>160.加速引擎是TaiShan 200服务器基于Kunpeng 920芯片提供的硬件加速解决方案, 可以显著降低处理消耗, 提高处理器效率</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 的确可以显著降低处理消耗, 提高处理器效率</font>

<p><strong>161.以下关于代码迁移的说法, 哪项是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>使用Porting Advisor工具处理解释型语言的迁移成本低于编译型语言</li>
<li>安装虚拟机, 可以屏蔽运行平台的差异, 所以安装鲲鹏可使用的jdk之后, 其他解释型语言都无需做迁移分析</li>
<li>c语言程序通过编译生成的可执行文件可以通过Porting Advisor进行迁移分析</li>
<li>使用Porting Advisor工具, 可下载替换经过平台验证的依赖so库</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 使用Porting Advisor工具, 可下载替换经过平台验证的依赖so库</font>

<p><strong>162.用户在使用鲲鹏分析扫描工具Dependency Advisor时, 需要将待分析的软件包/源代码上传到以下哪个路径?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>/etc/depadv</li>
<li>/opt/depadv</li>
<li>/etc/depadv/depadmin</li>
<li>/opt/depadv/depadmin</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: /opt/depadv/depadmin</font>


<p><strong>163.用户在使用鲲鹏分析扫描工具Dependency Advisor时, 如果编译器版本为GCC5.1, 那么可以使用以下哪些构建工具?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>automake</li>
<li>make</li>
<li>webpack</li>
<li>cmake</li>
</ol>
<font color="#F08080">正确答案: A B D <br>解答: 除webpack以外, 可查看工具手册</font>


<p><strong>164.用户在使用鲲鹏分析扫描工具Dependency Advisor时, 可以选以下哪些版本的GCC编译器?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>GCC 6.5</li>
<li>GCC 4.8.5</li>
<li>GCC 5.5</li>
<li>GCC 7.4</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: GCC 4.8.5, GCC 5.5, GCC 6.5, GCC 7.4 </font>

<p><strong>165.安装华为鲲鹏代码迁移工具需要以下哪种运行环境?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Go</li>
<li>C</li>
<li>Python</li>
<li>Java</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: Python运行环境</font>

<p><strong>166.以下哪项命令的描述是错误的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"docker ps -a": 列出运行中和未运行的容器</li>
<li>"docker search centos": 从docker Hub中搜索相关的centos的镜像</li>
<li>"docker ps": 列出所有运行中的容器</li>
<li>"docker images ps": 列出镜像和容器</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: "docker images ps": 列出镜像</font>

<p><strong>167.纯Java语言开发的代码, 无依赖的so库文件不需要编译, 可以直接在JVM (Java虚拟机) 中运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: Java是编译型和解释型语言</font>

<p><strong>168.容器退出后会处于终止(exited)状态, 可以通过”docker ps -a”查看相关容器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: docker ps -a: 查看容器运行中和未运行的容器
</font>

<p><strong>169.CPU是可以通过软件控制硬件的计算机部件, 所以不同CPU架构, 上层的二进制指令也不同</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: x86和arm二进制指令不同</font>


<p><strong>170.编译c语言时, 可以通过增加编译选项”-fsigned-char”, 指定鲲鹏处理器平台下的char为有符号类型</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 可以通过-fsigned-char指定鲲鹏处理器平台下的char为有符号类型</font>

<p><strong>171.在进行代码移植时, 如果Java应用程序包含基于C/C++语言开发的so库文件, 则需要编译移植后才能在鲲鹏平台上正常运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 解释型语言都得注意是否包含有编译型语言开发的依赖库文件</font>


<p><strong>172.docker Daemon是服务端守护进程, 负责接收客户端的指令 (创建, 运行, 分发容器) , 并处理这些请求</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 创建, 运行, 分发容器</font>

<p><strong>173.C/C++代码在编译时遇到如下错误提示: “gcc: error: unrecognized command line option ‘-m64’ “以下说法不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>在鲲鹏处理器上编译时, 可以将-m64修改为-mabi=lp64重新编译</li>
<li>-m64是AMD的CPU编译64位程序的编译选项</li>
<li>编译选项错误</li>
<li>删除编译选项, 重新编译</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: 不是删除编译选项</font>

<p><strong>174.鲲鹏分析扫描工具Dependency Advisor支持在分析任务执行过程中升级如果升级失败, 升级脚本会自动回退工具到升级前的版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 升级脚本的确会自动回退工具到升级前的版本</font>


<p><strong>175.关于容器的删除操作, 以下哪项是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>可通过"docker rm <容器ID>"删除已停止的容器</容器ID></li>
<li>可通过"docker rmi <容器ID>"删除正在运行的容器</容器ID></li>
<li>可通过"docker rm <容器ID>"删除正在运行的容器</容器ID></li>
<li>可通过"docker rmi <容器ID>"删除已停止的容器</容器ID></li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 可通过"docker rm <容器ID>"删除正在运行的容器</容器ID></font>

<p><strong>176.使用Sysbench测试MySQL性能时, Sysbench自带的测试套不包括以下哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>oltp_delete</li>
<li>oltp_random_points</li>
<li>oltp_update_index</li>
<li>oltp_point_select</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 不包括oltp_random_points</font>

<p><strong>177.用户可以使用ping命令准确评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: ping命令评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</font>

<p><strong>178.用户可以使用哪些工具评估Linux主机的网络通断情况, 带宽及pps的性能?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>netperf</li>
<li>ping</li>
<li>qperf</li>
<li>perf</li>
<li>netbench</li>
<li>iperf</li>
</ol>
<font color="#F08080">正确答案: A B C D E F<br>解答: 以上全部工具评估</font>

<p><strong>179.perf工具可以用于测试CPU性能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: perf工具的确用于测试CPU性能</font>

<p><strong>180.nginx作为Web Server, 可以使用以下哪些工具进行性能测试?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Jmeter</li>
<li>sysbench</li>
<li>wrk</li>
<li>ab</li>
</ol>
<font color="#F08080">正确答案: A B D <br>解答: 除了wek全都可以测试</font>


<p><strong>181.在CentOS系统中, 以下哪个命令可以用于安装软件包?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>yum upgrade</li>
<li>apt-get install</li>
<li>yum install</li>
<li>apt-get upgrade</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: apt-get 命令适用于 deb 包管理式的 Linux 操作系统 (Debian, Ubuntu等) </font>

<p><strong>182.以下关于镜像的描述, 不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>查询镜像时, 支持通过标签过滤查询镜像</li>
<li>用户可以快速复制私有镜像, 不受region限制</li>
<li>通过导入外部镜像文件创建镜像时, 不支持qcow2格式</li>
<li>支持key-value类型的镜像标签</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 镜像服务目前支持多种格式, 镜像服务导入支持ZVHD, ZVHD2, QCOW2, VMDK, VHD, VHDX, RAW, QCOW, VDI, QED</font>


<p><strong>183.基于云服务器创建的整机镜像支持共享, 复制和导出</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 肯定支持</font>


<p><strong>184.镜像服务可为租户提供以下哪些能力?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>个性化的镜像制作能力</li>
<li>灵活的镜像自助能力</li>
<li>镜像共享能力</li>
<li>完善的镜像管理能力</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 镜像服务主要有以下功能:
提供常见的主流操作系统公共镜像
由现有运行的云服务器, 或由外部导入的方式来创建私有镜像
管理公共镜像, 例如:按操作系统类型/名称/ID搜索, 查看镜像ID, 系统盘大小等详情, 查看镜像支持的特性 (用户数据注入, 磁盘热插拔等) 
管理私有镜像, 例如:修改镜像属性, 共享镜像, 复制镜像等
通过镜像创建云服务器</font>

<p><strong>185.镜像有哪些类别?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>公共镜像</li>
<li>自由镜像</li>
<li>私有镜像</li>
<li>共享镜像</li>
</ol>
<font color="#F08080">正确答案: A C D <br>解答: 镜像有 公共镜像, 私有镜像, 共享镜像, 市场镜像</font>

<p><strong>186.在华为云上, 通过以下哪种方式或工具可以访问外网?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>镜像</li>
<li>云硬盘</li>
<li>弹性公网IP</li>
<li>VPC</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 访问外网需要弹性公网IP</font>


<p><strong>187.华为鲲鹏性能优化工具支持哪些功能特性?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>函数级性能分析</li>
<li>系统级性能分析</li>
<li>源代码语法分析</li>
<li>进程/线程级性能分析</li>
</ol>
<font color="#F08080">正确答案: A B D <br>解答: Tuning Kit功能特性:系统级性能分析, 进程/线程级性能分析, 函数级性能分析</font>

<p><strong>188.华为鲲鹏代码迁移工具Porting Advisor工具界面中的GCC版本需要与后台操作系统中的GCC版本保持一致</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: GCC版本需要与后台操作系统中的GCC版本保持一致</font>


<p><strong>189.使用华为鲲鹏性能优化工具Tuning Kit中的函数级性能分析, 可以分析Java代码的热点函数及热点指令</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 函数级性能分析
C/C++程序分析:支持分析C/C++程序代码, 找出性能瓶颈点, 给出对应的热点函数及其源码和汇编指令; 支持通过火焰图展示函数的调用关系, 给出优化路径
JAVA Mixed-Mode分析:支持分析JAVA程序代码, 找出性能瓶颈点, 给出对应的热点函数; 支持通过火焰图展示函数的调用关系, 给出优化路径</font>

<p><strong>190.以下选项中, 哪些是鲲鹏社区可以提供的服务?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>获得最新的鲲鹏咨询</li>
<li>获得海量软件的迁移指导</li>
<li>通过鲲鹏论坛与开发者交流学习</li>
<li>了解鲲鹏解决方案</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全都是提供的服务</font>

<p><strong>191.鲲鹏学院汇聚在线培训, 专业认证, 云端实验, 加速客户在鲲鹏领域技术水平的提升</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 是可以在线培训, 专业认证, 云端实验, 加速客户在鲲鹏领域技术水平的提升</font>


<p><strong>192.Redis-server相关知识点 执行redis-server</strong></p>
<ol style="list-style-type:upper-alpha">
<li>此处是为同学们提供redis-server命令说明</li>
<li>比如-p  -v等参数后面跟的值</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: <img src="https://img.xiaoqiqiao.com/public-courses/test_file/198/Redis-server.png" alt></font>

<p><strong>193.GAME模型相关知识点 性能测试GAME(A)模型(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>目标</li>
<li>分析</li>
<li>度量</li>
<li>执行</li>
<li>调整</li>
</ol>
<font color="#F08080">正确答案: A B C D E <br>解答: <img src="https://img.xiaoqiqiao.com/public-courses/test_file/198/GAME模型.png" alt></font>


<p><strong>194.泰山服务器100与200的差异对比(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>处理器型号</li>
<li>DDR4内存个数</li>
<li>PCIek扩展插槽及版本</li>
<li>各自支持的硬盘类型</li>
<li>支持的板载网络带宽</li>
<li>是否支持全液冷技术</li>
</ol>
<font color="#F08080">正确答案: A B C D E F <br>解答: <img src="https://img.xiaoqiqiao.com/public-courses/test_file/198/泰山服务器对比.png" alt></font>


<p><strong>195.自研SSD加速盘的优势和型号汇总(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>三大优势:更快, 更智能, 更简单</li>
<li>高性能 NVMe PCIe3.0接口, SAS 3.0接口</li>
<li>ES3000P/S/C三种型号</li>
</ol>
<font color="#F08080">正确答案: A B C <br>解答: <img src="https://img.xiaoqiqiao.com/public-courses/test_file/198/自研硬盘参数.png" alt></font>

<p><strong>196.关于华为鲲鹏系列裸金属服务的描述, 以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>可提供128众核算力</li>
<li>全新SDI 3.0技术带宽可支持40Gbps</li>
<li>可搭载自研AI芯片Ascend 310/910</li>
<li>不支持存储共享卷</li>
</ol>
<font color="#F08080">正确答案: A B C <br>解答: 支持存储共享卷</font>

<p><strong>197.以下哪种型号的TaiShan服务器最适合海量存储业务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>2280</li>
<li>5280</li>
<li>2480</li>
<li>X6000</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 5280服务器最适合海量存储业务, 存储密集型:5290 (4u72盘) , 5280 (4u40盘) </font>

<p><strong>198.openEuler是个单用户多任务的操作系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 多用户, 多任务, 支持多线程和多CPU的操作系统</font>

<p><strong>199.以下哪些是TaiShan服务器的优点?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>国产化,自主安全可控</li>
<li>CPU采用先进的7nm工艺</li>
<li>低功耗,绿色节能</li>
<li>多物理核心,并发性能高</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 在"计算"上, 采用Kunpeng920处理器, 多核架构性能更高, 能耗更省
在"存储"上, 采用华为智能SSD控制器芯片Hi1812, 通过智能加速与磨损平衡算法, 提供性能, 寿命都是业界第一的SSD产品
在"网络"上, 采用华为智能网卡芯片Hi1822, 支持以太与FC融合, 协议加速与可编程, 降低网络协议处理对CPU资源的占用, 释放至少15%的CPU资源
在"管理"上, 采用内置AI管理引擎与算法的华为智能管理芯片Hi1710, 结合自研的BIOS及FusionDirector管理软件, 有效降低OPEX (运营成本) 
在"AI"上, 采用基于达芬奇架构的华为AI芯片昇腾310和昇腾910, 分别是AI推理/训练芯片, 分别具备极致的能效与性能</font>

<p><strong>200.下列哪个是华为鲲鹏生态兼容的非国产?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>openEuler</li>
<li>Ubuntu</li>
<li>Kylin</li>
<li>Deepin</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: openEuler=欧盆欧拉, Kylin=麒麟, Deepin=深度均为国产的Linux操作系统</font>

<p><strong>201.下列哪些不是鲲鹏云容器的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏CCI原生支持K8S接口</li>
<li>支持Windows镜像</li>
<li>鲲鹏CCI支持秒级计费</li>
<li>鲲鹏CCE支持跨云管理</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: 支持Windows镜像不是鲲鹏云容器的特点</font>


<p><strong>202.Kunpeng 920加速引擎不包括下列哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>压缩加速引擎</li>
<li>SSL加速引擎</li>
<li>重删加速引擎</li>
<li>加密算法加速引擎</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 支持ABD</font>

<p><strong>203.关于Dockerfile的描述,以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Dockerfile一般包含四部分内容基础镜像信息, 维护者信息, 镜像操作指令和容器启动时执行指令</li>
<li>cd命令可直接运行在Dockerfile中</li>
<li>Dockerfile中, 第一条指令必须为 FROM指令</li>
<li>完成Dockerfile编写后, 可以通过docker build命令来创建镜像</li>
</ol>
<font color="#F08080">正确答案: A C D <br>解答: WORKDIR: 切换目录用, 可以多次切换(相当于cd命令)</font>


<p><strong>204.鲲鹏分析扫描工具Dependency Advisor支持以下哪种功能特性?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>向用户提供软件移植报告, 提供移植工作量评估</li>
<li>检查用户Java类软件包(JAR, WAR)中包含的so依赖库和二进制文件, 并评估上述文件的可移植性</li>
<li>检查用户C/C++软件构建工程文件, 并评估该文件的可移植性</li>
<li>检查用户C/C++软件源码, 并评估软件源文件的可移植性</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部都有</font>

<p><strong>205.CentOS执行如下命令:docker run -p 6379:6379 -v $PWD/data:/data -d t_armb4v8/centos _redis:5.05 redis-server –appendonly yes,, 关于此命令的措述以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"$PWD/data:/data":将主机中当前目录下的data挂载到容器的/data</li>
<li>"6379:6379":将主机的6379端口映射到容器的6379端口</li>
<li>该命令功能是启动容器, 并在容器启动时候执行容器内的redis-server服务</li>
<li>" appendonly yes"打开持久化配置</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全部正确</font>

<p><strong>206.用户在使用鲲鹏分析扫描工具Dependency Advisor分析软件时, 可以分析以下哪些格式的软件包?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TAR</li>
<li>ZIP</li>
<li>JAR</li>
<li>DEB</li>
<li>GZIP</li>
<li>RPM</li>
</ol>
<font color="#F08080">正确答案: A B C D E F <br>解答: TAR, ZIP, JAR, DEB, GZI, RPM</font>


<p><strong>207.以下哪些不属于编译型语言?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>lua</li>
<li>Php</li>
<li>Go</li>
<li>perl</li>
<li>ruby</li>
</ol>
<font color="#F08080">正确答案: A B D E<br>解答: go属于编译型语言</font>


<p><strong>208.用户可以从docker Hub获取已有镜像并进行更新, 也可以利用本地已有的镜像创建一个新的镜像</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 确实用户可以从docker Hub获取已有镜像并进行更新, 也可以利用本地已有的镜像创建一个新的镜像</font>

<p><strong>209.可以通过以下哪些方式创建镜像?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通过命令来创建容器镜像</li>
<li>通过wget方式创建镜像</li>
<li>利用Dockerfile来创建镜像</li>
<li>通过yum install方式创建镜像</li>
</ol>
<font color="#F08080">正确答案: A C <br>解答: docker pull方式或者docker build, Dockerfile方式获取或者构建的镜像</font>

<p><strong>210.用户在安装鲲鹏分析扫描工具Dependency Advisor前需要哪些准备工作?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>确认服务器和操作系统满足要求</li>
<li>配置安装环境</li>
<li>安装包完整性校验</li>
<li>已安装远程SSH登录工具</li>
</ol>
<font color="#F08080">正确答案: A B C D <br>解答: 全都要做</font>

<p><strong>211.Python语言开发的代码不需要编译, 可以直接在PVM (Python虚拟机) 中运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 解释型语言的特性</font>

<p><strong>212.使用gcc编译时,编译选项-march的作用是什么?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>指定流水线</li>
<li>指定指令集类型</li>
<li>提升兼容性</li>
<li>指定cpu型号</li>
</ol>
<font color="#F08080">正确答案: B <br>解答: -march是指定cpu的指令集, broadwell是x86的一款cpu, 实用鲲鹏处理器需要指定为armv8-a</font>

<p><strong>213.下列选项中,哪些是常见的性能测试方法?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>并发测试</li>
<li>可恢复测试</li>
<li>稳定性测试</li>
<li>压力测试</li>
<li>负载测试</li>
<li>压力测试</li>
</ol>
<font color="#F08080">正确答案: A B C D E F <br>解答: 全部可用</font>

<p><strong>214.当鲲鹏管理员在使用鲲鹏性能优化工具Tuning Kit新建Java Mixed-lode分析任务时, 如果CPU采样周期设置为高精度, CPU采集周期默认为多少?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>1000毫秒</li>
<li>300微秒</li>
<li>710微秒</li>
<li>100毫秒</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: CPU采集周期默认为1000毫秒</font>


<p><strong>215.下列选项中, 属于镜像服务的典型应用场景有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>传统业务上云</li>
<li>批量复制弹性云服务器</li>
<li>批量复制弹性云服务器</li>
<li>实时同步数据</li>
</ol>
<font color="#F08080">正确答案: A B C <br>解答: 镜像服务无法实时同步数据, 主要用于备份比如:服务器运行环境备份 (对一台云服务器实例制作镜像以备份环境当该实例的软件环境出现故障而无法正常运行时, 可以使用镜像进行恢复) </font>

<p><strong>216.华为公有云中, 以下属于私有镜像的有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据镜像</li>
<li>系统镜像</li>
<li>整机镜像</li>
<li>共享镜像</li>
</ol>
<font color="#F08080">正确答案: A B C <br>解答: 华为云中镜像分类为公共镜像, 私有镜像, 共享镜像, 市场镜像</font>

<p><strong>217.共享带宽可以实现多个弹性公网IP共用一条带宽</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: 共享带宽可以让多个弹性公网IP共用一条带宽</font>


<p><strong>218.ssh协议默认端口号是什么?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>513</li>
<li>9600</li>
<li>23</li>
<li>22</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: ssh协议默认端口号是22</font>


<p><strong>219.下列Linux命令中,哪个命令可以用来解压文件</strong></p>
<ol style="list-style-type:upper-alpha">
<li>ps</li>
<li>Make</li>
<li>Wget</li>
<li>tar</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: tar是Linux解压命令</font>


<p><strong>220.使用以下Dockerfile构建两个镜像, 分别为image 1和image 2, 请问这两个镜像占用的物理机磁盘空间大小是多少?(假设镜像ubuntu:16.04的大小为200MB, def.tar的大小为20MB, compressed. tar文件为100MB) #构建imagel FROM ubuntu: 16.04 RUN wget <a href="http://abc.com/def.tar">http://abc.com/def.tar</a> #构建image2 FROM ubuntu: 16.04 ADD compressed. tar /</strong></p>
<ol style="list-style-type:upper-alpha">
<li>520M</li>
<li>220M</li>
<li>320MB</li>
<li>300M</li>
</ol>
<font color="#F08080">正确答案: C <br>解答: 镜像共享因为两个Dockerfile均基于ubuntu:14.04, 因此image1和image2这两个镜像均复用了镜像ubuntu:14.04因为镜像复用的存在, 实际占用的磁盘空间大小是:200＋20+100=320MB</font>


<p><strong>221.以下选项中, 哪个组件的作用是资源调度?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>HDFS</li>
<li>Hive</li>
<li>Spark</li>
<li>Yarn</li>
</ol>
<font color="#F08080">正确答案: D <br>解答: Yarn是资源调度</font>

<p><strong>222.凌云伙伴计划相关知识点(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>公有云</li>
<li>私有云</li>
<li>桌面云</li>
<li>专有云</li>
</ol>
<font color="#F08080">正确答案: A B C <br>解答: <img src="https://img.xiaoqiqiao.com/private-course/test_file/198/image1606463855872.png" alt></font>


<p><strong>223.Hive组件相关知识 Hive组件可以将SQL转变成Mapreduce命令吗?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">正确答案: A <br>解答: <img src="https://img.xiaoqiqiao.com/private-course/test_file/198/image.png" alt></font>


<p><strong>224.以下哪项是华为鲲鹏代码迁移工具不支持的功能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>检查用户软件</li>
<li>C/C++源码和 x86 汇编源码并指导用户如何移植源文件</li>
<li>检查用户软件 C/C + +软件构建工程文件,并指导用户如何移植该文件</li>
<li>检查用户软件 C/C+ +软件,构建工程文件使用的链接库并提供可移植性信息</li>
<li>检查用户软件 RPM 包中文件, 并指导用户如何进行移植</li>
</ol>
<font color="#F08080">正确答案: E <br>解答: 代码迁移工具支持的输入:
C/C++源代码文件
X86汇编源代码文件
Makefile文件</font>

<p><strong>225.整机镜像可以通过一下哪些方式创建?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通过云服务器制作整机镜像</li>
<li>云服务器备份</li>
<li>云硬盘</li>
<li>云备份</li>
</ol>
<font color="#F08080">正确答案: A B D <br>解答: 注意问的是整机镜像</font>

<p><strong>226将商用软件迁移至鲲鹏处理器, 以下哪些说法是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>获取在鲲鹏处理器认证后的版本</li>
<li>使用 GaussDB 替换与鲲鹏处理器不兼容的数据库软件</li>
<li>联系厂商获取源码重新编译</li>
<li>寻找功能相近的幵源软件替换</li>
<li>使用与鲲鹏处理器兼容的版本替代</li>
</ol>
<font color="#F08080">正确答案: A B C D E <br>解答: 全部可以</font>

<br>]]></content>
      <categories>
        <category>鲲鹏云</category>
      </categories>
  </entry>
  <entry>
    <title>鲲鹏题库1.5无答案</title>
    <url>/Kunpeng-question1.5-2.html</url>
    <content><![CDATA[<p><strong>鲲鹏笔记+题库</strong></p>
<a id="more"></a>

<p><strong>1.Kunpeng 920处理器采用的是哪种架构的芯片()(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Power</li>
<li>X86</li>
<li>ARM</li>
<li>MIPS</li>
</ol>
<font color="#F08080"><r>解答: kunpeng920: 首款7nm ARM服务器处理器, 32/48/64核, 2.6GHz</r></font>

<p><strong>2.以下哪种型号的TaiShan服务器最适合海量存储业务?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>2280</li>
<li>5280</li>
<li>2480</li>
<li>X6000</li>
</ol>
<font color="#F08080"> <r>解答: 5280服务器最适合海量存储业务, 存储密集型:5290 (4u72盘) , 5280 (4u40盘) </r></font>

<p><strong>3.移动端应用测试推荐采用哪个华为云鲲鹏云服务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏ECS</li>
<li>鲲鹏云手机</li>
<li>鲲鹏CCI</li>
<li>鲲鹏CCE</li>
</ol>
<font color="#F08080"><r>解答: 移动端应用场景采用云手机 </r></font>

<p><strong>4.下列哪些芯片不是TaiShan服务器必有的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Hi 1812智能SSD控制芯片</li>
<li>Hi 1710智能管理芯片</li>
<li>Hi 1822智能融合网络芯片</li>
<li>Kunpeng 920</li>
</ol>
<font color="#F08080">  <r>解答: 泰山服务器中CPU是焊接在主机上的, 不能更换 </r></font>

<p><strong>5.下列选项中, 哪些是华为云鲲鹏生态提供给伙伴的权益和支持?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>华为提供鲲鹏人才培养:专业培训, 完善的鲲鹏工程师认证体系</li>
<li>华为提供鲲鹏原厂认证:专业团队, 专业工具, 1对1技术支持</li>
<li>华为鲲鹏云专业服务:客户业务系统一站式搬迁服务</li>
<li>华为鲲鹏严选馆:鲲鹏应用, 优先推荐, 快速商业变现</li>
</ol>
<font color="#F08080">  <r>解答: 全部都是华为云鲲鹏生态提供给伙伴的权益和支持</r></font>

<p><strong>6.以下哪些属于华为鲲鹏920芯片的特点?()(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>只支持GE/10GE网络</li>
<li>支持8通道DDR4控制器</li>
<li>集成最多64个自研核</li>
<li>支持CCIX接口</li>
</ol>
<font color="#F08080">  <r>解答: 支持2*100G RoCE v2, 支持25GE/50GE/100GE标准NIC</r></font>

<p><strong>7.以下哪项不是TaiShan 200机架服务器的优点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>超强算力: 高性能鲲鹏920处理器</li>
<li>分级存储: 支持大容量存储硬盘和ES3000 V5 NVMe SSD</li>
<li>全系列服务器支持液冷技术, 超强散热</li>
<li>大内存容量: 8通道内存技术, 可支持32个DDR内存插槽</li>
</ol>
<font color="#F08080"><r>解答: 全系列都支持风冷散热</r></font>

<p><strong>8.下列哪个不是鲲鹏云MS的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>自助申请, 一键式console操作, 易使用</li>
<li>支持CPU, 内存等资源的弹性扩展</li>
<li>包年包月灵活付费</li>
<li>灵活的网络配置</li>
</ol>
<font color="#F08080"> <r>解答: 不支持CPU, 内存等资源的弹性扩展, 可以横向扩展 (即单点场景和集群场景) </r></font>

<p><strong>9.鲲鹏计算产业生态中, 哪个不是华为已经或者即将要做开源的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>GaussD OLTP单机版</li>
<li>openEuler操作系统</li>
<li>MindSore AI框架</li>
<li>Kunpeng 920处理器架构</li>
</ol>
<font color="#F08080"> <r>解答: Kunpeng 920处理器架构不是</r></font>

<p><strong>10.中标麒麟操作系统采用强化的Linux内核, 分为哪些版本?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>安全版</li>
<li>桌面版</li>
<li>通用版</li>
<li>高级版</li>
</ol>
<font color="#F08080">  <r>解答: 中标麒麟是中标Linux和银河麒麟合并后发布的一款Linux发行版本, 中标麒麟操作系统采用强化的Linux内核, 分成桌面版, 通用版, 高级版和安全版等, 满足不同客户的要求, 已经广泛的使用在能源, 金融, 交通, 政府, 央企等行业领域</r></font>

<p><strong>11.可以通过修改/etc/sudoers文件为普通用户分配特权</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 该文件允许特定用户像root用户一样使用各种各样的命令, 而不需要root用户的密码</r></font>

<p><strong>12.以下哪些是openEuler的技术特性?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>支持块设备I/O跟踪</li>
<li>优化编辑器, 使用更加稳定</li>
<li>改进安装程序, 简化安装</li>
<li>多种安全机制, 保障系统安全</li>
</ol>
<font color="#F08080">  <r>解答: 以上全部是openEuler的技术特性</r></font>

<p><strong>13.一颗Kunpeng 920处理器集成了CPU, SAS控制器, 南桥, ROCE网卡四种功能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 高集成:一颗=4颗芯片</r></font>

<p><strong>14.在OpenEuler操作系统中, 如果要以YYYY-mm-DD HH:MM的格式输出当前时间, 下列选项中正确的是哪项?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Date + "%Y-%m-%d %H:%M"</li>
<li>Date</li>
<li>Date +%Y-%m-%d %H:%M:%S</li>
<li>Date –utc</li>
</ol>
<font color="#F08080"> <r>解答: 时间一定要有引号</r></font>

<p><strong>15.在openEuler中, timedatectl命令修改日期格式正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Timedatectl set-time DD-mm-YYYY</li>
<li>Timedatectl set-time YYYY-DD-mm</li>
<li>Timedatectl set-time YYYY-mm-DD</li>
<li>Timedatectl set-time mm-DD-YYYY</li>
</ol>
<font color="#F08080"><r>解答: Timedatectl set-time YYYY-mm-DD才是正确的时间格式</r></font>

<p><strong>16.下列关于TaiShan服务器的说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TaiShan服务器采用降额选件与冗余设计, 以提升服务器使用寿命</li>
<li>TaiShan X6000 的XA320计算节点支持水冷散热</li>
<li>TaiShan 2280 v2服务器均配置2颗64核鲲鹏920处理器</li>
<li>TaiShan X6000的XA320计算节点支持2路62核kunpeng 920处理器</li>
</ol>
<font color="#F08080"> <r>解答: 器件高质量, 降额选件与冗余设计
降额选件: 
1, 电信级的元器件供应商认证流程
2, 降额设计, 设计额定值远高于承受应力
冗余热插拔: 
1, PSU/FAN(电源/风扇)等易损部件冗余设计
2, PCIe部件支持热插拔(部分机型)
出厂前, 服务器经过硬件2000+项, 软件10000+项的严苛测试, 以及300+项的多个国家级地区的准入认证
持续改进的质量文化, 并将改进点融合到到下一个质量循环中</r></font>

<p><strong>17.使用迁移工具Porting Advisor时, 界面提示: “源代码路径错误”, 应该重新填写源码存放路径, 点击按钮重新分析</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: Porting Advisor是源代码路径错误, 应该重新填写源码存放路径, 点击按钮重新分析</r></font>

<p><strong>18.C/C++语言开发的源码在编译时, 以下哪些模块是不需要的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>加载器</li>
<li>编译器</li>
<li>汇编器</li>
<li>存储器</li>
</ol>
<font color="#F08080">  <r>解答: 编译时不需要 编译器 汇编器 存储器</r></font>

<p><strong>19.C/C++编写的应用程序从x86平台向华为鲲鹏平台迁移软件, SO动态链接库在源码编译时需要先替换</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 详情查看软件迁移的五个阶段</r></font>

<p><strong>20.关于容器描述, 以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>容器是一种轻量级, 可移植, 自包含的软件打包技术</li>
<li>容器为应用提供封装和隔离的功能</li>
<li>容器具备迁移功能, 可以把x86环境的容器实例直接迁移到鲲鹏服务器上</li>
<li>Docker"几乎"成为事实上的容器标准</li>
</ol>
<font color="#F08080">  <r>解答: 容器实例无法迁移</r></font>

<p><strong>21.使用Python语言开发的程序在迁移至鲲鹏处理器时, 开发者必须先将源码编译成pyc文件(字节码)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 解释型语言迁移时一般不需要重新编译</r></font>

<p><strong>22.用户在使用docker构建镜像时, docker镜像中必须有一个基础镜像</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确是必须有一个基础镜像</r></font>

<p><strong>23.在使用Porting Advisor工具对程序进行分析时, 针对程序中未提供下载的依赖so库, 以下说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Porting Advisor工具可以根据用户提供的依赖so库源码提供移植建议</li>
<li>Porting Advisor可以自动获取依赖so库源码</li>
<li>Porting Advisor可以自动扫描so库中的源码, 并给出分析移植建议</li>
<li>Porting Advisor可以分析依赖so库中的热点函数</li>
</ol>
<font color="#F08080"> <r>解答: 针对程序中未提供下载的依赖so库, Porting Advisor工具可以根据用户提供的依赖so库源码提供移植建议</r></font>

<p><strong>24.鲲鹏分析扫描工具Dependency Advisor的白名单是用来记录鲲鹏平台已经支持的so文件, 软件和支持状态的列表, 白名单可以在华为鲲鹏开发者论坛下载并更新</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 可以下载并更新</r></font>

<p><strong>25.容器实例支持直接跨不同指令集架构平台的迁移</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 容器实例无法迁移</r></font>

<p><strong>26.关于容器的迁移, 以下哪些说法是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>X86平台获取的镜像可以迁移到x86平台</li>
<li>跨平台的容器无法运行, 会出现格式不支持等错误</li>
<li>X86平台获取的镜像可以直接迁移到鲲鹏平台</li>
<li>鲲鹏平台获得的镜像可以直接迁移到x86平台</li>
</ol>
<font color="#F08080">  <r>解答: 容器迁移时, 实例无法迁移, 可通过相应架构的镜像重新生成容器</r></font>

<p><strong>27.通过鲲鹏分析扫描工具Dependency Adcisor不可以进行下列哪个操作?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>下载分析报告</li>
<li>查看已下载分析报告的记录</li>
<li>恢复已删除的分析报告</li>
<li>删除分析报告</li>
</ol>
<font color="#F08080"><r>解答: 不可以恢复已删除的分析报告</r></font>

<p><strong>28.鲲鹏处理器CPU指令长度为定长二进制指令</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 鲲鹏处理器CPU是定长二进制</r></font>

<p><strong>29.鲲鹏性能优化工具Tuning Kit只支持We模式或者CLI模式, 两种模式不能同时安装</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 只支持We模式或者CLI模式, 两种模式不能同时安装</r></font>

<p><strong>30.关于命令docker commit - “huawei.com” -m “redis images” f4603f1f918a t_arm64v8/centos:7,以下哪项描述是错误的:</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"f4603f1f918a":容器ID</li>
<li>该命令功能是根据镜像ID创建一个新的镜像</li>
<li>"huawei.com":提交镜像的作者</li>
<li>"t_arm64v8/centos:7":新生成的镜像名称</li>
</ol>
<font color="#F08080"> <r>解答: 这个命令的功能是提交镜像</r></font>

<p><strong>31.容器退出后会处于终止(exited)状态, 可以通过”docker ps -“查看相关容器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: docker ps -: 查看容器运行中和未运行的容器
</r></font>

<p><strong>32.C/C++代码在编译时遇到如下错误提示: “gcc: error: unrecognized command line option ‘-m64’ “以下说法不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>-m64是AMD的CPU编译64位程序的编译选项</li>
<li>编译选项错误</li>
<li>删除编译选项, 重新编译</li>
<li>在鲲鹏处理器上编译时, 可以将-m64修改为-mai=lp64重新编译</li>
</ol>
<font color="#F08080"><r>解答: 不是删除编译选项</r></font>

<p><strong>33.以下哪些属于从x86到鲲鹏平台的软件迁移的流程?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>技术分析>编译迁移>功能验证>性能调优</li>
<li>性能调优>技术分析>编译迁移>功能验证</li>
<li>功能验证>技术分析>编译迁移>性能调优</li>
<li>技术分析>功能验证>编译迁移>性能调优</li>
</ol>
<font color="#F08080"> <r>解答: 软件迁移的五个阶段:技术分析>编译迁移>功能验证>性能调优>规模商用</r></font>

<p><strong>34.鲲鹏分析扫描工具Dependency Advisor只能用于分析, 扫描需要迁移到TaiShan服务器的应用</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 只能就错了 分析工具应用场景:当客户需要将有源代码的软件移植到鲲鹏计算平台上时, 可使用该工具自动分析出软件依赖库在华为鲲鹏平台的兼容性, 用户源码需修改的规模, 并评估用户软件移植的工作量</r></font>

<p><strong>35.以下哪些跟软件构建和运行环境相关?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>OS</li>
<li>JDK/Python</li>
<li>编译器</li>
<li>驱动</li>
</ol>
<font color="#F08080">  <r>解答: 全部相关</r></font>

<p><strong>36.鲲鹏管理员只能将鲲鹏性能优化工具Tuning Kit安装在TaiShan服务器上</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 确实只能将鲲鹏性能优化工具Tuning Kit安装在TaiShan服务器上</r></font>

<p><strong>37.用户可以使用ping命令准确评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: ping命令评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</r></font>

<p><strong>38.测试执行过程中, 需要详细记录测试环境, 准备测试数据, 测试脚本等</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 确实要记录详细记录测试环境, 准备测试数据, 测试脚本</r></font>

<p><strong>39.可恢复性测试是性能测试常用方法之一</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 关键字 "之一" 是正确的</r></font>

<p><strong>40.下列选项中, 哪个Linux命令可以检测到CPU各核以及进程的CPU使用情况？</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Mpstat</li>
<li>Vmstat</li>
<li>Top</li>
<li>Ps</li>
</ol>
<font color="#F08080"><r>解答: top是最常用的Linux性能监测工具之一, 通过top工具可以监视进程和系统整体性能, 特别是CPU的时间分布  top,iostat,mpstat,pidstat,vmstat,sar全是监测工具</r></font>

<p><strong>41.Jmeter包括以下哪些组件?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>监听器 (Listener) </li>
<li>配置元件 (Config Element) </li>
<li>逻辑控制器 (Logic Controller) </li>
<li>取样器 (Sampler) </li>
<li>虚拟用户 (VUser) </li>
<li>线程组 (Thread Group) </li>
</ol>
<font color="#F08080">   <r>解答: 包括监听器 配置元件 逻辑控制器 取样器 虚拟用户 线程组等组件</r></font>

<p><strong>42.下列选项中, 哪个linux工具可以用于评估当前主机或虚拟机内存的性能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Perf</li>
<li>Vmstat</li>
<li>Lmench</li>
<li>Free</li>
</ol>
<font color="#F08080"> <r>解答: Free评估当前主机或虚拟机内存的性能</r></font>

<p><strong>43.弹性公网IP(Elastic IP, 简称EIP)提供独立的公网IP资源, 包括公网IP地址与公网出口带宽服务</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 确实包括公网IP地址与公网出口带宽服务</r></font>

<p><strong>44.在华为开源镜像站中, 提供如下哪些功能?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>为个人开发及持续构建场景提供maven, npm, pypi, nuget, php等语言类依赖下载服务</li>
<li>提供如apache, nginx, mysql, jenkins等40+种常用开发工具及库</li>
<li>提供开源组件搜索服务, 帮助用户更加方便的查找所需组件及其相关信息</li>
<li>提供centos, Uuntu, deian等多种主流开源操作系统包下载服务</li>
</ol>
<font color="#F08080">  <r>解答: 这些功能全都有</r></font>

<p><strong>45.在仅有x86物理服务器或者x86的弹性云服务器的情况下, 如何编译出ARM环境下执行的程序?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>修改权限编译</li>
<li>安装交叉编译环境, 通过交叉编译环境执行编译</li>
<li>使用x86下新版本的gcc编译</li>
<li>直接编译</li>
</ol>
<font color="#F08080">正确答案:   <r>解答: 交叉编译</r></font>

<p><strong>46.下列选项中, 不属于IMS私有镜像类型的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据盘镜像</li>
<li>整体镜像</li>
<li>整机镜像</li>
<li>系统盘镜像</li>
</ol>
<font color="#F08080"> <r>解答: 没有整体镜像这种镜像类型</r></font>

<p><strong>47.用户在使用华为云开源镜像服务时, 下列哪一项是只有当注册用户登陆华为云账户才可以享受的增值服务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>不限量下载组件, 镜像等</li>
<li>不限时下载组件镜像等</li>
<li>扩大私有依赖容量</li>
<li>CDN加速功能</li>
</ol>
<font color="#F08080"> <r>解答: CDN加速功能需要注册用户登录才能使用</r></font>

<p><strong>48.交叉编译可以理解为, 用户在x86平台上, 编写程序并编译成能运行在ARM平台的程序, 编译得到的程序在x86平台上是不能运行的, 必须放在ARM平台上才能运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 编译后必须放在ARM平台上才能运行</r></font>

<p><strong>49.当网络结构发生变化时, 静态GP无法实时自动调整网络设置以保障用户体验</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 正确, 正好与动态GP相反</r></font>

<p><strong>50.华为鲲鹏性能优化工具TuningKit支持通过火焰图查看热点函数及其调用栈</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 通过火焰图查看热点函数及其调用栈</r></font>

<p><strong>51.华为弹性云服务器属于以下哪种服务类别?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据库</li>
<li>计算</li>
<li>网络</li>
<li>存储</li>
</ol>
<font color="#F08080">正确答案: <r>解答: 华为云计算类服务:ECS, MS, DeH, 容器类, 无服务器类</r></font>

<p><strong>52.云计算领域正在兴起一场以docker为代表的容器技术革命, 以下哪些是容器技术所具有的优势?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>占用空间少, 资源开销小</li>
<li>相比虚拟机更加轻量, 秒级启动</li>
<li>镜像机制, 支持不可变架构 (immutale infrastructure) </li>
<li>方便易用, 使用门槛低</li>
</ol>
<font color="#F08080">  <r>解答: 全部都是容器技术的优势</r></font>

<p><strong>53.Docker是一个开源的应用容器引擎, 镜像时Docker容器的基石, 容器是镜像的运行实例, 实际操作中docker从镜像仓库获取镜像的命令是哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Docker fetch</li>
<li>Docker get</li>
<li>Docker search</li>
<li>Docker pull</li>
</ol>
<font color="#F08080"> <r>解答: Docker pull命令用来从仓库拉取镜像</r></font>

<p><strong>54.以下选项中, 哪项不是华为云对象存储服务OS的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>大带宽, 支撑大数据业务的性能要求</li>
<li>高可靠</li>
<li>按照64M每块, 分块存储数据</li>
<li>支持100KM同城多机房多活</li>
</ol>
<font color="#F08080"> <r>解答: 支持100KM同城多机房多活不是华为云对象存储服务OS的特点正常的都支持</r></font>

<p><strong>55.以下选项中, 哪些是鲲鹏服务器在大数据场景下的技术优势?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>内存带宽提升, 支持更高内存速率</li>
<li>多核算力, 提升了大数据任务的并发度</li>
<li>芯片内置加速器, 优化了压缩和序列化场景性能</li>
<li>指令优化, JDK对于ARM增加了指令流水的适配, 更好支撑了大数据执行效率</li>
</ol>
<font color="#F08080">  <r>解答: 全部是大数据场景下的技术优势</r></font>

<p><strong>56.以下选项中, 哪些属于鲲鹏软件栈发布的软件领域?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据库软件</li>
<li>操作系统</li>
<li>基础软件</li>
<li>应用软件</li>
</ol>
<font color="#F08080">  <r>解答: 全部属于鲲鹏软件栈发布的软件领域</r></font>

<p><strong>57.以下选项中, 哪些是大数据的计算模型?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>流处理</li>
<li>批处理</li>
<li>关系型数据库</li>
<li>即席分析查询</li>
</ol>
<font color="#F08080">  <r>解答: 关系型数据库是数据库类型之一</r></font>

<p><strong>58.以下选项中, 哪项不属于华为鲲鹏伙伴计划?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏智数伙伴计划</li>
<li>鲲鹏凌云伙伴计划</li>
<li>鲲鹏翱翔伙伴计划</li>
<li>鲲鹏展翅伙伴计划</li>
</ol>
<font color="#F08080"><r>解答: 鲲鹏伙伴计划是鲲鹏社区最全, 最新, 最官方的政策发布窗口, 影响辐射鲲鹏生态万千开发者, 合作伙伴; 目前有鲲鹏凌云伙伴计划, 鲲鹏展翅伙伴计划, 鲲鹏智数伙伴计划等三大生态伙伴计划分别面向不同类型的开发者和合作伙伴</r></font>

<p><strong>59.鲲鹏社区中, 以下哪个模块提供安装, 移植, 调优等指导文档?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏论坛</li>
<li>鲲鹏应用专区</li>
<li>鲲鹏文档中心</li>
<li>鲲鹏学院</li>
</ol>
<font color="#F08080"><r>解答: 鲲鹏文档中心</r></font>

<p><strong>60.Centos环境下, 修改了配置文件/etc/profile后, 可以执行source命令使之生效</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确是执行source命令使之后生效</r></font>

<p><strong>61.以下那些是华为鲲鹏云手机服务主要的应用场景?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>高性能计算</li>
<li>应用托管</li>
<li>移动安全办公</li>
<li>云游戏</li>
</ol>
<font color="#F08080">  <r>解答: 云手机不适用于高性能计算场景</r></font>


<p><strong>62.鲲鹏920芯片有以下几种物理核数型号?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>64核</li>
<li>48核</li>
<li>16核</li>
<li>34核</li>
</ol>
<font color="#F08080">  <r>解答: 鲲鹏920支持32, 48, 64核可选</r></font>


<p><strong>63.鲲鹏云MS硬件配置规格固定, 无法再扩充资源, 如CPU, 存储空间等</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 可以通过提交工单的方式申请扩大配额</r></font>

<p><strong>64.以下哪个选项不是iSula通用容器引擎的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>升级不中断业务</li>
<li>大幅提升容器性能</li>
<li>快速灵活</li>
<li>增强安全性和调测特性</li>
</ol>
<font color="#F08080">  <r></r></font>

<p><strong>65.关于华为云服务中的鲲鹏云手机服务的特性, 以下哪些描述是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>支持自研高性能GPU</li>
<li>Monox双OS共内核架构</li>
<li>兼容32/64位ARM原生指令</li>
<li>运行在华为自研芯片及硬件底座上</li>
</ol>
<font color="#F08080">  <r>解答: 全部特性都是</r></font>

<p><strong>66.openEuler是一款开源操作系统, 支持鲲鹏及其他多种处理器, 能充分释放计算芯片的潜能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">  <r>解答: openEuler的确支持鲲鹏及其他多种处理器</r></font>

<p><strong>67.以下哪种不是iSula的部署模式?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>应用容器</li>
<li>系统容器</li>
<li>安全容器</li>
<li>通用容器</li>
</ol>
<font color="#F08080">  <r>解答: 通用容器s不是iSula的部署模式</r></font>

<p><strong>68.下列哪项不是openeuler.org开源社区提供的功能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>openEuler操作系统帮助文档</li>
<li>openEuler源代码托管</li>
<li>博客</li>
<li>openEuler系统镜像下载</li>
</ol>
<font color="#F08080">  <r>解答: 博客不是</r></font>

<p><strong>69.Android手机应用在鲲鹏云手机上运行仍需要指令翻译器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: Android手机应用也是基于鲲鹏架构开发的, 所以不需要指令翻译器</r></font>

<p><strong>70.openEuler-20.03-LTS中默认的文件系统是ext4, 同时也兼容ext3/2和XFS文件系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 确实默认的文件系统是ext4, 同时也兼容ext3/2和XFS文件系统</r></font>

<p><strong>71.TaiShan V2服务器最多支持多少个计算内核?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>48</li>
<li>32</li>
<li>128</li>
<li>64</li>
</ol>
<font color="#F08080"><r>解答: 鲲鹏920最高支持64核, 2*64=128</r></font>

<p><strong>72.鲲鹏计算产业目标是建立完善的开发者和产业人才体系, 通过产业联盟, 开源社区, OpenLa, 行业标准组织一起完善产业链, 打通行业全栈, 使鲲鹏生态成为开发者和用户的首选</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">  <r>解答: 这是对的</r></font>

<p><strong>73.TaiShan 200服务器2280型与X86服务器RH2288H V5具有相同的内存和硬盘兼容性</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: TaiShan 200服务器2280型与X86服务器RH2288H 不相同</r></font>

<p><strong>74.鲲鹏分析扫描工具Dependency Advisor只能部署在鲲鹏平台上</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 该工具安装在X86服务器上, 当客户有软件需要移植到TaiShan服务器上时, 可先用该工具分析可移植性和移植投入该工具解决了客户软件移植评估分析过程中人工分析投入大, 准确率低, 整体效率低下的痛点, 通过该工具能够自动分析并输出指导报告</r></font>

<p><strong>75.以下哪些属于Dockerfile的指令?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>CMD</li>
<li>FROM</li>
<li>RUN</li>
<li>EXPOSE</li>
</ol>
<font color="#F08080">  <r>解答: CMD,FROM,RUN,EXPOSE都是Dockerfile的指令</r></font>

<p><strong>76.创建源码分析任务时, 设置编译器版本的目的是什么?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>用于检查源码中使用的架构相关的编译器宏, uiltin函数, attriute函数, 用户自定义宏等, 确定需要移植的源码及源文件</li>
<li>用于解析用户软件的Makefile文件, 整理出用户软件目标二进制文件依赖的源文件集合和编译时依赖的so文件名, 使用的编译选项, 宏定义和变量</li>
<li>用于区分不同的源码使用的编译器版本</li>
<li>用于确定x86与鲲鹏平台相异的编译器宏, 编译选项, uiltin函数, attriute函数等列表</li>
</ol>
<font color="#F08080">  <r>解答: 全部都是目的</r></font>

<p><strong>77.华为鲲鹏代码迁移工具支持CLI和We两种访问方式, 两种访问方式必须分开部署</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 正确, 不能同时部署两种方式</r></font>

<p><strong>78.关于华为鲲鹏迁移工具分析报告提供的依赖库so文件的操作建议, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>如果依赖库so文件已经过鲲鹏平台验证, 且已有二进制安装包, 则用户可以直接将工具提供的开源版本依赖库安装包下载在本地, 然后上传至目标服务器进行安装使用</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 但无二进制安装包, 则需要用户下载依赖库源码, 然后上传至目标服务器进行编译安装</li>
<li>如果迁移工具不提供该库下载, 或该库未开源, 需要用户自行替换为同类功能库</li>
<li>目前不存在鲲鹏平台无法识别的依赖库so文件</li>
</ol>
<font color="#F08080"> <r>解答: so依赖库白名单用来记录鲲鹏平台已经支持的SO文件列表及支持状态 (二进制安装或者源码编译安装) , 也在不断更新</r></font>

<p><strong>79.以下关于docker容器性能的描述, 不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>直接基于物理机部署的容器, 没有Hypervisor层开销, 性能基本接近物理机</li>
<li>Docker由于轻量, 所以拉起速度可达秒级</li>
<li>Docker共享宿主机内核, 系统级虚拟化, 占用资源少</li>
<li>Docker具有完整的GuestOS</li>
</ol>
<font color="#F08080"> <r>解答: 虚拟机有完整的GuestOS</r></font>

<p><strong>80.若需要使用华为鲲鹏920内置加速引擎, 则必须使用openssl 1.1.la及以上版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确必须使用openssl 1.1.la及以上版本</r></font>

<p><strong>81.Porting Advisor移植工具源码分析结果中提供针对每个待移植文件的源码修改意见, 但仅提供修改意见, 不会修改用户的源代码</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: Porting Advisor不会修改用户的源代码</r></font>

<p><strong>82.关于使用源码方式安装加速引擎软件, 以下说法正确的有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>编译安装zli加速卡</li>
<li>安装openssl 1.1.la或以上版本</li>
<li>编译安装Warpdrive驱动开发库</li>
<li>编译安装加速器OpenSSL引擎</li>
<li>在下载好的源码目录下, 使用make命令编译加速器</li>
<li>安装内核开发包kernel-devel</li>
</ol>
<font color="#F08080">   <r>解答: 全部都正确</r></font>

<p><strong>83.华为鲲鹏代码迁移工具能够针对以下哪些场景提供精准的迁移指导和建议?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>对于汇编指令的移植优化, 由于汇编指令在x86和鲲鹏平台上完全不同, 工具会直接提供ARM版本的相应指令进行替换</li>
<li>对于一些特殊的指令用法差异, 工具也能精准识别出来, 列如_sync_fetch_and_add函数读取的变量, 会涉及到原子操作和锁操作, 必须按变量长度进行字节对齐, 避免触发异常, 导致程序错误</li>
<li>对于已经有编译好可用的依赖库文件, 工具提供开源版本的下载链接提供用户直接使用</li>
<li>对于乘法函数, 工具能够自动识别并推荐使用ARM平台支持的NEON向量乘法指令进行替换</li>
</ol>
<font color="#F08080">  <r>解答: </r></font>

<p><strong>84.Instruction Set Architecture (指令集架构) 是软件和硬件的接口</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确软件和硬件的接口</r></font>

<p><strong>85.在将软件迁移至鲲鹏处理器时, 需要在声明char类型的变量时增加关键字signed或unsigned显示指定有符号或无符号类型</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: char类型的变量时增加关键字signed或unsigned的确显示指定有符号或无符号类型</r></font>

<p><strong>86.关于华为鲲鹏应用迁移的描述, 以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Openla提供生态认证, 帮助ISV合作伙伴推广生态</li>
<li>Openla不仅提供线上服务器资源, 同时还提供编译构建等持续构建能力, 以及安全/兼容性/稳定性/功耗/性能等测试套</li>
<li>使用openla线上资源作为迁移环境, 本地办公环境需要能够连接公网</li>
<li>如果迁移的代码包含开源软件源码, 服务器环境需要能够连接公网</li>
</ol>
<font color="#F08080">  <r>解答: 全部都是华为鲲鹏应用迁移的描述</r></font>

<p><strong>87.C/C++语言属于编译型语言, 其编译后得到的可执行程序执行时依赖的指令是与CPU架构不相关的, 因此此类应用程序不需要移植</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 像Java, Python等解释型语言编译后得到的可执行程序执行时依赖的指令是与CPU架构不相关的, 因此此类应用程序不需要移植</r></font>

<p><strong>88.Docker仓库可以用来保存容器镜像, 并且可以保存容器镜像的多个版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 支持保存容器镜像的多个版本</r></font>

<p><strong>89.当鲲鹏管理员使用鲲鹏性能优化工具Tuning Kit新建系统配置全景分析任务时, 可以设置以下哪些采样类型?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>运行环境</li>
<li>上下文切换</li>
<li>软件</li>
<li>硬件</li>
</ol>
<font color="#F08080"><r>解答: 系统配置全景分析:通过采集整个系统的软硬件配置信息, 并分析配置是否合理针对不合理的项根据当前已有经验提供优化建议</r></font>

<p><strong>90.当鲲鹏管理员使用鲲鹏性能优化工具Tuning Kit新建函数分析任务时, 可以选择设置以下哪种分析任务类型?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>C/C++程序</li>
<li>汇编程序</li>
<li>Java Mixed-Mode</li>
<li>Python</li>
</ol>
<font color="#F08080"><r>解答: 函数级性能分析
C/C++程序分析:支持分析C/C++程序代码, 找出性能瓶颈点, 给出对应的热点函数及其源码和汇编指令; 支持通过火焰图展示函数的调用关系, 给出优化路径
JAVA Mixed-Mode分析:支持分析JAVA程序代码, 找出性能瓶颈点, 给出对应的热点函数; 支持通过火焰图展示函数的调用关系, 给出优化路径</r></font>

<p><strong>91.鲲鹏性能优化工具Tuning Kit可以支持以下哪种功能特性?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>函数级性能分析</li>
<li>代码片段级性能分析</li>
<li>进程/线程级性能分析</li>
<li>系统级性能分析</li>
</ol>
<font color="#F08080">  <r>解答: 全部特性都是</r></font>

<p><strong>92.在默认的配置下, 使用Sysench测试MySQL性能时, 下面有哪些不是输出结果的指示值?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>压测使用的线程数</li>
<li>99%的时延</li>
<li>QPS</li>
<li>TPS</li>
</ol>
<font color="#F08080"> <r>解答: 前95%的请求的最大响应时间</r></font>

<p><strong>93.鲲鹏性能优化工具Tuning Kit的函数分析结果的函数页面不包括以下哪个区域?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>火焰图</li>
<li>源代码</li>
<li>函数分析详情</li>
<li>汇编代码</li>
</ol>
<font color="#F08080"> <r>解答: 不包括火焰图</r></font>

<p><strong>94.用户在测试MySQL/PostgreSQL过程中, 以下哪些选项是需要测试的性能指标?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据库应用进程/线程的运行状态</li>
<li>内存占用</li>
<li>网络带宽占用率</li>
<li>UDP端口的包速率</li>
<li>磁盘利用率</li>
<li>CPU使用情况</li>
</ol>
<font color="#F08080">   <r>解答: 全部都是需要测试的性能指标</r></font>

<p><strong>95.鲲鹏性能优化工具Tuning Kit不支持在分析任务执行过程中升级</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 不支持在分析任务执行过程中升级</r></font>

<p><strong>96.华为开源镜像与maven中央仓库, CentOS等多家海外官方源站进行合作和认证, 为用户提供可信的组件下载来源</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确为用户提供可信的组件下载来源</r></font>

<p><strong>97.使用华为开源镜像站下载组件或者镜像, 有如下哪些优势?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>华为云开源镜像与官方社区合作, 保障组件安全, 故能避免不必要的安全风险</li>
<li>解决由于访问国外网络导致的效率问题</li>
<li>获取华为公司特有的SDK, 组件资源等</li>
<li>免费使用</li>
</ol>
<font color="#F08080">  <r>解答: 全部都是优势</r></font>

<p><strong>98.下列关于私有IP说法正确的是?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>私有IP的路由信息不能对外散播</li>
<li>使用私用IP作为来源或目的地址的封包, 不能透过Internet来转送</li>
<li> 关于私有IP的参考记录 (如DNS) , 可用于外部网络使用</li>
<li>私有IP的路由信息可以对外散播</li>
</ol>
<font color="#F08080">  <r>解答: 私有IP的路由信息不能对外散播和私有IP的路由信息可以对外散播</r></font>

<p><strong>99.私有镜像不能通过外部镜像文件创建</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答:私有镜像可以通过外部镜像文件创建</r></font>

<p><strong>100.公共镜像是由云平台官方提供的标准操作系统的公共基础镜像, 对所有用户可见</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确对所有用户可见</r></font>

<p><strong>101.EulerOS是适用于ARM64和x86机器的性能最好的操作系统之一, 能够运行在高度可扩展的多核系统上, 支持最严苛的工作负载</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确能够运行在高度可扩展的多核系统上</r></font>

<p><strong>102.以下哪中语言的源代码文件不能使用华为鲲鹏代码迁移工具Porting Advisor进行迁移分析?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>C</li>
<li>汇编</li>
<li>C++</li>
<li>Java</li>
</ol>
<font color="#F08080"> <r>解答: 鲲鹏中Java是解释型语言</r></font>


<p><strong>103.使用华为鲲鹏代码迁移工具Porting Advisor迁移软件时, 迁移工具可以生成兼容华为鲲鹏平台的代码</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 代码迁移工具提供迁移建议, 不提供自动迁移功能</r></font>

<p><strong>104.下列选项中, 哪些场景适合使用HPC解决方案?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>天气预测</li>
<li>基因测序</li>
<li>流体动力学</li>
<li>环境预测</li>
</ol>
<font color="#F08080">  <r>解答: 天气预测, 基因测序, 流体动力学, 环境预测都适合使用HPC解决方案</r></font>

<p><strong>105.下列选项中, 哪些是金融行业的鲲鹏替代应用?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>核心应用</li>
<li>经营分析</li>
<li>互联网银行</li>
<li>办公支撑</li>
</ol>
<font color="#F08080">  <r>解答: 核心应用, 经营分析, 互联网银行, 办公支撑都是金融行业的鲲鹏替代应用</r></font>


<p><strong>106.下列选项中, 哪项是Spark性能比Hadoop较为领先的原因?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Spark是一个分布式数据基础设施</li>
<li>Spark通过内存中的DAG有向无环图, 减少落盘计算</li>
<li>Spark是一个批处理框架</li>
<li>Spark是一个流处理框架</li>
</ol>
<font color="#F08080"> <r>解答: Spark性能比Hadoop较为领先的原因是Spark通过内存中的DAG有向无环图, 减少落盘计算</r></font>


<p><strong>107.以下选项中, 哪些是华为鲲鹏伙伴计划包含的公共权益?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>业务支持</li>
<li>营销支持</li>
<li>技术支持</li>
<li>培训支持</li>
</ol>
<font color="#F08080">  <r>解答: 业务支持, 营销支持, 技术支持, 培训支持都是华为鲲鹏伙伴计划包含的公共权益</r></font>

<p><strong>108.鲲鹏社区提供基于华为鲲鹏处理器和系列化芯片构筑面向政府, 金融和运营商等行业客户的全栈IT基础设施解决方案</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 鲲鹏社区不提供上述的服务由华为云提供</r></font>


<p><strong>109.下列用户信息文件描述中错误的是哪项?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>/etc/group:组信息文件</li>
<li>/etc/defaut/useradd:定义默认设置文件</li>
<li>/ect/shadow:用户密码明文文件</li>
<li>/ect/passwd:用户账号信息文件</li>
</ol>
<font color="#F08080"><r>解答: /etc/shadow 文件, 用于存储 Linux 系统中用户的密码信息 (密文) , 又称为"影子文件"</r></font>


<p><strong>110.openEuler-20.03-LTS-aarch64操作系统可以安装在哪些服务器上?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>RH5885H V5</li>
<li>TaiShan X6000</li>
<li>TaiShan 2280</li>
<li>RH2288H V5</li>
</ol>
<font color="#F08080"><r>解答: AD是x86架构服务器</r></font>

<p><strong>111.下列选项中, 哪些是ARM处理器的应用领域?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>移动终端领域</li>
<li>E级超算系统领域</li>
<li>超大型云数据中心领域</li>
<li>企业应用领域</li>
</ol>
<font color="#F08080">  <r>解答: 这些领域都可以用ARM处理器</r></font>


<p><strong>112.CentOS是一个基于哪种操作系统代码开发, 并依照开放源代码规定发布的源代码所编译而成的企业级Linux版本?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>SLES</li>
<li>Redhat Enterprise Linux</li>
<li>EulerOS</li>
<li>Deian</li>
</ol>
<font color="#F08080">  <r>解答: CentOS来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成, CentOS不包含封闭源代码软件CentOS是RHEL源码再编译的产物, 而且在RHEL的基础上修正了不少已知的ug, 相对于其他Linux发行版, 其稳定性值得信赖</r></font>

<p><strong>113.下列选项中, 关于ARM芯片相比于x86架构芯片的优势, 说法正确的有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>单位芯片面积算力更强</li>
<li>ARM芯片工艺相对x86更先进</li>
<li>相同的芯片尺寸下, ARM的核数比x86的多</li>
<li>众核架构更符合分布式业务的需求</li>
</ol>
<font color="#F08080">  <r>解答: ARM芯片工艺相对x86省电不能说更先进 
</r></font>

<p><strong>114.华为拥有ARM V8架构的永久授权</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 华为的确拥有ARM V8架构的永久授权</r></font>

<p><strong>115.openEuler系统中, 本地用户 (自定义用户) 的UID起始编号是多少?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>500</li>
<li>0</li>
<li>1000</li>
<li>1001</li>
</ol>
<font color="#F08080"><r>解答: UID起始编号1000</r></font>

<p><strong>116.openEluer支持的A-Tune是一种通过非侵入式系统画像的负载感知方法, 识别业务并匹配最佳资源模型, 实时响应业务特征变化的AI自动调优系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确是openEluer支持的A-Tune是一种通过非侵入式系统画像的负载感知方法, 识别业务并匹配最佳资源模型, 实时响应业务特征变化的AI自动调优系统</r></font>


<p><strong>117.ISV合作伙伴基于华为鲲鹏云服务在华为云云市场做产品或解决方案发布前, 需要先加入鲲鹏凌云伙伴计划并通过鲲鹏云服务兼容性认证</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确先加入鲲鹏凌云伙伴计划并通过鲲鹏云服务兼容性认证</r></font>

<p><strong>118.下列哪个是华为鲲鹏生态兼容的非国产操作系统?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Uuntu</li>
<li>Deepin</li>
<li>Kylin</li>
<li>openEuler</li>
</ol>
<font color="#F08080"> <r>解答: Uuntu Linux是由南非人马克·沙特尔沃思(Mark Shuttleworth)创办的基于Deian Linux的操作系统, 于2004年10月公布Uuntu的第一个版本(Uuntu 4.10"Warty Warthog")Uuntu适用于笔记本电脑, 桌面电脑和服务器, 特别是为桌面用户提供尽善尽美的使用体验</r></font>

<p><strong>119.TaiShan 5280服务器是4U2路存储型服务器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 5280服务器确实是4U2路存储型服务器</r></font>


<p><strong>120.下列选项中, 哪项不是华为云提供的鲲鹏云服务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏容器服务</li>
<li>鲲鹏SQL Server服务</li>
<li>鲲鹏应用运维服务</li>
<li>鲲鹏云硬盘服务</li>
</ol>
<font color="#F08080"> <r>解答: 鲲鹏SQL Server服务不是华为云提供的鲲鹏云服务</r></font>


<p><strong>121.关于GPL的描述正确的有哪些?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>GPL允许用户任意复制, 传递, 修改及再次发布遵从GPL的软件</li>
<li>遵从GPL的软件不允许收费</li>
<li>基于自由软件修改再次发布的软件仍需要遵循GPL</li>
<li>GPL是自由软件的通行许可证</li>
</ol>
<font color="#F08080">  <r>解答: GPL (通用性公开许可证, 开源协议) :
1, 自由软件的通用许可证
2, 允许用户任意复制, 传递, 修改及再发布
3, 基于自由软件修改再次发布的软件, 仍需遵循GPL</r></font>

<p><strong>122.关于华为鲲鹏迁移工具分析报告提供的依赖库so文件的操作建议, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>如果迁移工具不提供该库下载, 或该库未开源, 需要用户自行替换为同类功能库</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 但无二进制安装包, 则需要用户下载依赖库源码, 然后上传至目标服务器进行编译安装</li>
<li>如果依赖库so文件已经过鲲鹏平台验证, 且已有二进制安装包, 则用户可以直接将工具提供的开源版本依赖库安装包下载在本地, 然后上传至目标服务器进行安装使用</li>
<li>目前不存在鲲鹏平台无法识别的依赖库so文件</li>
</ol>
<font color="#F08080"> <r>解答: 目前还是存在鲲鹏平台无法识别的依赖库so文件</r></font>

<p><strong>123.使用C/C++/Go语言开发的源码, 必须要编译后才能运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: C/C++/Go语言属于编译型语言</r></font>

<p><strong>124.若需要使用华为鲲鹏920内置的加速引擎, 则必须使用openssl 1.1.la及以上版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">  <r>解答: 必须使用openssl 1.1.la及以上版本</r></font>

<p><strong>125.关于迁移语言开发的开源软件, 以下选项不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>将x86平台下的可执行文件部署到基于鲲鹏的虚拟机可以直接执行</li>
<li>使用makefile编译源码, 生成可执行程序</li>
<li>编译前, 要使用开源软件源码中的cmake或autoconfig脚本生成makefile</li>
<li>可以通过开源软件中的readme了解外部依赖库</li>
</ol>
<font color="#F08080"> <r>解答: C/C++属于解释型语言, 跨平台迁移时需要重新编译</r></font>

<p><strong>126.鲲鹏分析扫描工具Dependency Advisor支持以下哪种功能特性?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>向用户提供软件移植报告, 提供移植工作量评估</li>
<li>检查用户Java类软件包(JAR, WAR)中包含的so依赖库和二进制文件, 并评估上述文件的可移植性</li>
<li>检查用户C/C++软件构建工程文件, 并评估该文件的可移植性</li>
<li>检查用户C/C++软件源码, 并评估软件源文件的可移植性</li>
</ol>
<font color="#F08080">  <r>解答: 全部都有</r></font>

<p><strong>127.鲲鹏分析是用来记录鲲鹏平台已经支持的so文件, 软件和支持状态的列表, 白名单可以在华为鲲鹏开发者论坛下载并更新</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: so文件, 软件和支持状态的列表, 白名单确实可以在华为鲲鹏开发者论坛下载并更</r></font>

<p><strong>128.以下哪项不属于容器的状态?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>paused</li>
<li>created</li>
<li>exited</li>
<li>deleted</li>
</ol>
<font color="#F08080"><r>解答: exited不属于容器的状态</r></font>

<p><strong>129.以下哪项是华为鲲鹏代码迁移工具能够实现的功能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>给出性能优化建议</li>
<li>修改用户的源代码</li>
<li>分析软件源代码, 提供应用移植指导 </li>
<li>执行应用的编译安装</li>
</ol>
<font color="#F08080"><r>解答: 分析软件源代码, 提供应用移植指导是华为鲲鹏代码迁移工具能够实现的功能</r></font>


<p><strong>130.鲲鹏分析扫描工具Dependency Advisor可以同时安装We模式和CLI模式</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 只支持We模式或者CLI模式, 两种模式不能同时安装</r></font>


<p><strong>131.关于镜像和容器的描述, 以下哪项是不正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>容器不具有root权限, 因此不存在从容器上攻击主机和主机上其他容器的可能</li>
<li>容器是由镜像实例化而来的</li>
<li>容器是动态的, 可用容器来运行应用</li>
<li>镜像是只读的, 可以理解为静态文件</li>
</ol>
<font color="#F08080"> <r>解答: 容器具有root权限</r></font>

<p><strong>132.使用华为鲲鹏代码迁移工具对源码进行扫描分析时, 需要进行哪些方面的检查和分析?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>对比输入的{so文件名}列表和so依赖库白名单</li>
<li>检查x86平台和鲲鹏平台相异的编译器宏, 编译选项, uildin函数, attriute函数等列表</li>
<li>扫描分析用户软件目标二进制文件依赖的源文件集合</li>
<li>检查Makefile中的编译链接</li>
</ol>
<font color="#F08080">  <r>解答: 全部都要检查</r></font>

<p><strong>133.Docker仓库可以用来保存容器镜像, 并且可以保存容器镜像的多个版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 支持保存容器镜像的多个版本</r></font>

<p><strong>134.下列选项中, 哪个不属于redis的主要性能指标命令?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>get</li>
<li>lpush</li>
<li>lpull</li>
<li>set</li>
</ol>
<font color="#F08080"><r>解答: lpull不属于redis的主要性能指标命令</r></font>

<p><strong>135.用户可以使用哪些工具监测CPU使用情况?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>top</li>
<li>iostat</li>
<li>mpstat</li>
<li>pidstat</li>
<li>vmstat</li>
<li>sar</li>
</ol>
<font color="#F08080">   <r>解答: top,iostat,mpstat,pidstat,vmstat,sar全是监测工具</r></font>

<p><strong>136.鲲鹏管理员可以将鲲鹏性能优化工具Tuning Kit安装在以下哪些操作系统上?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>RedHat 7.0</li>
<li>中标麒麟V7R6</li>
<li>CentOS 7.6</li>
<li>EulerOS 2.8</li>
</ol>
<font color="#F08080"><r>解答: CentOS EulerOS</r></font>

<p><strong>137.鲲鹏性能优化工具Tuning Kit只支持We模式或者CLI模式, 两种模式不能同时安装</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 两种模式不能同时安装</r></font>


<p><strong>138.鲲鹏管理员使用安装鲲鹏性能优化工具Tuning Kit时, 端口号可以配置为8000</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 端口号可以配置为8000</r></font>


<p><strong>139.用户可以通过Redis自带的redis-speed工具测试lpush命令执行的性能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 不可以</r></font>


<p><strong>140.私有镜像通过以下哪个功能可以实现本地业务部署和公有云业务部署的统一化持久化?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>镜像共享</li>
<li>镜像复制</li>
<li>镜像复制</li>
<li>镜像导出</li>
</ol>
<font color="#F08080">  <r>解答: 镜像导出开源实现本地业务部署和公有云业务部署的统一化持久化</r></font>

<p><strong>141.华为开源镜像站中的镜像必须通过网络代理才能下载, 无法直接下载到本地</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 可以直接下载</r></font>


<p><strong>142.可以根据设定的寻址路由协议实现自动优化网络结构, 以保持客户使用的网络持续稳定, 高效这句话是关于以下哪项的描述?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>全动态GP</li>
<li>静态GP</li>
<li>静态GP</li>
<li>独享带宽</li>
</ol>
<font color="#F08080"> <r>解答: 全动态GP</r></font>


<p><strong>143.华为云开源镜像仓库中的依赖包更新周期间隔多久?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>每月更新一次</li>
<li>每周更新一次</li>
<li>每年更新一次</li>
<li>每天会随官方发布的版本进行更新</li>
</ol>
<font color="#F08080"> <r>解答: 每天会随官方发布的版本进行更新</r></font>

<p><strong>144.系统盘镜像可以用来创建相同系统盘配置的云服务器, 且可以多次重复使用</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确可以多次重复使用</r></font>

<p><strong>145.当网络结构发生变化时, 静态GP无法实现自动调整网络设置以保障用户体验</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 网络结构比较复杂时建议选择动态GP</r></font>

<p><strong>146.下列关于容器镜像服务SWR, 说法错误的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>使用docker tag命令给要上传的镜像打标签</li>
<li>使用docker push命令上传镜像</li>
<li>可以根据需要设置镜像的属性</li>
<li>暂未提供私有镜像库</li>
</ol>
<font color="#F08080"> <r>解答: 已经提供私有镜像库
<r>容器镜像服务(Software Repository for Container, 简称SWR)是一种支持镜像全生命周期管理的服务, 提供简单易用, 安全可靠的镜像管理功能, 包括镜像的上传, 下载, 删除等SWR提供私有镜像库, 并支持细粒度的权限管理, 可以为不同用户分配相应的访问权限(读取, 编辑, 管理)SWR还支持容器镜像版本更新自动触发部署您只需要为镜像设置一个触发器, 通过触发器, 可以在每次镜像版本更新时, 自动更新云容器引擎(CCE)中使用该镜像部署的应用</r></r></font>

<p><strong>147.华为云弹性云服务器的CPU架构有哪几种?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>CentOS</li>
<li>x86架构</li>
<li>鲲鹏架构</li>
<li>AMD</li>
</ol>
<font color="#F08080"><r>解答: x86和AMD</r></font>

<p><strong>148.华为鲲鹏分析扫描工具Dependency Advisor, 支持分析以下哪些类型的文件?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>源代码</li>
<li>未安装Dependency Advisor工具的服务器上的源代码</li>
<li>已安装的软件</li>
<li>软件安装包</li>
</ol>
<font color="#F08080">  <r>解答: 分析扫描工具功能特性:
检查用户软件资源包 (RPM, DE, TAR, ZIP, GZIP文件) 中包含的SO (Shared Oject) 依赖库和可执行文件, 并评估SO依赖库和可执行文件的可移植性和在安装包中的相对路径
检查用户Java类软件包 (JAR, WAR) 中包含的SO依赖库和二进制文件, 并评估上述文件的可移植性
检查指定的用户软件安装路径下的SO依赖库和可执行文件, 并评估SO依赖库和可执行文件的可移植性
检查用户C/C++软件构建工程文件, 并评估该文件的可移植性
检查用户C/C++软件源码, 并评估软件源文件的可移植性
向用户提供软件移植报告, 提供移植工作量评估
支持命令行方式和We两种工作模式</r></font>

<p><strong>149.Docker是目前容器技术领域最热门的开源项目, 下面哪项不属于Docker的基本概念?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Volume</li>
<li>Repository</li>
<li>Image</li>
<li>Deployment</li>
</ol>
<font color="#F08080"> <r>解答: Volume
你想把docker容器和你的数据分开的时候, 你就要挂载一个本地文件夹到docker窗口中这肯定是基本概念了
Repository
docker镜像的存储分发位置, 可以是公有的和私有的, 公有的就是你经常用docker pull xxx, 不带前缀访问的docker hu
Image:镜像
docker pull xxx[:tag] 就是从docker仓库中下载一个[最新的]xxx的镜像
Deployment
部署, 你可以把应用部署在docker中,但是这不是docker的基本概念这是运维的概念, docker是平台</r></font>


<p><strong>150.根据对计算节点间信息依赖度的不同, 可将HPC解决方案的应用场景分为紧耦合型和松耦合性</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确分为紧耦合型和松耦合性</r></font>


<p><strong>151.动漫渲染这种数据轻量松耦合场景适合采用HPC解决方案</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确可以数据轻量松耦合场景适合采用HPC解决方案</r></font>

<p><strong>152.在使用man查看一个命令的帮助信息时, 下列说法正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>在命令使用格式中, [ ]表示的是必选内容</li>
<li>在命令使用格式中, …表示的是同类内容可以有多个</li>
<li>通常情况下, --help比man查看的命令帮助信息更多</li>
<li>在命令使用格式中, <>表示的是可选内容</li>
</ol>
<font color="#F08080"> <r>解答: <>表示必选内容</r></font>

<p><strong>153.TaiShan 5280存储型服务器支持哪些RAID类型?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>RAID5</li>
<li>RAID1</li>
<li>RAID0</li>
<li>RAID10</li>
</ol>
<font color="#F08080">  <r>解答: 全部都有</r></font>

<p><strong>154.华为鲲鹏计算加速型弹性云服务器主要应用在以下哪个场景?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>高性能计算</li>
<li>大数据</li>
<li>AI训练和推理</li>
<li>通用计算</li>
</ol>
<font color="#F08080"><r>解答: 加速型弹性云服务器主要用于AI训练和推理</r></font>


<p><strong>155.华为鲲鹏弹性云服务器不包含以下哪种类型?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通用型</li>
<li>网络密集型</li>
<li>内存密集型</li>
<li>存储密集型</li>
</ol>
<font color="#F08080"> <r>解答: 通用型, 存储密集型, 内存密集型, 计算加速型</r></font>


<p><strong>156.TaiShan 2280服务器适用于低功耗场景</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: TaiShan2280:2U2路均衡型</r></font>

<p><strong>157.华为作为鲲鹏计算产业的一员, 掌握Arm64处理器核, 微架构及芯片设计技术的关键技术, 拥有ARM V8永久架构授权, 并在此基础上发展Kunpeng系列处理器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 是正确的</r></font>

<p><strong>158.华为鲲鹏云服务可提供KC1型ESC和KS1型MS</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 鲲鹏云服务可提供KC1型ESC和KS1型MS</r></font>

<p><strong>159.下列选项中, 关于华为鲲鹏920的特点描述正确的有哪些?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>支持8内存通道, 带宽高于Intel Skylake (V5) 的6通道</li>
<li>性能可匹配Inter Skylake (V5) 高端处理器型号</li>
<li>相比同等性能的Intel处理器, 功耗更低</li>
<li>CPU支持2个100GE网口, 支持RoCE特性</li>
</ol>
<font color="#F08080">  <r>解答: 以前全部都是</r></font>

<p><strong>160.加速引擎是TaiShan 200服务器基于Kunpeng 920芯片提供的硬件加速解决方案, 可以显著降低处理消耗, 提高处理器效率</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 的确可以显著降低处理消耗, 提高处理器效率</r></font>

<p><strong>161.以下关于代码迁移的说法, 哪项是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>使用Porting Advisor工具处理解释型语言的迁移成本低于编译型语言</li>
<li>安装虚拟机, 可以屏蔽运行平台的差异, 所以安装鲲鹏可使用的jdk之后, 其他解释型语言都无需做迁移分析</li>
<li>c语言程序通过编译生成的可执行文件可以通过Porting Advisor进行迁移分析</li>
<li>使用Porting Advisor工具, 可下载替换经过平台验证的依赖so库</li>
</ol>
<font color="#F08080"> <r>解答: 使用Porting Advisor工具, 可下载替换经过平台验证的依赖so库</r></font>

<p><strong>162.用户在使用鲲鹏分析扫描工具Dependency Advisor时, 需要将待分析的软件包/源代码上传到以下哪个路径?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>/etc/depadv</li>
<li>/opt/depadv</li>
<li>/etc/depadv/depadmin</li>
<li>/opt/depadv/depadmin</li>
</ol>
<font color="#F08080"> <r>解答: /opt/depadv/depadmin</r></font>


<p><strong>163.用户在使用鲲鹏分析扫描工具Dependency Advisor时, 如果编译器版本为GCC5.1, 那么可以使用以下哪些构建工具?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>automake</li>
<li>make</li>
<li>wepack</li>
<li>cmake</li>
</ol>
<font color="#F08080">  <r>解答: 可查看工具手册</r></font>


<p><strong>164.用户在使用鲲鹏分析扫描工具Dependency Advisor时, 可以选以下哪些版本的GCC编译器?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>GCC 6.5</li>
<li>GCC 4.8.5</li>
<li>GCC 5.5</li>
<li>GCC 7.4</li>
</ol>
<font color="#F08080">  <r>解答: GCC 4.8.5, GCC 5.5, GCC 6.5, GCC 7.4 </r></font>

<p><strong>165.安装华为鲲鹏代码迁移工具需要以下哪种运行环境?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Go</li>
<li>C</li>
<li>Python</li>
<li>Java</li>
</ol>
<font color="#F08080"><r>解答: Python运行环境</r></font>

<p><strong>166.以下哪项命令的描述是错误的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"docker ps -": 列出运行中和未运行的容器</li>
<li>"docker search centos": 从docker Hu中搜索相关的centos的镜像</li>
<li>"docker ps": 列出所有运行中的容器</li>
<li>"docker images ps": 列出镜像和容器</li>
</ol>
<font color="#F08080"> <r>解答: "docker images ps": 列出镜像</r></font>

<p><strong>167.纯Java语言开发的代码, 无依赖的so库文件不需要编译, 可以直接在JVM (Java虚拟机) 中运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: Java是编译型和解释型语言</r></font>

<p><strong>168.容器退出后会处于终止(exited)状态, 可以通过”docker ps -“查看相关容器</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: docker ps -: 查看容器运行中和未运行的容器
</r></font>

<p><strong>169.CPU是可以通过软件控制硬件的计算机部件, 所以不同CPU架构, 上层的二进制指令也不同</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: x86和arm二进制指令不同</r></font>


<p><strong>170.编译c语言时, 可以通过增加编译选项”-fsigned-char”, 指定鲲鹏处理器平台下的char为有符号类型</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 可以通过-fsigned-char指定鲲鹏处理器平台下的char为有符号类型</r></font>

<p><strong>171.在进行代码移植时, 如果Java应用程序包含基于C/C++语言开发的so库文件, 则需要编译移植后才能在鲲鹏平台上正常运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 解释型语言都得注意是否包含有编译型语言开发的依赖库文件</r></font>


<p><strong>172.docker Daemon是服务端守护进程, 负责接收客户端的指令 (创建, 运行, 分发容器) , 并处理这些请求</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 创建, 运行, 分发容器</r></font>

<p><strong>173.C/C++代码在编译时遇到如下错误提示: “gcc: error: unrecognized command line option ‘-m64’ “以下说法不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>在鲲鹏处理器上编译时, 可以将-m64修改为-mai=lp64重新编译</li>
<li>-m64是AMD的CPU编译64位程序的编译选项</li>
<li>编译选项错误</li>
<li>删除编译选项, 重新编译</li>
</ol>
<font color="#F08080"> <r>解答: 不是删除编译选项</r></font>

<p><strong>174.鲲鹏分析扫描工具Dependency Advisor支持在分析任务执行过程中升级如果升级失败, 升级脚本会自动回退工具到升级前的版本</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 升级脚本的确会自动回退工具到升级前的版本</r></font>


<p><strong>175.关于容器的删除操作, 以下哪项是正确的?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>可通过"docker rm <容器ID>"删除已停止的容器</容器ID></li>
<li>可通过"docker rmi <容器ID>"删除正在运行的容器</容器ID></li>
<li>可通过"docker rm <容器ID>"删除正在运行的容器</容器ID></li>
<li>可通过"docker rmi <容器ID>"删除已停止的容器</容器ID></li>
</ol>
<font color="#F08080"><r>解答: 可通过"docker rm <容器ID>"删除正在运行的容器</容器ID></r></font>

<p><strong>176.使用Sysench测试MySQL性能时, Sysench自带的测试套不包括以下哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>oltp_delete</li>
<li>oltp_random_points</li>
<li>oltp_update_index</li>
<li>oltp_point_select</li>
</ol>
<font color="#F08080">  <r>解答: 不包括oltp_random_points</r></font>

<p><strong>177.用户可以使用ping命令准确评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: ping命令评估出俩个主机或虚拟机之间tcp/udp协议栈的时延</r></font>

<p><strong>178.用户可以使用哪些工具评估Linux主机的网络通断情况, 带宽及pps的性能?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>netperf</li>
<li>ping</li>
<li>qperf</li>
<li>perf</li>
<li>netench</li>
<li>iperf</li>
</ol>
<font color="#F08080">  <r>解答: 以上全部工具评估</r></font>

<p><strong>179.perf工具可以用于测试CPU性能</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: perf工具的确用于测试CPU性能</r></font>

<p><strong>180.nginx作为We Server, 可以使用以下哪些工具进行性能测试?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Jmeter</li>
<li>sysench</li>
<li>wrk</li>
<li>ab</li>
</ol>
<font color="#F08080">  <r>解答: 全都可以测试</r></font>


<p><strong>181.在CentOS系统中, 以下哪个命令可以用于安装软件包?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>yum upgrade</li>
<li>apt-get install</li>
<li>yum install</li>
<li>apt-get upgrade</li>
</ol>
<font color="#F08080"><r>解答: apt-get 命令适用于 de 包管理式的 Linux 操作系统 (Deian, Uuntu等) </r></font>

<p><strong>182.以下关于镜像的描述, 不正确的是?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>查询镜像时, 支持通过标签过滤查询镜像</li>
<li>用户可以快速复制私有镜像, 不受region限制</li>
<li>通过导入外部镜像文件创建镜像时, 不支持qcow2格式</li>
<li>支持key-value类型的镜像标签</li>
</ol>
<font color="#F08080"><r>解答: 镜像服务目前支持多种格式, 镜像服务导入支持ZVHD, ZVHD2, QCOW2, VMDK, VHD, VHDX, RAW, QCOW, VDI, QED</r></font>


<p><strong>183.基于云服务器创建的整机镜像支持共享, 复制和导出</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080">  <r>解答: 肯定支持</r></font>


<p><strong>184.镜像服务可为租户提供以下哪些能力?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>个性化的镜像制作能力</li>
<li>灵活的镜像自助能力</li>
<li>镜像共享能力</li>
<li>完善的镜像管理能力</li>
</ol>
<font color="#F08080">  <r>解答: 镜像服务主要有以下功能:
提供常见的主流操作系统公共镜像
由现有运行的云服务器, 或由外部导入的方式来创建私有镜像
管理公共镜像, 例如:按操作系统类型/名称/ID搜索, 查看镜像ID, 系统盘大小等详情, 查看镜像支持的特性 (用户数据注入, 磁盘热插拔等) 
管理私有镜像, 例如:修改镜像属性, 共享镜像, 复制镜像等
通过镜像创建云服务器</r></font>

<p><strong>185.镜像有哪些类别?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>公共镜像</li>
<li>自由镜像</li>
<li>私有镜像</li>
<li>共享镜像</li>
</ol>
<font color="#F08080">  <r>解答: 镜像有 公共镜像, 私有镜像, 共享镜像, 市场镜像</r></font>

<p><strong>186.在华为云上, 通过以下哪种方式或工具可以访问外网?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>镜像</li>
<li>云硬盘</li>
<li>弹性公网IP</li>
<li>VPC</li>
</ol>
<font color="#F08080"><r>解答: 访问外网需要弹性公网IP</r></font>


<p><strong>187.华为鲲鹏性能优化工具支持哪些功能特性?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>函数级性能分析</li>
<li>系统级性能分析</li>
<li>源代码语法分析</li>
<li>进程/线程级性能分析</li>
</ol>
<font color="#F08080">  <r>解答: 不支持源代码语法分析, Tuning Kit功能特性:系统级性能分析, 进程/线程级性能分析, 函数级性能分析</r></font>

<p><strong>188.华为鲲鹏代码迁移工具Porting Advisor工具界面中的GCC版本需要与后台操作系统中的GCC版本保持一致</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: GCC版本需要与后台操作系统中的GCC版本保持一致</r></font>


<p><strong>189.使用华为鲲鹏性能优化工具Tuning Kit中的函数级性能分析, 可以分析Java代码的热点函数及热点指令</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 函数级性能分析
C/C++程序分析:支持分析C/C++程序代码, 找出性能瓶颈点, 给出对应的热点函数及其源码和汇编指令; 支持通过火焰图展示函数的调用关系, 给出优化路径
JAVA Mixed-Mode分析:支持分析JAVA程序代码, 找出性能瓶颈点, 给出对应的热点函数; 支持通过火焰图展示函数的调用关系, 给出优化路径</r></font>

<p><strong>190.以下选项中, 哪些是鲲鹏社区可以提供的服务?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>获得最新的鲲鹏咨询</li>
<li>获得海量软件的迁移指导</li>
<li>通过鲲鹏论坛与开发者交流学习</li>
<li>了解鲲鹏解决方案</li>
</ol>
<font color="#F08080">  <r>解答: 全都是提供的服务</r></font>

<p><strong>191.鲲鹏学院汇聚在线培训, 专业认证, 云端实验, 加速客户在鲲鹏领域技术水平的提升</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 是可以在线培训, 专业认证, 云端实验, 加速客户在鲲鹏领域技术水平的提升</r></font>


<p><strong>192.Redis-server相关知识点 执行redis-server</strong></p>
<ol style="list-style-type:upper-alpha">
<li>此处是为同学们提供redis-server命令说明</li>
<li>比如-p  -v等参数后面跟的值</li>
</ol>
<font color="#F08080"> <r>解答: <img src="https://img.xiaoqiqiao.com/pulic-courses/test_file/198/Redis-server.png" alt></r></font>

<p><strong>193.GAME模型相关知识点 性能测试GAME()模型(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>目标</li>
<li>分析</li>
<li>度量</li>
<li>执行</li>
<li>调整</li>
</ol>
<font color="#F08080">  <r>解答: <img src="https://img.xiaoqiqiao.com/pulic-courses/test_file/198/GAME模型.png" alt></r></font>


<p><strong>194.泰山服务器100与200的差异对比(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>处理器型号</li>
<li>DDR4内存个数</li>
<li>PCIek扩展插槽及版本</li>
<li>各自支持的硬盘类型</li>
<li>支持的板载网络带宽</li>
<li>是否支持全液冷技术</li>
</ol>
<font color="#F08080">   <r>解答: <img src="https://img.xiaoqiqiao.com/pulic-courses/test_file/198/泰山服务器对比.png" alt></r></font>


<p><strong>195.自研SSD加速盘的优势和型号汇总(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>三大优势:更快, 更智能, 更简单</li>
<li>高性能 NVMe PCIe3.0接口, SAS 3.0接口</li>
<li>ES3000P/S/C三种型号</li>
</ol>
<font color="#F08080">  <r>解答: <img src="https://img.xiaoqiqiao.com/pulic-courses/test_file/198/自研硬盘参数.png" alt></r></font>

<p><strong>196.关于华为鲲鹏系列裸金属服务的描述, 以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>可提供128众核算力</li>
<li>全新SDI 3.0技术带宽可支持40Gps</li>
<li>可搭载自研AI芯片Ascend 310/910</li>
<li>不支持存储共享卷</li>
</ol>
<font color="#F08080">  <r>解答: 支持存储共享卷</r></font>

<p><strong>197.以下哪种型号的TaiShan服务器最适合海量存储业务?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>2280</li>
<li>5280</li>
<li>2480</li>
<li>X6000</li>
</ol>
<font color="#F08080"> <r>解答: 5280服务器最适合海量存储业务, 存储密集型:5290 (4u72盘) , 5280 (4u40盘) </r></font>

<p><strong>198.openEuler是个单用户多任务的操作系统</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 多用户, 多任务, 支持多线程和多CPU的操作系统</r></font>

<p><strong>199.以下哪些是TaiShan服务器的优点?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>国产化,自主安全可控</li>
<li>CPU采用先进的7nm工艺</li>
<li>低功耗,绿色节能</li>
<li>多物理核心,并发性能高</li>
</ol>
<font color="#F08080">  <r>解答: 在"计算"上, 采用Kunpeng920处理器, 多核架构性能更高, 能耗更省
在"存储"上, 采用华为智能SSD控制器芯片Hi1812, 通过智能加速与磨损平衡算法, 提供性能, 寿命都是业界第一的SSD产品
在"网络"上, 采用华为智能网卡芯片Hi1822, 支持以太与FC融合, 协议加速与可编程, 降低网络协议处理对CPU资源的占用, 释放至少15%的CPU资源
在"管理"上, 采用内置AI管理引擎与算法的华为智能管理芯片Hi1710, 结合自研的IOS及FusionDirector管理软件, 有效降低OPEX (运营成本) 
在"AI"上, 采用基于达芬奇架构的华为AI芯片昇腾310和昇腾910, 分别是AI推理/训练芯片, 分别具备极致的能效与性能</r></font>

<p><strong>200.下列哪个是华为鲲鹏生态兼容的非国产?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>openEuler</li>
<li>Ubuntu</li>
<li>Kylin</li>
<li>Deepin</li>
</ol>
<font color="#F08080"> <r>解答: openEuler=欧盆欧拉, Kylin=麒麟, Deepin=深度均为国产的Linux操作系统</r></font>

<p><strong>201.下列哪些不是鲲鹏云容器的特点?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>鲲鹏CCI原生支持K8S接口</li>
<li>支持Windows镜像</li>
<li>鲲鹏CCI支持秒级计费</li>
<li>鲲鹏CCE支持跨云管理</li>
</ol>
<font color="#F08080"> <r>解答: 支持Windows镜像不是鲲鹏云容器的特点</r></font>


<p><strong>202.Kunpeng 920加速引擎不包括下列哪个?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>压缩加速引擎</li>
<li>SSL加速引擎</li>
<li>重删加速引擎</li>
<li>加密算法加速引擎</li>
</ol>


<p><strong>203.关于Dockerfile的描述,以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>Dockerfile一般包含四部分内容基础镜像信息, 维护者信息, 镜像操作指令和容器启动时执行指令</li>
<li>cd命令可直接运行在Dockerfile中</li>
<li>Dockerfile中, 第一条指令必须为 FROM指令</li>
<li>完成Dockerfile编写后, 可以通过docker uild命令来创建镜像</li>
</ol>
<font color="#F08080">  <r>解答: WORKDIR: 切换目录用, 可以多次切换(相当于cd命令)</r></font>


<p><strong>204.鲲鹏分析扫描工具Dependency Advisor支持以下哪种功能特性?(多选)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>向用户提供软件移植报告, 提供移植工作量评估</li>
<li>检查用户Java类软件包(JAR, WAR)中包含的so依赖库和二进制文件, 并评估上述文件的可移植性</li>
<li>检查用户C/C++软件构建工程文件, 并评估该文件的可移植性</li>
<li>检查用户C/C++软件源码, 并评估软件源文件的可移植性</li>
</ol>
<font color="#F08080">  <r>解答: 全部都有</r></font>

<p><strong>205.CentOS执行如下命令:docker run -p 6379:6379 -v $PWD/data:/data -d t_arm4v8/centos _redis:5.05 redis-server –appendonly yes,, 关于此命令的措述以下哪些是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>"$PWD/data:/data":将主机中当前目录下的data挂载到容器的/data</li>
<li>"6379:6379":将主机的6379端口映射到容器的6379端口</li>
<li>该命令功能是启动容器, 并在容器启动时候执行容器内的redis-server服务</li>
<li>" appendonly yes"打开持久化配置</li>
</ol>
<font color="#F08080">  <r>解答: 全部正确</r></font>

<p><strong>206.用户在使用鲲鹏分析扫描工具Dependency Advisor分析软件时, 可以分析以下哪些格式的软件包?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TAR</li>
<li>ZIP</li>
<li>JAR</li>
<li>DE</li>
<li>GZIP</li>
<li>RPM</li>
</ol>
<font color="#F08080">   <r>解答: TAR, ZIP, JAR, DE, GZI, RPM</r></font>


<p><strong>207.以下哪些不属于编译型语言?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>lua</li>
<li>Php</li>
<li>Go</li>
<li>perl</li>
<li>ruy</li>
</ol>
<font color="#F08080">  <r>解答: go属于编译型语言</r></font>


<p><strong>208.用户可以从docker Hu获取已有镜像并进行更新, 也可以利用本地已有的镜像创建一个新的镜像</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 确实用户可以从docker Hu获取已有镜像并进行更新, 也可以利用本地已有的镜像创建一个新的镜像</r></font>

<p><strong>209.可以通过以下哪些方式创建镜像?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通过命令来创建容器镜像</li>
<li>通过wget方式创建镜像</li>
<li>利用Dockerfile来创建镜像</li>
<li>通过yum install方式创建镜像</li>
</ol>
<font color="#F08080"><r>解答: docker pull方式或者docker uild, Dockerfile方式获取或者构建的镜像</r></font>

<p><strong>210.用户在安装鲲鹏分析扫描工具Dependency Advisor前需要哪些准备工作?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>确认服务器和操作系统满足要求</li>
<li>配置安装环境</li>
<li>安装包完整性校验</li>
<li>已安装远程SSH登录工具</li>
</ol>
<font color="#F08080">  <r>解答: 全都要做</r></font>

<p><strong>211.Python语言开发的代码不需要编译, 可以直接在PVM (Python虚拟机) 中运行</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 解释型语言的特性</r></font>

<p><strong>212.使用gcc编译时,编译选项-march的作用是什么?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>指定流水线</li>
<li>指定指令集类型</li>
<li>提升兼容性</li>
<li>指定cpu型号</li>
</ol>
<font color="#F08080"> <r>解答: -march是指定cpu的指令集, roadwell是x86的一款cpu, 实用鲲鹏处理器需要指定为armv8-</r></font>

<p><strong>213.下列选项中,哪些是常见的性能测试方法?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>并发测试</li>
<li>可恢复测试</li>
<li>稳定性测试</li>
<li>压力测试</li>
<li>负载测试</li>
<li>压力测试</li>
</ol>
<font color="#F08080">   <r>解答: 全部可用</r></font>

<p><strong>214.当鲲鹏管理员在使用鲲鹏性能优化工具Tuning Kit新建Java Mixed-lode分析任务时, 如果CPU采样周期设置为高精度, CPU采集周期默认为多少?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>1000毫秒</li>
<li>300微秒</li>
<li>710微秒</li>
<li>100毫秒</li>
</ol>
<font color="#F08080"> <r>解答: CPU采集周期默认为1000毫秒</r></font>


<p><strong>215.下列选项中, 属于镜像服务的典型应用场景有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>传统业务上云</li>
<li>批量复制弹性云服务器</li>
<li>批量复制弹性云服务器</li>
<li>实时同步数据</li>
</ol>
<font color="#F08080">  <r>解答: 镜像服务无法实时同步数据, 主要用于备份比如:服务器运行环境备份 (对一台云服务器实例制作镜像以备份环境当该实例的软件环境出现故障而无法正常运行时, 可以使用镜像进行恢复) </r></font>

<p><strong>216.华为公有云中, 以下属于私有镜像的有哪些?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>数据镜像</li>
<li>系统镜像</li>
<li>整机镜像</li>
<li>共享镜像</li>
</ol>
<font color="#F08080">  <r>解答: 华为云中镜像分类为公共镜像, 私有镜像, 共享镜像, 市场镜像</r></font>

<p><strong>217.共享带宽可以实现多个弹性公网IP共用一条带宽</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: 共享带宽可以让多个弹性公网IP共用一条带宽</r></font>


<p><strong>218.ssh协议默认端口号是什么?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>513</li>
<li>9600</li>
<li>23</li>
<li>22</li>
</ol>
<font color="#F08080"> <r>解答: ssh协议默认端口号是22</r></font>


<p><strong>219.下列Linux命令中,哪个命令可以用来解压文件</strong></p>
<ol style="list-style-type:upper-alpha">
<li>ps</li>
<li>Make</li>
<li>Wget</li>
<li>tar</li>
</ol>
<font color="#F08080"> <r>解答: tar是Linux解压命令</r></font>


<p><strong>220.使用以下Dockerfile构建两个镜像, 分别为image 1和image 2, 请问这两个镜像占用的物理机磁盘空间大小是多少?(假设镜像uuntu:16.04的大小为200M, def.tar的大小为20M, compressed. tar文件为100M) #构建imagel FROM uuntu: 16.04 RUN wget <a href="http://ac.com/def.tar">http://ac.com/def.tar</a> #构建image2 FROM uuntu: 16.04 ADD compressed. tar /</strong></p>
<ol style="list-style-type:upper-alpha">
<li>520M</li>
<li>220M</li>
<li>320M</li>
<li>300M</li>
</ol>
<font color="#F08080"><r>解答: 镜像共享因为两个Dockerfile均基于uuntu:14.04, 因此image1和image2这两个镜像均复用了镜像uuntu:14.04因为镜像复用的存在, 实际占用的磁盘空间大小是:200＋20+100=320M</r></font>


<p><strong>221.以下选项中, 哪个组件的作用是资源调度?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>HDFS</li>
<li>Hive</li>
<li>Spark</li>
<li>Yarn</li>
</ol>
<font color="#F08080"> <r>解答: Yarn是资源调度</r></font>

<p><strong>222.凌云伙伴计划相关知识点(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>公有云</li>
<li>私有云</li>
<li>桌面云</li>
<li>专有云</li>
</ol>
<font color="#F08080">  <r>解答: <img src="https://img.xiaoqiqiao.com/private-course/test_file/198/image1606463855872.png" alt></r></font>


<p><strong>223.Hive组件相关知识 Hive组件可以将SQL转变成Mapreduce命令吗?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>TRUE</li>
<li>FALSE</li>
</ol>
<font color="#F08080"> <r>解答: <img src="https://img.xiaoqiqiao.com/private-course/test_file/198/image.png" alt></r></font>


<p><strong>224.以下哪项是华为鲲鹏代码迁移工具不支持的功能?</strong></p>
<ol style="list-style-type:upper-alpha">
<li>检查用户软件</li>
<li>C/C++源码和 x86 汇编源码并指导用户如何移植源文件</li>
<li>检查用户软件 C/C + +软件构建工程文件,并指导用户如何移植该文件</li>
<li>检查用户软件 C/C+ +软件,构建工程文件使用的链接库并提供可移植性信息</li>
<li>检查用户软件 RPM 包中文件, 并指导用户如何进行移植</li>
</ol>
<font color="#F08080">正确答案: <r>解答: 代码迁移工具支持的输入:
C/C++源代码文件
X86汇编源代码文件
Makefile文件</r></font>

<p><strong>225.整机镜像可以通过一下哪些方式创建?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>通过云服务器制作整机镜像</li>
<li>云服务器备份</li>
<li>云硬盘</li>
<li>云备份</li>
</ol>
<font color="#F08080">  <r>解答: 注意问的是整机镜像</r></font>

<p><strong>226将商用软件迁移至鲲鹏处理器, 以下哪些说法是正确的?(多选题)</strong></p>
<ol style="list-style-type:upper-alpha">
<li>获取在鲲鹏处理器认证后的版本</li>
<li>使用 GaussD 替换与鲲鹏处理器不兼容的数据库软件</li>
<li>联系厂商获取源码重新编译</li>
<li>寻找功能相近的幵源软件替换</li>
<li>使用与鲲鹏处理器兼容的版本替代</li>
</ol>
<font color="#F08080">  <r>解答: 全部可以</r></font>

<br>
]]></content>
      <categories>
        <category>鲲鹏云</category>
      </categories>
  </entry>
</search>
